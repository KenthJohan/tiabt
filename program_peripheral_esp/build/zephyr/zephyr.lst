
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	200029a0 	.word	0x200029a0
 8000004:	08004461 	.word	0x08004461
 8000008:	08012e0d 	.word	0x08012e0d
 800000c:	08004435 	.word	0x08004435
 8000010:	08004435 	.word	0x08004435
 8000014:	08004435 	.word	0x08004435
 8000018:	08004435 	.word	0x08004435
	...
 800002c:	08003d1d 	.word	0x08003d1d
 8000030:	08004435 	.word	0x08004435
 8000034:	00000000 	.word	0x00000000
 8000038:	08003cc9 	.word	0x08003cc9
 800003c:	0800db81 	.word	0x0800db81

08000040 <_irq_vector_table>:
 8000040:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000050:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000060:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000070:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000080:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000090:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000a0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000b0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000c0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000d0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000e0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 80000f0:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000100:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000110:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000120:	08003dd5 08003dd5 08003dd5 08003dd5     .=...=...=...=..
 8000130:	08003dd5 08003dd5 08003dd5              .=...=...=..

Disassembly of section text:

08000140 <__aeabi_fmul>:
 8000140:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000144:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000148:	bf1e      	ittt	ne
 800014a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800014e:	ea92 0f0c 	teqne	r2, ip
 8000152:	ea93 0f0c 	teqne	r3, ip
 8000156:	d06f      	beq.n	8000238 <__aeabi_fmul+0xf8>
 8000158:	441a      	add	r2, r3
 800015a:	ea80 0c01 	eor.w	ip, r0, r1
 800015e:	0240      	lsls	r0, r0, #9
 8000160:	bf18      	it	ne
 8000162:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000166:	d01e      	beq.n	80001a6 <__aeabi_fmul+0x66>
 8000168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800016c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000170:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000174:	fba0 3101 	umull	r3, r1, r0, r1
 8000178:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800017c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000180:	bf3e      	ittt	cc
 8000182:	0049      	lslcc	r1, r1, #1
 8000184:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000188:	005b      	lslcc	r3, r3, #1
 800018a:	ea40 0001 	orr.w	r0, r0, r1
 800018e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000192:	2afd      	cmp	r2, #253	; 0xfd
 8000194:	d81d      	bhi.n	80001d2 <__aeabi_fmul+0x92>
 8000196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800019a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800019e:	bf08      	it	eq
 80001a0:	f020 0001 	biceq.w	r0, r0, #1
 80001a4:	4770      	bx	lr
 80001a6:	f090 0f00 	teq	r0, #0
 80001aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ae:	bf08      	it	eq
 80001b0:	0249      	lsleq	r1, r1, #9
 80001b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ba:	3a7f      	subs	r2, #127	; 0x7f
 80001bc:	bfc2      	ittt	gt
 80001be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001c6:	4770      	bxgt	lr
 80001c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001cc:	f04f 0300 	mov.w	r3, #0
 80001d0:	3a01      	subs	r2, #1
 80001d2:	dc5d      	bgt.n	8000290 <__aeabi_fmul+0x150>
 80001d4:	f112 0f19 	cmn.w	r2, #25
 80001d8:	bfdc      	itt	le
 80001da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001de:	4770      	bxle	lr
 80001e0:	f1c2 0200 	rsb	r2, r2, #0
 80001e4:	0041      	lsls	r1, r0, #1
 80001e6:	fa21 f102 	lsr.w	r1, r1, r2
 80001ea:	f1c2 0220 	rsb	r2, r2, #32
 80001ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80001f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80001f6:	f140 0000 	adc.w	r0, r0, #0
 80001fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80001fe:	bf08      	it	eq
 8000200:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000204:	4770      	bx	lr
 8000206:	f092 0f00 	teq	r2, #0
 800020a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800020e:	bf02      	ittt	eq
 8000210:	0040      	lsleq	r0, r0, #1
 8000212:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000216:	3a01      	subeq	r2, #1
 8000218:	d0f9      	beq.n	800020e <__aeabi_fmul+0xce>
 800021a:	ea40 000c 	orr.w	r0, r0, ip
 800021e:	f093 0f00 	teq	r3, #0
 8000222:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000226:	bf02      	ittt	eq
 8000228:	0049      	lsleq	r1, r1, #1
 800022a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800022e:	3b01      	subeq	r3, #1
 8000230:	d0f9      	beq.n	8000226 <__aeabi_fmul+0xe6>
 8000232:	ea41 010c 	orr.w	r1, r1, ip
 8000236:	e78f      	b.n	8000158 <__aeabi_fmul+0x18>
 8000238:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800023c:	ea92 0f0c 	teq	r2, ip
 8000240:	bf18      	it	ne
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d00a      	beq.n	800025e <__aeabi_fmul+0x11e>
 8000248:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800024c:	bf18      	it	ne
 800024e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000252:	d1d8      	bne.n	8000206 <__aeabi_fmul+0xc6>
 8000254:	ea80 0001 	eor.w	r0, r0, r1
 8000258:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800025c:	4770      	bx	lr
 800025e:	f090 0f00 	teq	r0, #0
 8000262:	bf17      	itett	ne
 8000264:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000268:	4608      	moveq	r0, r1
 800026a:	f091 0f00 	teqne	r1, #0
 800026e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000272:	d014      	beq.n	800029e <__aeabi_fmul+0x15e>
 8000274:	ea92 0f0c 	teq	r2, ip
 8000278:	d101      	bne.n	800027e <__aeabi_fmul+0x13e>
 800027a:	0242      	lsls	r2, r0, #9
 800027c:	d10f      	bne.n	800029e <__aeabi_fmul+0x15e>
 800027e:	ea93 0f0c 	teq	r3, ip
 8000282:	d103      	bne.n	800028c <__aeabi_fmul+0x14c>
 8000284:	024b      	lsls	r3, r1, #9
 8000286:	bf18      	it	ne
 8000288:	4608      	movne	r0, r1
 800028a:	d108      	bne.n	800029e <__aeabi_fmul+0x15e>
 800028c:	ea80 0001 	eor.w	r0, r0, r1
 8000290:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000294:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000298:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bx	lr
 800029e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_frsub>:
 80002a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	e002      	b.n	80002b4 <__addsf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_fsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002b4 <__addsf3>:
 80002b4:	0042      	lsls	r2, r0, #1
 80002b6:	bf1f      	itttt	ne
 80002b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002bc:	ea92 0f03 	teqne	r2, r3
 80002c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002c8:	d06a      	beq.n	80003a0 <__addsf3+0xec>
 80002ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002d2:	bfc1      	itttt	gt
 80002d4:	18d2      	addgt	r2, r2, r3
 80002d6:	4041      	eorgt	r1, r0
 80002d8:	4048      	eorgt	r0, r1
 80002da:	4041      	eorgt	r1, r0
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	2b19      	cmp	r3, #25
 80002e2:	bf88      	it	hi
 80002e4:	4770      	bxhi	lr
 80002e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002f2:	bf18      	it	ne
 80002f4:	4240      	negne	r0, r0
 80002f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000302:	bf18      	it	ne
 8000304:	4249      	negne	r1, r1
 8000306:	ea92 0f03 	teq	r2, r3
 800030a:	d03f      	beq.n	800038c <__addsf3+0xd8>
 800030c:	f1a2 0201 	sub.w	r2, r2, #1
 8000310:	fa41 fc03 	asr.w	ip, r1, r3
 8000314:	eb10 000c 	adds.w	r0, r0, ip
 8000318:	f1c3 0320 	rsb	r3, r3, #32
 800031c:	fa01 f103 	lsl.w	r1, r1, r3
 8000320:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000324:	d502      	bpl.n	800032c <__addsf3+0x78>
 8000326:	4249      	negs	r1, r1
 8000328:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800032c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000330:	d313      	bcc.n	800035a <__addsf3+0xa6>
 8000332:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000336:	d306      	bcc.n	8000346 <__addsf3+0x92>
 8000338:	0840      	lsrs	r0, r0, #1
 800033a:	ea4f 0131 	mov.w	r1, r1, rrx
 800033e:	f102 0201 	add.w	r2, r2, #1
 8000342:	2afe      	cmp	r2, #254	; 0xfe
 8000344:	d251      	bcs.n	80003ea <__addsf3+0x136>
 8000346:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800034a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800034e:	bf08      	it	eq
 8000350:	f020 0001 	biceq.w	r0, r0, #1
 8000354:	ea40 0003 	orr.w	r0, r0, r3
 8000358:	4770      	bx	lr
 800035a:	0049      	lsls	r1, r1, #1
 800035c:	eb40 0000 	adc.w	r0, r0, r0
 8000360:	3a01      	subs	r2, #1
 8000362:	bf28      	it	cs
 8000364:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000368:	d2ed      	bcs.n	8000346 <__addsf3+0x92>
 800036a:	fab0 fc80 	clz	ip, r0
 800036e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000372:	ebb2 020c 	subs.w	r2, r2, ip
 8000376:	fa00 f00c 	lsl.w	r0, r0, ip
 800037a:	bfaa      	itet	ge
 800037c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000380:	4252      	neglt	r2, r2
 8000382:	4318      	orrge	r0, r3
 8000384:	bfbc      	itt	lt
 8000386:	40d0      	lsrlt	r0, r2
 8000388:	4318      	orrlt	r0, r3
 800038a:	4770      	bx	lr
 800038c:	f092 0f00 	teq	r2, #0
 8000390:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000394:	bf06      	itte	eq
 8000396:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800039a:	3201      	addeq	r2, #1
 800039c:	3b01      	subne	r3, #1
 800039e:	e7b5      	b.n	800030c <__addsf3+0x58>
 80003a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003a8:	bf18      	it	ne
 80003aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ae:	d021      	beq.n	80003f4 <__addsf3+0x140>
 80003b0:	ea92 0f03 	teq	r2, r3
 80003b4:	d004      	beq.n	80003c0 <__addsf3+0x10c>
 80003b6:	f092 0f00 	teq	r2, #0
 80003ba:	bf08      	it	eq
 80003bc:	4608      	moveq	r0, r1
 80003be:	4770      	bx	lr
 80003c0:	ea90 0f01 	teq	r0, r1
 80003c4:	bf1c      	itt	ne
 80003c6:	2000      	movne	r0, #0
 80003c8:	4770      	bxne	lr
 80003ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003ce:	d104      	bne.n	80003da <__addsf3+0x126>
 80003d0:	0040      	lsls	r0, r0, #1
 80003d2:	bf28      	it	cs
 80003d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003d8:	4770      	bx	lr
 80003da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003de:	bf3c      	itt	cc
 80003e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003e4:	4770      	bxcc	lr
 80003e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f2:	4770      	bx	lr
 80003f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003f8:	bf16      	itet	ne
 80003fa:	4608      	movne	r0, r1
 80003fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000400:	4601      	movne	r1, r0
 8000402:	0242      	lsls	r2, r0, #9
 8000404:	bf06      	itte	eq
 8000406:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800040a:	ea90 0f01 	teqeq	r0, r1
 800040e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000412:	4770      	bx	lr

08000414 <__aeabi_ui2f>:
 8000414:	f04f 0300 	mov.w	r3, #0
 8000418:	e004      	b.n	8000424 <__aeabi_i2f+0x8>
 800041a:	bf00      	nop

0800041c <__aeabi_i2f>:
 800041c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	ea5f 0c00 	movs.w	ip, r0
 8000428:	bf08      	it	eq
 800042a:	4770      	bxeq	lr
 800042c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000430:	4601      	mov	r1, r0
 8000432:	f04f 0000 	mov.w	r0, #0
 8000436:	e01c      	b.n	8000472 <__aeabi_l2f+0x2a>

08000438 <__aeabi_ul2f>:
 8000438:	ea50 0201 	orrs.w	r2, r0, r1
 800043c:	bf08      	it	eq
 800043e:	4770      	bxeq	lr
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	e00a      	b.n	800045c <__aeabi_l2f+0x14>
 8000446:	bf00      	nop

08000448 <__aeabi_l2f>:
 8000448:	ea50 0201 	orrs.w	r2, r0, r1
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000454:	d502      	bpl.n	800045c <__aeabi_l2f+0x14>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	ea5f 0c01 	movs.w	ip, r1
 8000460:	bf02      	ittt	eq
 8000462:	4684      	moveq	ip, r0
 8000464:	4601      	moveq	r1, r0
 8000466:	2000      	moveq	r0, #0
 8000468:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800046c:	bf08      	it	eq
 800046e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000472:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000476:	fabc f28c 	clz	r2, ip
 800047a:	3a08      	subs	r2, #8
 800047c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000480:	db10      	blt.n	80004a4 <__aeabi_l2f+0x5c>
 8000482:	fa01 fc02 	lsl.w	ip, r1, r2
 8000486:	4463      	add	r3, ip
 8000488:	fa00 fc02 	lsl.w	ip, r0, r2
 800048c:	f1c2 0220 	rsb	r2, r2, #32
 8000490:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000494:	fa20 f202 	lsr.w	r2, r0, r2
 8000498:	eb43 0002 	adc.w	r0, r3, r2
 800049c:	bf08      	it	eq
 800049e:	f020 0001 	biceq.w	r0, r0, #1
 80004a2:	4770      	bx	lr
 80004a4:	f102 0220 	add.w	r2, r2, #32
 80004a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ac:	f1c2 0220 	rsb	r2, r2, #32
 80004b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004b4:	fa21 f202 	lsr.w	r2, r1, r2
 80004b8:	eb43 0002 	adc.w	r0, r3, r2
 80004bc:	bf08      	it	eq
 80004be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004c2:	4770      	bx	lr

080004c4 <__aeabi_f2iz>:
 80004c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004cc:	d30f      	bcc.n	80004ee <__aeabi_f2iz+0x2a>
 80004ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004d6:	d90d      	bls.n	80004f4 <__aeabi_f2iz+0x30>
 80004d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004e4:	fa23 f002 	lsr.w	r0, r3, r2
 80004e8:	bf18      	it	ne
 80004ea:	4240      	negne	r0, r0
 80004ec:	4770      	bx	lr
 80004ee:	f04f 0000 	mov.w	r0, #0
 80004f2:	4770      	bx	lr
 80004f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004f8:	d101      	bne.n	80004fe <__aeabi_f2iz+0x3a>
 80004fa:	0242      	lsls	r2, r0, #9
 80004fc:	d105      	bne.n	800050a <__aeabi_f2iz+0x46>
 80004fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000502:	bf08      	it	eq
 8000504:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b96c 	b.w	8000800 <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9e08      	ldr	r6, [sp, #32]
 8000546:	460d      	mov	r5, r1
 8000548:	4604      	mov	r4, r0
 800054a:	468e      	mov	lr, r1
 800054c:	2b00      	cmp	r3, #0
 800054e:	f040 8082 	bne.w	8000656 <__udivmoddi4+0x116>
 8000552:	428a      	cmp	r2, r1
 8000554:	4617      	mov	r7, r2
 8000556:	d946      	bls.n	80005e6 <__udivmoddi4+0xa6>
 8000558:	fab2 f282 	clz	r2, r2
 800055c:	b14a      	cbz	r2, 8000572 <__udivmoddi4+0x32>
 800055e:	f1c2 0120 	rsb	r1, r2, #32
 8000562:	fa05 f302 	lsl.w	r3, r5, r2
 8000566:	fa20 f101 	lsr.w	r1, r0, r1
 800056a:	4097      	lsls	r7, r2
 800056c:	ea41 0e03 	orr.w	lr, r1, r3
 8000570:	4094      	lsls	r4, r2
 8000572:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000576:	0c23      	lsrs	r3, r4, #16
 8000578:	fbbe fcf8 	udiv	ip, lr, r8
 800057c:	b2b9      	uxth	r1, r7
 800057e:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000582:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000586:	fb0c f001 	mul.w	r0, ip, r1
 800058a:	4298      	cmp	r0, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x64>
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000594:	f080 8116 	bcs.w	80007c4 <__udivmoddi4+0x284>
 8000598:	4298      	cmp	r0, r3
 800059a:	f240 8113 	bls.w	80007c4 <__udivmoddi4+0x284>
 800059e:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a2:	443b      	add	r3, r7
 80005a4:	1a1b      	subs	r3, r3, r0
 80005a6:	b2a4      	uxth	r4, r4
 80005a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005ac:	fb08 3310 	mls	r3, r8, r0, r3
 80005b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005b4:	fb00 f101 	mul.w	r1, r0, r1
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	d909      	bls.n	80005d0 <__udivmoddi4+0x90>
 80005bc:	193c      	adds	r4, r7, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	f080 8101 	bcs.w	80007c8 <__udivmoddi4+0x288>
 80005c6:	42a1      	cmp	r1, r4
 80005c8:	f240 80fe 	bls.w	80007c8 <__udivmoddi4+0x288>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	1a64      	subs	r4, r4, r1
 80005d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d6:	2100      	movs	r1, #0
 80005d8:	b11e      	cbz	r6, 80005e2 <__udivmoddi4+0xa2>
 80005da:	40d4      	lsrs	r4, r2
 80005dc:	2300      	movs	r3, #0
 80005de:	e9c6 4300 	strd	r4, r3, [r6]
 80005e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e6:	b902      	cbnz	r2, 80005ea <__udivmoddi4+0xaa>
 80005e8:	deff      	udf	#255	; 0xff
 80005ea:	fab2 f282 	clz	r2, r2
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d14f      	bne.n	8000692 <__udivmoddi4+0x152>
 80005f2:	1bcb      	subs	r3, r1, r7
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	fa1f f887 	uxth.w	r8, r7
 80005fc:	2101      	movs	r1, #1
 80005fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000602:	0c25      	lsrs	r5, r4, #16
 8000604:	fb0e 331c 	mls	r3, lr, ip, r3
 8000608:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800060c:	fb08 f30c 	mul.w	r3, r8, ip
 8000610:	42ab      	cmp	r3, r5
 8000612:	d907      	bls.n	8000624 <__udivmoddi4+0xe4>
 8000614:	197d      	adds	r5, r7, r5
 8000616:	f10c 30ff 	add.w	r0, ip, #4294967295
 800061a:	d202      	bcs.n	8000622 <__udivmoddi4+0xe2>
 800061c:	42ab      	cmp	r3, r5
 800061e:	f200 80e7 	bhi.w	80007f0 <__udivmoddi4+0x2b0>
 8000622:	4684      	mov	ip, r0
 8000624:	1aed      	subs	r5, r5, r3
 8000626:	b2a3      	uxth	r3, r4
 8000628:	fbb5 f0fe 	udiv	r0, r5, lr
 800062c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000630:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000634:	fb08 f800 	mul.w	r8, r8, r0
 8000638:	45a0      	cmp	r8, r4
 800063a:	d907      	bls.n	800064c <__udivmoddi4+0x10c>
 800063c:	193c      	adds	r4, r7, r4
 800063e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000642:	d202      	bcs.n	800064a <__udivmoddi4+0x10a>
 8000644:	45a0      	cmp	r8, r4
 8000646:	f200 80d7 	bhi.w	80007f8 <__udivmoddi4+0x2b8>
 800064a:	4618      	mov	r0, r3
 800064c:	eba4 0408 	sub.w	r4, r4, r8
 8000650:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000654:	e7c0      	b.n	80005d8 <__udivmoddi4+0x98>
 8000656:	428b      	cmp	r3, r1
 8000658:	d908      	bls.n	800066c <__udivmoddi4+0x12c>
 800065a:	2e00      	cmp	r6, #0
 800065c:	f000 80af 	beq.w	80007be <__udivmoddi4+0x27e>
 8000660:	2100      	movs	r1, #0
 8000662:	e9c6 0500 	strd	r0, r5, [r6]
 8000666:	4608      	mov	r0, r1
 8000668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066c:	fab3 f183 	clz	r1, r3
 8000670:	2900      	cmp	r1, #0
 8000672:	d14b      	bne.n	800070c <__udivmoddi4+0x1cc>
 8000674:	42ab      	cmp	r3, r5
 8000676:	d302      	bcc.n	800067e <__udivmoddi4+0x13e>
 8000678:	4282      	cmp	r2, r0
 800067a:	f200 80b7 	bhi.w	80007ec <__udivmoddi4+0x2ac>
 800067e:	1a84      	subs	r4, r0, r2
 8000680:	eb65 0303 	sbc.w	r3, r5, r3
 8000684:	2001      	movs	r0, #1
 8000686:	469e      	mov	lr, r3
 8000688:	2e00      	cmp	r6, #0
 800068a:	d0aa      	beq.n	80005e2 <__udivmoddi4+0xa2>
 800068c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000690:	e7a7      	b.n	80005e2 <__udivmoddi4+0xa2>
 8000692:	f1c2 0c20 	rsb	ip, r2, #32
 8000696:	fa01 f302 	lsl.w	r3, r1, r2
 800069a:	4097      	lsls	r7, r2
 800069c:	fa20 f00c 	lsr.w	r0, r0, ip
 80006a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006a4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80006a8:	4318      	orrs	r0, r3
 80006aa:	fbbc f1fe 	udiv	r1, ip, lr
 80006ae:	0c05      	lsrs	r5, r0, #16
 80006b0:	fb0e cc11 	mls	ip, lr, r1, ip
 80006b4:	fa1f f887 	uxth.w	r8, r7
 80006b8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006bc:	fb01 f308 	mul.w	r3, r1, r8
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	fa04 f402 	lsl.w	r4, r4, r2
 80006c6:	d909      	bls.n	80006dc <__udivmoddi4+0x19c>
 80006c8:	197d      	adds	r5, r7, r5
 80006ca:	f101 3cff 	add.w	ip, r1, #4294967295
 80006ce:	f080 808b 	bcs.w	80007e8 <__udivmoddi4+0x2a8>
 80006d2:	42ab      	cmp	r3, r5
 80006d4:	f240 8088 	bls.w	80007e8 <__udivmoddi4+0x2a8>
 80006d8:	3902      	subs	r1, #2
 80006da:	443d      	add	r5, r7
 80006dc:	1aeb      	subs	r3, r5, r3
 80006de:	b285      	uxth	r5, r0
 80006e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80006e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006ec:	fb00 f308 	mul.w	r3, r0, r8
 80006f0:	42ab      	cmp	r3, r5
 80006f2:	d907      	bls.n	8000704 <__udivmoddi4+0x1c4>
 80006f4:	197d      	adds	r5, r7, r5
 80006f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80006fa:	d271      	bcs.n	80007e0 <__udivmoddi4+0x2a0>
 80006fc:	42ab      	cmp	r3, r5
 80006fe:	d96f      	bls.n	80007e0 <__udivmoddi4+0x2a0>
 8000700:	3802      	subs	r0, #2
 8000702:	443d      	add	r5, r7
 8000704:	1aeb      	subs	r3, r5, r3
 8000706:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800070a:	e778      	b.n	80005fe <__udivmoddi4+0xbe>
 800070c:	f1c1 0c20 	rsb	ip, r1, #32
 8000710:	408b      	lsls	r3, r1
 8000712:	fa22 f70c 	lsr.w	r7, r2, ip
 8000716:	431f      	orrs	r7, r3
 8000718:	fa20 f40c 	lsr.w	r4, r0, ip
 800071c:	fa05 f301 	lsl.w	r3, r5, r1
 8000720:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000724:	fa25 f50c 	lsr.w	r5, r5, ip
 8000728:	431c      	orrs	r4, r3
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	fb0e 5519 	mls	r5, lr, r9, r5
 8000738:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800073c:	fb09 fa08 	mul.w	sl, r9, r8
 8000740:	45aa      	cmp	sl, r5
 8000742:	fa02 f201 	lsl.w	r2, r2, r1
 8000746:	fa00 f301 	lsl.w	r3, r0, r1
 800074a:	d908      	bls.n	800075e <__udivmoddi4+0x21e>
 800074c:	197d      	adds	r5, r7, r5
 800074e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000752:	d247      	bcs.n	80007e4 <__udivmoddi4+0x2a4>
 8000754:	45aa      	cmp	sl, r5
 8000756:	d945      	bls.n	80007e4 <__udivmoddi4+0x2a4>
 8000758:	f1a9 0902 	sub.w	r9, r9, #2
 800075c:	443d      	add	r5, r7
 800075e:	eba5 050a 	sub.w	r5, r5, sl
 8000762:	b2a4      	uxth	r4, r4
 8000764:	fbb5 f0fe 	udiv	r0, r5, lr
 8000768:	fb0e 5510 	mls	r5, lr, r0, r5
 800076c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000770:	fb00 f808 	mul.w	r8, r0, r8
 8000774:	45a0      	cmp	r8, r4
 8000776:	d907      	bls.n	8000788 <__udivmoddi4+0x248>
 8000778:	193c      	adds	r4, r7, r4
 800077a:	f100 35ff 	add.w	r5, r0, #4294967295
 800077e:	d22d      	bcs.n	80007dc <__udivmoddi4+0x29c>
 8000780:	45a0      	cmp	r8, r4
 8000782:	d92b      	bls.n	80007dc <__udivmoddi4+0x29c>
 8000784:	3802      	subs	r0, #2
 8000786:	443c      	add	r4, r7
 8000788:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800078c:	eba4 0408 	sub.w	r4, r4, r8
 8000790:	fba0 8902 	umull	r8, r9, r0, r2
 8000794:	454c      	cmp	r4, r9
 8000796:	46c6      	mov	lr, r8
 8000798:	464d      	mov	r5, r9
 800079a:	d319      	bcc.n	80007d0 <__udivmoddi4+0x290>
 800079c:	d016      	beq.n	80007cc <__udivmoddi4+0x28c>
 800079e:	b15e      	cbz	r6, 80007b8 <__udivmoddi4+0x278>
 80007a0:	ebb3 020e 	subs.w	r2, r3, lr
 80007a4:	eb64 0405 	sbc.w	r4, r4, r5
 80007a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007ac:	40ca      	lsrs	r2, r1
 80007ae:	ea4c 0202 	orr.w	r2, ip, r2
 80007b2:	40cc      	lsrs	r4, r1
 80007b4:	e9c6 2400 	strd	r2, r4, [r6]
 80007b8:	2100      	movs	r1, #0
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007be:	4631      	mov	r1, r6
 80007c0:	4630      	mov	r0, r6
 80007c2:	e70e      	b.n	80005e2 <__udivmoddi4+0xa2>
 80007c4:	46ac      	mov	ip, r5
 80007c6:	e6ed      	b.n	80005a4 <__udivmoddi4+0x64>
 80007c8:	4618      	mov	r0, r3
 80007ca:	e701      	b.n	80005d0 <__udivmoddi4+0x90>
 80007cc:	4543      	cmp	r3, r8
 80007ce:	d2e6      	bcs.n	800079e <__udivmoddi4+0x25e>
 80007d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80007d4:	eb69 0507 	sbc.w	r5, r9, r7
 80007d8:	3801      	subs	r0, #1
 80007da:	e7e0      	b.n	800079e <__udivmoddi4+0x25e>
 80007dc:	4628      	mov	r0, r5
 80007de:	e7d3      	b.n	8000788 <__udivmoddi4+0x248>
 80007e0:	4660      	mov	r0, ip
 80007e2:	e78f      	b.n	8000704 <__udivmoddi4+0x1c4>
 80007e4:	4681      	mov	r9, r0
 80007e6:	e7ba      	b.n	800075e <__udivmoddi4+0x21e>
 80007e8:	4661      	mov	r1, ip
 80007ea:	e777      	b.n	80006dc <__udivmoddi4+0x19c>
 80007ec:	4608      	mov	r0, r1
 80007ee:	e74b      	b.n	8000688 <__udivmoddi4+0x148>
 80007f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80007f4:	443d      	add	r5, r7
 80007f6:	e715      	b.n	8000624 <__udivmoddi4+0xe4>
 80007f8:	3802      	subs	r0, #2
 80007fa:	443c      	add	r4, r7
 80007fc:	e726      	b.n	800064c <__udivmoddi4+0x10c>
 80007fe:	bf00      	nop

08000800 <__aeabi_idiv0>:
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	0000      	movs	r0, r0
	...

08000808 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
 800080a:	4d45      	ldr	r5, [pc, #276]	; (8000920 <hci_init+0x118>)
 800080c:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
 8000810:	6899      	ldr	r1, [r3, #8]
 8000812:	f011 0101 	ands.w	r1, r1, #1
{
 8000816:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
 8000818:	d121      	bne.n	800085e <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 800081a:	aa02      	add	r2, sp, #8
 800081c:	f640 4003 	movw	r0, #3075	; 0xc03
 8000820:	f004 fd46 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8000824:	4604      	mov	r4, r0
 8000826:	2800      	cmp	r0, #0
 8000828:	d177      	bne.n	800091a <hci_init+0x112>
	uint8_t status = buf->data[0];
 800082a:	9b02      	ldr	r3, [sp, #8]
 800082c:	689b      	ldr	r3, [r3, #8]
	if (status) {
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b993      	cbnz	r3, 8000858 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8000832:	f3bf 8f5b 	dmb	ish
 8000836:	462b      	mov	r3, r5
 8000838:	f853 2fc8 	ldr.w	r2, [r3, #200]!
 800083c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
 8000840:	f002 0209 	and.w	r2, r2, #9
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8000844:	f3bf 8f5b 	dmb	ish
 8000848:	e853 1f00 	ldrex	r1, [r3]
 800084c:	e843 2000 	strex	r0, r2, [r3]
 8000850:	2800      	cmp	r0, #0
 8000852:	d1f9      	bne.n	8000848 <hci_init+0x40>
 8000854:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
 8000858:	9802      	ldr	r0, [sp, #8]
 800085a:	f00b fb5f 	bl	800bf1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
 800085e:	aa02      	add	r2, sp, #8
 8000860:	2100      	movs	r1, #0
 8000862:	f241 0003 	movw	r0, #4099	; 0x1003
 8000866:	f004 fd23 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800086a:	4604      	mov	r4, r0
 800086c:	2800      	cmp	r0, #0
 800086e:	d154      	bne.n	800091a <hci_init+0x112>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
 8000870:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
 8000872:	482c      	ldr	r0, [pc, #176]	; (8000924 <hci_init+0x11c>)
 8000874:	6899      	ldr	r1, [r3, #8]
 8000876:	2208      	movs	r2, #8
 8000878:	3101      	adds	r1, #1
 800087a:	f012 fb07 	bl	8012e8c <memcpy>
	net_buf_unref(rsp);
 800087e:	9802      	ldr	r0, [sp, #8]
 8000880:	f00b fb4c 	bl	800bf1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
 8000884:	4621      	mov	r1, r4
 8000886:	aa02      	add	r2, sp, #8
 8000888:	f241 0001 	movw	r0, #4097	; 0x1001
 800088c:	f004 fd10 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8000890:	4604      	mov	r4, r0
 8000892:	2800      	cmp	r0, #0
 8000894:	d141      	bne.n	800091a <hci_init+0x112>
	read_local_ver_complete(rsp);
 8000896:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
 8000898:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
 800089a:	785a      	ldrb	r2, [r3, #1]
 800089c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
 80008a0:	78d9      	ldrb	r1, [r3, #3]
 80008a2:	789a      	ldrb	r2, [r3, #2]
 80008a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80008a8:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
 80008ac:	791a      	ldrb	r2, [r3, #4]
 80008ae:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
 80008b2:	7a19      	ldrb	r1, [r3, #8]
 80008b4:	79da      	ldrb	r2, [r3, #7]
 80008b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80008ba:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
 80008be:	795a      	ldrb	r2, [r3, #5]
 80008c0:	799b      	ldrb	r3, [r3, #6]
 80008c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80008c6:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
 80008ca:	f00b fb27 	bl	800bf1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
 80008ce:	4621      	mov	r1, r4
 80008d0:	aa02      	add	r2, sp, #8
 80008d2:	f241 0002 	movw	r0, #4098	; 0x1002
 80008d6:	f004 fceb 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 80008da:	4604      	mov	r4, r0
 80008dc:	b9e8      	cbnz	r0, 800091a <hci_init+0x112>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
 80008de:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <hci_init+0x120>)
 80008e2:	6899      	ldr	r1, [r3, #8]
 80008e4:	2240      	movs	r2, #64	; 0x40
 80008e6:	3101      	adds	r1, #1
 80008e8:	f012 fad0 	bl	8012e8c <memcpy>
	net_buf_unref(rsp);
 80008ec:	9802      	ldr	r0, [sp, #8]
 80008ee:	f00b fb15 	bl	800bf1c <net_buf_unref>
		err = prng_init();
 80008f2:	f006 f8df 	bl	8006ab4 <prng_init>
		if (err) {
 80008f6:	4604      	mov	r4, r0
 80008f8:	b978      	cbnz	r0, 800091a <hci_init+0x112>
	if (!BT_FEAT_LE(bt_dev.features)) {
 80008fa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 80008fe:	065a      	lsls	r2, r3, #25
 8000900:	d418      	bmi.n	8000934 <hci_init+0x12c>
		BT_ERR("Non-LE capable controller detected!");
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <hci_init+0x124>)
 8000904:	9306      	str	r3, [sp, #24]
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <hci_init+0x128>)
 8000908:	2302      	movs	r3, #2
 800090a:	aa05      	add	r2, sp, #20
 800090c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8000910:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
 8000914:	9305      	str	r3, [sp, #20]
 8000916:	f012 fb9f 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	if (err) {
		return err;
	}

	return 0;
}
 800091a:	4620      	mov	r0, r4
 800091c:	b008      	add	sp, #32
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000070 	.word	0x20000070
 8000928:	20000078 	.word	0x20000078
 800092c:	08018063 	.word	0x08018063
 8000930:	08015b54 	.word	0x08015b54
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
 8000934:	4601      	mov	r1, r0
 8000936:	aa02      	add	r2, sp, #8
 8000938:	f242 0003 	movw	r0, #8195	; 0x2003
 800093c:	f004 fcb8 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8000940:	4604      	mov	r4, r0
 8000942:	2800      	cmp	r0, #0
 8000944:	d1e9      	bne.n	800091a <hci_init+0x112>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
 8000946:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
 8000948:	4899      	ldr	r0, [pc, #612]	; (8000bb0 <hci_init+0x3a8>)
 800094a:	6899      	ldr	r1, [r3, #8]
 800094c:	2208      	movs	r2, #8
 800094e:	3101      	adds	r1, #1
 8000950:	f012 fa9c 	bl	8012e8c <memcpy>
	net_buf_unref(rsp);
 8000954:	9802      	ldr	r0, [sp, #8]
 8000956:	f00b fae1 	bl	800bf1c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
 800095a:	4621      	mov	r1, r4
 800095c:	aa02      	add	r2, sp, #8
 800095e:	f242 0002 	movw	r0, #8194	; 0x2002
 8000962:	f004 fca5 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8000966:	4604      	mov	r4, r0
 8000968:	2800      	cmp	r0, #0
 800096a:	d1d6      	bne.n	800091a <hci_init+0x112>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
 800096c:	9b02      	ldr	r3, [sp, #8]
 800096e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
 8000970:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 8000974:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
 8000978:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
 800097a:	b121      	cbz	r1, 8000986 <hci_init+0x17e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
 800097c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
 800097e:	488d      	ldr	r0, [pc, #564]	; (8000bb4 <hci_init+0x3ac>)
 8000980:	4611      	mov	r1, r2
 8000982:	f014 fd2a 	bl	80153da <z_impl_k_sem_init>
		net_buf_unref(rsp);
 8000986:	9802      	ldr	r0, [sp, #8]
 8000988:	f00b fac8 	bl	800bf1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 800098c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
 8000990:	f016 0620 	ands.w	r6, r6, #32
 8000994:	f000 80d9 	beq.w	8000b4a <hci_init+0x342>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
 8000998:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 800099c:	071b      	lsls	r3, r3, #28
 800099e:	d511      	bpl.n	80009c4 <hci_init+0x1bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
 80009a0:	aa02      	add	r2, sp, #8
 80009a2:	2100      	movs	r1, #0
 80009a4:	f242 001c 	movw	r0, #8220	; 0x201c
 80009a8:	f004 fc82 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 80009ac:	4604      	mov	r4, r0
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d1b3      	bne.n	800091a <hci_init+0x112>
		le_read_supp_states_complete(rsp);
 80009b2:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
 80009b4:	6883      	ldr	r3, [r0, #8]
 80009b6:	f853 2f01 	ldr.w	r2, [r3, #1]!
 80009ba:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
 80009bc:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
 80009c0:	f00b faac 	bl	800bf1c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
 80009c4:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
 80009c8:	069e      	lsls	r6, r3, #26
 80009ca:	d523      	bpl.n	8000a14 <hci_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 80009cc:	f10d 0106 	add.w	r1, sp, #6
 80009d0:	a801      	add	r0, sp, #4
 80009d2:	f004 fce9 	bl	80053a8 <hci_le_read_max_data_len>
		if (err) {
 80009d6:	4604      	mov	r4, r0
 80009d8:	2800      	cmp	r0, #0
 80009da:	d19e      	bne.n	800091a <hci_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 80009dc:	2104      	movs	r1, #4
 80009de:	f242 0024 	movw	r0, #8228	; 0x2024
 80009e2:	f004 fc1d 	bl	8005220 <bt_hci_cmd_create>
		if (!buf) {
 80009e6:	4606      	mov	r6, r0
 80009e8:	2800      	cmp	r0, #0
 80009ea:	f000 80b5 	beq.w	8000b58 <hci_init+0x350>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
 80009ee:	2104      	movs	r1, #4
 80009f0:	3008      	adds	r0, #8
 80009f2:	f00b fbc3 	bl	800c17c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
 80009f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80009fa:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
 80009fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a00:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8000a02:	4622      	mov	r2, r4
 8000a04:	4631      	mov	r1, r6
 8000a06:	f242 0024 	movw	r0, #8228	; 0x2024
 8000a0a:	f004 fc51 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8000a0e:	4604      	mov	r4, r0
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d182      	bne.n	800091a <hci_init+0x112>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
 8000a14:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
 8000a18:	065c      	lsls	r4, r3, #25
 8000a1a:	d510      	bpl.n	8000a3e <hci_init+0x236>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
 8000a1c:	aa02      	add	r2, sp, #8
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f242 002a 	movw	r0, #8234	; 0x202a
 8000a24:	f004 fc44 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8000a28:	4604      	mov	r4, r0
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	f47f af75 	bne.w	800091a <hci_init+0x112>
		le_read_resolving_list_size_complete(rsp);
 8000a30:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
 8000a32:	6883      	ldr	r3, [r0, #8]
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
 8000a3a:	f00b fa6f 	bl	800bf1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
 8000a3e:	2108      	movs	r1, #8
 8000a40:	f242 0001 	movw	r0, #8193	; 0x2001
 8000a44:	f004 fbec 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8000a48:	4604      	mov	r4, r0
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	f000 8084 	beq.w	8000b58 <hci_init+0x350>
 8000a50:	2108      	movs	r1, #8
 8000a52:	4408      	add	r0, r1
 8000a54:	f00b fb92 	bl	800c17c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
 8000a58:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
 8000a5c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000a60:	4602      	mov	r2, r0
 8000a62:	f240 2302 	movw	r3, #514	; 0x202
 8000a66:	bf08      	it	eq
 8000a68:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
 8000a6a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
 8000a6c:	bf4c      	ite	mi
 8000a6e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
 8000a72:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
 8000a76:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
 8000a7a:	068e      	lsls	r6, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
 8000a7c:	bf48      	it	mi
 8000a7e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
 8000a82:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
 8000a86:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
 8000a8a:	bf18      	it	ne
 8000a8c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
 8000a90:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 8000a94:	07c9      	lsls	r1, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
 8000a96:	bf48      	it	mi
 8000a98:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
 8000a9c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
 8000a9e:	bf08      	it	eq
 8000aa0:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f012 fada 	bl	801305e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
 8000aaa:	4621      	mov	r1, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	f242 0001 	movw	r0, #8193	; 0x2001
 8000ab2:	f004 fbfd 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f47f af2e 	bne.w	800091a <hci_init+0x112>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 8000abe:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8000ac2:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
 8000ac6:	069a      	lsls	r2, r3, #26
 8000ac8:	d45b      	bmi.n	8000b82 <hci_init+0x37a>
	if (bt_dev.le.acl_mtu) {
 8000aca:	b9d9      	cbnz	r1, 8000b04 <hci_init+0x2fc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
 8000acc:	aa02      	add	r2, sp, #8
 8000ace:	f241 0005 	movw	r0, #4101	; 0x1005
 8000ad2:	f004 fbed 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	f47f af1e 	bne.w	800091a <hci_init+0x112>
	if (bt_dev.le.acl_mtu) {
 8000ade:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
 8000ae2:	b963      	cbnz	r3, 8000afe <hci_init+0x2f6>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
 8000ae4:	9b02      	ldr	r3, [sp, #8]
 8000ae6:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
 8000ae8:	785a      	ldrb	r2, [r3, #1]
 8000aea:	7899      	ldrb	r1, [r3, #2]
 8000aec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000af0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
 8000af4:	889a      	ldrh	r2, [r3, #4]
 8000af6:	482f      	ldr	r0, [pc, #188]	; (8000bb4 <hci_init+0x3ac>)
 8000af8:	4611      	mov	r1, r2
 8000afa:	f014 fc6e 	bl	80153da <z_impl_k_sem_init>
	net_buf_unref(rsp);
 8000afe:	9802      	ldr	r0, [sp, #8]
 8000b00:	f00b fa0c 	bl	800bf1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
 8000b04:	2108      	movs	r1, #8
 8000b06:	f640 4001 	movw	r0, #3073	; 0xc01
 8000b0a:	f004 fb89 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b310      	cbz	r0, 8000b58 <hci_init+0x350>
 8000b12:	2108      	movs	r1, #8
 8000b14:	4408      	add	r0, r1
 8000b16:	f00b fb31 	bl	800c17c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 8000b1a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
 8000b1e:	07db      	lsls	r3, r3, #31
 8000b20:	4602      	mov	r2, r0
 8000b22:	d53d      	bpl.n	8000ba0 <hci_init+0x398>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
 8000b24:	a120      	add	r1, pc, #128	; (adr r1, 8000ba8 <hci_init+0x3a0>)
 8000b26:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
 8000b2a:	f012 fa98 	bl	801305e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
 8000b2e:	4621      	mov	r1, r4
 8000b30:	2200      	movs	r2, #0
 8000b32:	f640 4001 	movw	r0, #3073	; 0xc01
 8000b36:	f004 fbbb 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	f47f aeec 	bne.w	800091a <hci_init+0x112>
	err = bt_id_init();
 8000b42:	f005 fc01 	bl	8006348 <bt_id_init>
 8000b46:	4604      	mov	r4, r0
	if (err) {
 8000b48:	e6e7      	b.n	800091a <hci_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	f640 406d 	movw	r0, #3181	; 0xc6d
 8000b50:	f004 fb66 	bl	8005220 <bt_hci_cmd_create>
		if (!buf) {
 8000b54:	4604      	mov	r4, r0
 8000b56:	b910      	cbnz	r0, 8000b5e <hci_init+0x356>
		return -ENOBUFS;
 8000b58:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8000b5c:	e6dd      	b.n	800091a <hci_init+0x112>
 8000b5e:	2102      	movs	r1, #2
 8000b60:	3008      	adds	r0, #8
 8000b62:	f00b fb0b 	bl	800c17c <net_buf_simple_add>
		cp_le->le = 0x01;
 8000b66:	2301      	movs	r3, #1
 8000b68:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
 8000b6a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	4632      	mov	r2, r6
 8000b70:	f640 406d 	movw	r0, #3181	; 0xc6d
 8000b74:	f004 fb9c 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8000b78:	4604      	mov	r4, r0
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	f43f af0c 	beq.w	8000998 <hci_init+0x190>
 8000b80:	e6cb      	b.n	800091a <hci_init+0x112>
	else if (!bt_dev.le.acl_mtu) {
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d1be      	bne.n	8000b04 <hci_init+0x2fc>
		BT_ERR("ACL BR/EDR buffers not initialized");
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <hci_init+0x3b0>)
 8000b88:	9306      	str	r3, [sp, #24]
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <hci_init+0x3b4>)
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	aa05      	add	r2, sp, #20
 8000b90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000b94:	9305      	str	r3, [sp, #20]
		return -EIO;
 8000b96:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
 8000b9a:	f012 fa5d 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		return -EIO;
 8000b9e:	e6bc      	b.n	800091a <hci_init+0x112>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <hci_init+0x3b8>)
 8000ba2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8000ba6:	e7c0      	b.n	8000b2a <hci_init+0x322>
 8000ba8:	02008890 	.word	0x02008890
 8000bac:	20008000 	.word	0x20008000
 8000bb0:	200000d0 	.word	0x200000d0
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	08018087 	.word	0x08018087
 8000bbc:	08015b54 	.word	0x08015b54
 8000bc0:	02008810 	.word	0x02008810

08000bc4 <temp_ccc_cfg_changed>:
};

static void temp_ccc_cfg_changed(const struct bt_gatt_attr *attr,
uint16_t value)
{
	simulate_temp = value == BT_GATT_CCC_NOTIFY;
 8000bc4:	1e4b      	subs	r3, r1, #1
 8000bc6:	4259      	negs	r1, r3
 8000bc8:	4159      	adcs	r1, r3
 8000bca:	4b01      	ldr	r3, [pc, #4]	; (8000bd0 <temp_ccc_cfg_changed+0xc>)
 8000bcc:	7019      	strb	r1, [r3, #0]
}
 8000bce:	4770      	bx	lr
 8000bd0:	20001889 	.word	0x20001889

08000bd4 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
 8000bd4:	4801      	ldr	r0, [pc, #4]	; (8000bdc <disconnected+0x8>)
 8000bd6:	f011 b9c3 	b.w	8011f60 <printk>
 8000bda:	bf00      	nop
 8000bdc:	08016766 	.word	0x08016766

08000be0 <connected>:
	if (err) {
 8000be0:	b111      	cbz	r1, 8000be8 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <connected+0x10>)
 8000be4:	f011 b9bc 	b.w	8011f60 <printk>
		printk("Connected\n");
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <connected+0x14>)
 8000bea:	f011 b9b9 	b.w	8011f60 <printk>
 8000bee:	bf00      	nop
 8000bf0:	08016784 	.word	0x08016784
 8000bf4:	080167a4 	.word	0x080167a4

08000bf8 <z_impl_gpio_pin_configure>:
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
 8000bf8:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
 8000bfc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct gpio_driver_config *const cfg =
 8000c00:	e9d0 b901 	ldrd	fp, r9, [r0, #4]
	struct gpio_driver_data *data =
 8000c04:	6907      	ldr	r7, [r0, #16]
{
 8000c06:	4605      	mov	r5, r0
 8000c08:	460e      	mov	r6, r1
 8000c0a:	4614      	mov	r4, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
 8000c0c:	d00e      	beq.n	8000c2c <z_impl_gpio_pin_configure+0x34>
 8000c0e:	494f      	ldr	r1, [pc, #316]	; (8000d4c <z_impl_gpio_pin_configure+0x154>)
 8000c10:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c12:	4850      	ldr	r0, [pc, #320]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000c14:	f240 23b5 	movw	r3, #693	; 0x2b5
 8000c18:	f011 fb46 	bl	80122a8 <assert_print>
 8000c1c:	484e      	ldr	r0, [pc, #312]	; (8000d58 <z_impl_gpio_pin_configure+0x160>)
 8000c1e:	f011 fb43 	bl	80122a8 <assert_print>
 8000c22:	484b      	ldr	r0, [pc, #300]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c24:	f240 21b5 	movw	r1, #693	; 0x2b5
 8000c28:	f011 fb37 	bl	801229a <assert_post_action>
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 8000c2c:	f004 0330 	and.w	r3, r4, #48	; 0x30
 8000c30:	2b30      	cmp	r3, #48	; 0x30
 8000c32:	d10e      	bne.n	8000c52 <z_impl_gpio_pin_configure+0x5a>
 8000c34:	4949      	ldr	r1, [pc, #292]	; (8000d5c <z_impl_gpio_pin_configure+0x164>)
 8000c36:	4a46      	ldr	r2, [pc, #280]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c38:	4846      	ldr	r0, [pc, #280]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000c3a:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 8000c3e:	f011 fb33 	bl	80122a8 <assert_print>
 8000c42:	4847      	ldr	r0, [pc, #284]	; (8000d60 <z_impl_gpio_pin_configure+0x168>)
 8000c44:	f011 fb30 	bl	80122a8 <assert_print>
 8000c48:	4841      	ldr	r0, [pc, #260]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c4a:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8000c4e:	f011 fb24 	bl	801229a <assert_post_action>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
 8000c52:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d10e      	bne.n	8000c78 <z_impl_gpio_pin_configure+0x80>
 8000c5a:	4942      	ldr	r1, [pc, #264]	; (8000d64 <z_impl_gpio_pin_configure+0x16c>)
 8000c5c:	4a3c      	ldr	r2, [pc, #240]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c5e:	483d      	ldr	r0, [pc, #244]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000c60:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000c64:	f011 fb20 	bl	80122a8 <assert_print>
 8000c68:	483f      	ldr	r0, [pc, #252]	; (8000d68 <z_impl_gpio_pin_configure+0x170>)
 8000c6a:	f011 fb1d 	bl	80122a8 <assert_print>
 8000c6e:	4838      	ldr	r0, [pc, #224]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c70:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000c74:	f011 fb11 	bl	801229a <assert_post_action>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 8000c78:	f004 0306 	and.w	r3, r4, #6
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d10b      	bne.n	8000c98 <z_impl_gpio_pin_configure+0xa0>
 8000c80:	493a      	ldr	r1, [pc, #232]	; (8000d6c <z_impl_gpio_pin_configure+0x174>)
 8000c82:	4834      	ldr	r0, [pc, #208]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000c84:	4a32      	ldr	r2, [pc, #200]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c86:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000c8a:	f011 fb0d 	bl	80122a8 <assert_print>
 8000c8e:	4830      	ldr	r0, [pc, #192]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000c90:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000c94:	f011 fb01 	bl	801229a <assert_post_action>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
 8000c98:	f414 2840 	ands.w	r8, r4, #786432	; 0xc0000
 8000c9c:	d022      	beq.n	8000ce4 <z_impl_gpio_pin_configure+0xec>
 8000c9e:	03a3      	lsls	r3, r4, #14
 8000ca0:	d40e      	bmi.n	8000cc0 <z_impl_gpio_pin_configure+0xc8>
 8000ca2:	4933      	ldr	r1, [pc, #204]	; (8000d70 <z_impl_gpio_pin_configure+0x178>)
 8000ca4:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000ca6:	482b      	ldr	r0, [pc, #172]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000ca8:	f240 23c3 	movw	r3, #707	; 0x2c3
 8000cac:	f011 fafc 	bl	80122a8 <assert_print>
 8000cb0:	4830      	ldr	r0, [pc, #192]	; (8000d74 <z_impl_gpio_pin_configure+0x17c>)
 8000cb2:	f011 faf9 	bl	80122a8 <assert_print>
 8000cb6:	4826      	ldr	r0, [pc, #152]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000cb8:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000cbc:	f011 faed 	bl	801229a <assert_post_action>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
 8000cc0:	f5b8 2f40 	cmp.w	r8, #786432	; 0xc0000
 8000cc4:	d10e      	bne.n	8000ce4 <z_impl_gpio_pin_configure+0xec>
 8000cc6:	492c      	ldr	r1, [pc, #176]	; (8000d78 <z_impl_gpio_pin_configure+0x180>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000ccc:	f240 23c7 	movw	r3, #711	; 0x2c7
 8000cd0:	f011 faea 	bl	80122a8 <assert_print>
 8000cd4:	4829      	ldr	r0, [pc, #164]	; (8000d7c <z_impl_gpio_pin_configure+0x184>)
 8000cd6:	f011 fae7 	bl	80122a8 <assert_print>
 8000cda:	481d      	ldr	r0, [pc, #116]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000cdc:	f240 21c7 	movw	r1, #711	; 0x2c7
 8000ce0:	f011 fadb 	bl	801229a <assert_post_action>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8000ce4:	02e0      	lsls	r0, r4, #11
 8000ce6:	d506      	bpl.n	8000cf6 <z_impl_gpio_pin_configure+0xfe>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8000ce8:	f1b8 0f00 	cmp.w	r8, #0
 8000cec:	d003      	beq.n	8000cf6 <z_impl_gpio_pin_configure+0xfe>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8000cee:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8000cf0:	bf48      	it	mi
 8000cf2:	f484 2440 	eormi.w	r4, r4, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	fa03 fa06 	lsl.w	sl, r3, r6
 8000cfc:	f8db 3000 	ldr.w	r3, [fp]
 8000d00:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8000d04:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000d08:	d10e      	bne.n	8000d28 <z_impl_gpio_pin_configure+0x130>
 8000d0a:	491d      	ldr	r1, [pc, #116]	; (8000d80 <z_impl_gpio_pin_configure+0x188>)
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <z_impl_gpio_pin_configure+0x15c>)
 8000d10:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 8000d14:	f011 fac8 	bl	80122a8 <assert_print>
 8000d18:	481a      	ldr	r0, [pc, #104]	; (8000d84 <z_impl_gpio_pin_configure+0x18c>)
 8000d1a:	f011 fac5 	bl	80122a8 <assert_print>
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <z_impl_gpio_pin_configure+0x158>)
 8000d20:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8000d24:	f011 fab9 	bl	801229a <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8000d2c:	bf4c      	ite	mi
 8000d2e:	ea4a 0303 	orrmi.w	r3, sl, r3
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8000d32:	ea23 030a 	bicpl.w	r3, r3, sl
 8000d36:	603b      	str	r3, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
 8000d38:	f8d9 3000 	ldr.w	r3, [r9]
 8000d3c:	4642      	mov	r2, r8
 8000d3e:	4631      	mov	r1, r6
 8000d40:	4628      	mov	r0, r5
}
 8000d42:	b001      	add	sp, #4
 8000d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
 8000d48:	4718      	bx	r3
 8000d4a:	bf00      	nop
 8000d4c:	080167d9 	.word	0x080167d9
 8000d50:	080167af 	.word	0x080167af
 8000d54:	08016836 	.word	0x08016836
 8000d58:	08016853 	.word	0x08016853
 8000d5c:	08016877 	.word	0x08016877
 8000d60:	080168b0 	.word	0x080168b0
 8000d64:	080168ed 	.word	0x080168ed
 8000d68:	08016922 	.word	0x08016922
 8000d6c:	08016974 	.word	0x08016974
 8000d70:	080169a7 	.word	0x080169a7
 8000d74:	080169ed 	.word	0x080169ed
 8000d78:	08016a28 	.word	0x08016a28
 8000d7c:	08016a69 	.word	0x08016a69
 8000d80:	08016a95 	.word	0x08016a95
 8000d84:	08016ad3 	.word	0x08016ad3

08000d88 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
 8000d88:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
 8000d8a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
 8000d8c:	b08a      	sub	sp, #40	; 0x28
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460e      	mov	r6, r1
 8000d92:	ad07      	add	r5, sp, #28
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d820      	bhi.n	8000dda <bt_addr_le_to_str.constprop.0+0x52>
 8000d98:	e8df f003 	tbb	[pc, r3]
 8000d9c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
 8000da0:	4911      	ldr	r1, [pc, #68]	; (8000de8 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
 8000da2:	4628      	mov	r0, r5
 8000da4:	f012 f83c 	bl	8012e20 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 8000da8:	7863      	ldrb	r3, [r4, #1]
 8000daa:	9304      	str	r3, [sp, #16]
 8000dac:	78a3      	ldrb	r3, [r4, #2]
 8000dae:	9303      	str	r3, [sp, #12]
 8000db0:	78e3      	ldrb	r3, [r4, #3]
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	7923      	ldrb	r3, [r4, #4]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	7963      	ldrb	r3, [r4, #5]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <bt_addr_le_to_str.constprop.0+0x64>)
 8000dbe:	79a3      	ldrb	r3, [r4, #6]
 8000dc0:	9505      	str	r5, [sp, #20]
 8000dc2:	211e      	movs	r1, #30
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	f011 f8d8 	bl	8011f7a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
 8000dca:	b00a      	add	sp, #40	; 0x28
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <bt_addr_le_to_str.constprop.0+0x68>)
 8000dd0:	e7e7      	b.n	8000da2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <bt_addr_le_to_str.constprop.0+0x6c>)
 8000dd4:	e7e5      	b.n	8000da2 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <bt_addr_le_to_str.constprop.0+0x70>)
 8000dd8:	e7e3      	b.n	8000da2 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <bt_addr_le_to_str.constprop.0+0x74>)
 8000ddc:	210a      	movs	r1, #10
 8000dde:	4628      	mov	r0, r5
 8000de0:	f011 f8cb 	bl	8011f7a <snprintk>
		break;
 8000de4:	e7e0      	b.n	8000da8 <bt_addr_le_to_str.constprop.0+0x20>
 8000de6:	bf00      	nop
 8000de8:	08016ae5 	.word	0x08016ae5
 8000dec:	08016b07 	.word	0x08016b07
 8000df0:	08016aec 	.word	0x08016aec
 8000df4:	08016af3 	.word	0x08016af3
 8000df8:	08016afd 	.word	0x08016afd
 8000dfc:	0801929e 	.word	0x0801929e

08000e00 <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
 8000e00:	b510      	push	{r4, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8000e06:	f012 fcd0 	bl	80137aa <bt_conn_get_dst>
 8000e0a:	4669      	mov	r1, sp
 8000e0c:	f7ff ffbc 	bl	8000d88 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <auth_passkey_display+0x20>)
 8000e12:	4622      	mov	r2, r4
 8000e14:	4669      	mov	r1, sp
 8000e16:	f011 f8a3 	bl	8011f60 <printk>
}
 8000e1a:	b008      	add	sp, #32
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	08016b2a 	.word	0x08016b2a

08000e24 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
 8000e24:	b500      	push	{lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
 8000e28:	f012 fcbf 	bl	80137aa <bt_conn_get_dst>
 8000e2c:	4669      	mov	r1, sp
 8000e2e:	f7ff ffab 	bl	8000d88 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <auth_cancel+0x1c>)
 8000e34:	4669      	mov	r1, sp
 8000e36:	f011 f893 	bl	8011f60 <printk>
}
 8000e3a:	b009      	add	sp, #36	; 0x24
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e40:	08016b40 	.word	0x08016b40

08000e44 <gpio_pin_set.constprop.0>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000e44:	6843      	ldr	r3, [r0, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000e4c:	06d9      	lsls	r1, r3, #27
	const struct gpio_driver_data *const data =
 8000e4e:	6906      	ldr	r6, [r0, #16]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
 8000e50:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000e52:	d40e      	bmi.n	8000e72 <gpio_pin_set.constprop.0+0x2e>
 8000e54:	4918      	ldr	r1, [pc, #96]	; (8000eb8 <gpio_pin_set.constprop.0+0x74>)
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <gpio_pin_set.constprop.0+0x78>)
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <gpio_pin_set.constprop.0+0x7c>)
 8000e5a:	f240 4392 	movw	r3, #1170	; 0x492
 8000e5e:	f011 fa23 	bl	80122a8 <assert_print>
 8000e62:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <gpio_pin_set.constprop.0+0x80>)
 8000e64:	f011 fa20 	bl	80122a8 <assert_print>
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <gpio_pin_set.constprop.0+0x78>)
 8000e6a:	f240 4192 	movw	r1, #1170	; 0x492
 8000e6e:	f011 fa14 	bl	801229a <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8000e72:	6833      	ldr	r3, [r6, #0]
 8000e74:	06da      	lsls	r2, r3, #27
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	bf48      	it	mi
 8000e7c:	f085 0501 	eormi.w	r5, r5, #1
 8000e80:	06db      	lsls	r3, r3, #27
 8000e82:	d40e      	bmi.n	8000ea2 <gpio_pin_set.constprop.0+0x5e>
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <gpio_pin_set.constprop.0+0x74>)
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <gpio_pin_set.constprop.0+0x78>)
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <gpio_pin_set.constprop.0+0x7c>)
 8000e8a:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8000e8e:	f011 fa0b 	bl	80122a8 <assert_print>
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <gpio_pin_set.constprop.0+0x80>)
 8000e94:	f011 fa08 	bl	80122a8 <assert_print>
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <gpio_pin_set.constprop.0+0x78>)
 8000e9a:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8000e9e:	f011 f9fc 	bl	801229a <assert_post_action>
	if (value != 0)	{
 8000ea2:	b135      	cbz	r5, 8000eb2 <gpio_pin_set.constprop.0+0x6e>
	return api->port_set_bits_raw(port, pins);
 8000ea4:	68a3      	ldr	r3, [r4, #8]
 8000ea6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	2110      	movs	r1, #16
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
 8000eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
 8000eb0:	4718      	bx	r3
 8000eb2:	68a3      	ldr	r3, [r4, #8]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	e7f7      	b.n	8000ea8 <gpio_pin_set.constprop.0+0x64>
 8000eb8:	08016a95 	.word	0x08016a95
 8000ebc:	080167af 	.word	0x080167af
 8000ec0:	08016836 	.word	0x08016836
 8000ec4:	08016ad3 	.word	0x08016ad3

08000ec8 <transfer>:
static struct device const * dev_spi1 = NULL;
static struct device const * dev_porta = NULL;


static uint8_t transfer(uint8_t data_tx)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
	uint8_t data_rx;
	struct spi_buf buf_tx[] = {{.buf = &data_tx,.len = sizeof(data_tx)}};
 8000ecc:	f10d 0307 	add.w	r3, sp, #7
	struct spi_buf buf_rx[] = {{.buf = &data_rx,.len = sizeof(data_rx)}};
 8000ed0:	f10d 020f 	add.w	r2, sp, #15
	struct spi_buf buf_tx[] = {{.buf = &data_tx,.len = sizeof(data_tx)}};
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	2301      	movs	r3, #1
	struct spi_buf buf_rx[] = {{.buf = &data_rx,.len = sizeof(data_rx)}};
 8000ed8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	struct spi_buf_set tx = {.buffers = buf_tx, .count = 1};
 8000edc:	aa04      	add	r2, sp, #16
 8000ede:	e9cd 2308 	strd	r2, r3, [sp, #32]
	struct spi_buf_set rx = {.buffers = buf_rx, .count = 1};
 8000ee2:	aa06      	add	r2, sp, #24
 8000ee4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	struct spi_buf buf_tx[] = {{.buf = &data_tx,.len = sizeof(data_tx)}};
 8000ee8:	9305      	str	r3, [sp, #20]
	spi_transceive(dev_spi1, &spi_cfg, &tx, &rx);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <transfer+0x48>)
{
 8000eec:	f88d 0007 	strb.w	r0, [sp, #7]
	spi_transceive(dev_spi1, &spi_cfg, &tx, &rx);
 8000ef0:	6818      	ldr	r0, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8000ef2:	6883      	ldr	r3, [r0, #8]
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <transfer+0x4c>)
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	aa08      	add	r2, sp, #32
 8000efa:	ab0a      	add	r3, sp, #40	; 0x28
 8000efc:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 8000efe:	2100      	movs	r1, #0
 8000f00:	200a      	movs	r0, #10
 8000f02:	f00f fdb9 	bl	8010a78 <z_impl_k_sleep>
	k_sleep(K_MSEC(1));
	return data_rx;
}
 8000f06:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000f0a:	b00c      	add	sp, #48	; 0x30
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000151c 	.word	0x2000151c
 8000f14:	20001520 	.word	0x20001520

08000f18 <set>:




static void set(uint8_t reg, uint8_t val)
{
 8000f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t cmd;
	uint8_t ack;
	uint8_t rx;

	// Set register (reg) to value (val)
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000f1c:	4f1a      	ldr	r7, [pc, #104]	; (8000f88 <set+0x70>)
{
 8000f1e:	4605      	mov	r5, r0
	cmd = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_WRITE);
 8000f20:	00ac      	lsls	r4, r5, #2
{
 8000f22:	460e      	mov	r6, r1
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	2100      	movs	r1, #0
	cmd = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_WRITE);
 8000f28:	b264      	sxtb	r4, r4
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000f2a:	f7ff ff8b 	bl	8000e44 <gpio_pin_set.constprop.0>
	cmd = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_WRITE);
 8000f2e:	f044 0042 	orr.w	r0, r4, #66	; 0x42
	transfer(cmd);
 8000f32:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8000f36:	f7ff ffc7 	bl	8000ec8 <transfer>
	transfer(val);
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f7ff ffc4 	bl	8000ec8 <transfer>
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	2101      	movs	r1, #1
 8000f44:	f7ff ff7e 	bl	8000e44 <gpio_pin_set.constprop.0>

	// Read register (reg)
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
	cmd = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 8000f48:	f044 0443 	orr.w	r4, r4, #67	; 0x43
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f7ff ff78 	bl	8000e44 <gpio_pin_set.constprop.0>
	ack = transfer(cmd);
 8000f54:	b2e0      	uxtb	r0, r4
 8000f56:	f7ff ffb7 	bl	8000ec8 <transfer>
 8000f5a:	4680      	mov	r8, r0
	rx = transfer(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff ffb3 	bl	8000ec8 <transfer>
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 8000f62:	2101      	movs	r1, #1
	rx = transfer(0);
 8000f64:	4604      	mov	r4, r0
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f7ff ff6c 	bl	8000e44 <gpio_pin_set.constprop.0>
	
	printk("SET8: %s: %02x %02x ack:%02x\n", MCP356X_REG_tostring(reg), val, rx, ack);
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <set+0x74>)
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <set+0x78>)
 8000f70:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8000f74:	f8cd 8000 	str.w	r8, [sp]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	4632      	mov	r2, r6
 8000f7c:	f010 fff0 	bl	8011f60 <printk>
}
 8000f80:	b002      	add	sp, #8
 8000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f86:	bf00      	nop
 8000f88:	20001518 	.word	0x20001518
 8000f8c:	08015d14 	.word	0x08015d14
 8000f90:	08016b57 	.word	0x08016b57

08000f94 <set24>:




static void set24(uint8_t reg, uint32_t value)
{
 8000f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t tx[4];
	uint8_t rx[4];
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_WRITE);
 8000f98:	0084      	lsls	r4, r0, #2
{
 8000f9a:	b08d      	sub	sp, #52	; 0x34
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_WRITE);
 8000f9c:	b263      	sxtb	r3, r4
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000fa4:	f88d 3008 	strb.w	r3, [sp, #8]
    tx[1] = ( value >> 16 ) & 0xFF;
 8000fa8:	0c0b      	lsrs	r3, r1, #16
 8000faa:	f88d 3009 	strb.w	r3, [sp, #9]
    tx[2] = ( value >> 8 ) & 0xFF;
 8000fae:	0a0b      	lsrs	r3, r1, #8
 8000fb0:	f88d 300a 	strb.w	r3, [sp, #10]
    tx[3] = ( value >> 0 ) & 0xFF;

	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 8000fb4:	ab02      	add	r3, sp, #8
 8000fb6:	9304      	str	r3, [sp, #16]
	struct spi_buf buf_rx[] = {{.buf = &rx,.len = sizeof(rx)}};
 8000fb8:	aa03      	add	r2, sp, #12
	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 8000fba:	2304      	movs	r3, #4
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
	struct spi_buf_set rx_buf = {.buffers = buf_rx, .count = 1};
	
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000fbc:	4f2b      	ldr	r7, [pc, #172]	; (800106c <set24+0xd8>)
	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 8000fbe:	9305      	str	r3, [sp, #20]
	struct spi_buf buf_rx[] = {{.buf = &rx,.len = sizeof(rx)}};
 8000fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    tx[3] = ( value >> 0 ) & 0xFF;
 8000fc4:	2600      	movs	r6, #0
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
 8000fc6:	ab04      	add	r3, sp, #16
	spi_transceive(dev_spi1, &spi_cfg, &tx_buf, &rx_buf);
 8000fc8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8001078 <set24+0xe4>
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
 8000fcc:	9308      	str	r3, [sp, #32]
 8000fce:	f04f 0801 	mov.w	r8, #1
	struct spi_buf_set rx_buf = {.buffers = buf_rx, .count = 1};
 8000fd2:	ab06      	add	r3, sp, #24
{
 8000fd4:	4683      	mov	fp, r0
 8000fd6:	460d      	mov	r5, r1
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000fd8:	6838      	ldr	r0, [r7, #0]
    tx[3] = ( value >> 0 ) & 0xFF;
 8000fda:	f88d 600b 	strb.w	r6, [sp, #11]
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000fde:	4631      	mov	r1, r6
	struct spi_buf_set rx_buf = {.buffers = buf_rx, .count = 1};
 8000fe0:	e9cd 380a 	strd	r3, r8, [sp, #40]	; 0x28
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
 8000fe4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8000fe8:	f7ff ff2c 	bl	8000e44 <gpio_pin_set.constprop.0>
	spi_transceive(dev_spi1, &spi_cfg, &tx_buf, &rx_buf);
 8000fec:	f8da 0000 	ldr.w	r0, [sl]
 8000ff0:	6883      	ldr	r3, [r0, #8]
 8000ff2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800107c <set24+0xe8>
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	aa08      	add	r2, sp, #32
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	ab0a      	add	r3, sp, #40	; 0x28
 8001000:	47a0      	blx	r4
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	4641      	mov	r1, r8
 8001006:	f7ff ff1d 	bl	8000e44 <gpio_pin_set.constprop.0>
 800100a:	2100      	movs	r1, #0
 800100c:	200a      	movs	r0, #10
 800100e:	f00f fd33 	bl	8010a78 <z_impl_k_sleep>

	k_sleep(K_MSEC(1));

	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 8001012:	9b01      	ldr	r3, [sp, #4]
    tx[1] = 0;
    tx[2] = 0;
    tx[3] = 0;

	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8001014:	6838      	ldr	r0, [r7, #0]
    tx[1] = 0;
 8001016:	f88d 6009 	strb.w	r6, [sp, #9]
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 800101a:	f043 0443 	orr.w	r4, r3, #67	; 0x43
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 800101e:	4631      	mov	r1, r6
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 8001020:	f88d 4008 	strb.w	r4, [sp, #8]
    tx[2] = 0;
 8001024:	f8ad 600a 	strh.w	r6, [sp, #10]
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8001028:	f7ff ff0c 	bl	8000e44 <gpio_pin_set.constprop.0>
	spi_transceive(dev_spi1, &spi_cfg, &tx_buf, &rx_buf);
 800102c:	f8da 0000 	ldr.w	r0, [sl]
 8001030:	6883      	ldr	r3, [r0, #8]
 8001032:	aa08      	add	r2, sp, #32
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	4649      	mov	r1, r9
 8001038:	ab0a      	add	r3, sp, #40	; 0x28
 800103a:	47a0      	blx	r4
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 800103c:	4641      	mov	r1, r8
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f7ff ff00 	bl	8000e44 <gpio_pin_set.constprop.0>

	uint32_t v = (rx[1] << 16) | (rx[2] << 8) |  (rx[3] << 0);
 8001044:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001048:	f89d 200d 	ldrb.w	r2, [sp, #13]
	printk("SET24: %s: %08x %08x\n", MCP356X_REG_tostring(reg), value, v);
 800104c:	4908      	ldr	r1, [pc, #32]	; (8001070 <set24+0xdc>)
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <set24+0xe0>)
 8001050:	f851 102b 	ldr.w	r1, [r1, fp, lsl #2]
	uint32_t v = (rx[1] << 16) | (rx[2] << 8) |  (rx[3] << 0);
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800105a:	f89d 200f 	ldrb.w	r2, [sp, #15]
	printk("SET24: %s: %08x %08x\n", MCP356X_REG_tostring(reg), value, v);
 800105e:	4313      	orrs	r3, r2
 8001060:	462a      	mov	r2, r5
 8001062:	f010 ff7d 	bl	8011f60 <printk>
}
 8001066:	b00d      	add	sp, #52	; 0x34
 8001068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106c:	20001518 	.word	0x20001518
 8001070:	08015d14 	.word	0x08015d14
 8001074:	08016b75 	.word	0x08016b75
 8001078:	2000151c 	.word	0x2000151c
 800107c:	20001520 	.word	0x20001520

08001080 <main>:




void main(void)
{
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;

	err = bt_enable(NULL);
 8001084:	2000      	movs	r0, #0
{
 8001086:	b095      	sub	sp, #84	; 0x54
	err = bt_enable(NULL);
 8001088:	f004 fdba 	bl	8005c00 <bt_enable>
	if (err) {
 800108c:	4606      	mov	r6, r0
 800108e:	b130      	cbz	r0, 800109e <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
 8001090:	4601      	mov	r1, r0
 8001092:	48b6      	ldr	r0, [pc, #728]	; (800136c <main+0x2ec>)
 8001094:	f010 ff64 	bl	8011f60 <printk>
		}

		/* Battery level simulation */
		bas_notify();
	}
}
 8001098:	b015      	add	sp, #84	; 0x54
 800109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
 800109e:	4db4      	ldr	r5, [pc, #720]	; (8001370 <main+0x2f0>)
	printk("Bluetooth initialized\n");
 80010a0:	48b4      	ldr	r0, [pc, #720]	; (8001374 <main+0x2f4>)
 80010a2:	f010 ff5d 	bl	8011f60 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	ac0e      	add	r4, sp, #56	; 0x38
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	6023      	str	r3, [r4, #0]
 80010b0:	49b1      	ldr	r1, [pc, #708]	; (8001378 <main+0x2f8>)
 80010b2:	9600      	str	r6, [sp, #0]
 80010b4:	4633      	mov	r3, r6
 80010b6:	2203      	movs	r2, #3
 80010b8:	a80e      	add	r0, sp, #56	; 0x38
 80010ba:	f005 fbe7 	bl	800688c <bt_le_adv_start>
	if (err) {
 80010be:	4601      	mov	r1, r0
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f000 814f 	beq.w	8001364 <main+0x2e4>
		printk("Advertising failed to start (err %d)\n", err);
 80010c6:	48ad      	ldr	r0, [pc, #692]	; (800137c <main+0x2fc>)
 80010c8:	f010 ff4a 	bl	8011f60 <printk>
	bt_conn_auth_cb_register(&auth_cb_display);
 80010cc:	48ac      	ldr	r0, [pc, #688]	; (8001380 <main+0x300>)
	dev_spi1 = DEVICE_DT_GET(DT_NODELABEL(spi1));
 80010ce:	4cad      	ldr	r4, [pc, #692]	; (8001384 <main+0x304>)
	bt_conn_auth_cb_register(&auth_cb_display);
 80010d0:	f006 fe16 	bl	8007d00 <bt_conn_auth_cb_register>
	printk("Init SPI\n");
 80010d4:	48ac      	ldr	r0, [pc, #688]	; (8001388 <main+0x308>)
 80010d6:	f010 ff43 	bl	8011f60 <printk>
	dev_spi1 = DEVICE_DT_GET(DT_NODELABEL(spi1));
 80010da:	4bac      	ldr	r3, [pc, #688]	; (800138c <main+0x30c>)
 80010dc:	6023      	str	r3, [r4, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80010de:	48ac      	ldr	r0, [pc, #688]	; (8001390 <main+0x310>)
	dev_porta = device_get_binding(MY_DEVICE_CS_PORT); //--white---(PA10,D3,51)
 80010e0:	4dac      	ldr	r5, [pc, #688]	; (8001394 <main+0x314>)
 80010e2:	f00c fffd 	bl	800e0e0 <z_impl_device_get_binding>
	__ASSERT(dev_spi1, "device_get_binding failed");
 80010e6:	6823      	ldr	r3, [r4, #0]
	dev_porta = device_get_binding(MY_DEVICE_CS_PORT); //--white---(PA10,D3,51)
 80010e8:	6028      	str	r0, [r5, #0]
	__ASSERT(dev_spi1, "device_get_binding failed");
 80010ea:	9403      	str	r4, [sp, #12]
 80010ec:	b963      	cbnz	r3, 8001108 <main+0x88>
 80010ee:	49aa      	ldr	r1, [pc, #680]	; (8001398 <main+0x318>)
 80010f0:	4aaa      	ldr	r2, [pc, #680]	; (800139c <main+0x31c>)
 80010f2:	48ab      	ldr	r0, [pc, #684]	; (80013a0 <main+0x320>)
 80010f4:	23ba      	movs	r3, #186	; 0xba
 80010f6:	f011 f8d7 	bl	80122a8 <assert_print>
 80010fa:	48aa      	ldr	r0, [pc, #680]	; (80013a4 <main+0x324>)
 80010fc:	f011 f8d4 	bl	80122a8 <assert_print>
 8001100:	48a6      	ldr	r0, [pc, #664]	; (800139c <main+0x31c>)
 8001102:	21ba      	movs	r1, #186	; 0xba
 8001104:	f011 f8c9 	bl	801229a <assert_post_action>
	__ASSERT(dev_porta, "device_get_binding failed");
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b963      	cbnz	r3, 8001126 <main+0xa6>
 800110c:	49a6      	ldr	r1, [pc, #664]	; (80013a8 <main+0x328>)
 800110e:	4aa3      	ldr	r2, [pc, #652]	; (800139c <main+0x31c>)
 8001110:	48a3      	ldr	r0, [pc, #652]	; (80013a0 <main+0x320>)
 8001112:	23bb      	movs	r3, #187	; 0xbb
 8001114:	f011 f8c8 	bl	80122a8 <assert_print>
 8001118:	48a2      	ldr	r0, [pc, #648]	; (80013a4 <main+0x324>)
 800111a:	f011 f8c5 	bl	80122a8 <assert_print>
 800111e:	489f      	ldr	r0, [pc, #636]	; (800139c <main+0x31c>)
 8001120:	21bb      	movs	r1, #187	; 0xbb
 8001122:	f011 f8ba 	bl	801229a <assert_post_action>
	spi_cfg.operation = SPI_WORD_SET(8) | SPI_MODE_GET(0);
 8001126:	4ba1      	ldr	r3, [pc, #644]	; (80013ac <main+0x32c>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	809a      	strh	r2, [r3, #4]
	spi_cfg.frequency = 1*1000*1000;
 800112e:	4aa0      	ldr	r2, [pc, #640]	; (80013b0 <main+0x330>)
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	4897      	ldr	r0, [pc, #604]	; (8001390 <main+0x310>)
 8001134:	f00c ffd4 	bl	800e0e0 <z_impl_device_get_binding>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
 8001138:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
 800113c:	2105      	movs	r1, #5
 800113e:	489d      	ldr	r0, [pc, #628]	; (80013b4 <main+0x334>)
 8001140:	f7ff fd5a 	bl	8000bf8 <z_impl_gpio_pin_configure>
 8001144:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
 8001148:	2100      	movs	r1, #0
 800114a:	489a      	ldr	r0, [pc, #616]	; (80013b4 <main+0x334>)
 800114c:	f7ff fd54 	bl	8000bf8 <z_impl_gpio_pin_configure>
 8001150:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
 8001154:	2101      	movs	r1, #1
 8001156:	4897      	ldr	r0, [pc, #604]	; (80013b4 <main+0x334>)
 8001158:	f7ff fd4e 	bl	8000bf8 <z_impl_gpio_pin_configure>
		r = gpio_pin_configure(dev_porta, MY_DEVICE_CS_PIN, GPIO_OUTPUT_ACTIVE);
 800115c:	6828      	ldr	r0, [r5, #0]
 800115e:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
 8001162:	2104      	movs	r1, #4
 8001164:	f7ff fd48 	bl	8000bf8 <z_impl_gpio_pin_configure>
		__ASSERT(r == 0, "gpio_pin_configure failed (err %u)", r);
 8001168:	4604      	mov	r4, r0
 800116a:	b168      	cbz	r0, 8001188 <main+0x108>
 800116c:	4a8b      	ldr	r2, [pc, #556]	; (800139c <main+0x31c>)
 800116e:	4992      	ldr	r1, [pc, #584]	; (80013b8 <main+0x338>)
 8001170:	488b      	ldr	r0, [pc, #556]	; (80013a0 <main+0x320>)
 8001172:	23d0      	movs	r3, #208	; 0xd0
 8001174:	f011 f898 	bl	80122a8 <assert_print>
 8001178:	4890      	ldr	r0, [pc, #576]	; (80013bc <main+0x33c>)
 800117a:	4621      	mov	r1, r4
 800117c:	f011 f894 	bl	80122a8 <assert_print>
 8001180:	4886      	ldr	r0, [pc, #536]	; (800139c <main+0x31c>)
 8001182:	21d0      	movs	r1, #208	; 0xd0
 8001184:	f011 f889 	bl	801229a <assert_post_action>
	set(MCP356X_REG_CFG_0,
 8001188:	2123      	movs	r1, #35	; 0x23
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fec4 	bl	8000f18 <set>
	set(MCP356X_REG_CFG_1,
 8001190:	2100      	movs	r1, #0
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff fec0 	bl	8000f18 <set>
	set(MCP356X_REG_CFG_2,
 8001198:	218b      	movs	r1, #139	; 0x8b
 800119a:	2003      	movs	r0, #3
 800119c:	f7ff febc 	bl	8000f18 <set>
	set(MCP356X_REG_CFG_3,
 80011a0:	21c3      	movs	r1, #195	; 0xc3
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff feb8 	bl	8000f18 <set>
	set(MCP356X_REG_MUX,
 80011a8:	2109      	movs	r1, #9
 80011aa:	2006      	movs	r0, #6
 80011ac:	f7ff feb4 	bl	8000f18 <set>
	set24(MCP356X_REG_SCAN, 0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	2007      	movs	r0, #7
 80011b4:	f7ff feee 	bl	8000f94 <set24>
	set24(MCP356X_REG_OFFSET_CAL, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2009      	movs	r0, #9
 80011bc:	f7ff feea 	bl	8000f94 <set24>
	set24(MCP356X_REG_GAIN_CAL, 0x00800000);
 80011c0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fee5 	bl	8000f94 <set24>
	set24(MCP356X_RSV_REG_W_A, 0x00900F00);
 80011ca:	497d      	ldr	r1, [pc, #500]	; (80013c0 <main+0x340>)
 80011cc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80013ac <main+0x32c>
 80011d0:	200b      	movs	r0, #11
 80011d2:	f7ff fedf 	bl	8000f94 <set24>
    volt = ( float )( adc_val / ( float )( coef * gain ) ) * ( float ) VREF;
 80011d6:	f04f 5950 	mov.w	r9, #872415232	; 0x34000000
 80011da:	f04f 4a8a 	mov.w	sl, #1157627904	; 0x45000000
 80011de:	2100      	movs	r1, #0
 80011e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80011e4:	f00f fc48 	bl	8010a78 <z_impl_k_sleep>
	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 80011e8:	ab04      	add	r3, sp, #16
 80011ea:	9308      	str	r3, [sp, #32]
	struct spi_buf buf_rx[] = {{.buf = &rx,.len = sizeof(rx)}};
 80011ec:	aa06      	add	r2, sp, #24
	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 80011ee:	2305      	movs	r3, #5
	struct spi_buf buf_rx[] = {{.buf = &rx,.len = sizeof(rx)}};
 80011f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	struct spi_buf buf_tx[] = {{.buf = &tx,.len = sizeof(tx)}};
 80011f4:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
 80011f6:	ab08      	add	r3, sp, #32
 80011f8:	930c      	str	r3, [sp, #48]	; 0x30
 80011fa:	2401      	movs	r4, #1
	struct spi_buf_set rx_buf = {.buffers = buf_rx, .count = 1};
 80011fc:	ab0a      	add	r3, sp, #40	; 0x28
 80011fe:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    tx[4] = 0;
 8001202:	2100      	movs	r1, #0
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 8001204:	2343      	movs	r3, #67	; 0x43
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8001206:	6828      	ldr	r0, [r5, #0]
	tx[0] = MCP356X_COMMAND_BYTE(MCP356X_DEVICE_ADR, reg, MCP356X_CMD_INC_READ);
 8001208:	9304      	str	r3, [sp, #16]
	struct spi_buf_set tx_buf = {.buffers = buf_tx, .count = 1};
 800120a:	940d      	str	r4, [sp, #52]	; 0x34
    tx[4] = 0;
 800120c:	f88d 1014 	strb.w	r1, [sp, #20]
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 0);
 8001210:	f7ff fe18 	bl	8000e44 <gpio_pin_set.constprop.0>
	spi_transceive(dev_spi1, &spi_cfg, &tx_buf, &rx_buf);
 8001214:	9b03      	ldr	r3, [sp, #12]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	ae0c      	add	r6, sp, #48	; 0x30
 800121c:	4632      	mov	r2, r6
 800121e:	681f      	ldr	r7, [r3, #0]
 8001220:	4641      	mov	r1, r8
 8001222:	ab0e      	add	r3, sp, #56	; 0x38
 8001224:	47b8      	blx	r7
	gpio_pin_set(dev_porta, MY_DEVICE_CS_PIN, 1);
 8001226:	4621      	mov	r1, r4
 8001228:	6828      	ldr	r0, [r5, #0]
 800122a:	f7ff fe0b 	bl	8000e44 <gpio_pin_set.constprop.0>
	int32_t v = (rx[1] << 24) | (rx[2] << 16) | (rx[3] << 8) |  (rx[4] << 0);
 800122e:	f8dd 2019 	ldr.w	r2, [sp, #25]
	printk("GET32: %s: %i\n", MCP356X_REG_tostring(reg), v);
 8001232:	4964      	ldr	r1, [pc, #400]	; (80013c4 <main+0x344>)
 8001234:	4864      	ldr	r0, [pc, #400]	; (80013c8 <main+0x348>)
 8001236:	ba12      	rev	r2, r2
	v = v / 256;
 8001238:	2a00      	cmp	r2, #0
 800123a:	bfb8      	it	lt
 800123c:	32ff      	addlt	r2, #255	; 0xff
 800123e:	1214      	asrs	r4, r2, #8
	printk("GET32: %s: %i\n", MCP356X_REG_tostring(reg), v);
 8001240:	4622      	mov	r2, r4
 8001242:	f010 fe8d 	bl	8011f60 <printk>
    volt = ( float )( adc_val / ( float )( coef * gain ) ) * ( float ) VREF;
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff f8e8 	bl	800041c <__aeabi_i2f>
 800124c:	4649      	mov	r1, r9
 800124e:	f7fe ff77 	bl	8000140 <__aeabi_fmul>
 8001252:	4651      	mov	r1, sl
 8001254:	f7fe ff74 	bl	8000140 <__aeabi_fmul>
		v = adc9_volt_calc(v);
 8001258:	f7ff f934 	bl	80004c4 <__aeabi_f2iz>
 800125c:	4601      	mov	r1, r0
		printk("Voltage: %i\n", v);
 800125e:	485b      	ldr	r0, [pc, #364]	; (80013cc <main+0x34c>)
 8001260:	f010 fe7e 	bl	8011f60 <printk>
		if (simulate_temp) {
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <main+0x350>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d071      	beq.n	8001350 <main+0x2d0>
	if (!(i % SENSOR_1_UPDATE_IVAL)) {
 800126c:	4f59      	ldr	r7, [pc, #356]	; (80013d4 <main+0x354>)
 800126e:	783a      	ldrb	r2, [r7, #0]
 8001270:	2405      	movs	r4, #5
 8001272:	fbb2 f4f4 	udiv	r4, r2, r4
 8001276:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800127a:	1b14      	subs	r4, r2, r4
 800127c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001280:	d11f      	bne.n	80012c2 <main+0x242>
	bool notify = check_condition(sensor->condition,
 8001282:	f8df b164 	ldr.w	fp, [pc, #356]	; 80013e8 <main+0x368>
		update_temperature(NULL, &ess_svc.attrs[2], val, &sensor_1);
 8001286:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
	bool notify = check_condition(sensor->condition,
 800128a:	f9bb 1000 	ldrsh.w	r1, [fp]
 800128e:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8001292:	f89b 0006 	ldrb.w	r0, [fp, #6]
 8001296:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800129a:	f010 fd6e 	bl	8011d7a <check_condition>
	sensor->temp_value = value;
 800129e:	f8ab 2000 	strh.w	r2, [fp]
	if (notify) {
 80012a2:	b170      	cbz	r0, 80012c2 <main+0x242>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
 80012a4:	4621      	mov	r1, r4
 80012a6:	2218      	movs	r2, #24
 80012a8:	a80e      	add	r0, sp, #56	; 0x38
 80012aa:	f011 fdfa 	bl	8012ea2 <memset>

	params.attr = attr;
 80012ae:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <main+0x358>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
 80012b0:	a90e      	add	r1, sp, #56	; 0x38
	params.data = data;
 80012b2:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
	return bt_gatt_notify_cb(conn, &params);
 80012b6:	4620      	mov	r0, r4
	params.len = len;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	return bt_gatt_notify_cb(conn, &params);
 80012be:	f008 fc7f 	bl	8009bc0 <bt_gatt_notify_cb>
	if (!(i % SENSOR_2_UPDATE_IVAL)) {
 80012c2:	783a      	ldrb	r2, [r7, #0]
 80012c4:	230c      	movs	r3, #12
 80012c6:	fbb2 f4f3 	udiv	r4, r2, r3
 80012ca:	fb03 2414 	mls	r4, r3, r4, r2
 80012ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80012d2:	d11f      	bne.n	8001314 <main+0x294>
	bool notify = check_condition(sensor->condition,
 80012d4:	f8df b114 	ldr.w	fp, [pc, #276]	; 80013ec <main+0x36c>
		update_temperature(NULL, &ess_svc.attrs[9], val, &sensor_2);
 80012d8:	f502 62e1 	add.w	r2, r2, #1800	; 0x708
	bool notify = check_condition(sensor->condition,
 80012dc:	f9bb 1000 	ldrsh.w	r1, [fp]
 80012e0:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 80012e4:	f89b 0006 	ldrb.w	r0, [fp, #6]
 80012e8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80012ec:	f010 fd45 	bl	8011d7a <check_condition>
	sensor->temp_value = value;
 80012f0:	f8ab 2000 	strh.w	r2, [fp]
	if (notify) {
 80012f4:	b170      	cbz	r0, 8001314 <main+0x294>
	memset(&params, 0, sizeof(params));
 80012f6:	4621      	mov	r1, r4
 80012f8:	2218      	movs	r2, #24
 80012fa:	a80e      	add	r0, sp, #56	; 0x38
 80012fc:	f011 fdd1 	bl	8012ea2 <memset>
	params.attr = attr;
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <main+0x35c>)
	return bt_gatt_notify_cb(conn, &params);
 8001302:	a90e      	add	r1, sp, #56	; 0x38
	params.data = data;
 8001304:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
	return bt_gatt_notify_cb(conn, &params);
 8001308:	4620      	mov	r0, r4
	params.len = len;
 800130a:	2302      	movs	r3, #2
 800130c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	return bt_gatt_notify_cb(conn, &params);
 8001310:	f008 fc56 	bl	8009bc0 <bt_gatt_notify_cb>
	if (!(i % SENSOR_3_UPDATE_IVAL)) {
 8001314:	783b      	ldrb	r3, [r7, #0]
 8001316:	213c      	movs	r1, #60	; 0x3c
 8001318:	fbb3 f2f1 	udiv	r2, r3, r1
 800131c:	fb01 3212 	mls	r2, r1, r2, r3
 8001320:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001324:	d10a      	bne.n	800133c <main+0x2bc>
		sensor_3.humid_value = 6233 + (i % 13);
 8001326:	210d      	movs	r1, #13
 8001328:	fbb3 f2f1 	udiv	r2, r3, r1
 800132c:	fb01 3212 	mls	r2, r1, r2, r3
 8001330:	f641 0159 	movw	r1, #6233	; 0x1859
 8001334:	fa51 f282 	uxtab	r2, r1, r2
 8001338:	4929      	ldr	r1, [pc, #164]	; (80013e0 <main+0x360>)
 800133a:	800a      	strh	r2, [r1, #0]
 800133c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
	if (!(i % INT8_MAX)) {
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
		i = 0U;
 8001344:	bf9c      	itt	ls
 8001346:	2300      	movls	r3, #0
 8001348:	703b      	strbls	r3, [r7, #0]
	i++;
 800134a:	783b      	ldrb	r3, [r7, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	703b      	strb	r3, [r7, #0]
	.cancel = auth_cancel,
};

static void bas_notify(void)
{
	uint8_t battery_level = bt_bas_get_battery_level();
 8001350:	f001 fef2 	bl	8003138 <bt_bas_get_battery_level>

	battery_level--;
 8001354:	3801      	subs	r0, #1

	if (!battery_level) {
		battery_level = 100U;
 8001356:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	}

	bt_bas_set_battery_level(battery_level);
 800135a:	bf08      	it	eq
 800135c:	2064      	moveq	r0, #100	; 0x64
 800135e:	f001 fef1 	bl	8003144 <bt_bas_set_battery_level>
	{
 8001362:	e73c      	b.n	80011de <main+0x15e>
	printk("Advertising successfully started\n");
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <main+0x364>)
 8001366:	f010 fdfb 	bl	8011f60 <printk>
 800136a:	e6af      	b.n	80010cc <main+0x4c>
 800136c:	08016b8b 	.word	0x08016b8b
 8001370:	08015c44 	.word	0x08015c44
 8001374:	08016bab 	.word	0x08016bab
 8001378:	08015d54 	.word	0x08015d54
 800137c:	08016bc2 	.word	0x08016bc2
 8001380:	200001d8 	.word	0x200001d8
 8001384:	2000151c 	.word	0x2000151c
 8001388:	08016c0a 	.word	0x08016c0a
 800138c:	08015894 	.word	0x08015894
 8001390:	08016c14 	.word	0x08016c14
 8001394:	20001518 	.word	0x20001518
 8001398:	08016c36 	.word	0x08016c36
 800139c:	08016c1a 	.word	0x08016c1a
 80013a0:	08016836 	.word	0x08016836
 80013a4:	08016c3f 	.word	0x08016c3f
 80013a8:	08016c5b 	.word	0x08016c5b
 80013ac:	20001520 	.word	0x20001520
 80013b0:	000f4240 	.word	0x000f4240
 80013b4:	08015834 	.word	0x08015834
 80013b8:	080170f4 	.word	0x080170f4
 80013bc:	08016c65 	.word	0x08016c65
 80013c0:	00900f00 	.word	0x00900f00
 80013c4:	08016c8a 	.word	0x08016c8a
 80013c8:	08016ca3 	.word	0x08016ca3
 80013cc:	08016cb2 	.word	0x08016cb2
 80013d0:	20001889 	.word	0x20001889
 80013d4:	20001888 	.word	0x20001888
 80013d8:	08015d94 	.word	0x08015d94
 80013dc:	08015e20 	.word	0x08015e20
 80013e0:	20000228 	.word	0x20000228
 80013e4:	08016be8 	.word	0x08016be8
 80013e8:	200001f0 	.word	0x200001f0
 80013ec:	2000020c 	.word	0x2000020c

080013f0 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
 80013f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f4:	b08b      	sub	sp, #44	; 0x2c
 80013f6:	460f      	mov	r7, r1
 80013f8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(in_packaged != NULL);
 8001400:	4606      	mov	r6, r0
 8001402:	2800      	cmp	r0, #0
 8001404:	f040 8159 	bne.w	80016ba <cbprintf_package_copy+0x2ca>
 8001408:	49ae      	ldr	r1, [pc, #696]	; (80016c4 <cbprintf_package_copy+0x2d4>)
 800140a:	48af      	ldr	r0, [pc, #700]	; (80016c8 <cbprintf_package_copy+0x2d8>)
 800140c:	4aaf      	ldr	r2, [pc, #700]	; (80016cc <cbprintf_package_copy+0x2dc>)
 800140e:	f240 23d6 	movw	r3, #726	; 0x2d6
 8001412:	f010 ff49 	bl	80122a8 <assert_print>
 8001416:	48ad      	ldr	r0, [pc, #692]	; (80016cc <cbprintf_package_copy+0x2dc>)
 8001418:	f240 21d6 	movw	r1, #726	; 0x2d6
 800141c:	f010 ff3d 	bl	801229a <assert_post_action>
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
 8001420:	b1b7      	cbz	r7, 8001450 <cbprintf_package_copy+0x60>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
 8001422:	78b5      	ldrb	r5, [r6, #2]
 8001424:	9504      	str	r5, [sp, #16]
	ro_cpy = ros_nbr &&
 8001426:	bb8d      	cbnz	r5, 800148c <cbprintf_package_copy+0x9c>
 8001428:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
 800142a:	78f3      	ldrb	r3, [r6, #3]
 800142c:	9300      	str	r3, [sp, #0]
	rw_cpy = rws_nbr > 0 &&
 800142e:	b113      	cbz	r3, 8001436 <cbprintf_package_copy+0x46>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
 8001430:	f01b 0f02 	tst.w	fp, #2
 8001434:	d12d      	bne.n	8001492 <cbprintf_package_copy+0xa2>
 8001436:	f1ba 0f00 	cmp.w	sl, #0
 800143a:	d12a      	bne.n	8001492 <cbprintf_package_copy+0xa2>
		if (packaged) {
 800143c:	b124      	cbz	r4, 8001448 <cbprintf_package_copy+0x58>
			memcpy(packaged, in_packaged, in_len);
 800143e:	463a      	mov	r2, r7
 8001440:	4631      	mov	r1, r6
 8001442:	4620      	mov	r0, r4
 8001444:	f011 fd22 	bl	8012e8c <memcpy>
			}

			str_pos++;
		}

		return out_len;
 8001448:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
 800144a:	b00b      	add	sp, #44	; 0x2c
 800144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT_NO_MSG(packaged != NULL);
 8001450:	499f      	ldr	r1, [pc, #636]	; (80016d0 <cbprintf_package_copy+0x2e0>)
 8001452:	489d      	ldr	r0, [pc, #628]	; (80016c8 <cbprintf_package_copy+0x2d8>)
 8001454:	4a9d      	ldr	r2, [pc, #628]	; (80016cc <cbprintf_package_copy+0x2dc>)
 8001456:	23c2      	movs	r3, #194	; 0xc2
 8001458:	f010 ff26 	bl	80122a8 <assert_print>
 800145c:	489b      	ldr	r0, [pc, #620]	; (80016cc <cbprintf_package_copy+0x2dc>)
 800145e:	21c2      	movs	r1, #194	; 0xc2
 8001460:	f010 ff1b 	bl	801229a <assert_post_action>
	buf += ros_nbr;
 8001464:	7830      	ldrb	r0, [r6, #0]
 8001466:	78b5      	ldrb	r5, [r6, #2]
	s_nbr     = buf[1];
 8001468:	f896 9001 	ldrb.w	r9, [r6, #1]
	buf += ros_nbr;
 800146c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001470:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
 8001472:	f04f 0a00 	mov.w	sl, #0
 8001476:	45d1      	cmp	r9, sl
 8001478:	d9d3      	bls.n	8001422 <cbprintf_package_copy+0x32>
		buf++;
 800147a:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
 800147c:	4628      	mov	r0, r5
 800147e:	f011 fcd9 	bl	8012e34 <strlen>
 8001482:	3001      	adds	r0, #1
 8001484:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
 8001486:	f10a 0a01 	add.w	sl, sl, #1
 800148a:	e7f4      	b.n	8001476 <cbprintf_package_copy+0x86>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
 800148c:	f00b 0a01 	and.w	sl, fp, #1
 8001490:	e7cb      	b.n	800142a <cbprintf_package_copy+0x3a>
	args_size = buf[0] * sizeof(int);
 8001492:	f896 9000 	ldrb.w	r9, [r6]
 8001496:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800149a:	9302      	str	r3, [sp, #8]
	uint8_t *str_pos = &buf[args_size];
 800149c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d15b      	bne.n	800155c <cbprintf_package_copy+0x16c>
		if (ro_cpy) {
 80014a4:	f1ba 0f00 	cmp.w	sl, #0
 80014a8:	d032      	beq.n	8001510 <cbprintf_package_copy+0x120>
 80014aa:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
 80014ac:	454d      	cmp	r5, r9
 80014ae:	d11d      	bne.n	80014ec <cbprintf_package_copy+0xfc>
 80014b0:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
 80014b2:	9b00      	ldr	r3, [sp, #0]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 80014b4:	f8df c220 	ldr.w	ip, [pc, #544]	; 80016d8 <cbprintf_package_copy+0x2e8>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
 80014b8:	4986      	ldr	r1, [pc, #536]	; (80016d4 <cbprintf_package_copy+0x2e4>)
 80014ba:	444b      	add	r3, r9
		bool drop_ro_str_pos = !(flags &
 80014bc:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
 80014c0:	464d      	mov	r5, r9
 80014c2:	469a      	mov	sl, r3
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
 80014c4:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
 80014c8:	45aa      	cmp	sl, r5
 80014ca:	d0bd      	beq.n	8001448 <cbprintf_package_copy+0x58>
			const char *str = *(const char **)&buf32[*str_pos];
 80014cc:	f815 0b01 	ldrb.w	r0, [r5], #1
 80014d0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80014d4:	4560      	cmp	r0, ip
 80014d6:	d324      	bcc.n	8001522 <cbprintf_package_copy+0x132>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
 80014d8:	4288      	cmp	r0, r1
 80014da:	d222      	bcs.n	8001522 <cbprintf_package_copy+0x132>
 80014dc:	f01b 0f01 	tst.w	fp, #1
 80014e0:	d139      	bne.n	8001556 <cbprintf_package_copy+0x166>
			if (is_ro && drop_ro_str_pos) {
 80014e2:	f1b8 0f00 	cmp.w	r8, #0
 80014e6:	d1ef      	bne.n	80014c8 <cbprintf_package_copy+0xd8>
				out_len--;
 80014e8:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
 80014ea:	e7ed      	b.n	80014c8 <cbprintf_package_copy+0xd8>
				const char *str = *(const char **)&buf32[*str_pos];
 80014ec:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
 80014f0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80014f4:	f011 fc9e 	bl	8012e34 <strlen>
				if (strl && strl_cnt < strl_len) {
 80014f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
 80014fa:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 80014fc:	b133      	cbz	r3, 800150c <cbprintf_package_copy+0x11c>
 80014fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001500:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
 8001502:	bf3e      	ittt	cc
 8001504:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
 8001506:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
 800150a:	3401      	addcc	r4, #1
				out_len += len;
 800150c:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
 800150e:	e7cd      	b.n	80014ac <cbprintf_package_copy+0xbc>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
 8001510:	b12d      	cbz	r5, 800151e <cbprintf_package_copy+0x12e>
 8001512:	f01b 0404 	ands.w	r4, fp, #4
 8001516:	d0cc      	beq.n	80014b2 <cbprintf_package_copy+0xc2>
				str_pos += ros_nbr;
 8001518:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
 800151a:	4654      	mov	r4, sl
 800151c:	e7c9      	b.n	80014b2 <cbprintf_package_copy+0xc2>
 800151e:	462c      	mov	r4, r5
 8001520:	e7c7      	b.n	80014b2 <cbprintf_package_copy+0xc2>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
 8001522:	2a00      	cmp	r2, #0
 8001524:	d0d0      	beq.n	80014c8 <cbprintf_package_copy+0xd8>
 8001526:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	f011 fc82 	bl	8012e34 <strlen>
				if (strl && strl_cnt < strl_len) {
 8001530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001532:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016d8 <cbprintf_package_copy+0x2e8>
 8001536:	9a00      	ldr	r2, [sp, #0]
 8001538:	4966      	ldr	r1, [pc, #408]	; (80016d4 <cbprintf_package_copy+0x2e4>)
		return 1 + strlen(str);
 800153a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 800153c:	b133      	cbz	r3, 800154c <cbprintf_package_copy+0x15c>
 800153e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001540:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
 8001542:	bf3e      	ittt	cc
 8001544:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
 8001546:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
 800154a:	3401      	addcc	r4, #1
				out_len += len;
 800154c:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
 800154e:	f1b9 0f00 	cmp.w	r9, #0
 8001552:	d0b9      	beq.n	80014c8 <cbprintf_package_copy+0xd8>
 8001554:	e7c5      	b.n	80014e2 <cbprintf_package_copy+0xf2>
 8001556:	f04f 0901 	mov.w	r9, #1
 800155a:	e7e6      	b.n	800152a <cbprintf_package_copy+0x13a>
	memcpy(dst, in_packaged, args_size);
 800155c:	9a02      	ldr	r2, [sp, #8]
 800155e:	4631      	mov	r1, r6
 8001560:	4620      	mov	r0, r4
 8001562:	f011 fc93 	bl	8012e8c <memcpy>
	dst += args_size;
 8001566:	9b02      	ldr	r3, [sp, #8]
 8001568:	18e3      	adds	r3, r4, r3
 800156a:	9301      	str	r3, [sp, #4]
	if (ro_cpy) {
 800156c:	f1ba 0f00 	cmp.w	sl, #0
 8001570:	d00a      	beq.n	8001588 <cbprintf_package_copy+0x198>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
 8001572:	4649      	mov	r1, r9
 8001574:	462a      	mov	r2, r5
 8001576:	a806      	add	r0, sp, #24
 8001578:	f011 fc88 	bl	8012e8c <memcpy>
		dst_hdr[2] = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
 8001580:	44a9      	add	r9, r5
	dst += args_size;
 8001582:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001586:	e00d      	b.n	80015a4 <cbprintf_package_copy+0x1b4>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
 8001588:	b1bd      	cbz	r5, 80015ba <cbprintf_package_copy+0x1ca>
 800158a:	f01b 0f04 	tst.w	fp, #4
 800158e:	d014      	beq.n	80015ba <cbprintf_package_copy+0x1ca>
			memcpy(dst, str_pos, ros_nbr);
 8001590:	462a      	mov	r2, r5
 8001592:	4649      	mov	r1, r9
 8001594:	9801      	ldr	r0, [sp, #4]
 8001596:	f011 fc79 	bl	8012e8c <memcpy>
			dst += ros_nbr;
 800159a:	9b01      	ldr	r3, [sp, #4]
			str_pos += ros_nbr;
 800159c:	44a9      	add	r9, r5
			dst += ros_nbr;
 800159e:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
 80015a2:	4655      	mov	r5, sl
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
 80015a4:	f00b 0201 	and.w	r2, fp, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
 80015a8:	f00b 0e02 	and.w	lr, fp, #2
 80015ac:	f8df a128 	ldr.w	sl, [pc, #296]	; 80016d8 <cbprintf_package_copy+0x2e8>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
 80015b0:	9205      	str	r2, [sp, #20]
		scpy_cnt = 0;
 80015b2:	2300      	movs	r3, #0
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
 80015b4:	f00b 0b04 	and.w	fp, fp, #4
 80015b8:	e024      	b.n	8001604 <cbprintf_package_copy+0x214>
			dst_hdr[2] = 0;
 80015ba:	2500      	movs	r5, #0
 80015bc:	70a5      	strb	r5, [r4, #2]
 80015be:	e7e0      	b.n	8001582 <cbprintf_package_copy+0x192>
		const char *str = *(const char **)&buf32[*str_pos];
 80015c0:	f819 1003 	ldrb.w	r1, [r9, r3]
 80015c4:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80015c8:	4552      	cmp	r2, sl
 80015ca:	d302      	bcc.n	80015d2 <cbprintf_package_copy+0x1e2>
 80015cc:	4841      	ldr	r0, [pc, #260]	; (80016d4 <cbprintf_package_copy+0x2e4>)
 80015ce:	4282      	cmp	r2, r0
 80015d0:	d305      	bcc.n	80015de <cbprintf_package_copy+0x1ee>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
 80015d2:	f1be 0f00 	cmp.w	lr, #0
 80015d6:	d104      	bne.n	80015e2 <cbprintf_package_copy+0x1f2>
				*dst++ = *str_pos;
 80015d8:	f808 1b01 	strb.w	r1, [r8], #1
 80015dc:	e011      	b.n	8001602 <cbprintf_package_copy+0x212>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
 80015de:	9a05      	ldr	r2, [sp, #20]
 80015e0:	b13a      	cbz	r2, 80015f2 <cbprintf_package_copy+0x202>
				cpy_str_pos[scpy_cnt++] = *str_pos;
 80015e2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80015e6:	1c6a      	adds	r2, r5, #1
 80015e8:	4465      	add	r5, ip
 80015ea:	f805 1c10 	strb.w	r1, [r5, #-16]
 80015ee:	b2d5      	uxtb	r5, r2
 80015f0:	e007      	b.n	8001602 <cbprintf_package_copy+0x212>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
 80015f2:	f1bb 0f00 	cmp.w	fp, #0
 80015f6:	d004      	beq.n	8001602 <cbprintf_package_copy+0x212>
				*dst++ = *str_pos;
 80015f8:	f808 1b01 	strb.w	r1, [r8], #1
				dst_hdr[2]++;
 80015fc:	78a2      	ldrb	r2, [r4, #2]
 80015fe:	3201      	adds	r2, #1
 8001600:	70a2      	strb	r2, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
 8001602:	3301      	adds	r3, #1
 8001604:	9a00      	ldr	r2, [sp, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d8da      	bhi.n	80015c0 <cbprintf_package_copy+0x1d0>
	dst_hdr[1] += scpy_cnt;
 800160a:	7863      	ldrb	r3, [r4, #1]
 800160c:	442b      	add	r3, r5
 800160e:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	eba8 0b03 	sub.w	fp, r8, r3
 8001616:	78a3      	ldrb	r3, [r4, #2]
 8001618:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 800161c:	9b04      	ldr	r3, [sp, #16]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
 800161e:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
 8001622:	4413      	add	r3, r2
 8001624:	1aff      	subs	r7, r7, r3
 8001626:	9b02      	ldr	r3, [sp, #8]
 8001628:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	4640      	mov	r0, r8
 800162e:	463a      	mov	r2, r7
 8001630:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
 8001634:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
 8001636:	f011 fc29 	bl	8012e8c <memcpy>
	if (scpy_cnt == 0) {
 800163a:	eba8 0004 	sub.w	r0, r8, r4
 800163e:	2d00      	cmp	r5, #0
 8001640:	f43f af03 	beq.w	800144a <cbprintf_package_copy+0x5a>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
 8001644:	9b03      	ldr	r3, [sp, #12]
 8001646:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
 8001648:	42a5      	cmp	r5, r4
 800164a:	d302      	bcc.n	8001652 <cbprintf_package_copy+0x262>
		return -ENOSPC;
 800164c:	f06f 001b 	mvn.w	r0, #27
 8001650:	e6fb      	b.n	800144a <cbprintf_package_copy+0x5a>
	for (int i = 0; i < scpy_cnt; i++) {
 8001652:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
 8001656:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
 8001658:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
 800165a:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
 800165e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
 8001662:	b1c2      	cbz	r2, 8001696 <cbprintf_package_copy+0x2a6>
 8001664:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
 8001668:	46c2      	mov	sl, r8
		rem--;
 800166a:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
 800166e:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
 8001672:	b197      	cbz	r7, 800169a <cbprintf_package_copy+0x2aa>
		memcpy(dst, str, strl);
 8001674:	463a      	mov	r2, r7
 8001676:	4650      	mov	r0, sl
 8001678:	f011 fc08 	bl	8012e8c <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
 800167c:	f109 0901 	add.w	r9, r9, #1
 8001680:	454d      	cmp	r5, r9
		rem -= cpy_len;
 8001682:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
 8001686:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
 800168a:	dce4      	bgt.n	8001656 <cbprintf_package_copy+0x266>
	return len - rem;
 800168c:	9b03      	ldr	r3, [sp, #12]
 800168e:	441f      	add	r7, r3
 8001690:	eba7 000b 	sub.w	r0, r7, fp
 8001694:	e6d9      	b.n	800144a <cbprintf_package_copy+0x5a>
		uint16_t str_len = strl ? strl[i] : 0;
 8001696:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8001698:	e7e6      	b.n	8001668 <cbprintf_package_copy+0x278>
 800169a:	3901      	subs	r1, #1
	if (strl) {
 800169c:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
 800169e:	429c      	cmp	r4, r3
 80016a0:	d0d4      	beq.n	800164c <cbprintf_package_copy+0x25c>
		dst[i] = src[i];
 80016a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80016a6:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
 80016aa:	7808      	ldrb	r0, [r1, #0]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	b910      	cbnz	r0, 80016b6 <cbprintf_package_copy+0x2c6>
		if (cpy_len < 0) {
 80016b0:	1e1f      	subs	r7, r3, #0
 80016b2:	dae3      	bge.n	800167c <cbprintf_package_copy+0x28c>
 80016b4:	e7ca      	b.n	800164c <cbprintf_package_copy+0x25c>
 80016b6:	4613      	mov	r3, r2
 80016b8:	e7f1      	b.n	800169e <cbprintf_package_copy+0x2ae>
	in_len != 0 ? in_len : get_package_len(in_packaged);
 80016ba:	2900      	cmp	r1, #0
 80016bc:	f47f aeb1 	bne.w	8001422 <cbprintf_package_copy+0x32>
 80016c0:	e6d0      	b.n	8001464 <cbprintf_package_copy+0x74>
 80016c2:	bf00      	nop
 80016c4:	08016eec 	.word	0x08016eec
 80016c8:	08016836 	.word	0x08016836
 80016cc:	08016e57 	.word	0x08016e57
 80016d0:	08016eef 	.word	0x08016eef
 80016d4:	0801a218 	.word	0x0801a218
 80016d8:	080156fc 	.word	0x080156fc

080016dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80016dc:	680b      	ldr	r3, [r1, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80016e2:	4b01      	ldr	r3, [pc, #4]	; (80016e8 <char_out+0xc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4718      	bx	r3
 80016e8:	2000023c 	.word	0x2000023c

080016ec <__printk_hook_install>:
	_char_out = fn;
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <__printk_hook_install+0x8>)
 80016ee:	6018      	str	r0, [r3, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000023c 	.word	0x2000023c

080016f8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80016f8:	b507      	push	{r0, r1, r2, lr}
 80016fa:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80016fc:	2100      	movs	r1, #0
{
 80016fe:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8001700:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <vprintk+0x18>)
 8001704:	a901      	add	r1, sp, #4
 8001706:	f000 f97d 	bl	8001a04 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800170a:	b003      	add	sp, #12
 800170c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001710:	080016dd 	.word	0x080016dd

08001714 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8001714:	b530      	push	{r4, r5, lr}
 8001716:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8001718:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 800171c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 800171e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8001720:	a901      	add	r1, sp, #4
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8001724:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 8001726:	f000 f96d 	bl	8001a04 <cbvprintf>

	if (ctx.count < ctx.max) {
 800172a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800172e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8001730:	bfb8      	it	lt
 8001732:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8001734:	b005      	add	sp, #20
 8001736:	bd30      	pop	{r4, r5, pc}
 8001738:	08011f3b 	.word	0x08011f3b

0800173c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
 800173e:	460d      	mov	r5, r1
 8001740:	2900      	cmp	r1, #0
 8001742:	d039      	beq.n	80017b8 <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
 8001744:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8001746:	1f0c      	subs	r4, r1, #4
 8001748:	1ba4      	subs	r4, r4, r6
 800174a:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800174c:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8001750:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8001752:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
 8001754:	07db      	lsls	r3, r3, #31
 8001756:	d40d      	bmi.n	8001774 <sys_heap_free+0x38>
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <sys_heap_free+0x80>)
 800175a:	4919      	ldr	r1, [pc, #100]	; (80017c0 <sys_heap_free+0x84>)
 800175c:	4819      	ldr	r0, [pc, #100]	; (80017c4 <sys_heap_free+0x88>)
 800175e:	23a4      	movs	r3, #164	; 0xa4
 8001760:	f010 fda2 	bl	80122a8 <assert_print>
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <sys_heap_free+0x8c>)
 8001766:	4629      	mov	r1, r5
 8001768:	f010 fd9e 	bl	80122a8 <assert_print>
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <sys_heap_free+0x80>)
 800176e:	21a4      	movs	r1, #164	; 0xa4
 8001770:	f010 fd93 	bl	801229a <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
 8001774:	4639      	mov	r1, r7
 8001776:	4630      	mov	r0, r6
 8001778:	f010 fc16 	bl	8011fa8 <chunk_size>
 800177c:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
 800177e:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 8001782:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
 8001784:	4287      	cmp	r7, r0
 8001786:	d00d      	beq.n	80017a4 <sys_heap_free+0x68>
 8001788:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <sys_heap_free+0x80>)
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <sys_heap_free+0x90>)
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <sys_heap_free+0x88>)
 800178e:	23ac      	movs	r3, #172	; 0xac
 8001790:	f010 fd8a 	bl	80122a8 <assert_print>
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <sys_heap_free+0x94>)
 8001796:	4629      	mov	r1, r5
 8001798:	f010 fd86 	bl	80122a8 <assert_print>
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <sys_heap_free+0x80>)
 800179e:	21ac      	movs	r1, #172	; 0xac
 80017a0:	f010 fd7b 	bl	801229a <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80017a4:	8863      	ldrh	r3, [r4, #2]
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	8063      	strh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
 80017ac:	4639      	mov	r1, r7
 80017ae:	4630      	mov	r0, r6
}
 80017b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
 80017b4:	f010 bcb5 	b.w	8012122 <free_chunk>
}
 80017b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08016f07 	.word	0x08016f07
 80017c0:	08016f28 	.word	0x08016f28
 80017c4:	08016836 	.word	0x08016836
 80017c8:	08016f39 	.word	0x08016f39
 80017cc:	08016f71 	.word	0x08016f71
 80017d0:	08016f97 	.word	0x08016f97

080017d4 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 80017d4:	424b      	negs	r3, r1
{
 80017d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
 80017da:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
 80017de:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
 80017e2:	6806      	ldr	r6, [r0, #0]
{
 80017e4:	4614      	mov	r4, r2
	if (align != rew) {
 80017e6:	d01f      	beq.n	8001828 <sys_heap_aligned_alloc+0x54>
		return false;
 80017e8:	2f04      	cmp	r7, #4
 80017ea:	463d      	mov	r5, r7
 80017ec:	46b9      	mov	r9, r7
 80017ee:	bf28      	it	cs
 80017f0:	2504      	movcs	r5, #4
		align -= rew;
 80017f2:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
 80017f4:	f107 3aff 	add.w	sl, r7, #4294967295
 80017f8:	ea1a 0f07 	tst.w	sl, r7
 80017fc:	d00e      	beq.n	800181c <sys_heap_aligned_alloc+0x48>
 80017fe:	4933      	ldr	r1, [pc, #204]	; (80018cc <sys_heap_aligned_alloc+0xf8>)
 8001800:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <sys_heap_aligned_alloc+0xfc>)
 8001802:	4834      	ldr	r0, [pc, #208]	; (80018d4 <sys_heap_aligned_alloc+0x100>)
 8001804:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001808:	f010 fd4e 	bl	80122a8 <assert_print>
 800180c:	4832      	ldr	r0, [pc, #200]	; (80018d8 <sys_heap_aligned_alloc+0x104>)
 800180e:	f010 fd4b 	bl	80122a8 <assert_print>
 8001812:	482f      	ldr	r0, [pc, #188]	; (80018d0 <sys_heap_aligned_alloc+0xfc>)
 8001814:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001818:	f010 fd3f 	bl	801229a <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
 800181c:	b97c      	cbnz	r4, 800183e <sys_heap_aligned_alloc+0x6a>
		return NULL;
 800181e:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
 8001822:	4648      	mov	r0, r9
 8001824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
 8001828:	2904      	cmp	r1, #4
 800182a:	d804      	bhi.n	8001836 <sys_heap_aligned_alloc+0x62>
}
 800182c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
 8001830:	4611      	mov	r1, r2
 8001832:	f010 bca7 	b.w	8012184 <sys_heap_alloc>
		rew = 0;
 8001836:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
 800183a:	2504      	movs	r5, #4
 800183c:	e7da      	b.n	80017f4 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
 800183e:	68b3      	ldr	r3, [r6, #8]
 8001840:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 8001844:	d9eb      	bls.n	800181e <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8001846:	f104 010b 	add.w	r1, r4, #11
 800184a:	4439      	add	r1, r7
 800184c:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800184e:	08c9      	lsrs	r1, r1, #3
 8001850:	4630      	mov	r0, r6
 8001852:	f010 fbff 	bl	8012054 <alloc_chunk>
	if (c0 == 0) {
 8001856:	4680      	mov	r8, r0
 8001858:	2800      	cmp	r0, #0
 800185a:	d0e0      	beq.n	800181e <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 800185c:	f109 0504 	add.w	r5, r9, #4
 8001860:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 8001864:	4435      	add	r5, r6
 8001866:	4455      	add	r5, sl
 8001868:	427f      	negs	r7, r7
 800186a:	402f      	ands	r7, r5
 800186c:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8001870:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8001872:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8001876:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8001878:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800187a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 800187e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 8001880:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8001884:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 8001888:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 800188c:	d208      	bcs.n	80018a0 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
 800188e:	4601      	mov	r1, r0
 8001890:	463a      	mov	r2, r7
 8001892:	4630      	mov	r0, r6
 8001894:	f010 fc2b 	bl	80120ee <split_chunks>
		free_list_add(h, c0);
 8001898:	4641      	mov	r1, r8
 800189a:	4630      	mov	r0, r6
 800189c:	f010 fb89 	bl	8011fb2 <free_list_add>
	return c + chunk_size(h, c);
 80018a0:	4639      	mov	r1, r7
 80018a2:	4630      	mov	r0, r6
 80018a4:	f010 fb80 	bl	8011fa8 <chunk_size>
 80018a8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 80018aa:	4284      	cmp	r4, r0
 80018ac:	d207      	bcs.n	80018be <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
 80018ae:	4630      	mov	r0, r6
 80018b0:	4622      	mov	r2, r4
 80018b2:	f010 fc1c 	bl	80120ee <split_chunks>
		free_list_add(h, c_end);
 80018b6:	4621      	mov	r1, r4
 80018b8:	4630      	mov	r0, r6
 80018ba:	f010 fb7a 	bl	8011fb2 <free_list_add>
	void *cmem = &buf[c];
 80018be:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80018c2:	8873      	ldrh	r3, [r6, #2]
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	8073      	strh	r3, [r6, #2]
 80018ca:	e7aa      	b.n	8001822 <sys_heap_aligned_alloc+0x4e>
 80018cc:	08016fd3 	.word	0x08016fd3
 80018d0:	08016f07 	.word	0x08016f07
 80018d4:	08016836 	.word	0x08016836
 80018d8:	08016fee 	.word	0x08016fee

080018dc <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 80018dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e4:	4606      	mov	r6, r0
 80018e6:	460d      	mov	r5, r1
 80018e8:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
 80018ea:	d369      	bcc.n	80019c0 <sys_heap_init+0xe4>
 80018ec:	493d      	ldr	r1, [pc, #244]	; (80019e4 <sys_heap_init+0x108>)
 80018ee:	4a3e      	ldr	r2, [pc, #248]	; (80019e8 <sys_heap_init+0x10c>)
 80018f0:	483e      	ldr	r0, [pc, #248]	; (80019ec <sys_heap_init+0x110>)
 80018f2:	f240 13db 	movw	r3, #475	; 0x1db
 80018f6:	f010 fcd7 	bl	80122a8 <assert_print>
 80018fa:	483d      	ldr	r0, [pc, #244]	; (80019f0 <sys_heap_init+0x114>)
 80018fc:	f010 fcd4 	bl	80122a8 <assert_print>
 8001900:	f240 11db 	movw	r1, #475	; 0x1db
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
 8001904:	4838      	ldr	r0, [pc, #224]	; (80019e8 <sys_heap_init+0x10c>)
 8001906:	f010 fcc8 	bl	801229a <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
 800190a:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800190c:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800190e:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8001910:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8001914:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8001918:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 800191a:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800191c:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
 8001920:	d80e      	bhi.n	8001940 <sys_heap_init+0x64>
 8001922:	4934      	ldr	r1, [pc, #208]	; (80019f4 <sys_heap_init+0x118>)
 8001924:	4a30      	ldr	r2, [pc, #192]	; (80019e8 <sys_heap_init+0x10c>)
 8001926:	4831      	ldr	r0, [pc, #196]	; (80019ec <sys_heap_init+0x110>)
 8001928:	f240 13eb 	movw	r3, #491	; 0x1eb
 800192c:	f010 fcbc 	bl	80122a8 <assert_print>
 8001930:	4831      	ldr	r0, [pc, #196]	; (80019f8 <sys_heap_init+0x11c>)
 8001932:	f010 fcb9 	bl	80122a8 <assert_print>
 8001936:	482c      	ldr	r0, [pc, #176]	; (80019e8 <sys_heap_init+0x10c>)
 8001938:	f240 11eb 	movw	r1, #491	; 0x1eb
 800193c:	f010 fcad 	bl	801229a <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8001940:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8001944:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
 8001948:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
 800194c:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800194e:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	08f6      	lsrs	r6, r6, #3
 8001956:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 8001958:	1c73      	adds	r3, r6, #1
 800195a:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
 800195c:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
 800195e:	d90e      	bls.n	800197e <sys_heap_init+0xa2>
 8001960:	4926      	ldr	r1, [pc, #152]	; (80019fc <sys_heap_init+0x120>)
 8001962:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <sys_heap_init+0x10c>)
 8001964:	4821      	ldr	r0, [pc, #132]	; (80019ec <sys_heap_init+0x110>)
 8001966:	f240 13fb 	movw	r3, #507	; 0x1fb
 800196a:	f010 fc9d 	bl	80122a8 <assert_print>
 800196e:	4822      	ldr	r0, [pc, #136]	; (80019f8 <sys_heap_init+0x11c>)
 8001970:	f010 fc9a 	bl	80122a8 <assert_print>
 8001974:	481c      	ldr	r0, [pc, #112]	; (80019e8 <sys_heap_init+0x10c>)
 8001976:	f240 11fb 	movw	r1, #507	; 0x1fb
 800197a:	f010 fc8e 	bl	801229a <assert_post_action>
 800197e:	f104 0210 	add.w	r2, r4, #16
 8001982:	44a0      	add	r8, r4
 8001984:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
 8001986:	4590      	cmp	r8, r2
 8001988:	d129      	bne.n	80019de <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800198a:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
 8001992:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8001996:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8001998:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
 800199a:	8023      	strh	r3, [r4, #0]
 800199c:	8048      	strh	r0, [r1, #2]
 800199e:	1961      	adds	r1, r4, r5
 80019a0:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
 80019a4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
 80019a8:	804b      	strh	r3, [r1, #2]
 80019aa:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 80019b4:	4631      	mov	r1, r6
 80019b6:	4620      	mov	r0, r4
}
 80019b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
 80019bc:	f010 baf9 	b.w	8011fb2 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
 80019c0:	2a04      	cmp	r2, #4
 80019c2:	d8a2      	bhi.n	800190a <sys_heap_init+0x2e>
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <sys_heap_init+0x124>)
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <sys_heap_init+0x10c>)
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <sys_heap_init+0x110>)
 80019ca:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80019ce:	f010 fc6b 	bl	80122a8 <assert_print>
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <sys_heap_init+0x11c>)
 80019d4:	f010 fc68 	bl	80122a8 <assert_print>
 80019d8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80019dc:	e792      	b.n	8001904 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
 80019de:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 80019e2:	e7d0      	b.n	8001986 <sys_heap_init+0xaa>
 80019e4:	0801700b 	.word	0x0801700b
 80019e8:	08016f07 	.word	0x08016f07
 80019ec:	08016836 	.word	0x08016836
 80019f0:	08017021 	.word	0x08017021
 80019f4:	08017072 	.word	0x08017072
 80019f8:	08017059 	.word	0x08017059
 80019fc:	0801709b 	.word	0x0801709b
 8001a00:	08017038 	.word	0x08017038

08001a04 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a08:	b091      	sub	sp, #68	; 0x44
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	9002      	str	r0, [sp, #8]
 8001a0e:	4692      	mov	sl, r2
 8001a10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8001a12:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8001a14:	f89a 0000 	ldrb.w	r0, [sl]
 8001a18:	b908      	cbnz	r0, 8001a1e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	e35e      	b.n	80020dc <cbvprintf+0x6d8>
		if (*fp != '%') {
 8001a1e:	2825      	cmp	r0, #37	; 0x25
 8001a20:	f10a 0701 	add.w	r7, sl, #1
 8001a24:	d007      	beq.n	8001a36 <cbvprintf+0x32>
			OUTC('%');
 8001a26:	9b02      	ldr	r3, [sp, #8]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	4798      	blx	r3
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	f2c0 8355 	blt.w	80020dc <cbvprintf+0x6d8>
 8001a32:	3501      	adds	r5, #1
			break;
 8001a34:	e210      	b.n	8001e58 <cbvprintf+0x454>
		} state = {
 8001a36:	2218      	movs	r2, #24
 8001a38:	2100      	movs	r1, #0
 8001a3a:	a80a      	add	r0, sp, #40	; 0x28
 8001a3c:	f011 fa31 	bl	8012ea2 <memset>
	if (*sp == '%') {
 8001a40:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001a44:	2b25      	cmp	r3, #37	; 0x25
 8001a46:	d078      	beq.n	8001b3a <cbvprintf+0x136>
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4694      	mov	ip, r2
 8001a4c:	4616      	mov	r6, r2
 8001a4e:	4696      	mov	lr, r2
 8001a50:	4610      	mov	r0, r2
 8001a52:	4639      	mov	r1, r7
		switch (*sp) {
 8001a54:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001a58:	2b2b      	cmp	r3, #43	; 0x2b
 8001a5a:	f000 809d 	beq.w	8001b98 <cbvprintf+0x194>
 8001a5e:	f200 8094 	bhi.w	8001b8a <cbvprintf+0x186>
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	f000 809b 	beq.w	8001b9e <cbvprintf+0x19a>
 8001a68:	2b23      	cmp	r3, #35	; 0x23
 8001a6a:	f000 809a 	beq.w	8001ba2 <cbvprintf+0x19e>
 8001a6e:	b128      	cbz	r0, 8001a7c <cbvprintf+0x78>
 8001a70:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8001a74:	f040 0004 	orr.w	r0, r0, #4
 8001a78:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8001a7c:	f1be 0f00 	cmp.w	lr, #0
 8001a80:	d005      	beq.n	8001a8e <cbvprintf+0x8a>
 8001a82:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8001a86:	f040 0008 	orr.w	r0, r0, #8
 8001a8a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8001a8e:	b12e      	cbz	r6, 8001a9c <cbvprintf+0x98>
 8001a90:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8001a94:	f040 0010 	orr.w	r0, r0, #16
 8001a98:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8001a9c:	f1bc 0f00 	cmp.w	ip, #0
 8001aa0:	d005      	beq.n	8001aae <cbvprintf+0xaa>
 8001aa2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8001aa6:	f040 0020 	orr.w	r0, r0, #32
 8001aaa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8001aae:	b12a      	cbz	r2, 8001abc <cbvprintf+0xb8>
 8001ab0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8001abc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001ac0:	f002 0044 	and.w	r0, r2, #68	; 0x44
 8001ac4:	2844      	cmp	r0, #68	; 0x44
 8001ac6:	d103      	bne.n	8001ad0 <cbvprintf+0xcc>
		conv->flag_zero = false;
 8001ac8:	f36f 1286 	bfc	r2, #6, #1
 8001acc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 8001ad0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8001ad4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 8001ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ada:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8001ade:	d17b      	bne.n	8001bd8 <cbvprintf+0x1d4>
		conv->width_star = true;
 8001ae0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	1c4b      	adds	r3, r1, #1
 8001aea:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	2a2e      	cmp	r2, #46	; 0x2e
 8001af2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8001af6:	bf0c      	ite	eq
 8001af8:	2101      	moveq	r1, #1
 8001afa:	2100      	movne	r1, #0
 8001afc:	f361 0241 	bfi	r2, r1, #1, #1
 8001b00:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8001b04:	d174      	bne.n	8001bf0 <cbvprintf+0x1ec>
	if (*sp == '*') {
 8001b06:	785a      	ldrb	r2, [r3, #1]
 8001b08:	2a2a      	cmp	r2, #42	; 0x2a
 8001b0a:	d06a      	beq.n	8001be2 <cbvprintf+0x1de>
 8001b0c:	3301      	adds	r3, #1
	size_t val = 0;
 8001b0e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8001b10:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8001b12:	4618      	mov	r0, r3
 8001b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b18:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001b1c:	2f09      	cmp	r7, #9
 8001b1e:	f240 808e 	bls.w	8001c3e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 8001b22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 8001b26:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8001b28:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8001b2c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 8001b30:	f361 0241 	bfi	r2, r1, #1, #1
 8001b34:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8001b38:	e05a      	b.n	8001bf0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
 8001b3a:	f10a 0702 	add.w	r7, sl, #2
 8001b3e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 8001b42:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001b46:	07d9      	lsls	r1, r3, #31
 8001b48:	f140 8149 	bpl.w	8001dde <cbvprintf+0x3da>
			width = va_arg(ap, int);
 8001b4c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 8001b50:	f1b9 0f00 	cmp.w	r9, #0
 8001b54:	da07      	bge.n	8001b66 <cbvprintf+0x162>
				conv->flag_dash = true;
 8001b56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001b5a:	f042 0204 	orr.w	r2, r2, #4
 8001b5e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 8001b62:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
 8001b66:	075a      	lsls	r2, r3, #29
 8001b68:	f140 8142 	bpl.w	8001df0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
 8001b6c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8001b70:	f1b8 0f00 	cmp.w	r8, #0
 8001b74:	f280 8141 	bge.w	8001dfa <cbvprintf+0x3f6>
				conv->prec_present = false;
 8001b78:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001b7c:	f36f 0341 	bfc	r3, #1, #1
 8001b80:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8001b84:	f04f 38ff 	mov.w	r8, #4294967295
 8001b88:	e137      	b.n	8001dfa <cbvprintf+0x3f6>
		switch (*sp) {
 8001b8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b8c:	d00c      	beq.n	8001ba8 <cbvprintf+0x1a4>
 8001b8e:	2b30      	cmp	r3, #48	; 0x30
 8001b90:	f47f af6d 	bne.w	8001a6e <cbvprintf+0x6a>
			conv->flag_zero = true;
 8001b94:	2201      	movs	r2, #1
	} while (loop);
 8001b96:	e75c      	b.n	8001a52 <cbvprintf+0x4e>
			conv->flag_plus = true;
 8001b98:	f04f 0e01 	mov.w	lr, #1
 8001b9c:	e759      	b.n	8001a52 <cbvprintf+0x4e>
			conv->flag_space = true;
 8001b9e:	2601      	movs	r6, #1
 8001ba0:	e757      	b.n	8001a52 <cbvprintf+0x4e>
			conv->flag_hash = true;
 8001ba2:	f04f 0c01 	mov.w	ip, #1
 8001ba6:	e754      	b.n	8001a52 <cbvprintf+0x4e>
		switch (*sp) {
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e752      	b.n	8001a52 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
 8001bac:	fb0c 0202 	mla	r2, ip, r2, r0
 8001bb0:	3a30      	subs	r2, #48	; 0x30
 8001bb2:	4633      	mov	r3, r6
 8001bb4:	461e      	mov	r6, r3
 8001bb6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001bba:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001bbe:	2f09      	cmp	r7, #9
 8001bc0:	d9f4      	bls.n	8001bac <cbvprintf+0x1a8>
	if (sp != wp) {
 8001bc2:	4299      	cmp	r1, r3
 8001bc4:	d093      	beq.n	8001aee <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 8001bc6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 8001bca:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 8001bcc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8001bce:	f362 0141 	bfi	r1, r2, #1, #1
 8001bd2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001bd6:	e78a      	b.n	8001aee <cbvprintf+0xea>
 8001bd8:	460b      	mov	r3, r1
	size_t val = 0;
 8001bda:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8001bdc:	f04f 0c0a 	mov.w	ip, #10
 8001be0:	e7e8      	b.n	8001bb4 <cbvprintf+0x1b0>
		conv->prec_star = true;
 8001be2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8001be6:	f042 0204 	orr.w	r2, r2, #4
 8001bea:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 8001bee:	3302      	adds	r3, #2
	switch (*sp) {
 8001bf0:	461f      	mov	r7, r3
 8001bf2:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001bf6:	2a6c      	cmp	r2, #108	; 0x6c
 8001bf8:	d041      	beq.n	8001c7e <cbvprintf+0x27a>
 8001bfa:	d825      	bhi.n	8001c48 <cbvprintf+0x244>
 8001bfc:	2a68      	cmp	r2, #104	; 0x68
 8001bfe:	d02b      	beq.n	8001c58 <cbvprintf+0x254>
 8001c00:	2a6a      	cmp	r2, #106	; 0x6a
 8001c02:	d046      	beq.n	8001c92 <cbvprintf+0x28e>
 8001c04:	2a4c      	cmp	r2, #76	; 0x4c
 8001c06:	d04c      	beq.n	8001ca2 <cbvprintf+0x29e>
 8001c08:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 8001c0a:	f817 2b01 	ldrb.w	r2, [r7], #1
 8001c0e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001c12:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 8001c16:	2a78      	cmp	r2, #120	; 0x78
 8001c18:	f200 80d9 	bhi.w	8001dce <cbvprintf+0x3ca>
 8001c1c:	2a57      	cmp	r2, #87	; 0x57
 8001c1e:	d84d      	bhi.n	8001cbc <cbvprintf+0x2b8>
 8001c20:	2a41      	cmp	r2, #65	; 0x41
 8001c22:	d003      	beq.n	8001c2c <cbvprintf+0x228>
 8001c24:	3a45      	subs	r2, #69	; 0x45
 8001c26:	2a02      	cmp	r2, #2
 8001c28:	f200 80d1 	bhi.w	8001dce <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8001c2c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001c30:	2204      	movs	r2, #4
 8001c32:	f362 0302 	bfi	r3, r2, #0, #3
 8001c36:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 8001c3a:	2301      	movs	r3, #1
			break;
 8001c3c:	e09e      	b.n	8001d7c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
 8001c3e:	fb06 2101 	mla	r1, r6, r1, r2
 8001c42:	3930      	subs	r1, #48	; 0x30
 8001c44:	4603      	mov	r3, r0
 8001c46:	e764      	b.n	8001b12 <cbvprintf+0x10e>
	switch (*sp) {
 8001c48:	2a74      	cmp	r2, #116	; 0x74
 8001c4a:	d026      	beq.n	8001c9a <cbvprintf+0x296>
 8001c4c:	2a7a      	cmp	r2, #122	; 0x7a
 8001c4e:	d1db      	bne.n	8001c08 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
 8001c50:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001c54:	2206      	movs	r2, #6
 8001c56:	e00d      	b.n	8001c74 <cbvprintf+0x270>
		if (*++sp == 'h') {
 8001c58:	785a      	ldrb	r2, [r3, #1]
 8001c5a:	2a68      	cmp	r2, #104	; 0x68
 8001c5c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8001c60:	d106      	bne.n	8001c70 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
 8001c62:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8001c64:	f361 02c6 	bfi	r2, r1, #3, #4
 8001c68:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8001c6c:	1c9f      	adds	r7, r3, #2
 8001c6e:	e7cc      	b.n	8001c0a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
 8001c70:	4613      	mov	r3, r2
 8001c72:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8001c74:	f362 03c6 	bfi	r3, r2, #3, #4
 8001c78:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8001c7c:	e7c5      	b.n	8001c0a <cbvprintf+0x206>
		if (*++sp == 'l') {
 8001c7e:	785a      	ldrb	r2, [r3, #1]
 8001c80:	2a6c      	cmp	r2, #108	; 0x6c
 8001c82:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8001c86:	d101      	bne.n	8001c8c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
 8001c88:	2104      	movs	r1, #4
 8001c8a:	e7eb      	b.n	8001c64 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	2203      	movs	r2, #3
 8001c90:	e7f0      	b.n	8001c74 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
 8001c92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001c96:	2205      	movs	r2, #5
 8001c98:	e7ec      	b.n	8001c74 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
 8001c9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	e7e8      	b.n	8001c74 <cbvprintf+0x270>
		conv->unsupported = true;
 8001ca2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8001ca6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001caa:	f023 0302 	bic.w	r3, r3, #2
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 8001cba:	e7a6      	b.n	8001c0a <cbvprintf+0x206>
 8001cbc:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8001cc0:	2920      	cmp	r1, #32
 8001cc2:	f200 8084 	bhi.w	8001dce <cbvprintf+0x3ca>
 8001cc6:	a001      	add	r0, pc, #4	; (adr r0, 8001ccc <cbvprintf+0x2c8>)
 8001cc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001ccc:	08001d91 	.word	0x08001d91
 8001cd0:	08001dcf 	.word	0x08001dcf
 8001cd4:	08001dcf 	.word	0x08001dcf
 8001cd8:	08001dcf 	.word	0x08001dcf
 8001cdc:	08001dcf 	.word	0x08001dcf
 8001ce0:	08001dcf 	.word	0x08001dcf
 8001ce4:	08001dcf 	.word	0x08001dcf
 8001ce8:	08001dcf 	.word	0x08001dcf
 8001cec:	08001dcf 	.word	0x08001dcf
 8001cf0:	08001c2d 	.word	0x08001c2d
 8001cf4:	08001dcf 	.word	0x08001dcf
 8001cf8:	08001d91 	.word	0x08001d91
 8001cfc:	08001d51 	.word	0x08001d51
 8001d00:	08001c2d 	.word	0x08001c2d
 8001d04:	08001c2d 	.word	0x08001c2d
 8001d08:	08001c2d 	.word	0x08001c2d
 8001d0c:	08001dcf 	.word	0x08001dcf
 8001d10:	08001d51 	.word	0x08001d51
 8001d14:	08001dcf 	.word	0x08001dcf
 8001d18:	08001dcf 	.word	0x08001dcf
 8001d1c:	08001dcf 	.word	0x08001dcf
 8001d20:	08001dcf 	.word	0x08001dcf
 8001d24:	08001d99 	.word	0x08001d99
 8001d28:	08001d91 	.word	0x08001d91
 8001d2c:	08001db5 	.word	0x08001db5
 8001d30:	08001dcf 	.word	0x08001dcf
 8001d34:	08001dcf 	.word	0x08001dcf
 8001d38:	08001db5 	.word	0x08001db5
 8001d3c:	08001dcf 	.word	0x08001dcf
 8001d40:	08001d91 	.word	0x08001d91
 8001d44:	08001dcf 	.word	0x08001dcf
 8001d48:	08001dcf 	.word	0x08001dcf
 8001d4c:	08001d91 	.word	0x08001d91
		conv->specifier_cat = SPECIFIER_SINT;
 8001d50:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001d54:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001d56:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8001d5a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8001d60:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8001d64:	bf02      	ittt	eq
 8001d66:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8001d6a:	f041 0101 	orreq.w	r1, r1, #1
 8001d6e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 8001d72:	2a63      	cmp	r2, #99	; 0x63
 8001d74:	d131      	bne.n	8001dda <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001d76:	3b00      	subs	r3, #0
 8001d78:	bf18      	it	ne
 8001d7a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8001d7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001d80:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8001d84:	430b      	orrs	r3, r1
 8001d86:	f363 0241 	bfi	r2, r3, #1, #1
 8001d8a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8001d8e:	e6d8      	b.n	8001b42 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8001d90:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001d94:	2002      	movs	r0, #2
 8001d96:	e7de      	b.n	8001d56 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
 8001d98:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001d9c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001da0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8001da4:	2103      	movs	r1, #3
 8001da6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001daa:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8001dac:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001db0:	4143      	adcs	r3, r0
 8001db2:	e7e3      	b.n	8001d7c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8001db4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8001db8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8001dba:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8001dbe:	f361 0202 	bfi	r2, r1, #0, #3
 8001dc2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	e7d6      	b.n	8001d7c <cbvprintf+0x378>
		conv->invalid = true;
 8001dce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e7ce      	b.n	8001d7c <cbvprintf+0x378>
		} else if (conv->width_present) {
 8001dde:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 8001de2:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001de4:	bfb4      	ite	lt
 8001de6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8001dea:	f04f 39ff 	movge.w	r9, #4294967295
 8001dee:	e6ba      	b.n	8001b66 <cbvprintf+0x162>
		} else if (conv->prec_present) {
 8001df0:	079b      	lsls	r3, r3, #30
 8001df2:	f57f aec7 	bpl.w	8001b84 <cbvprintf+0x180>
			precision = conv->prec_value;
 8001df6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8001dfa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8001dfe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8001e00:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8001e04:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8001e08:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8001e0c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8001e0e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8001e12:	d136      	bne.n	8001e82 <cbvprintf+0x47e>
			switch (length_mod) {
 8001e14:	1ed3      	subs	r3, r2, #3
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d820      	bhi.n	8001e5c <cbvprintf+0x458>
 8001e1a:	e8df f003 	tbb	[pc, r3]
 8001e1e:	0703      	.short	0x0703
 8001e20:	1f07      	.short	0x1f07
 8001e22:	1f          	.byte	0x1f
 8001e23:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8001e24:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
 8001e28:	17c1      	asrs	r1, r0, #31
 8001e2a:	e004      	b.n	8001e36 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
 8001e2c:	3407      	adds	r4, #7
 8001e2e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8001e32:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
 8001e36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8001e3a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001e3e:	f013 0603 	ands.w	r6, r3, #3
 8001e42:	d054      	beq.n	8001eee <cbvprintf+0x4ea>
			OUTS(sp, fp);
 8001e44:	9802      	ldr	r0, [sp, #8]
 8001e46:	463b      	mov	r3, r7
 8001e48:	4652      	mov	r2, sl
 8001e4a:	4659      	mov	r1, fp
 8001e4c:	f010 fa0f 	bl	801226e <outs>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	f2c0 8143 	blt.w	80020dc <cbvprintf+0x6d8>
 8001e56:	4405      	add	r5, r0
			continue;
 8001e58:	46ba      	mov	sl, r7
 8001e5a:	e5db      	b.n	8001a14 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001e5c:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001e60:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001e62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8001e6a:	d105      	bne.n	8001e78 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
 8001e6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8001e70:	930a      	str	r3, [sp, #40]	; 0x28
 8001e72:	2300      	movs	r3, #0
 8001e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e76:	e7e0      	b.n	8001e3a <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
 8001e78:	2a02      	cmp	r2, #2
 8001e7a:	d1de      	bne.n	8001e3a <cbvprintf+0x436>
				value->sint = (short)value->sint;
 8001e7c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8001e80:	e7d2      	b.n	8001e28 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d123      	bne.n	8001ece <cbvprintf+0x4ca>
			switch (length_mod) {
 8001e86:	1ed3      	subs	r3, r2, #3
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d813      	bhi.n	8001eb4 <cbvprintf+0x4b0>
 8001e8c:	e8df f003 	tbb	[pc, r3]
 8001e90:	120a0a03 	.word	0x120a0a03
 8001e94:	12          	.byte	0x12
 8001e95:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	900a      	str	r0, [sp, #40]	; 0x28
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	1d23      	adds	r3, r4, #4
 8001e9e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8001ea0:	461c      	mov	r4, r3
 8001ea2:	e7ca      	b.n	8001e3a <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
 8001ea4:	3407      	adds	r4, #7
 8001ea6:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
 8001eaa:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8001eae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
 8001eb2:	e7f5      	b.n	8001ea0 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
 8001eb4:	f854 3b04 	ldr.w	r3, [r4], #4
 8001eb8:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8001eba:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8001ec2:	d0d3      	beq.n	8001e6c <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
 8001ec4:	2a02      	cmp	r2, #2
 8001ec6:	d1b8      	bne.n	8001e3a <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
 8001ec8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8001ecc:	e7d0      	b.n	8001e70 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d107      	bne.n	8001ee2 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
 8001ed2:	3407      	adds	r4, #7
 8001ed4:	f024 0407 	bic.w	r4, r4, #7
 8001ed8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
 8001edc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001ee0:	e7ab      	b.n	8001e3a <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8001ee2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8001ee4:	bf04      	itt	eq
 8001ee6:	f854 3b04 	ldreq.w	r3, [r4], #4
 8001eea:	930a      	streq	r3, [sp, #40]	; 0x28
 8001eec:	e7a5      	b.n	8001e3a <cbvprintf+0x436>
		switch (conv->specifier) {
 8001eee:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8001ef2:	2878      	cmp	r0, #120	; 0x78
 8001ef4:	d8b0      	bhi.n	8001e58 <cbvprintf+0x454>
 8001ef6:	2862      	cmp	r0, #98	; 0x62
 8001ef8:	d822      	bhi.n	8001f40 <cbvprintf+0x53c>
 8001efa:	2825      	cmp	r0, #37	; 0x25
 8001efc:	f43f ad93 	beq.w	8001a26 <cbvprintf+0x22>
 8001f00:	2858      	cmp	r0, #88	; 0x58
 8001f02:	d1a9      	bne.n	8001e58 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8001f04:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001f0e:	ab04      	add	r3, sp, #16
 8001f10:	aa0c      	add	r2, sp, #48	; 0x30
 8001f12:	f010 f961 	bl	80121d8 <encode_uint>
 8001f16:	4682      	mov	sl, r0
			if (precision >= 0) {
 8001f18:	f1b8 0f00 	cmp.w	r8, #0
 8001f1c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8001f20:	db0c      	blt.n	8001f3c <cbvprintf+0x538>
				conv->flag_zero = false;
 8001f22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8001f26:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8001f2a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8001f2e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8001f30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8001f34:	d902      	bls.n	8001f3c <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
 8001f36:	eba8 0303 	sub.w	r3, r8, r3
 8001f3a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	e03d      	b.n	8001fbc <cbvprintf+0x5b8>
 8001f40:	3863      	subs	r0, #99	; 0x63
 8001f42:	2815      	cmp	r0, #21
 8001f44:	d888      	bhi.n	8001e58 <cbvprintf+0x454>
 8001f46:	a101      	add	r1, pc, #4	; (adr r1, 8001f4c <cbvprintf+0x548>)
 8001f48:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001f4c:	08001fcd 	.word	0x08001fcd
 8001f50:	08002031 	.word	0x08002031
 8001f54:	08001e59 	.word	0x08001e59
 8001f58:	08001e59 	.word	0x08001e59
 8001f5c:	08001e59 	.word	0x08001e59
 8001f60:	08001e59 	.word	0x08001e59
 8001f64:	08002031 	.word	0x08002031
 8001f68:	08001e59 	.word	0x08001e59
 8001f6c:	08001e59 	.word	0x08001e59
 8001f70:	08001e59 	.word	0x08001e59
 8001f74:	08001e59 	.word	0x08001e59
 8001f78:	0800208f 	.word	0x0800208f
 8001f7c:	0800205d 	.word	0x0800205d
 8001f80:	08002061 	.word	0x08002061
 8001f84:	08001e59 	.word	0x08001e59
 8001f88:	08001e59 	.word	0x08001e59
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001e59 	.word	0x08001e59
 8001f94:	0800205d 	.word	0x0800205d
 8001f98:	08001e59 	.word	0x08001e59
 8001f9c:	08001e59 	.word	0x08001e59
 8001fa0:	0800205d 	.word	0x0800205d
			if (precision >= 0) {
 8001fa4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8001fa8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8001fac:	db0a      	blt.n	8001fc4 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
 8001fae:	4641      	mov	r1, r8
 8001fb0:	4650      	mov	r0, sl
 8001fb2:	f010 ff46 	bl	8012e42 <strnlen>
			bpe = bps + len;
 8001fb6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8001fba:	2600      	movs	r6, #0
		if (bps == NULL) {
 8001fbc:	f1ba 0f00 	cmp.w	sl, #0
 8001fc0:	d10c      	bne.n	8001fdc <cbvprintf+0x5d8>
 8001fc2:	e749      	b.n	8001e58 <cbvprintf+0x454>
				len = strlen(bps);
 8001fc4:	4650      	mov	r0, sl
 8001fc6:	f010 ff35 	bl	8012e34 <strlen>
 8001fca:	e7f4      	b.n	8001fb6 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fce:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8001fd2:	2600      	movs	r6, #0
			bpe = buf + 1;
 8001fd4:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
 8001fd8:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
 8001fdc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8001fe0:	b106      	cbz	r6, 8001fe4 <cbvprintf+0x5e0>
			nj_len += 1U;
 8001fe2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8001fe4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8001fe8:	06d0      	lsls	r0, r2, #27
 8001fea:	d56b      	bpl.n	80020c4 <cbvprintf+0x6c0>
			nj_len += 2U;
 8001fec:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8001fee:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8001ff0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8001ff2:	bf48      	it	mi
 8001ff4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8001ff6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8001ff8:	bf48      	it	mi
 8001ffa:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8001ffc:	f1b9 0f00 	cmp.w	r9, #0
 8002000:	dd79      	ble.n	80020f6 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
 8002002:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8002006:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 800200a:	f3c2 0380 	ubfx	r3, r2, #2, #1
 800200e:	9303      	str	r3, [sp, #12]
 8002010:	0753      	lsls	r3, r2, #29
 8002012:	d470      	bmi.n	80020f6 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
 8002014:	0650      	lsls	r0, r2, #25
 8002016:	d564      	bpl.n	80020e2 <cbvprintf+0x6de>
					if (sign != 0) {
 8002018:	b146      	cbz	r6, 800202c <cbvprintf+0x628>
						OUTC(sign);
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	4659      	mov	r1, fp
 800201e:	4630      	mov	r0, r6
 8002020:	4798      	blx	r3
 8002022:	2800      	cmp	r0, #0
 8002024:	db5a      	blt.n	80020dc <cbvprintf+0x6d8>
						sign = 0;
 8002026:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8002028:	3501      	adds	r5, #1
						sign = 0;
 800202a:	461e      	mov	r6, r3
					pad = '0';
 800202c:	2330      	movs	r3, #48	; 0x30
 800202e:	e059      	b.n	80020e4 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
 8002030:	071e      	lsls	r6, r3, #28
 8002032:	d411      	bmi.n	8002058 <cbvprintf+0x654>
				sign = ' ';
 8002034:	f013 0610 	ands.w	r6, r3, #16
 8002038:	bf18      	it	ne
 800203a:	2620      	movne	r6, #32
			sint = value->sint;
 800203c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8002040:	2a00      	cmp	r2, #0
 8002042:	f173 0100 	sbcs.w	r1, r3, #0
 8002046:	f6bf af5d 	bge.w	8001f04 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
 800204a:	4252      	negs	r2, r2
 800204c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002050:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8002054:	262d      	movs	r6, #45	; 0x2d
 8002056:	e755      	b.n	8001f04 <cbvprintf+0x500>
				sign = '+';
 8002058:	262b      	movs	r6, #43	; 0x2b
 800205a:	e7ef      	b.n	800203c <cbvprintf+0x638>
		switch (conv->specifier) {
 800205c:	2600      	movs	r6, #0
 800205e:	e751      	b.n	8001f04 <cbvprintf+0x500>
			if (value->ptr != NULL) {
 8002060:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002062:	b348      	cbz	r0, 80020b8 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002064:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	aa0c      	add	r2, sp, #48	; 0x30
 800206c:	ab04      	add	r3, sp, #16
 800206e:	2100      	movs	r1, #0
 8002070:	f010 f8b2 	bl	80121d8 <encode_uint>
				conv->altform_0c = true;
 8002074:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8002078:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800207c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002080:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002084:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8002086:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 800208a:	2600      	movs	r6, #0
				goto prec_int_pad0;
 800208c:	e744      	b.n	8001f18 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
 800208e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8002090:	2a07      	cmp	r2, #7
 8002092:	f63f aee1 	bhi.w	8001e58 <cbvprintf+0x454>
 8002096:	e8df f002 	tbb	[pc, r2]
 800209a:	040d      	.short	0x040d
 800209c:	08080d06 	.word	0x08080d06
 80020a0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
 80020a2:	701d      	strb	r5, [r3, #0]
		break;
 80020a4:	e6d8      	b.n	8001e58 <cbvprintf+0x454>
		*(short *)dp = (short)count;
 80020a6:	801d      	strh	r5, [r3, #0]
		break;
 80020a8:	e6d6      	b.n	8001e58 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
 80020aa:	4628      	mov	r0, r5
 80020ac:	17e9      	asrs	r1, r5, #31
 80020ae:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 80020b2:	e6d1      	b.n	8001e58 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80020b4:	601d      	str	r5, [r3, #0]
		break;
 80020b6:	e6cf      	b.n	8001e58 <cbvprintf+0x454>
			bpe = bps + 5;
 80020b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8002180 <cbvprintf+0x77c>
 80020bc:	4606      	mov	r6, r0
			bps = "(nil)";
 80020be:	f1a8 0a05 	sub.w	sl, r8, #5
 80020c2:	e78b      	b.n	8001fdc <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
 80020c4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 80020c6:	bf48      	it	mi
 80020c8:	3301      	addmi	r3, #1
 80020ca:	e790      	b.n	8001fee <cbvprintf+0x5ea>
					OUTC(pad);
 80020cc:	4618      	mov	r0, r3
 80020ce:	9303      	str	r3, [sp, #12]
 80020d0:	4659      	mov	r1, fp
 80020d2:	9b02      	ldr	r3, [sp, #8]
 80020d4:	4798      	blx	r3
 80020d6:	2800      	cmp	r0, #0
 80020d8:	9b03      	ldr	r3, [sp, #12]
 80020da:	da04      	bge.n	80020e6 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
 80020dc:	b011      	add	sp, #68	; 0x44
 80020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 80020e2:	2320      	movs	r3, #32
 80020e4:	444d      	add	r5, r9
 80020e6:	464a      	mov	r2, r9
				while (width-- > 0) {
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	eba5 0109 	sub.w	r1, r5, r9
 80020ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80020f2:	dceb      	bgt.n	80020cc <cbvprintf+0x6c8>
 80020f4:	460d      	mov	r5, r1
		if (sign != 0) {
 80020f6:	b136      	cbz	r6, 8002106 <cbvprintf+0x702>
			OUTC(sign);
 80020f8:	9b02      	ldr	r3, [sp, #8]
 80020fa:	4659      	mov	r1, fp
 80020fc:	4630      	mov	r0, r6
 80020fe:	4798      	blx	r3
 8002100:	2800      	cmp	r0, #0
 8002102:	dbeb      	blt.n	80020dc <cbvprintf+0x6d8>
 8002104:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8002106:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800210a:	06d9      	lsls	r1, r3, #27
 800210c:	d401      	bmi.n	8002112 <cbvprintf+0x70e>
 800210e:	071a      	lsls	r2, r3, #28
 8002110:	d506      	bpl.n	8002120 <cbvprintf+0x71c>
				OUTC('0');
 8002112:	9b02      	ldr	r3, [sp, #8]
 8002114:	4659      	mov	r1, fp
 8002116:	2030      	movs	r0, #48	; 0x30
 8002118:	4798      	blx	r3
 800211a:	2800      	cmp	r0, #0
 800211c:	dbde      	blt.n	80020dc <cbvprintf+0x6d8>
 800211e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8002120:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002124:	06db      	lsls	r3, r3, #27
 8002126:	d507      	bpl.n	8002138 <cbvprintf+0x734>
				OUTC(conv->specifier);
 8002128:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800212c:	9b02      	ldr	r3, [sp, #8]
 800212e:	4659      	mov	r1, fp
 8002130:	4798      	blx	r3
 8002132:	2800      	cmp	r0, #0
 8002134:	dbd2      	blt.n	80020dc <cbvprintf+0x6d8>
 8002136:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8002138:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800213a:	442e      	add	r6, r5
 800213c:	1b73      	subs	r3, r6, r5
 800213e:	2b00      	cmp	r3, #0
 8002140:	dc16      	bgt.n	8002170 <cbvprintf+0x76c>
			OUTS(bps, bpe);
 8002142:	9802      	ldr	r0, [sp, #8]
 8002144:	4643      	mov	r3, r8
 8002146:	4652      	mov	r2, sl
 8002148:	4659      	mov	r1, fp
 800214a:	f010 f890 	bl	801226e <outs>
 800214e:	2800      	cmp	r0, #0
 8002150:	dbc4      	blt.n	80020dc <cbvprintf+0x6d8>
 8002152:	4405      	add	r5, r0
		while (width > 0) {
 8002154:	44a9      	add	r9, r5
 8002156:	eba9 0305 	sub.w	r3, r9, r5
 800215a:	2b00      	cmp	r3, #0
 800215c:	f77f ae7c 	ble.w	8001e58 <cbvprintf+0x454>
			OUTC(' ');
 8002160:	9b02      	ldr	r3, [sp, #8]
 8002162:	4659      	mov	r1, fp
 8002164:	2020      	movs	r0, #32
 8002166:	4798      	blx	r3
 8002168:	2800      	cmp	r0, #0
 800216a:	dbb7      	blt.n	80020dc <cbvprintf+0x6d8>
 800216c:	3501      	adds	r5, #1
			--width;
 800216e:	e7f2      	b.n	8002156 <cbvprintf+0x752>
				OUTC('0');
 8002170:	9b02      	ldr	r3, [sp, #8]
 8002172:	4659      	mov	r1, fp
 8002174:	2030      	movs	r0, #48	; 0x30
 8002176:	4798      	blx	r3
 8002178:	2800      	cmp	r0, #0
 800217a:	dbaf      	blt.n	80020dc <cbvprintf+0x6d8>
 800217c:	3501      	adds	r5, #1
 800217e:	e7dd      	b.n	800213c <cbvprintf+0x738>
 8002180:	080170cb 	.word	0x080170cb

08002184 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	460d      	mov	r5, r1
 8002188:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 800218a:	2220      	movs	r2, #32
 800218c:	2100      	movs	r1, #0
 800218e:	f010 fe88 	bl	8012ea2 <memset>
	buffer->get_wlen = cfg->get_wlen;
 8002192:	68eb      	ldr	r3, [r5, #12]
 8002194:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 8002196:	68ab      	ldr	r3, [r5, #8]
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
 8002198:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
 800219a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62a3      	str	r3, [r4, #40]	; 0x28
	buffer->size = cfg->size;
 80021a4:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 80021a6:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 80021a8:	b122      	cbz	r2, 80021b4 <mpsc_pbuf_init+0x30>
 80021aa:	1e51      	subs	r1, r2, #1
 80021ac:	4211      	tst	r1, r2

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 80021ae:	bf08      	it	eq
 80021b0:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
 80021b4:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2100      	movs	r1, #0
 80021ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80021be:	f013 f90c 	bl	80153da <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
 80021c2:	b158      	cbz	r0, 80021dc <mpsc_pbuf_init+0x58>
 80021c4:	4906      	ldr	r1, [pc, #24]	; (80021e0 <mpsc_pbuf_init+0x5c>)
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <mpsc_pbuf_init+0x60>)
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <mpsc_pbuf_init+0x64>)
 80021ca:	232e      	movs	r3, #46	; 0x2e
 80021cc:	f010 f86c 	bl	80122a8 <assert_print>
}
 80021d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	__ASSERT_NO_MSG(err == 0);
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <mpsc_pbuf_init+0x64>)
 80021d6:	212e      	movs	r1, #46	; 0x2e
 80021d8:	f010 b85f 	b.w	801229a <assert_post_action>
}
 80021dc:	bd38      	pop	{r3, r4, r5, pc}
 80021de:	bf00      	nop
 80021e0:	080170f2 	.word	0x080170f2
 80021e4:	08016836 	.word	0x08016836
 80021e8:	080170cc 	.word	0x080170cc

080021ec <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 80021ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f0:	b087      	sub	sp, #28
 80021f2:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 80021f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021f8:	3b01      	subs	r3, #1
 80021fa:	428b      	cmp	r3, r1
{
 80021fc:	4604      	mov	r4, r0
 80021fe:	468b      	mov	fp, r1
	if (wlen > (buffer->size - 1)) {
 8002200:	f0c0 80bf 	bcc.w	8002382 <mpsc_pbuf_alloc+0x196>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8002204:	2700      	movs	r7, #0
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8002206:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80023a0 <mpsc_pbuf_alloc+0x1b4>
 800220a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80023a4 <mpsc_pbuf_alloc+0x1b8>
	union mpsc_pbuf_generic *item = NULL;
 800220e:	46ba      	mov	sl, r7
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 8002210:	f104 0614 	add.w	r6, r4, #20
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002214:	f04f 0310 	mov.w	r3, #16
 8002218:	f3ef 8211 	mrs	r2, BASEPRI
 800221c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
 8002226:	e9cd 2202 	strd	r2, r2, [sp, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800222a:	f00c fc61 	bl	800eaf0 <z_spin_lock_valid>
 800222e:	b968      	cbnz	r0, 800224c <mpsc_pbuf_alloc+0x60>
 8002230:	4957      	ldr	r1, [pc, #348]	; (8002390 <mpsc_pbuf_alloc+0x1a4>)
 8002232:	238e      	movs	r3, #142	; 0x8e
 8002234:	4642      	mov	r2, r8
 8002236:	4648      	mov	r0, r9
 8002238:	f010 f836 	bl	80122a8 <assert_print>
 800223c:	4855      	ldr	r0, [pc, #340]	; (8002394 <mpsc_pbuf_alloc+0x1a8>)
 800223e:	4631      	mov	r1, r6
 8002240:	f010 f832 	bl	80122a8 <assert_print>
 8002244:	218e      	movs	r1, #142	; 0x8e
 8002246:	4640      	mov	r0, r8
 8002248:	f010 f827 	bl	801229a <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
 800224c:	4630      	mov	r0, r6
 800224e:	f00c fc6d 	bl	800eb2c <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
 8002252:	a905      	add	r1, sp, #20
 8002254:	4620      	mov	r0, r4
 8002256:	f010 f834 	bl	80122c2 <free_space>

		if (free_wlen >= wlen) {
 800225a:	9905      	ldr	r1, [sp, #20]
 800225c:	4559      	cmp	r1, fp
		wrap = free_space(buffer, &free_wlen);
 800225e:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
 8002260:	d334      	bcc.n	80022cc <mpsc_pbuf_alloc+0xe0>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 8002262:	6821      	ldr	r1, [r4, #0]
			item =
 8002264:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
 8002266:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
 800226a:	f022 0203 	bic.w	r2, r2, #3
 800226e:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 8002272:	4620      	mov	r0, r4
 8002274:	465a      	mov	r2, fp
			item =
 8002276:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
 800227a:	f010 f848 	bl	801230e <idx_inc>
		cont = false;
 800227e:	2500      	movs	r5, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 8002280:	6020      	str	r0, [r4, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8002282:	4630      	mov	r0, r6
 8002284:	f00c fc42 	bl	800eb0c <z_spin_unlock_valid>
 8002288:	b968      	cbnz	r0, 80022a6 <mpsc_pbuf_alloc+0xba>
 800228a:	4943      	ldr	r1, [pc, #268]	; (8002398 <mpsc_pbuf_alloc+0x1ac>)
 800228c:	23b9      	movs	r3, #185	; 0xb9
 800228e:	4642      	mov	r2, r8
 8002290:	4648      	mov	r0, r9
 8002292:	f010 f809 	bl	80122a8 <assert_print>
 8002296:	4841      	ldr	r0, [pc, #260]	; (800239c <mpsc_pbuf_alloc+0x1b0>)
 8002298:	4631      	mov	r1, r6
 800229a:	f010 f805 	bl	80122a8 <assert_print>
 800229e:	21b9      	movs	r1, #185	; 0xb9
 80022a0:	4640      	mov	r0, r8
 80022a2:	f00f fffa 	bl	801229a <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80022a6:	9b02      	ldr	r3, [sp, #8]
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	d068      	beq.n	8002386 <mpsc_pbuf_alloc+0x19a>
 80022b4:	2f00      	cmp	r7, #0
 80022b6:	d0ab      	beq.n	8002210 <mpsc_pbuf_alloc+0x24>
 80022b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0a7      	beq.n	8002210 <mpsc_pbuf_alloc+0x24>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 80022c0:	4639      	mov	r1, r7
 80022c2:	69a3      	ldr	r3, [r4, #24]
 80022c4:	4620      	mov	r0, r4
 80022c6:	4798      	blx	r3
			dropped_item = NULL;
 80022c8:	2700      	movs	r7, #0
 80022ca:	e7a1      	b.n	8002210 <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
 80022cc:	b118      	cbz	r0, 80022d6 <mpsc_pbuf_alloc+0xea>
			add_skip_item(buffer, free_wlen);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f010 f82b 	bl	801232a <add_skip_item>
			cont = true;
 80022d4:	e7d5      	b.n	8002282 <mpsc_pbuf_alloc+0x96>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80022d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80022da:	4313      	orrs	r3, r2
 80022dc:	d043      	beq.n	8002366 <mpsc_pbuf_alloc+0x17a>
			   !k_is_in_isr()) {
 80022de:	f013 f841 	bl	8015364 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d13f      	bne.n	8002366 <mpsc_pbuf_alloc+0x17a>
 80022e6:	4630      	mov	r0, r6
 80022e8:	f00c fc10 	bl	800eb0c <z_spin_unlock_valid>
 80022ec:	b968      	cbnz	r0, 800230a <mpsc_pbuf_alloc+0x11e>
 80022ee:	492a      	ldr	r1, [pc, #168]	; (8002398 <mpsc_pbuf_alloc+0x1ac>)
 80022f0:	23b9      	movs	r3, #185	; 0xb9
 80022f2:	4642      	mov	r2, r8
 80022f4:	4648      	mov	r0, r9
 80022f6:	f00f ffd7 	bl	80122a8 <assert_print>
 80022fa:	4828      	ldr	r0, [pc, #160]	; (800239c <mpsc_pbuf_alloc+0x1b0>)
 80022fc:	4631      	mov	r1, r6
 80022fe:	f00f ffd3 	bl	80122a8 <assert_print>
 8002302:	21b9      	movs	r1, #185	; 0xb9
 8002304:	4640      	mov	r0, r8
 8002306:	f00f ffc8 	bl	801229a <assert_post_action>
 800230a:	9b03      	ldr	r3, [sp, #12]
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8002314:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002318:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800231c:	f00c fdda 	bl	800eed4 <z_impl_k_sem_take>
 8002320:	4605      	mov	r5, r0
	__asm__ volatile(
 8002322:	f04f 0210 	mov.w	r2, #16
 8002326:	f3ef 8311 	mrs	r3, BASEPRI
 800232a:	f382 8812 	msr	BASEPRI_MAX, r2
 800232e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8002332:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
 8002334:	9302      	str	r3, [sp, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8002336:	f00c fbdb 	bl	800eaf0 <z_spin_lock_valid>
 800233a:	b968      	cbnz	r0, 8002358 <mpsc_pbuf_alloc+0x16c>
 800233c:	4914      	ldr	r1, [pc, #80]	; (8002390 <mpsc_pbuf_alloc+0x1a4>)
 800233e:	238e      	movs	r3, #142	; 0x8e
 8002340:	4642      	mov	r2, r8
 8002342:	4648      	mov	r0, r9
 8002344:	f00f ffb0 	bl	80122a8 <assert_print>
 8002348:	4812      	ldr	r0, [pc, #72]	; (8002394 <mpsc_pbuf_alloc+0x1a8>)
 800234a:	4631      	mov	r1, r6
 800234c:	f00f ffac 	bl	80122a8 <assert_print>
 8002350:	218e      	movs	r1, #142	; 0x8e
 8002352:	4640      	mov	r0, r8
 8002354:	f00f ffa1 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8002358:	4630      	mov	r0, r6
			if (err == 0) {
 800235a:	fab5 f585 	clz	r5, r5
 800235e:	f00c fbe5 	bl	800eb2c <z_spin_lock_set_owner>
 8002362:	096d      	lsrs	r5, r5, #5
 8002364:	e78d      	b.n	8002282 <mpsc_pbuf_alloc+0x96>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8002366:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8002368:	9905      	ldr	r1, [sp, #20]
 800236a:	f10d 0313 	add.w	r3, sp, #19
 800236e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002372:	4620      	mov	r0, r4
 8002374:	f010 f800 	bl	8012378 <drop_item_locked>
			cont = dropped_item != NULL;
 8002378:	1e05      	subs	r5, r0, #0
 800237a:	4607      	mov	r7, r0
 800237c:	bf18      	it	ne
 800237e:	2501      	movne	r5, #1
 8002380:	e77f      	b.n	8002282 <mpsc_pbuf_alloc+0x96>
		return NULL;
 8002382:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8002386:	4650      	mov	r0, sl
 8002388:	b007      	add	sp, #28
 800238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238e:	bf00      	nop
 8002390:	08017121 	.word	0x08017121
 8002394:	08017136 	.word	0x08017136
 8002398:	0801714e 	.word	0x0801714e
 800239c:	08017165 	.word	0x08017165
 80023a0:	080170fb 	.word	0x080170fb
 80023a4:	08016836 	.word	0x08016836

080023a8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 80023a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t wlen = buffer->get_wlen(item);
 80023ac:	69c3      	ldr	r3, [r0, #28]
{
 80023ae:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 80023b0:	4608      	mov	r0, r1
{
 80023b2:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
 80023b4:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 80023b6:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 80023ba:	4607      	mov	r7, r0
 80023bc:	f04f 0310 	mov.w	r3, #16
 80023c0:	f3ef 8811 	mrs	r8, BASEPRI
 80023c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80023c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80023cc:	4628      	mov	r0, r5
 80023ce:	f00c fb8f 	bl	800eaf0 <z_spin_lock_valid>
 80023d2:	b968      	cbnz	r0, 80023f0 <mpsc_pbuf_commit+0x48>
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <mpsc_pbuf_commit+0x98>)
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <mpsc_pbuf_commit+0x9c>)
 80023d8:	481b      	ldr	r0, [pc, #108]	; (8002448 <mpsc_pbuf_commit+0xa0>)
 80023da:	238e      	movs	r3, #142	; 0x8e
 80023dc:	f00f ff64 	bl	80122a8 <assert_print>
 80023e0:	481a      	ldr	r0, [pc, #104]	; (800244c <mpsc_pbuf_commit+0xa4>)
 80023e2:	4629      	mov	r1, r5
 80023e4:	f00f ff60 	bl	80122a8 <assert_print>
 80023e8:	4815      	ldr	r0, [pc, #84]	; (8002440 <mpsc_pbuf_commit+0x98>)
 80023ea:	218e      	movs	r1, #142	; 0x8e
 80023ec:	f00f ff55 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80023f0:	4628      	mov	r0, r5
 80023f2:	f00c fb9b 	bl	800eb2c <z_spin_lock_set_owner>

	item->hdr.valid = 1;
 80023f6:	7833      	ldrb	r3, [r6, #0]
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 80023fe:	6861      	ldr	r1, [r4, #4]
 8002400:	463a      	mov	r2, r7
 8002402:	4620      	mov	r0, r4
 8002404:	f00f ff83 	bl	801230e <idx_inc>
 8002408:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 800240a:	4620      	mov	r0, r4
 800240c:	f00f ffa3 	bl	8012356 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8002410:	4628      	mov	r0, r5
 8002412:	f00c fb7b 	bl	800eb0c <z_spin_unlock_valid>
 8002416:	b968      	cbnz	r0, 8002434 <mpsc_pbuf_commit+0x8c>
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <mpsc_pbuf_commit+0x98>)
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <mpsc_pbuf_commit+0xa8>)
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <mpsc_pbuf_commit+0xa0>)
 800241e:	23b9      	movs	r3, #185	; 0xb9
 8002420:	f00f ff42 	bl	80122a8 <assert_print>
 8002424:	480b      	ldr	r0, [pc, #44]	; (8002454 <mpsc_pbuf_commit+0xac>)
 8002426:	4629      	mov	r1, r5
 8002428:	f00f ff3e 	bl	80122a8 <assert_print>
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <mpsc_pbuf_commit+0x98>)
 800242e:	21b9      	movs	r1, #185	; 0xb9
 8002430:	f00f ff33 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8002434:	f388 8811 	msr	BASEPRI, r8
 8002438:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800243c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002440:	080170fb 	.word	0x080170fb
 8002444:	08017121 	.word	0x08017121
 8002448:	08016836 	.word	0x08016836
 800244c:	08017136 	.word	0x08017136
 8002450:	0801714e 	.word	0x0801714e
 8002454:	08017165 	.word	0x08017165

08002458 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8002458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800245c:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002564 <mpsc_pbuf_claim+0x10c>
 8002460:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002568 <mpsc_pbuf_claim+0x110>
 8002464:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800256c <mpsc_pbuf_claim+0x114>
 8002468:	4604      	mov	r4, r0
		uint32_t a;
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
 800246a:	f104 0614 	add.w	r6, r4, #20
	__asm__ volatile(
 800246e:	f04f 0310 	mov.w	r3, #16
 8002472:	f3ef 8a11 	mrs	sl, BASEPRI
 8002476:	f383 8812 	msr	BASEPRI_MAX, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	4630      	mov	r0, r6
 8002480:	f00c fb36 	bl	800eaf0 <z_spin_lock_valid>
 8002484:	b968      	cbnz	r0, 80024a2 <mpsc_pbuf_claim+0x4a>
 8002486:	238e      	movs	r3, #142	; 0x8e
 8002488:	4642      	mov	r2, r8
 800248a:	4659      	mov	r1, fp
 800248c:	4648      	mov	r0, r9
 800248e:	f00f ff0b 	bl	80122a8 <assert_print>
 8002492:	4831      	ldr	r0, [pc, #196]	; (8002558 <mpsc_pbuf_claim+0x100>)
 8002494:	4631      	mov	r1, r6
 8002496:	f00f ff07 	bl	80122a8 <assert_print>
 800249a:	218e      	movs	r1, #142	; 0x8e
 800249c:	4640      	mov	r0, r8
 800249e:	f00f fefc 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80024a2:	4630      	mov	r0, r6
 80024a4:	f00c fb42 	bl	800eb2c <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 80024a8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80024ac:	4299      	cmp	r1, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 80024ae:	bf88      	it	hi
 80024b0:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
 80024b2:	1a5b      	subs	r3, r3, r1
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 80024b4:	b9eb      	cbnz	r3, 80024f2 <mpsc_pbuf_claim+0x9a>
		cont = false;
 80024b6:	2500      	movs	r5, #0
			item = NULL;
 80024b8:	462f      	mov	r7, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80024ba:	4630      	mov	r0, r6
 80024bc:	f00c fb26 	bl	800eb0c <z_spin_unlock_valid>
 80024c0:	b968      	cbnz	r0, 80024de <mpsc_pbuf_claim+0x86>
 80024c2:	4926      	ldr	r1, [pc, #152]	; (800255c <mpsc_pbuf_claim+0x104>)
 80024c4:	23b9      	movs	r3, #185	; 0xb9
 80024c6:	4642      	mov	r2, r8
 80024c8:	4648      	mov	r0, r9
 80024ca:	f00f feed 	bl	80122a8 <assert_print>
 80024ce:	4824      	ldr	r0, [pc, #144]	; (8002560 <mpsc_pbuf_claim+0x108>)
 80024d0:	4631      	mov	r1, r6
 80024d2:	f00f fee9 	bl	80122a8 <assert_print>
 80024d6:	21b9      	movs	r1, #185	; 0xb9
 80024d8:	4640      	mov	r0, r8
 80024da:	f00f fede 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80024de:	f38a 8811 	msr	BASEPRI, sl
 80024e2:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 80024e6:	2d00      	cmp	r5, #0
 80024e8:	d1bf      	bne.n	800246a <mpsc_pbuf_claim+0x12>

	return item;
}
 80024ea:	4638      	mov	r0, r7
 80024ec:	b003      	add	sp, #12
 80024ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		item = (union mpsc_pbuf_generic *)
 80024f2:	6a20      	ldr	r0, [r4, #32]
 80024f4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
		if (!a || is_invalid(item)) {
 80024f8:	07ab      	lsls	r3, r5, #30
		item = (union mpsc_pbuf_generic *)
 80024fa:	eb00 0781 	add.w	r7, r0, r1, lsl #2
		if (!a || is_invalid(item)) {
 80024fe:	d0da      	beq.n	80024b6 <mpsc_pbuf_claim+0x5e>
	if (item->hdr.busy && !item->hdr.valid) {
 8002500:	f810 3021 	ldrb.w	r3, [r0, r1, lsl #2]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	2a02      	cmp	r2, #2
 800250a:	d101      	bne.n	8002510 <mpsc_pbuf_claim+0xb8>
			if (skip || !is_valid(item)) {
 800250c:	08ad      	lsrs	r5, r5, #2
 800250e:	d114      	bne.n	800253a <mpsc_pbuf_claim+0xe2>
 8002510:	07dd      	lsls	r5, r3, #31
 8002512:	69e2      	ldr	r2, [r4, #28]
 8002514:	d50e      	bpl.n	8002534 <mpsc_pbuf_claim+0xdc>
				item->hdr.busy = 1;
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	f800 3021 	strb.w	r3, [r0, r1, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800251e:	4638      	mov	r0, r7
				item->hdr.busy = 1;
 8002520:	9101      	str	r1, [sp, #4]
					idx_inc(buffer, buffer->tmp_rd_idx,
 8002522:	4790      	blx	r2
 8002524:	9901      	ldr	r1, [sp, #4]
 8002526:	4602      	mov	r2, r0
 8002528:	4620      	mov	r0, r4
 800252a:	f00f fef0 	bl	801230e <idx_inc>
		cont = false;
 800252e:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
 8002530:	60a0      	str	r0, [r4, #8]
 8002532:	e7c2      	b.n	80024ba <mpsc_pbuf_claim+0x62>
					skip ? skip : buffer->get_wlen(item);
 8002534:	4638      	mov	r0, r7
 8002536:	4790      	blx	r2
 8002538:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800253a:	68a1      	ldr	r1, [r4, #8]
 800253c:	462a      	mov	r2, r5
 800253e:	4620      	mov	r0, r4
 8002540:	f00f fee5 	bl	801230e <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 8002544:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 8002546:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 8002548:	462a      	mov	r2, r5
 800254a:	4620      	mov	r0, r4
 800254c:	f00f fedf 	bl	801230e <idx_inc>
				cont = true;
 8002550:	2501      	movs	r5, #1
				buffer->rd_idx =
 8002552:	60e0      	str	r0, [r4, #12]
			if (skip || !is_valid(item)) {
 8002554:	e7b1      	b.n	80024ba <mpsc_pbuf_claim+0x62>
 8002556:	bf00      	nop
 8002558:	08017136 	.word	0x08017136
 800255c:	0801714e 	.word	0x0801714e
 8002560:	08017165 	.word	0x08017165
 8002564:	080170fb 	.word	0x080170fb
 8002568:	08017121 	.word	0x08017121
 800256c:	08016836 	.word	0x08016836

08002570 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8002570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t wlen = buffer->get_wlen(item);
 8002574:	69c3      	ldr	r3, [r0, #28]
{
 8002576:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8002578:	4608      	mov	r0, r1
{
 800257a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800257c:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
 800257e:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
 8002582:	4607      	mov	r7, r0
	__asm__ volatile(
 8002584:	f04f 0310 	mov.w	r3, #16
 8002588:	f3ef 8811 	mrs	r8, BASEPRI
 800258c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8002594:	4630      	mov	r0, r6
 8002596:	f00c faab 	bl	800eaf0 <z_spin_lock_valid>
 800259a:	b968      	cbnz	r0, 80025b8 <mpsc_pbuf_free+0x48>
 800259c:	4a24      	ldr	r2, [pc, #144]	; (8002630 <mpsc_pbuf_free+0xc0>)
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <mpsc_pbuf_free+0xc4>)
 80025a0:	4825      	ldr	r0, [pc, #148]	; (8002638 <mpsc_pbuf_free+0xc8>)
 80025a2:	238e      	movs	r3, #142	; 0x8e
 80025a4:	f00f fe80 	bl	80122a8 <assert_print>
 80025a8:	4824      	ldr	r0, [pc, #144]	; (800263c <mpsc_pbuf_free+0xcc>)
 80025aa:	4631      	mov	r1, r6
 80025ac:	f00f fe7c 	bl	80122a8 <assert_print>
 80025b0:	481f      	ldr	r0, [pc, #124]	; (8002630 <mpsc_pbuf_free+0xc0>)
 80025b2:	218e      	movs	r1, #142	; 0x8e
 80025b4:	f00f fe71 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80025b8:	4630      	mov	r0, r6
 80025ba:	f00c fab7 	bl	800eb2c <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 80025be:	782b      	ldrb	r3, [r5, #0]
 80025c0:	f36f 0300 	bfc	r3, #0, #1
 80025c4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80025c6:	6923      	ldr	r3, [r4, #16]
 80025c8:	079b      	lsls	r3, r3, #30
 80025ca:	d505      	bpl.n	80025d8 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 80025cc:	68e2      	ldr	r2, [r4, #12]
 80025ce:	6a23      	ldr	r3, [r4, #32]
 80025d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 80025d4:	429d      	cmp	r5, r3
 80025d6:	d125      	bne.n	8002624 <mpsc_pbuf_free+0xb4>
		witem->hdr.busy = 0;
 80025d8:	782b      	ldrb	r3, [r5, #0]
 80025da:	f36f 0341 	bfc	r3, #1, #1
 80025de:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 80025e0:	68e1      	ldr	r1, [r4, #12]
 80025e2:	463a      	mov	r2, r7
 80025e4:	4620      	mov	r0, r4
 80025e6:	f00f fe92 	bl	801230e <idx_inc>
 80025ea:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80025ec:	4630      	mov	r0, r6
 80025ee:	f00c fa8d 	bl	800eb0c <z_spin_unlock_valid>
 80025f2:	b968      	cbnz	r0, 8002610 <mpsc_pbuf_free+0xa0>
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <mpsc_pbuf_free+0xc0>)
 80025f6:	4912      	ldr	r1, [pc, #72]	; (8002640 <mpsc_pbuf_free+0xd0>)
 80025f8:	480f      	ldr	r0, [pc, #60]	; (8002638 <mpsc_pbuf_free+0xc8>)
 80025fa:	23b9      	movs	r3, #185	; 0xb9
 80025fc:	f00f fe54 	bl	80122a8 <assert_print>
 8002600:	4810      	ldr	r0, [pc, #64]	; (8002644 <mpsc_pbuf_free+0xd4>)
 8002602:	4631      	mov	r1, r6
 8002604:	f00f fe50 	bl	80122a8 <assert_print>
 8002608:	4809      	ldr	r0, [pc, #36]	; (8002630 <mpsc_pbuf_free+0xc0>)
 800260a:	21b9      	movs	r1, #185	; 0xb9
 800260c:	f00f fe45 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8002610:	f388 8811 	msr	BASEPRI, r8
 8002614:	f3bf 8f6f 	isb	sy
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8002618:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 800261c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002620:	f00c bc14 	b.w	800ee4c <z_impl_k_sem_give>
		witem->skip.len = wlen;
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	f367 039f 	bfi	r3, r7, #2, #30
 800262a:	602b      	str	r3, [r5, #0]
 800262c:	e7de      	b.n	80025ec <mpsc_pbuf_free+0x7c>
 800262e:	bf00      	nop
 8002630:	080170fb 	.word	0x080170fb
 8002634:	08017121 	.word	0x08017121
 8002638:	08016836 	.word	0x08016836
 800263c:	08017136 	.word	0x08017136
 8002640:	0801714e 	.word	0x0801714e
 8002644:	08017165 	.word	0x08017165

08002648 <stm32wb_init>:
	__asm__ volatile(
 8002648:	f04f 0210 	mov.w	r2, #16
 800264c:	f3ef 8311 	mrs	r3, BASEPRI
 8002650:	f382 8812 	msr	BASEPRI_MAX, r2
 8002654:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <stm32wb_init+0x34>)
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <stm32wb_init+0x38>)
 8002664:	601a      	str	r2, [r3, #0]
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002666:	4a07      	ldr	r2, [pc, #28]	; (8002684 <stm32wb_init+0x3c>)
 8002668:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800266c:	f023 0307 	bic.w	r3, r3, #7
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	/* Set C2 Power Mode to shutdown */
	/* It will be updated by C2 when required */
	LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);

	return 0;
}
 8002678:	2000      	movs	r0, #0
 800267a:	4770      	bx	lr
 800267c:	200003dc 	.word	0x200003dc
 8002680:	003d0900 	.word	0x003d0900
 8002684:	58000400 	.word	0x58000400

08002688 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002688:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 800268a:	4910      	ldr	r1, [pc, #64]	; (80026cc <enable_logger+0x44>)
 800268c:	4810      	ldr	r0, [pc, #64]	; (80026d0 <enable_logger+0x48>)
{
 800268e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8002690:	2200      	movs	r2, #0
 8002692:	f012 ff62 	bl	801555a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002696:	4d0f      	ldr	r5, [pc, #60]	; (80026d4 <enable_logger+0x4c>)
 8002698:	490f      	ldr	r1, [pc, #60]	; (80026d8 <enable_logger+0x50>)
 800269a:	2200      	movs	r2, #0
 800269c:	2300      	movs	r3, #0
 800269e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80026a2:	2400      	movs	r4, #0
 80026a4:	230e      	movs	r3, #14
 80026a6:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80026aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <enable_logger+0x54>)
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026b6:	4628      	mov	r0, r5
 80026b8:	f00c f950 	bl	800e95c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80026bc:	4908      	ldr	r1, [pc, #32]	; (80026e0 <enable_logger+0x58>)
 80026be:	4628      	mov	r0, r5
 80026c0:	f012 fe56 	bl	8015370 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 80026c4:	4620      	mov	r0, r4
 80026c6:	b009      	add	sp, #36	; 0x24
 80026c8:	bd30      	pop	{r4, r5, pc}
 80026ca:	bf00      	nop
 80026cc:	080026e5 	.word	0x080026e5
 80026d0:	20000b78 	.word	0x20000b78
 80026d4:	20000bb0 	.word	0x20000bb0
 80026d8:	200019a0 	.word	0x200019a0
 80026dc:	080029e9 	.word	0x080029e9
 80026e0:	0801717e 	.word	0x0801717e

080026e4 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
 80026e4:	4801      	ldr	r0, [pc, #4]	; (80026ec <log_process_thread_timer_expiry_fn+0x8>)
 80026e6:	f00c bbb1 	b.w	800ee4c <z_impl_k_sem_give>
 80026ea:	bf00      	nop
 80026ec:	200005d8 	.word	0x200005d8

080026f0 <log_format_func_t_get>:
}
 80026f0:	4b01      	ldr	r3, [pc, #4]	; (80026f8 <log_format_func_t_get+0x8>)
 80026f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80026f6:	4770      	bx	lr
 80026f8:	08015ee8 	.word	0x08015ee8

080026fc <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <log_init+0x6c>)
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <log_init+0x70>)
 8002700:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 8002702:	2b9f      	cmp	r3, #159	; 0x9f
{
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
 800270a:	d90b      	bls.n	8002724 <log_init+0x28>
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <log_init+0x74>)
 800270e:	4819      	ldr	r0, [pc, #100]	; (8002774 <log_init+0x78>)
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <log_init+0x7c>)
 8002712:	f240 236a 	movw	r3, #618	; 0x26a
 8002716:	f00f fdc7 	bl	80122a8 <assert_print>
 800271a:	4817      	ldr	r0, [pc, #92]	; (8002778 <log_init+0x7c>)
 800271c:	f240 216a 	movw	r1, #618	; 0x26a
 8002720:	f00f fdbb 	bl	801229a <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002724:	f3bf 8f5b 	dmb	ish
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <log_init+0x80>)
 800272a:	e853 5f00 	ldrex	r5, [r3]
 800272e:	1c6a      	adds	r2, r5, #1
 8002730:	e843 2100 	strex	r1, r2, [r3]
 8002734:	2900      	cmp	r1, #0
 8002736:	d1f8      	bne.n	800272a <log_init+0x2e>
 8002738:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800273c:	b915      	cbnz	r5, 8002744 <log_init+0x48>
 800273e:	4c0b      	ldr	r4, [pc, #44]	; (800276c <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
 8002740:	42b5      	cmp	r5, r6
 8002742:	db00      	blt.n	8002746 <log_init+0x4a>
}
 8002744:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8002746:	7b23      	ldrb	r3, [r4, #12]
 8002748:	b153      	cbz	r3, 8002760 <log_init+0x64>
			if (backend->api->init != NULL) {
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	b10b      	cbz	r3, 8002754 <log_init+0x58>
				backend->api->init(backend);
 8002750:	4620      	mov	r0, r4
 8002752:	4798      	blx	r3
			log_backend_enable(backend,
 8002754:	6863      	ldr	r3, [r4, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f9b6 	bl	8002acc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8002760:	3501      	adds	r5, #1
 8002762:	3410      	adds	r4, #16
 8002764:	e7ec      	b.n	8002740 <log_init+0x44>
 8002766:	bf00      	nop
 8002768:	08015bdc 	.word	0x08015bdc
 800276c:	08015bcc 	.word	0x08015bcc
 8002770:	080171cb 	.word	0x080171cb
 8002774:	08016836 	.word	0x08016836
 8002778:	08017186 	.word	0x08017186
 800277c:	20001534 	.word	0x20001534

08002780 <z_log_notify_backend_enabled>:
{
 8002780:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002782:	4c04      	ldr	r4, [pc, #16]	; (8002794 <z_log_notify_backend_enabled+0x14>)
 8002784:	7822      	ldrb	r2, [r4, #0]
 8002786:	b912      	cbnz	r2, 800278e <z_log_notify_backend_enabled+0xe>
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <z_log_notify_backend_enabled+0x18>)
 800278a:	f00c fb5f 	bl	800ee4c <z_impl_k_sem_give>
	backend_attached = true;
 800278e:	2301      	movs	r3, #1
 8002790:	7023      	strb	r3, [r4, #0]
}
 8002792:	bd10      	pop	{r4, pc}
 8002794:	2000188a 	.word	0x2000188a
 8002798:	200005d8 	.word	0x200005d8

0800279c <z_log_dropped>:
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <z_log_dropped+0x34>)
 800279e:	f3bf 8f5b 	dmb	ish
 80027a2:	e853 2f00 	ldrex	r2, [r3]
 80027a6:	3201      	adds	r2, #1
 80027a8:	e843 2100 	strex	r1, r2, [r3]
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d1f8      	bne.n	80027a2 <z_log_dropped+0x6>
 80027b0:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 80027b4:	b158      	cbz	r0, 80027ce <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80027b6:	f3bf 8f5b 	dmb	ish
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <z_log_dropped+0x38>)
 80027bc:	e853 2f00 	ldrex	r2, [r3]
 80027c0:	3a01      	subs	r2, #1
 80027c2:	e843 2100 	strex	r1, r2, [r3]
 80027c6:	2900      	cmp	r1, #0
 80027c8:	d1f8      	bne.n	80027bc <z_log_dropped+0x20>
 80027ca:	f3bf 8f5b 	dmb	ish
}
 80027ce:	4770      	bx	lr
 80027d0:	20001530 	.word	0x20001530
 80027d4:	2000152c 	.word	0x2000152c

080027d8 <z_log_dropped_read_and_clear>:
}
 80027d8:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <z_log_dropped_read_and_clear+0x1c>)
 80027dc:	f3bf 8f5b 	dmb	ish
 80027e0:	4602      	mov	r2, r0
 80027e2:	e853 0f00 	ldrex	r0, [r3]
 80027e6:	e843 2100 	strex	r1, r2, [r3]
 80027ea:	2900      	cmp	r1, #0
 80027ec:	d1f9      	bne.n	80027e2 <z_log_dropped_read_and_clear+0xa>
 80027ee:	f3bf 8f5b 	dmb	ish
 80027f2:	4770      	bx	lr
 80027f4:	20001530 	.word	0x20001530

080027f8 <dropped_notify>:
{
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80027fa:	f7ff ffed 	bl	80027d8 <z_log_dropped_read_and_clear>
 80027fe:	4c0b      	ldr	r4, [pc, #44]	; (800282c <dropped_notify+0x34>)
 8002800:	4d0b      	ldr	r5, [pc, #44]	; (8002830 <dropped_notify+0x38>)
 8002802:	1b2d      	subs	r5, r5, r4
 8002804:	4607      	mov	r7, r0
 8002806:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002808:	2600      	movs	r6, #0
 800280a:	42ae      	cmp	r6, r5
 800280c:	db00      	blt.n	8002810 <dropped_notify+0x18>
}
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
 8002810:	4620      	mov	r0, r4
 8002812:	f00f fe2a 	bl	801246a <log_backend_is_active>
 8002816:	b128      	cbz	r0, 8002824 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	b113      	cbz	r3, 8002824 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
 800281e:	4639      	mov	r1, r7
 8002820:	4620      	mov	r0, r4
 8002822:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002824:	3601      	adds	r6, #1
 8002826:	3410      	adds	r4, #16
 8002828:	e7ef      	b.n	800280a <dropped_notify+0x12>
 800282a:	bf00      	nop
 800282c:	08015bcc 	.word	0x08015bcc
 8002830:	08015bdc 	.word	0x08015bdc

08002834 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8002834:	4901      	ldr	r1, [pc, #4]	; (800283c <z_log_msg2_init+0x8>)
 8002836:	4802      	ldr	r0, [pc, #8]	; (8002840 <z_log_msg2_init+0xc>)
 8002838:	f7ff bca4 	b.w	8002184 <mpsc_pbuf_init>
 800283c:	08015ef4 	.word	0x08015ef4
 8002840:	20001538 	.word	0x20001538

08002844 <log_core_init>:
	panic_mode = false;
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <log_core_init+0x24>)
{
 8002846:	b508      	push	{r3, lr}
	panic_mode = false;
 8002848:	2300      	movs	r3, #0
 800284a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <log_core_init+0x28>)
 800284e:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <log_core_init+0x2c>)
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <log_core_init+0x30>)
 8002854:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8002856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800285a:	f000 fb67 	bl	8002f2c <log_output_timestamp_freq_set>
}
 800285e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
 8002862:	f7ff bfe7 	b.w	8002834 <z_log_msg2_init>
 8002866:	bf00      	nop
 8002868:	2000188b 	.word	0x2000188b
 800286c:	20001530 	.word	0x20001530
 8002870:	20000240 	.word	0x20000240
 8002874:	08012471 	.word	0x08012471

08002878 <z_log_msg2_alloc>:
{
 8002878:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 800287a:	2200      	movs	r2, #0
 800287c:	4801      	ldr	r0, [pc, #4]	; (8002884 <z_log_msg2_alloc+0xc>)
 800287e:	2300      	movs	r3, #0
 8002880:	f7ff bcb4 	b.w	80021ec <mpsc_pbuf_alloc>
 8002884:	20001538 	.word	0x20001538

08002888 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8002888:	4801      	ldr	r0, [pc, #4]	; (8002890 <z_log_msg2_claim+0x8>)
 800288a:	f7ff bde5 	b.w	8002458 <mpsc_pbuf_claim>
 800288e:	bf00      	nop
 8002890:	20001538 	.word	0x20001538

08002894 <z_log_msg2_free>:
{
 8002894:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8002896:	4801      	ldr	r0, [pc, #4]	; (800289c <z_log_msg2_free+0x8>)
 8002898:	f7ff be6a 	b.w	8002570 <mpsc_pbuf_free>
 800289c:	20001538 	.word	0x20001538

080028a0 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 80028a0:	4801      	ldr	r0, [pc, #4]	; (80028a8 <z_log_msg2_pending+0x8>)
 80028a2:	f00f bdc3 	b.w	801242c <mpsc_pbuf_is_pending>
 80028a6:	bf00      	nop
 80028a8:	20001538 	.word	0x20001538

080028ac <z_impl_log_process>:
	if (!backend_attached && !bypass) {
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <z_impl_log_process+0x78>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
{
 80028b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b4:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 80028b6:	b903      	cbnz	r3, 80028ba <z_impl_log_process+0xe>
 80028b8:	b390      	cbz	r0, 8002920 <z_impl_log_process+0x74>
	msg = get_msg();
 80028ba:	f00f fde6 	bl	801248a <get_msg>
	if (msg.msg) {
 80028be:	4606      	mov	r6, r0
 80028c0:	b118      	cbz	r0, 80028ca <z_impl_log_process+0x1e>
		if (!bypass) {
 80028c2:	b16d      	cbz	r5, 80028e0 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7ff ffe5 	bl	8002894 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
 80028ca:	b92d      	cbnz	r5, 80028d8 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	dd01      	ble.n	80028d8 <z_impl_log_process+0x2c>
		dropped_notify();
 80028d4:	f7ff ff90 	bl	80027f8 <dropped_notify>
}
 80028d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
 80028dc:	f7ff bfe0 	b.w	80028a0 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <z_impl_log_process+0x80>)
 80028e2:	f3bf 8f5b 	dmb	ish
 80028e6:	e853 2f00 	ldrex	r2, [r3]
 80028ea:	3a01      	subs	r2, #1
 80028ec:	e843 2100 	strex	r1, r2, [r3]
 80028f0:	2900      	cmp	r1, #0
 80028f2:	d1f8      	bne.n	80028e6 <z_impl_log_process+0x3a>
 80028f4:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 80028f8:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <z_impl_log_process+0x84>)
 80028fa:	4f0e      	ldr	r7, [pc, #56]	; (8002934 <z_impl_log_process+0x88>)
 80028fc:	1b3f      	subs	r7, r7, r4
 80028fe:	113f      	asrs	r7, r7, #4
 8002900:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002902:	45b8      	cmp	r8, r7
 8002904:	dade      	bge.n	80028c4 <z_impl_log_process+0x18>
			if (log_backend_is_active(backend) &&
 8002906:	4620      	mov	r0, r4
 8002908:	f00f fdaf 	bl	801246a <log_backend_is_active>
 800290c:	b120      	cbz	r0, 8002918 <z_impl_log_process+0x6c>
	backend->api->process(backend, msg);
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	4631      	mov	r1, r6
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4620      	mov	r0, r4
 8002916:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002918:	f108 0801 	add.w	r8, r8, #1
 800291c:	3410      	adds	r4, #16
 800291e:	e7f0      	b.n	8002902 <z_impl_log_process+0x56>
}
 8002920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002924:	2000188a 	.word	0x2000188a
 8002928:	20001530 	.word	0x20001530
 800292c:	2000152c 	.word	0x2000152c
 8002930:	08015bcc 	.word	0x08015bcc
 8002934:	08015bdc 	.word	0x08015bdc

08002938 <z_log_msg_post_finalize>:
{
 8002938:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <z_log_msg_post_finalize+0x78>)
 800293c:	f3bf 8f5b 	dmb	ish
 8002940:	e853 2f00 	ldrex	r2, [r3]
 8002944:	1c51      	adds	r1, r2, #1
 8002946:	e843 1000 	strex	r0, r1, [r3]
 800294a:	2800      	cmp	r0, #0
 800294c:	d1f8      	bne.n	8002940 <z_log_msg_post_finalize+0x8>
 800294e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <z_log_msg_post_finalize+0x7c>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b183      	cbz	r3, 800297a <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
 8002958:	f04f 0310 	mov.w	r3, #16
 800295c:	f3ef 8411 	mrs	r4, BASEPRI
 8002960:	f383 8812 	msr	BASEPRI_MAX, r3
 8002964:	f3bf 8f6f 	isb	sy
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff ff9f 	bl	80028ac <z_impl_log_process>
	__asm__ volatile(
 800296e:	f384 8811 	msr	BASEPRI, r4
 8002972:	f3bf 8f6f 	isb	sy
}
 8002976:	b002      	add	sp, #8
 8002978:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <z_log_msg_post_finalize+0x80>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f9      	beq.n	8002976 <z_log_msg_post_finalize+0x3e>
 8002982:	b952      	cbnz	r2, 800299a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
 8002984:	2200      	movs	r2, #0
 8002986:	2300      	movs	r3, #0
 8002988:	e9cd 2300 	strd	r2, r3, [sp]
 800298c:	480b      	ldr	r0, [pc, #44]	; (80029bc <z_log_msg_post_finalize+0x84>)
 800298e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002992:	2300      	movs	r3, #0
 8002994:	f00e fd9a 	bl	80114cc <z_impl_k_timer_start>
 8002998:	e7ed      	b.n	8002976 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800299a:	2a0a      	cmp	r2, #10
 800299c:	d1eb      	bne.n	8002976 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <z_log_msg_post_finalize+0x84>)
 80029a0:	f012 fde7 	bl	8015572 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80029a4:	4806      	ldr	r0, [pc, #24]	; (80029c0 <z_log_msg_post_finalize+0x88>)
}
 80029a6:	b002      	add	sp, #8
 80029a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ac:	f00c ba4e 	b.w	800ee4c <z_impl_k_sem_give>
 80029b0:	2000152c 	.word	0x2000152c
 80029b4:	2000188b 	.word	0x2000188b
 80029b8:	2000157c 	.word	0x2000157c
 80029bc:	20000b78 	.word	0x20000b78
 80029c0:	200005d8 	.word	0x200005d8

080029c4 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <z_log_msg2_commit+0x1c>)
{
 80029c6:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 80029c8:	681b      	ldr	r3, [r3, #0]
{
 80029ca:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80029cc:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80029ce:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 80029d0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80029d2:	4804      	ldr	r0, [pc, #16]	; (80029e4 <z_log_msg2_commit+0x20>)
 80029d4:	f7ff fce8 	bl	80023a8 <mpsc_pbuf_commit>
}
 80029d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 80029dc:	f7ff bfac 	b.w	8002938 <z_log_msg_post_finalize>
 80029e0:	20000240 	.word	0x20000240
 80029e4:	20001538 	.word	0x20001538

080029e8 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <log_process_thread_func+0x5c>)
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <log_process_thread_func+0x60>)
 80029ec:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
 80029ee:	2b00      	cmp	r3, #0
{
 80029f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
 80029f2:	dc0b      	bgt.n	8002a0c <log_process_thread_func+0x24>
 80029f4:	4915      	ldr	r1, [pc, #84]	; (8002a4c <log_process_thread_func+0x64>)
 80029f6:	4816      	ldr	r0, [pc, #88]	; (8002a50 <log_process_thread_func+0x68>)
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <log_process_thread_func+0x6c>)
 80029fa:	f240 5336 	movw	r3, #1334	; 0x536
 80029fe:	f00f fc53 	bl	80122a8 <assert_print>
 8002a02:	4814      	ldr	r0, [pc, #80]	; (8002a54 <log_process_thread_func+0x6c>)
 8002a04:	f240 5136 	movw	r1, #1334	; 0x536
 8002a08:	f00f fc47 	bl	801229a <assert_post_action>
	log_init();
 8002a0c:	f7ff fe76 	bl	80026fc <log_init>
	return z_impl_z_current_get();
 8002a10:	f00e f868 	bl	8010ae4 <z_impl_z_current_get>
	proc_tid = process_tid;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <log_process_thread_func+0x70>)
 8002a16:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002a18:	b130      	cbz	r0, 8002a28 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <log_process_thread_func+0x74>)
	    process_tid &&
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	dd02      	ble.n	8002a28 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
 8002a22:	480f      	ldr	r0, [pc, #60]	; (8002a60 <log_process_thread_func+0x78>)
 8002a24:	f00c fa12 	bl	800ee4c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8002a28:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <log_process_thread_func+0x78>)
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff ff3e 	bl	80028ac <z_impl_log_process>
		if (log_process(false) == false) {
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1fa      	bne.n	8002a2a <log_process_thread_func+0x42>
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f00c fa49 	bl	800eed4 <z_impl_k_sem_take>
 8002a42:	e7f2      	b.n	8002a2a <log_process_thread_func+0x42>
 8002a44:	08015bdc 	.word	0x08015bdc
 8002a48:	08015bcc 	.word	0x08015bcc
 8002a4c:	080171ef 	.word	0x080171ef
 8002a50:	08016836 	.word	0x08016836
 8002a54:	08017186 	.word	0x08017186
 8002a58:	2000157c 	.word	0x2000157c
 8002a5c:	2000152c 	.word	0x2000152c
 8002a60:	200005d8 	.word	0x200005d8

08002a64 <z_impl_log_panic>:
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8002a66:	4f0f      	ldr	r7, [pc, #60]	; (8002aa4 <z_impl_log_panic+0x40>)
 8002a68:	783d      	ldrb	r5, [r7, #0]
 8002a6a:	b975      	cbnz	r5, 8002a8a <z_impl_log_panic+0x26>
 8002a6c:	4c0e      	ldr	r4, [pc, #56]	; (8002aa8 <z_impl_log_panic+0x44>)
 8002a6e:	4e0f      	ldr	r6, [pc, #60]	; (8002aac <z_impl_log_panic+0x48>)
	log_init();
 8002a70:	f7ff fe44 	bl	80026fc <log_init>
 8002a74:	1b36      	subs	r6, r6, r4
 8002a76:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002a78:	42b5      	cmp	r5, r6
 8002a7a:	db07      	blt.n	8002a8c <z_impl_log_panic+0x28>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7ff ff15 	bl	80028ac <z_impl_log_process>
		while (log_process(false) == true) {
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d1fa      	bne.n	8002a7c <z_impl_log_panic+0x18>
	panic_mode = true;
 8002a86:	2301      	movs	r3, #1
 8002a88:	703b      	strb	r3, [r7, #0]
}
 8002a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f00f fcec 	bl	801246a <log_backend_is_active>
 8002a92:	b118      	cbz	r0, 8002a9c <z_impl_log_panic+0x38>
	backend->api->panic(backend);
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	4620      	mov	r0, r4
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	3410      	adds	r4, #16
 8002aa0:	e7ea      	b.n	8002a78 <z_impl_log_panic+0x14>
 8002aa2:	bf00      	nop
 8002aa4:	2000188b 	.word	0x2000188b
 8002aa8:	08015bcc 	.word	0x08015bcc
 8002aac:	08015bdc 	.word	0x08015bdc

08002ab0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <log_source_name_get+0x14>)
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <log_source_name_get+0x18>)
 8002ab4:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8002ab6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8002aba:	bf34      	ite	cc
 8002abc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8002ac0:	2000      	movcs	r0, #0
}
 8002ac2:	4770      	bx	lr
 8002ac4:	08015b0c 	.word	0x08015b0c
 8002ac8:	08015bcc 	.word	0x08015bcc

08002acc <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8002acc:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
 8002ace:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
 8002ad0:	4c0e      	ldr	r4, [pc, #56]	; (8002b0c <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
 8002ad2:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
 8002ad4:	1b04      	subs	r4, r0, r4
 8002ad6:	1124      	asrs	r4, r4, #4
{
 8002ad8:	4605      	mov	r5, r0
 8002ada:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
 8002adc:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
 8002ade:	b963      	cbnz	r3, 8002afa <log_backend_enable+0x2e>
 8002ae0:	490b      	ldr	r1, [pc, #44]	; (8002b10 <log_backend_enable+0x44>)
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <log_backend_enable+0x48>)
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <log_backend_enable+0x4c>)
 8002ae6:	23ba      	movs	r3, #186	; 0xba
 8002ae8:	f00f fbde 	bl	80122a8 <assert_print>
 8002aec:	480b      	ldr	r0, [pc, #44]	; (8002b1c <log_backend_enable+0x50>)
 8002aee:	f00f fbdb 	bl	80122a8 <assert_print>
 8002af2:	4808      	ldr	r0, [pc, #32]	; (8002b14 <log_backend_enable+0x48>)
 8002af4:	21ba      	movs	r1, #186	; 0xba
 8002af6:	f00f fbd0 	bl	801229a <assert_post_action>
	backend->cb->id = id;
 8002afa:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
 8002afc:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
 8002afe:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
 8002b00:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
 8002b02:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 8002b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
 8002b08:	f7ff be3a 	b.w	8002780 <z_log_notify_backend_enabled>
 8002b0c:	08015bcc 	.word	0x08015bcc
 8002b10:	08017267 	.word	0x08017267
 8002b14:	0801720f 	.word	0x0801720f
 8002b18:	08016836 	.word	0x08016836
 8002b1c:	0801727d 	.word	0x0801727d

08002b20 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8002b20:	b40e      	push	{r1, r2, r3}
 8002b22:	b503      	push	{r0, r1, lr}
 8002b24:	ab03      	add	r3, sp, #12
 8002b26:	4601      	mov	r1, r0
 8002b28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002b2c:	4804      	ldr	r0, [pc, #16]	; (8002b40 <print_formatted+0x20>)
	va_start(args, fmt);
 8002b2e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002b30:	f7fe ff68 	bl	8001a04 <cbvprintf>
	va_end(args);

	return length;
}
 8002b34:	b002      	add	sp, #8
 8002b36:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b3a:	b003      	add	sp, #12
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08002d85 	.word	0x08002d85

08002b44 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8002b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8002b4a:	f001 0301 	and.w	r3, r1, #1
{
 8002b4e:	9201      	str	r2, [sp, #4]
 8002b50:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 8002b54:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8002b58:	9300      	str	r3, [sp, #0]
{
 8002b5a:	4607      	mov	r7, r0
 8002b5c:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8002b5e:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8002b62:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
 8002b66:	f00f fc94 	bl	8012492 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d044      	beq.n	8002bfa <prefix_print+0xb6>
		length += print_formatted(output, "%s ", tag);
 8002b70:	4932      	ldr	r1, [pc, #200]	; (8002c3c <prefix_print+0xf8>)
 8002b72:	4638      	mov	r0, r7
 8002b74:	f7ff ffd4 	bl	8002b20 <print_formatted>
 8002b78:	4605      	mov	r5, r0
	}

	if (stamp) {
 8002b7a:	f1bb 0f00 	cmp.w	fp, #0
 8002b7e:	d008      	beq.n	8002b92 <prefix_print+0x4e>
	if (!format) {
 8002b80:	f018 0f44 	tst.w	r8, #68	; 0x44
 8002b84:	d13b      	bne.n	8002bfe <prefix_print+0xba>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8002b86:	492e      	ldr	r1, [pc, #184]	; (8002c40 <prefix_print+0xfc>)
 8002b88:	4622      	mov	r2, r4
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	f7ff ffc8 	bl	8002b20 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8002b90:	4405      	add	r5, r0
	if (color) {
 8002b92:	9b00      	ldr	r3, [sp, #0]
 8002b94:	b153      	cbz	r3, 8002bac <prefix_print+0x68>
		const char *log_color = start && (colors[level] != NULL) ?
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <prefix_print+0x100>)
		print_formatted(output, "%s", log_color);
 8002b98:	492b      	ldr	r1, [pc, #172]	; (8002c48 <prefix_print+0x104>)
		const char *log_color = start && (colors[level] != NULL) ?
 8002b9a:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <prefix_print+0x108>)
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	bf08      	it	eq
 8002ba6:	461a      	moveq	r2, r3
 8002ba8:	f7ff ffba 	bl	8002b20 <print_formatted>
	if (level_on) {
 8002bac:	b13e      	cbz	r6, 8002bbe <prefix_print+0x7a>
		total += print_formatted(output, "<%s> ", severity[level]);
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <prefix_print+0x10c>)
 8002bb0:	4928      	ldr	r1, [pc, #160]	; (8002c54 <prefix_print+0x110>)
 8002bb2:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f7ff ffb2 	bl	8002b20 <print_formatted>
 8002bbc:	4606      	mov	r6, r0
	if (source_id >= 0) {
 8002bbe:	f1ba 0f00 	cmp.w	sl, #0
 8002bc2:	db16      	blt.n	8002bf2 <prefix_print+0xae>
		total += print_formatted(output,
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d036      	beq.n	8002c38 <prefix_print+0xf4>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8002bca:	2301      	movs	r3, #1
 8002bcc:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <prefix_print+0x114>)
 8002bd2:	4c22      	ldr	r4, [pc, #136]	; (8002c5c <prefix_print+0x118>)
 8002bd4:	f019 0f10 	tst.w	r9, #16
 8002bd8:	bf18      	it	ne
 8002bda:	461c      	movne	r4, r3
 8002bdc:	4651      	mov	r1, sl
 8002bde:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8002be2:	f7ff ff65 	bl	8002ab0 <log_source_name_get>
 8002be6:	4621      	mov	r1, r4
 8002be8:	4602      	mov	r2, r0
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ff98 	bl	8002b20 <print_formatted>
 8002bf0:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 8002bf2:	1970      	adds	r0, r6, r5
 8002bf4:	b003      	add	sp, #12
 8002bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	e7bd      	b.n	8002b7a <prefix_print+0x36>
	} else if (freq != 0U) {
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <prefix_print+0x11c>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0c4      	beq.n	8002b90 <prefix_print+0x4c>
		timestamp /= timestamp_div;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <prefix_print+0x120>)
		ms = (remainder * 1000U) / freq;
 8002c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		timestamp /= timestamp_div;
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fbb4 f4f3 	udiv	r4, r4, r3
		remainder = timestamp % freq;
 8002c12:	fbb4 f2f0 	udiv	r2, r4, r0
 8002c16:	fb00 4412 	mls	r4, r0, r2, r4
		ms = (remainder * 1000U) / freq;
 8002c1a:	434c      	muls	r4, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8002c1c:	fbb4 f3f0 	udiv	r3, r4, r0
 8002c20:	fb00 4413 	mls	r4, r0, r3, r4
 8002c24:	434c      	muls	r4, r1
 8002c26:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	fb01 4303 	mla	r3, r1, r3, r4
 8002c30:	490d      	ldr	r1, [pc, #52]	; (8002c68 <prefix_print+0x124>)
 8002c32:	f7ff ff75 	bl	8002b20 <print_formatted>
 8002c36:	e7ab      	b.n	8002b90 <prefix_print+0x4c>
		total += print_formatted(output,
 8002c38:	4c08      	ldr	r4, [pc, #32]	; (8002c5c <prefix_print+0x118>)
 8002c3a:	e7cf      	b.n	8002bdc <prefix_print+0x98>
 8002c3c:	080172ad 	.word	0x080172ad
 8002c40:	080172b1 	.word	0x080172b1
 8002c44:	08015f08 	.word	0x08015f08
 8002c48:	08017e28 	.word	0x08017e28
 8002c4c:	0801729f 	.word	0x0801729f
 8002c50:	08015f1c 	.word	0x08015f1c
 8002c54:	080172c7 	.word	0x080172c7
 8002c58:	080172a9 	.word	0x080172a9
 8002c5c:	080172a4 	.word	0x080172a4
 8002c60:	20001580 	.word	0x20001580
 8002c64:	20001584 	.word	0x20001584
 8002c68:	080172ba 	.word	0x080172ba

08002c6c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	460c      	mov	r4, r1
	if (color) {
 8002c70:	07e1      	lsls	r1, r4, #31
{
 8002c72:	4605      	mov	r5, r0
	if (color) {
 8002c74:	d503      	bpl.n	8002c7e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <postfix_print+0x2c>)
 8002c78:	4908      	ldr	r1, [pc, #32]	; (8002c9c <postfix_print+0x30>)
 8002c7a:	f7ff ff51 	bl	8002b20 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002c7e:	06e2      	lsls	r2, r4, #27
 8002c80:	d408      	bmi.n	8002c94 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8002c82:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8002c84:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8002c86:	bf4c      	ite	mi
 8002c88:	4905      	ldrmi	r1, [pc, #20]	; (8002ca0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 8002c8a:	4906      	ldrpl	r1, [pc, #24]	; (8002ca4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 8002c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8002c90:	f7ff bf46 	b.w	8002b20 <print_formatted>
}
 8002c94:	bd38      	pop	{r3, r4, r5, pc}
 8002c96:	bf00      	nop
 8002c98:	0801729f 	.word	0x0801729f
 8002c9c:	08017e28 	.word	0x08017e28
 8002ca0:	08019488 	.word	0x08019488
 8002ca4:	080172cd 	.word	0x080172cd

08002ca8 <hexdump_line_print>:
{
 8002ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cac:	461d      	mov	r5, r3
 8002cae:	9b08      	ldr	r3, [sp, #32]
 8002cb0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002cb2:	06da      	lsls	r2, r3, #27
{
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8002cb8:	d405      	bmi.n	8002cc6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8002cba:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8002cbc:	bf4c      	ite	mi
 8002cbe:	492a      	ldrmi	r1, [pc, #168]	; (8002d68 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
 8002cc0:	492a      	ldrpl	r1, [pc, #168]	; (8002d6c <hexdump_line_print+0xc4>)
 8002cc2:	f7ff ff2d 	bl	8002b20 <print_formatted>
		print_formatted(output, " ");
 8002cc6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002d74 <hexdump_line_print+0xcc>
{
 8002cca:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 8002cce:	45a8      	cmp	r8, r5
 8002cd0:	db2a      	blt.n	8002d28 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
 8002cd2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002d78 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
 8002cd6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002d7c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
 8002cda:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002d74 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002cde:	2500      	movs	r5, #0
		if (i < length) {
 8002ce0:	42bd      	cmp	r5, r7
 8002ce2:	d22f      	bcs.n	8002d44 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
 8002ce4:	5d72      	ldrb	r2, [r6, r5]
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff ff19 	bl	8002b20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002cee:	3501      	adds	r5, #1
 8002cf0:	2d10      	cmp	r5, #16
 8002cf2:	d120      	bne.n	8002d36 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
 8002cf4:	491e      	ldr	r1, [pc, #120]	; (8002d70 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
 8002cf6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002d74 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
 8002cfa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8002d80 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7ff ff0e 	bl	8002b20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002d04:	2500      	movs	r5, #0
		if (i < length) {
 8002d06:	42af      	cmp	r7, r5
 8002d08:	d928      	bls.n	8002d5c <hexdump_line_print+0xb4>
			char c = (char)data[i];
 8002d0a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
 8002d0c:	f1a2 0320 	sub.w	r3, r2, #32
 8002d10:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
 8002d12:	bf28      	it	cs
 8002d14:	222e      	movcs	r2, #46	; 0x2e
 8002d16:	4649      	mov	r1, r9
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff ff01 	bl	8002b20 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8002d1e:	3501      	adds	r5, #1
 8002d20:	2d10      	cmp	r5, #16
 8002d22:	d114      	bne.n	8002d4e <hexdump_line_print+0xa6>
}
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 8002d28:	4649      	mov	r1, r9
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff fef8 	bl	8002b20 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8002d30:	f108 0801 	add.w	r8, r8, #1
 8002d34:	e7cb      	b.n	8002cce <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8002d36:	076a      	lsls	r2, r5, #29
 8002d38:	d1d2      	bne.n	8002ce0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7ff feef 	bl	8002b20 <print_formatted>
 8002d42:	e7cd      	b.n	8002ce0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 8002d44:	4641      	mov	r1, r8
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff feea 	bl	8002b20 <print_formatted>
 8002d4c:	e7cf      	b.n	8002cee <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8002d4e:	076b      	lsls	r3, r5, #29
 8002d50:	d1d9      	bne.n	8002d06 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
 8002d52:	4641      	mov	r1, r8
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff fee3 	bl	8002b20 <print_formatted>
 8002d5a:	e7d4      	b.n	8002d06 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f7ff fede 	bl	8002b20 <print_formatted>
 8002d64:	e7db      	b.n	8002d1e <hexdump_line_print+0x76>
 8002d66:	bf00      	nop
 8002d68:	08019488 	.word	0x08019488
 8002d6c:	080172cd 	.word	0x080172cd
 8002d70:	080172d6 	.word	0x080172d6
 8002d74:	08016e02 	.word	0x08016e02
 8002d78:	08016e00 	.word	0x08016e00
 8002d7c:	080172d0 	.word	0x080172d0
 8002d80:	080172d8 	.word	0x080172d8

08002d84 <out_func>:
{
 8002d84:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8002d86:	684b      	ldr	r3, [r1, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68cb      	ldr	r3, [r1, #12]
 8002d8c:	429a      	cmp	r2, r3
{
 8002d8e:	4605      	mov	r5, r0
 8002d90:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8002d92:	d102      	bne.n	8002d9a <out_func+0x16>
		log_output_flush(out_ctx);
 8002d94:	4608      	mov	r0, r1
 8002d96:	f00f fb8b 	bl	80124b0 <log_output_flush>
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	f3bf 8f5b 	dmb	ish
 8002da0:	e853 2f00 	ldrex	r2, [r3]
 8002da4:	1c51      	adds	r1, r2, #1
 8002da6:	e843 1000 	strex	r0, r1, [r3]
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d1f8      	bne.n	8002da0 <out_func+0x1c>
 8002dae:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8002db2:	68a3      	ldr	r3, [r4, #8]
 8002db4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68e3      	ldr	r3, [r4, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d909      	bls.n	8002dd4 <out_func+0x50>
 8002dc0:	4905      	ldr	r1, [pc, #20]	; (8002dd8 <out_func+0x54>)
 8002dc2:	4806      	ldr	r0, [pc, #24]	; (8002ddc <out_func+0x58>)
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <out_func+0x5c>)
 8002dc6:	2385      	movs	r3, #133	; 0x85
 8002dc8:	f00f fa6e 	bl	80122a8 <assert_print>
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <out_func+0x5c>)
 8002dce:	2185      	movs	r1, #133	; 0x85
 8002dd0:	f00f fa63 	bl	801229a <assert_post_action>
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	0801730a 	.word	0x0801730a
 8002ddc:	08016836 	.word	0x08016836
 8002de0:	080172db 	.word	0x080172db

08002de4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8002de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
 8002de8:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
 8002dea:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
 8002dee:	4606      	mov	r6, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	4690      	mov	r8, r2
 8002df4:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
 8002df8:	d05b      	beq.n	8002eb2 <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
 8002dfa:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
 8002dfc:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
 8002dfe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d052      	beq.n	8002eac <log_output_msg2_process+0xc8>
 8002e06:	492c      	ldr	r1, [pc, #176]	; (8002eb8 <log_output_msg2_process+0xd4>)
 8002e08:	1a5b      	subs	r3, r3, r1
 8002e0a:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8002e0e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002e12:	f8cd 9000 	str.w	r9, [sp]
 8002e16:	68a3      	ldr	r3, [r4, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f7ff fe91 	bl	8002b44 <prefix_print>
 8002e22:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
 8002e24:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
 8002e26:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 8002e2a:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8002e2e:	b1c3      	cbz	r3, 8002e62 <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8002e30:	4f22      	ldr	r7, [pc, #136]	; (8002ebc <log_output_msg2_process+0xd8>)
 8002e32:	4823      	ldr	r0, [pc, #140]	; (8002ec0 <log_output_msg2_process+0xdc>)
 8002e34:	4923      	ldr	r1, [pc, #140]	; (8002ec4 <log_output_msg2_process+0xe0>)
 8002e36:	f1b9 0f00 	cmp.w	r9, #0
 8002e3a:	bf08      	it	eq
 8002e3c:	4638      	moveq	r0, r7
 8002e3e:	462b      	mov	r3, r5
 8002e40:	4632      	mov	r2, r6
 8002e42:	f00f f84b 	bl	8011edc <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
 8002e46:	2800      	cmp	r0, #0
 8002e48:	da0b      	bge.n	8002e62 <log_output_msg2_process+0x7e>
 8002e4a:	491f      	ldr	r1, [pc, #124]	; (8002ec8 <log_output_msg2_process+0xe4>)
 8002e4c:	481f      	ldr	r0, [pc, #124]	; (8002ecc <log_output_msg2_process+0xe8>)
 8002e4e:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <log_output_msg2_process+0xec>)
 8002e50:	f240 23b7 	movw	r3, #695	; 0x2b7
 8002e54:	f00f fa28 	bl	80122a8 <assert_print>
 8002e58:	481d      	ldr	r0, [pc, #116]	; (8002ed0 <log_output_msg2_process+0xec>)
 8002e5a:	f240 21b7 	movw	r1, #695	; 0x2b7
 8002e5e:	f00f fa1c 	bl	801229a <assert_post_action>
	*len = msg->hdr.desc.data_len;
 8002e62:	8867      	ldrh	r7, [r4, #2]
 8002e64:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8002e68:	b197      	cbz	r7, 8002e90 <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
 8002e6a:	6821      	ldr	r1, [r4, #0]
 8002e6c:	f3c1 2149 	ubfx	r1, r1, #9, #10
 8002e70:	440d      	add	r5, r1
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8002e72:	2f10      	cmp	r7, #16
 8002e74:	463c      	mov	r4, r7
 8002e76:	bf28      	it	cs
 8002e78:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	f8cd 8000 	str.w	r8, [sp]
 8002e80:	4653      	mov	r3, sl
 8002e82:	4622      	mov	r2, r4
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ff0f 	bl	8002ca8 <hexdump_line_print>
	} while (len);
 8002e8a:	1b3f      	subs	r7, r7, r4
		data += length;
 8002e8c:	4425      	add	r5, r4
	} while (len);
 8002e8e:	d1f0      	bne.n	8002e72 <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8002e90:	f1b9 0f00 	cmp.w	r9, #0
 8002e94:	d004      	beq.n	8002ea0 <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
 8002e96:	464a      	mov	r2, r9
 8002e98:	4641      	mov	r1, r8
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f7ff fee6 	bl	8002c6c <postfix_print>
	}

	log_output_flush(output);
 8002ea0:	4630      	mov	r0, r6
}
 8002ea2:	b004      	add	sp, #16
 8002ea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 8002ea8:	f00f bb02 	b.w	80124b0 <log_output_flush>
		int16_t source_id = source ?
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	e7ad      	b.n	8002e0e <log_output_msg2_process+0x2a>
		prefix_offset = 0;
 8002eb2:	46ca      	mov	sl, r9
 8002eb4:	e7b6      	b.n	8002e24 <log_output_msg2_process+0x40>
 8002eb6:	bf00      	nop
 8002eb8:	08015b0c 	.word	0x08015b0c
 8002ebc:	080124cb 	.word	0x080124cb
 8002ec0:	08002d85 	.word	0x08002d85
 8002ec4:	08001a05 	.word	0x08001a05
 8002ec8:	0801733a 	.word	0x0801733a
 8002ecc:	08016836 	.word	0x08016836
 8002ed0:	080172db 	.word	0x080172db

08002ed4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8002ed4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8002eda:	428b      	cmp	r3, r1
 8002edc:	bf28      	it	cs
 8002ede:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 8002ee0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <log_output_dropped_process+0x4c>)
{
 8002ee4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	4668      	mov	r0, sp
 8002eea:	f00f f846 	bl	8011f7a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <log_output_dropped_process+0x50>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8002ef4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8002ef6:	220b      	movs	r2, #11
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f00f facc 	bl	8012496 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	4632      	mov	r2, r6
 8002f02:	4669      	mov	r1, sp
 8002f04:	4628      	mov	r0, r5
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f00f fac5 	bl	8012496 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	4906      	ldr	r1, [pc, #24]	; (8002f28 <log_output_dropped_process+0x54>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	221b      	movs	r2, #27
 8002f14:	4628      	mov	r0, r5
 8002f16:	f00f fabe 	bl	8012496 <buffer_write>
		     output->control_block->ctx);
}
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	bf00      	nop
 8002f20:	08017f41 	.word	0x08017f41
 8002f24:	0801737f 	.word	0x0801737f
 8002f28:	08017363 	.word	0x08017363

08002f2c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <log_output_timestamp_freq_set+0x24>)
{
 8002f2e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8002f30:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8002f32:	4c08      	ldr	r4, [pc, #32]	; (8002f54 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8002f34:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8002f36:	2100      	movs	r1, #0
 8002f38:	42a0      	cmp	r0, r4
 8002f3a:	d804      	bhi.n	8002f46 <log_output_timestamp_freq_set+0x1a>
 8002f3c:	b101      	cbz	r1, 8002f40 <log_output_timestamp_freq_set+0x14>
 8002f3e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <log_output_timestamp_freq_set+0x2c>)
 8002f42:	6018      	str	r0, [r3, #0]
}
 8002f44:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8002f46:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	e7f4      	b.n	8002f38 <log_output_timestamp_freq_set+0xc>
 8002f4e:	bf00      	nop
 8002f50:	20001584 	.word	0x20001584
 8002f54:	000f4240 	.word	0x000f4240
 8002f58:	20001580 	.word	0x20001580

08002f5c <z_impl_z_log_msg2_static_create>:
}

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	f3c1 2649 	ubfx	r6, r1, #9, #10
 8002f64:	b089      	sub	sp, #36	; 0x24
 8002f66:	4681      	mov	r9, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	4690      	mov	r8, r2
 8002f6c:	469a      	mov	sl, r3

	struct log_msg2_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg2 *msg;

	if (inlen > 0) {
 8002f6e:	2e00      	cmp	r6, #0
 8002f70:	d041      	beq.n	8002ff6 <z_impl_z_log_msg2_static_create+0x9a>
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f04f 0b04 	mov.w	fp, #4
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	af06      	add	r7, sp, #24
 8002f7e:	4631      	mov	r1, r6
 8002f80:	461a      	mov	r2, r3
 8002f82:	f8cd b008 	str.w	fp, [sp, #8]
 8002f86:	9701      	str	r7, [sp, #4]
 8002f88:	4640      	mov	r0, r8
 8002f8a:	9605      	str	r6, [sp, #20]
 8002f8c:	f7fe fa30 	bl	80013f0 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
 8002f90:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8002f94:	f363 2452 	bfi	r4, r3, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8002f98:	f3c4 40cb 	ubfx	r0, r4, #19, #12
 8002f9c:	3013      	adds	r0, #19
 8002f9e:	4418      	add	r0, r3
 8002fa0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
 8002fa4:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
 8002fa6:	461e      	mov	r6, r3
 8002fa8:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
 8002faa:	f7ff fc65 	bl	8002878 <z_log_msg2_alloc>
		if (msg) {
 8002fae:	4605      	mov	r5, r0
 8002fb0:	b1b0      	cbz	r0, 8002fe0 <z_impl_z_log_msg2_static_create+0x84>
			len = cbprintf_package_copy(package, inlen,
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f100 020c 	add.w	r2, r0, #12
 8002fba:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8002fbe:	9b04      	ldr	r3, [sp, #16]
 8002fc0:	9905      	ldr	r1, [sp, #20]
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f7fe fa14 	bl	80013f0 <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	da09      	bge.n	8002fe0 <z_impl_z_log_msg2_static_create+0x84>
 8002fcc:	490f      	ldr	r1, [pc, #60]	; (800300c <z_impl_z_log_msg2_static_create+0xb0>)
 8002fce:	4810      	ldr	r0, [pc, #64]	; (8003010 <z_impl_z_log_msg2_static_create+0xb4>)
 8002fd0:	4a10      	ldr	r2, [pc, #64]	; (8003014 <z_impl_z_log_msg2_static_create+0xb8>)
 8002fd2:	2348      	movs	r3, #72	; 0x48
 8002fd4:	f00f f968 	bl	80122a8 <assert_print>
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <z_impl_z_log_msg2_static_create+0xb8>)
 8002fda:	2148      	movs	r1, #72	; 0x48
 8002fdc:	f00f f95d 	bl	801229a <assert_post_action>
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
 8002fe0:	f366 2452 	bfi	r4, r6, #9, #10
 8002fe4:	4653      	mov	r3, sl
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	4649      	mov	r1, r9
 8002fea:	4628      	mov	r0, r5
 8002fec:	f00f fa7a 	bl	80124e4 <z_log_msg2_finalize>
}
 8002ff0:	b009      	add	sp, #36	; 0x24
 8002ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff6:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 8002ffa:	3013      	adds	r0, #19
 8002ffc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
 8003000:	0880      	lsrs	r0, r0, #2
 8003002:	f7ff fc39 	bl	8002878 <z_log_msg2_alloc>
 8003006:	4605      	mov	r5, r0
 8003008:	e7ea      	b.n	8002fe0 <z_impl_z_log_msg2_static_create+0x84>
 800300a:	bf00      	nop
 800300c:	080173b8 	.word	0x080173b8
 8003010:	08016836 	.word	0x08016836
 8003014:	0801738b 	.word	0x0801738b

08003018 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
 800301a:	4f07      	ldr	r7, [pc, #28]	; (8003038 <char_out+0x20>)
{
 800301c:	460d      	mov	r5, r1
 800301e:	4604      	mov	r4, r0
 8003020:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 8003022:	42b4      	cmp	r4, r6
 8003024:	d101      	bne.n	800302a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8003026:	4628      	mov	r0, r5
 8003028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 800302a:	6838      	ldr	r0, [r7, #0]
 800302c:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003030:	6883      	ldr	r3, [r0, #8]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8003036:	e7f4      	b.n	8003022 <char_out+0xa>
 8003038:	200015a0 	.word	0x200015a0

0800303c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 800303c:	4b01      	ldr	r3, [pc, #4]	; (8003044 <format_set+0x8>)
	return 0;
}
 800303e:	2000      	movs	r0, #0
	log_format_current = log_type;
 8003040:	6019      	str	r1, [r3, #0]
}
 8003042:	4770      	bx	lr
 8003044:	20001590 	.word	0x20001590

08003048 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8003048:	4b02      	ldr	r3, [pc, #8]	; (8003054 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <panic+0x10>)
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	f00f ba2e 	b.w	80124b0 <log_output_flush>
 8003054:	2000188c 	.word	0x2000188c
 8003058:	08015f50 	.word	0x08015f50

0800305c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 800305c:	4801      	ldr	r0, [pc, #4]	; (8003064 <dropped+0x8>)
 800305e:	f7ff bf39 	b.w	8002ed4 <log_output_dropped_process>
 8003062:	bf00      	nop
 8003064:	08015f50 	.word	0x08015f50

08003068 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <process+0x1c>)
{
 800306a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800306c:	6818      	ldr	r0, [r3, #0]
{
 800306e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003070:	f7ff fb3e 	bl	80026f0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8003074:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003076:	4603      	mov	r3, r0
}
 8003078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <process+0x20>)
 800307e:	220f      	movs	r2, #15
 8003080:	4718      	bx	r3
 8003082:	bf00      	nop
 8003084:	20001590 	.word	0x20001590
 8003088:	08015f50 	.word	0x08015f50

0800308c <log_backend_uart_init>:
{
 800308c:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <log_backend_uart_init+0x28>)
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <log_backend_uart_init+0x2c>)
 8003092:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8003094:	f012 f947 	bl	8015326 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
 8003098:	b958      	cbnz	r0, 80030b2 <log_backend_uart_init+0x26>
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <log_backend_uart_init+0x30>)
 800309c:	4808      	ldr	r0, [pc, #32]	; (80030c0 <log_backend_uart_init+0x34>)
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <log_backend_uart_init+0x38>)
 80030a0:	2379      	movs	r3, #121	; 0x79
 80030a2:	f00f f901 	bl	80122a8 <assert_print>
}
 80030a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <log_backend_uart_init+0x38>)
 80030ac:	2179      	movs	r1, #121	; 0x79
 80030ae:	f00f b8f4 	b.w	801229a <assert_post_action>
}
 80030b2:	bd08      	pop	{r3, pc}
 80030b4:	200015a0 	.word	0x200015a0
 80030b8:	0801587c 	.word	0x0801587c
 80030bc:	080173f6 	.word	0x080173f6
 80030c0:	08016836 	.word	0x08016836
 80030c4:	080173c1 	.word	0x080173c1

080030c8 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
 80030c8:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
 80030ca:	4c08      	ldr	r4, [pc, #32]	; (80030ec <read_blvl+0x24>)
{
 80030cc:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
 80030ce:	7824      	ldrb	r4, [r4, #0]
 80030d0:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
 80030d4:	2401      	movs	r4, #1
 80030d6:	9402      	str	r4, [sp, #8]
 80030d8:	f10d 0417 	add.w	r4, sp, #23
 80030dc:	9401      	str	r4, [sp, #4]
 80030de:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80030e2:	9400      	str	r4, [sp, #0]
 80030e4:	f011 fa26 	bl	8014534 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
 80030e8:	b006      	add	sp, #24
 80030ea:	bd10      	pop	{r4, pc}
 80030ec:	200004e7 	.word	0x200004e7

080030f0 <blvl_ccc_cfg_changed>:
{
 80030f0:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <blvl_ccc_cfg_changed+0x34>)
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <blvl_ccc_cfg_changed+0x38>)
{
 80030f6:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
 80030f8:	2901      	cmp	r1, #1
 80030fa:	bf18      	it	ne
 80030fc:	4613      	movne	r3, r2
 80030fe:	b088      	sub	sp, #32
 8003100:	490a      	ldr	r1, [pc, #40]	; (800312c <blvl_ccc_cfg_changed+0x3c>)
 8003102:	466a      	mov	r2, sp
 8003104:	e9c2 1304 	strd	r1, r3, [r2, #16]
 8003108:	2302      	movs	r3, #2
 800310a:	7613      	strb	r3, [r2, #24]
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <blvl_ccc_cfg_changed+0x40>)
 800310e:	f842 3f0c 	str.w	r3, [r2, #12]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8003112:	4808      	ldr	r0, [pc, #32]	; (8003134 <blvl_ccc_cfg_changed+0x44>)
 8003114:	2300      	movs	r3, #0
 8003116:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
 800311a:	f7ff ff1f 	bl	8002f5c <z_impl_z_log_msg2_static_create>
}
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	08017452 	.word	0x08017452
 8003128:	0801744a 	.word	0x0801744a
 800312c:	0801745b 	.word	0x0801745b
 8003130:	01000003 	.word	0x01000003
 8003134:	08015b0c 	.word	0x08015b0c

08003138 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
 8003138:	4b01      	ldr	r3, [pc, #4]	; (8003140 <bt_bas_get_battery_level+0x8>)
 800313a:	7818      	ldrb	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	200004e7 	.word	0x200004e7

08003144 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
 8003144:	b500      	push	{lr}
 8003146:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
 8003148:	2864      	cmp	r0, #100	; 0x64
{
 800314a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
 800314e:	d819      	bhi.n	8003184 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
 8003152:	2218      	movs	r2, #24
 8003154:	7018      	strb	r0, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	a802      	add	r0, sp, #8
 800315a:	f00f fea2 	bl	8012ea2 <memset>
	params.attr = attr;
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <bt_bas_set_battery_level+0x4c>)
 8003160:	9303      	str	r3, [sp, #12]
	params.data = data;
 8003162:	f10d 0307 	add.w	r3, sp, #7
 8003166:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
 8003168:	a902      	add	r1, sp, #8
	params.len = len;
 800316a:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
 800316c:	2000      	movs	r0, #0
	params.len = len;
 800316e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
 8003172:	f006 fd25 	bl	8009bc0 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
 8003176:	f110 0f80 	cmn.w	r0, #128	; 0x80
 800317a:	bf08      	it	eq
 800317c:	2000      	moveq	r0, #0
}
 800317e:	b009      	add	sp, #36	; 0x24
 8003180:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
 8003184:	f06f 0015 	mvn.w	r0, #21
 8003188:	e7f9      	b.n	800317e <bt_bas_set_battery_level+0x3a>
 800318a:	bf00      	nop
 800318c:	200004e7 	.word	0x200004e7
 8003190:	08015fd8 	.word	0x08015fd8

08003194 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <shci_register_io_bus+0xc>)
 8003196:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <shci_register_io_bus+0x10>)
 800319a:	6103      	str	r3, [r0, #16]

  return;
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	08003449 	.word	0x08003449
 80031a4:	08003485 	.word	0x08003485

080031a8 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80031a8:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80031aa:	4c05      	ldr	r4, [pc, #20]	; (80031c0 <TlUserEvtReceived+0x18>)
{
 80031ac:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80031ae:	4620      	mov	r0, r4
 80031b0:	f00f f9e8 	bl	8012584 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80031b4:	4620      	mov	r0, r4

  return;
}
 80031b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80031ba:	f012 b899 	b.w	80152f0 <shci_notify_asynch_evt>
 80031be:	bf00      	nop
 80031c0:	20001890 	.word	0x20001890

080031c4 <Cmd_SetStatus.constprop.0>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <Cmd_SetStatus.constprop.0+0x10>)
 80031c6:	2001      	movs	r0, #1
 80031c8:	7018      	strb	r0, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80031ca:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <Cmd_SetStatus.constprop.0+0x14>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <Cmd_SetStatus.constprop.0+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80031d0:	4718      	bx	r3
}
 80031d2:	4770      	bx	lr
 80031d4:	2000188e 	.word	0x2000188e
 80031d8:	200015a4 	.word	0x200015a4

080031dc <shci_init>:
{
 80031dc:	b530      	push	{r4, r5, lr}
  shciContext.UserEvtRx = UserEvtRx;
 80031de:	4d10      	ldr	r5, [pc, #64]	; (8003220 <shci_init+0x44>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <shci_init+0x48>)
 80031e2:	684a      	ldr	r2, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 80031e4:	61e8      	str	r0, [r5, #28]
{
 80031e6:	460c      	mov	r4, r1
 80031e8:	b085      	sub	sp, #20
  shci_register_io_bus (&shciContext.io);
 80031ea:	4628      	mov	r0, r5
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80031ec:	601a      	str	r2, [r3, #0]
  shci_register_io_bus (&shciContext.io);
 80031ee:	f7ff ffd1 	bl	8003194 <shci_register_io_bus>
  pCmdBuffer = p_cmdbuffer;
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <shci_init+0x4c>)
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80031f4:	6824      	ldr	r4, [r4, #0]
  LST_init_head (&SHciAsynchEventQueue);
 80031f6:	480d      	ldr	r0, [pc, #52]	; (800322c <shci_init+0x50>)
  pCmdBuffer = p_cmdbuffer;
 80031f8:	601c      	str	r4, [r3, #0]
  LST_init_head (&SHciAsynchEventQueue);
 80031fa:	f00f f9aa 	bl	8012552 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80031fe:	f7ff ffe1 	bl	80031c4 <Cmd_SetStatus.constprop.0>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <shci_init+0x54>)
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
  if (shciContext.io.Init)
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	b133      	cbz	r3, 800321a <shci_init+0x3e>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <shci_init+0x58>)
 800320e:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <shci_init+0x5c>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8003212:	9403      	str	r4, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8003214:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8003216:	a801      	add	r0, sp, #4
 8003218:	4798      	blx	r3
}
 800321a:	b005      	add	sp, #20
 800321c:	bd30      	pop	{r4, r5, pc}
 800321e:	bf00      	nop
 8003220:	200015ac 	.word	0x200015ac
 8003224:	200015a4 	.word	0x200015a4
 8003228:	200015a8 	.word	0x200015a8
 800322c:	20001890 	.word	0x20001890
 8003230:	2000188f 	.word	0x2000188f
 8003234:	080125cb 	.word	0x080125cb
 8003238:	080031a9 	.word	0x080031a9

0800323c <shci_user_evt_proc>:
{
 800323c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800323e:	4817      	ldr	r0, [pc, #92]	; (800329c <shci_user_evt_proc+0x60>)
 8003240:	f00f f98a 	bl	8012558 <LST_is_empty>
 8003244:	b9b8      	cbnz	r0, 8003276 <shci_user_evt_proc+0x3a>
 8003246:	4c16      	ldr	r4, [pc, #88]	; (80032a0 <shci_user_evt_proc+0x64>)
 8003248:	7823      	ldrb	r3, [r4, #0]
 800324a:	b1a3      	cbz	r3, 8003276 <shci_user_evt_proc+0x3a>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800324c:	4813      	ldr	r0, [pc, #76]	; (800329c <shci_user_evt_proc+0x60>)
 800324e:	a901      	add	r1, sp, #4
 8003250:	f00f f9af 	bl	80125b2 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <shci_user_evt_proc+0x68>)
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	2301      	movs	r3, #1
 800325a:	b1c2      	cbz	r2, 800328e <shci_user_evt_proc+0x52>
      UserEvtRxParam.pckt = phcievtbuffer;
 800325c:	9901      	ldr	r1, [sp, #4]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800325e:	f88d 3008 	strb.w	r3, [sp, #8]
      UserEvtRxParam.pckt = phcievtbuffer;
 8003262:	9103      	str	r1, [sp, #12]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8003264:	a802      	add	r0, sp, #8
 8003266:	4790      	blx	r2
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8003268:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800326c:	7023      	strb	r3, [r4, #0]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800326e:	b183      	cbz	r3, 8003292 <shci_user_evt_proc+0x56>
      TL_MM_EvtDone( phcievtbuffer );
 8003270:	9801      	ldr	r0, [sp, #4]
 8003272:	f000 f957 	bl	8003524 <TL_MM_EvtDone>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <shci_user_evt_proc+0x60>)
 8003278:	f00f f96e 	bl	8012558 <LST_is_empty>
 800327c:	b928      	cbnz	r0, 800328a <shci_user_evt_proc+0x4e>
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <shci_user_evt_proc+0x64>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b113      	cbz	r3, 800328a <shci_user_evt_proc+0x4e>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8003284:	4805      	ldr	r0, [pc, #20]	; (800329c <shci_user_evt_proc+0x60>)
 8003286:	f012 f833 	bl	80152f0 <shci_notify_asynch_evt>
}
 800328a:	b004      	add	sp, #16
 800328c:	bd10      	pop	{r4, pc}
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800328e:	7023      	strb	r3, [r4, #0]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8003290:	e7ee      	b.n	8003270 <shci_user_evt_proc+0x34>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8003292:	9901      	ldr	r1, [sp, #4]
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <shci_user_evt_proc+0x60>)
 8003296:	f00f f969 	bl	801256c <LST_insert_head>
 800329a:	e7ec      	b.n	8003276 <shci_user_evt_proc+0x3a>
 800329c:	20001890 	.word	0x20001890
 80032a0:	2000188f 	.word	0x2000188f
 80032a4:	200015ac 	.word	0x200015ac

080032a8 <shci_send>:
{
 80032a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ac:	461d      	mov	r5, r3
    if(StatusNotCallBackFunction != 0)
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <shci_send+0x64>)
 80032b0:	681b      	ldr	r3, [r3, #0]
{
 80032b2:	4607      	mov	r7, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	4616      	mov	r6, r2
    if(StatusNotCallBackFunction != 0)
 80032b8:	b10b      	cbz	r3, 80032be <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80032ba:	2000      	movs	r0, #0
 80032bc:	4798      	blx	r3
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80032be:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003318 <shci_send+0x70>
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <shci_send+0x68>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80032c4:	f8d8 0000 	ldr.w	r0, [r8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80032c8:	4622      	mov	r2, r4
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80032ca:	f04f 0900 	mov.w	r9, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80032ce:	f8a0 7009 	strh.w	r7, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80032d2:	72c4      	strb	r4, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80032d4:	4631      	mov	r1, r6
 80032d6:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80032d8:	f883 9000 	strb.w	r9, [r3]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80032dc:	f00f fdd6 	bl	8012e8c <memcpy>
  shciContext.io.Send(0,0);
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <shci_send+0x6c>)
 80032e2:	4649      	mov	r1, r9
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4648      	mov	r0, r9
 80032e8:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80032ea:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80032ee:	f00a fa51 	bl	800d794 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80032f2:	f8d8 1000 	ldr.w	r1, [r8]
 80032f6:	788a      	ldrb	r2, [r1, #2]
 80032f8:	f105 0008 	add.w	r0, r5, #8
 80032fc:	3203      	adds	r2, #3
 80032fe:	f00f fdc5 	bl	8012e8c <memcpy>
}
 8003302:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8003306:	f7ff bf5d 	b.w	80031c4 <Cmd_SetStatus.constprop.0>
 800330a:	bf00      	nop
 800330c:	200015a4 	.word	0x200015a4
 8003310:	2000188e 	.word	0x2000188e
 8003314:	200015ac 	.word	0x200015ac
 8003318:	200015a8 	.word	0x200015a8

0800331c <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800331c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800331e:	4c09      	ldr	r4, [pc, #36]	; (8003344 <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8003320:	4d09      	ldr	r5, [pc, #36]	; (8003348 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8003322:	4808      	ldr	r0, [pc, #32]	; (8003344 <SendFreeBuf+0x28>)
 8003324:	f00f f918 	bl	8012558 <LST_is_empty>
 8003328:	b108      	cbz	r0, 800332e <SendFreeBuf+0x12>
  }

  return;
}
 800332a:	b003      	add	sp, #12
 800332c:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800332e:	a901      	add	r1, sp, #4
 8003330:	4620      	mov	r0, r4
 8003332:	f00f f93e 	bl	80125b2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8003336:	692b      	ldr	r3, [r5, #16]
 8003338:	9901      	ldr	r1, [sp, #4]
 800333a:	6918      	ldr	r0, [r3, #16]
 800333c:	f00f f922 	bl	8012584 <LST_insert_tail>
 8003340:	e7ef      	b.n	8003322 <SendFreeBuf+0x6>
 8003342:	bf00      	nop
 8003344:	20001898 	.word	0x20001898
 8003348:	20030000 	.word	0x20030000

0800334c <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <TL_Init+0x40>)
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <TL_Init+0x44>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 8003350:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8003354:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8003356:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8003358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800335c:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800335e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003362:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8003364:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003368:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800336a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800336e:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8003370:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003374:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8003376:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800337a:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800337c:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8003380:	3380      	adds	r3, #128	; 0x80
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8003382:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8003384:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 8003386:	f000 b915 	b.w	80035b4 <HW_IPCC_Init>
 800338a:	bf00      	nop
 800338c:	20030028 	.word	0x20030028
 8003390:	20030000 	.word	0x20030000

08003394 <TL_BLE_Init>:
{
 8003394:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 8003396:	4d0c      	ldr	r5, [pc, #48]	; (80033c8 <TL_BLE_Init+0x34>)
{
 8003398:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800339a:	4628      	mov	r0, r5
 800339c:	f00f f8d9 	bl	8012552 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80033a2:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 80033a4:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80033a6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80033a8:	68e2      	ldr	r2, [r4, #12]
 80033aa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <TL_BLE_Init+0x3c>)
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80033ae:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 80033b2:	f000 f91f 	bl	80035f4 <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <TL_BLE_Init+0x40>)
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	601a      	str	r2, [r3, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <TL_BLE_Init+0x44>)
 80033be:	6862      	ldr	r2, [r4, #4]
 80033c0:	601a      	str	r2, [r3, #0]
}
 80033c2:	2000      	movs	r0, #0
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	200300b4 	.word	0x200300b4
 80033cc:	20030000 	.word	0x20030000
 80033d0:	20038000 	.word	0x20038000
 80033d4:	200015d0 	.word	0x200015d0
 80033d8:	200015cc 	.word	0x200015cc

080033dc <TL_BLE_SendCmd>:
{
 80033dc:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <TL_BLE_SendCmd+0x18>)
 80033e0:	685a      	ldr	r2, [r3, #4]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80033e2:	685b      	ldr	r3, [r3, #4]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	7211      	strb	r1, [r2, #8]
  HW_IPCC_BLE_SendCmd();
 80033ea:	f000 f90b 	bl	8003604 <HW_IPCC_BLE_SendCmd>
}
 80033ee:	2000      	movs	r0, #0
 80033f0:	bd08      	pop	{r3, pc}
 80033f2:	bf00      	nop
 80033f4:	20030000 	.word	0x20030000

080033f8 <HW_IPCC_BLE_RxEvtNot>:
{
 80033f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 80033fa:	4c08      	ldr	r4, [pc, #32]	; (800341c <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 80033fc:	4d08      	ldr	r5, [pc, #32]	; (8003420 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 80033fe:	4807      	ldr	r0, [pc, #28]	; (800341c <HW_IPCC_BLE_RxEvtNot+0x24>)
 8003400:	f00f f8aa 	bl	8012558 <LST_is_empty>
 8003404:	b108      	cbz	r0, 800340a <HW_IPCC_BLE_RxEvtNot+0x12>
}
 8003406:	b003      	add	sp, #12
 8003408:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800340a:	4620      	mov	r0, r4
 800340c:	a901      	add	r1, sp, #4
 800340e:	f00f f8d0 	bl	80125b2 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	9801      	ldr	r0, [sp, #4]
 8003416:	4798      	blx	r3
 8003418:	e7f1      	b.n	80033fe <HW_IPCC_BLE_RxEvtNot+0x6>
 800341a:	bf00      	nop
 800341c:	200300b4 	.word	0x200300b4
 8003420:	200015d0 	.word	0x200015d0

08003424 <TL_BLE_SendAclData>:
{
 8003424:	b508      	push	{r3, lr}
  ((TL_AclDataPacket_t *)(TL_RefTable.p_ble_table->phci_acl_data_buffer))->AclDataSerial.type = TL_ACL_DATA_PKT_TYPE;
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <TL_BLE_SendAclData+0x14>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendAclData();
 8003430:	f000 f8f0 	bl	8003614 <HW_IPCC_BLE_SendAclData>
}
 8003434:	2000      	movs	r0, #0
 8003436:	bd08      	pop	{r3, pc}
 8003438:	20030000 	.word	0x20030000

0800343c <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 800343c:	4b01      	ldr	r3, [pc, #4]	; (8003444 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4718      	bx	r3
 8003442:	bf00      	nop
 8003444:	200015cc 	.word	0x200015cc

08003448 <TL_SYS_Init>:
{
 8003448:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 800344a:	4d0a      	ldr	r5, [pc, #40]	; (8003474 <TL_SYS_Init+0x2c>)
{
 800344c:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800344e:	4628      	mov	r0, r5
 8003450:	f00f f87f 	bl	8012552 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <TL_SYS_Init+0x30>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8003456:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 8003458:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800345a:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 800345e:	f000 f8e5 	bl	800362c <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <TL_SYS_Init+0x34>)
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <TL_SYS_Init+0x38>)
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	2000      	movs	r0, #0
 8003470:	bd38      	pop	{r3, r4, r5, pc}
 8003472:	bf00      	nop
 8003474:	200300bc 	.word	0x200300bc
 8003478:	20030000 	.word	0x20030000
 800347c:	200015d4 	.word	0x200015d4
 8003480:	200015d8 	.word	0x200015d8

08003484 <TL_SYS_SendCmd>:
{
 8003484:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <TL_SYS_SendCmd+0x18>)
 8003488:	68da      	ldr	r2, [r3, #12]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800348a:	68db      	ldr	r3, [r3, #12]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	2110      	movs	r1, #16
 8003490:	7211      	strb	r1, [r2, #8]
  HW_IPCC_SYS_SendCmd();
 8003492:	f000 f8d3 	bl	800363c <HW_IPCC_SYS_SendCmd>
}
 8003496:	2000      	movs	r0, #0
 8003498:	bd08      	pop	{r3, pc}
 800349a:	bf00      	nop
 800349c:	20030000 	.word	0x20030000

080034a0 <HW_IPCC_SYS_CmdEvtNot>:
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 80034a2:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 80034a8:	6810      	ldr	r0, [r2, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4718      	bx	r3
 80034ae:	bf00      	nop
 80034b0:	20030000 	.word	0x20030000
 80034b4:	200015d4 	.word	0x200015d4

080034b8 <HW_IPCC_SYS_EvtNot>:
{
 80034b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80034ba:	4c08      	ldr	r4, [pc, #32]	; (80034dc <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80034bc:	4d08      	ldr	r5, [pc, #32]	; (80034e0 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80034be:	4807      	ldr	r0, [pc, #28]	; (80034dc <HW_IPCC_SYS_EvtNot+0x24>)
 80034c0:	f00f f84a 	bl	8012558 <LST_is_empty>
 80034c4:	b108      	cbz	r0, 80034ca <HW_IPCC_SYS_EvtNot+0x12>
}
 80034c6:	b003      	add	sp, #12
 80034c8:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80034ca:	4620      	mov	r0, r4
 80034cc:	a901      	add	r1, sp, #4
 80034ce:	f00f f870 	bl	80125b2 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	9801      	ldr	r0, [sp, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e7f1      	b.n	80034be <HW_IPCC_SYS_EvtNot+0x6>
 80034da:	bf00      	nop
 80034dc:	200300bc 	.word	0x200300bc
 80034e0:	200015d8 	.word	0x200015d8

080034e4 <TL_MM_Init>:
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 80034e6:	4d0c      	ldr	r5, [pc, #48]	; (8003518 <TL_MM_Init+0x34>)
{
 80034e8:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 80034ea:	4628      	mov	r0, r5
 80034ec:	f00f f831 	bl	8012552 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80034f0:	480a      	ldr	r0, [pc, #40]	; (800351c <TL_MM_Init+0x38>)
 80034f2:	f00f f82e 	bl	8012552 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80034f8:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80034fa:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80034fc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80034fe:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8003500:	e9c3 2503 	strd	r2, r5, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8003504:	6822      	ldr	r2, [r4, #0]
 8003506:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8003508:	6862      	ldr	r2, [r4, #4]
 800350a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8003510:	6962      	ldr	r2, [r4, #20]
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	bd38      	pop	{r3, r4, r5, pc}
 8003516:	bf00      	nop
 8003518:	200300c4 	.word	0x200300c4
 800351c:	20001898 	.word	0x20001898
 8003520:	20030000 	.word	0x20030000

08003524 <TL_MM_EvtDone>:
{
 8003524:	b508      	push	{r3, lr}
 8003526:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <TL_MM_EvtDone+0x14>)
 800352a:	f00f f82b 	bl	8012584 <LST_insert_tail>
}
 800352e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8003532:	4802      	ldr	r0, [pc, #8]	; (800353c <TL_MM_EvtDone+0x18>)
 8003534:	f000 b8c2 	b.w	80036bc <HW_IPCC_MM_SendFreeBuf>
 8003538:	20001898 	.word	0x20001898
 800353c:	0800331d 	.word	0x0800331d

08003540 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8003540:	b513      	push	{r0, r1, r4, lr}
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8003542:	4c07      	ldr	r4, [pc, #28]	; (8003560 <HW_IPCC_TRACES_EvtNot+0x20>)
 8003544:	4806      	ldr	r0, [pc, #24]	; (8003560 <HW_IPCC_TRACES_EvtNot+0x20>)
 8003546:	f00f f807 	bl	8012558 <LST_is_empty>
 800354a:	b108      	cbz	r0, 8003550 <HW_IPCC_TRACES_EvtNot+0x10>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
    TL_TRACES_EvtReceived( phcievt );
  }

  return;
}
 800354c:	b002      	add	sp, #8
 800354e:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8003550:	4620      	mov	r0, r4
 8003552:	a901      	add	r1, sp, #4
 8003554:	f00f f82d 	bl	80125b2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8003558:	9801      	ldr	r0, [sp, #4]
 800355a:	f00f f858 	bl	801260e <TL_TRACES_EvtReceived>
 800355e:	e7f1      	b.n	8003544 <HW_IPCC_TRACES_EvtNot+0x4>
 8003560:	200300cc 	.word	0x200300cc

08003564 <HW_IPCC_Enable>:
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003568:	b082      	sub	sp, #8
 800356a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800356e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003572:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003576:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003580:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HW_IPCC_Enable+0x48>)
 8003584:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003598:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800359a:	bf20      	wfe
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HW_IPCC_Enable+0x4c>)
 800359e:	68d3      	ldr	r3, [r2, #12]
 80035a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a4:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 80035a6:	b002      	add	sp, #8
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	58000800 	.word	0x58000800
 80035b0:	58000400 	.word	0x58000400

080035b4 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 80035b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 80035b8:	b507      	push	{r0, r1, r2, lr}
 80035ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80035ca:	9b01      	ldr	r3, [sp, #4]
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HW_IPCC_Init+0x3c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035dc:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80035de:	202c      	movs	r0, #44	; 0x2c
 80035e0:	f00a fcea 	bl	800dfb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80035e4:	202d      	movs	r0, #45	; 0x2d

  return;
}
 80035e6:	b003      	add	sp, #12
 80035e8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80035ec:	f00a bce4 	b.w	800dfb8 <HAL_NVIC_EnableIRQ>
 80035f0:	58000c00 	.word	0x58000c00

080035f4 <HW_IPCC_BLE_Init>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80035f4:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HW_IPCC_BLE_Init+0xc>)
 80035f6:	6853      	ldr	r3, [r2, #4]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 80035fe:	4770      	bx	lr
 8003600:	58000c00 	.word	0x58000c00

08003604 <HW_IPCC_BLE_SendCmd>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003604:	4b02      	ldr	r3, [pc, #8]	; (8003610 <HW_IPCC_BLE_SendCmd+0xc>)
 8003606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800360a:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	58000c00 	.word	0x58000c00

08003614 <HW_IPCC_BLE_SendAclData>:
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HW_IPCC_BLE_SendAclData+0x14>)
 8003616:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800361a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003622:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );

  return;
}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	58000c00 	.word	0x58000c00

0800362c <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800362c:	4a02      	ldr	r2, [pc, #8]	; (8003638 <HW_IPCC_SYS_Init+0xc>)
 800362e:	6853      	ldr	r3, [r2, #4]
 8003630:	f023 0302 	bic.w	r3, r3, #2
 8003634:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 8003636:	4770      	bx	lr
 8003638:	58000c00 	.word	0x58000c00

0800363c <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HW_IPCC_SYS_SendCmd+0x14>)
 800363e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003642:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800364a:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58000c00 	.word	0x58000c00

08003654 <HW_IPCC_Tx_Handler>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HW_IPCC_Tx_Handler+0x60>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	f012 0f02 	tst.w	r2, #2
{
 800365c:	b510      	push	{r4, lr}
 800365e:	461c      	mov	r4, r3
 8003660:	d109      	bne.n	8003676 <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	0392      	lsls	r2, r2, #14
 8003666:	d406      	bmi.n	8003676 <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800366e:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8003670:	f7ff ff16 	bl	80034a0 <HW_IPCC_SYS_CmdEvtNot>
}
 8003674:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003676:	68e3      	ldr	r3, [r4, #12]
 8003678:	071b      	lsls	r3, r3, #28
 800367a:	d40d      	bmi.n	8003698 <HW_IPCC_Tx_Handler+0x44>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	0318      	lsls	r0, r3, #12
 8003680:	d40a      	bmi.n	8003698 <HW_IPCC_Tx_Handler+0x44>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003682:	6863      	ldr	r3, [r4, #4]
 8003684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003688:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HW_IPCC_Tx_Handler+0x64>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003690:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003694:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
 8003696:	e7ed      	b.n	8003674 <HW_IPCC_Tx_Handler+0x20>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HW_IPCC_Tx_Handler+0x60>)
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	0691      	lsls	r1, r2, #26
 800369e:	d4e9      	bmi.n	8003674 <HW_IPCC_Tx_Handler+0x20>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	0292      	lsls	r2, r2, #10
 80036a4:	d4e6      	bmi.n	8003674 <HW_IPCC_Tx_Handler+0x20>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80036ac:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 80036ae:	f7ff fec5 	bl	800343c <HW_IPCC_BLE_AclDataAckNot>
  return;
 80036b2:	e7df      	b.n	8003674 <HW_IPCC_Tx_Handler+0x20>
 80036b4:	58000c00 	.word	0x58000c00
 80036b8:	200015dc 	.word	0x200015dc

080036bc <HW_IPCC_MM_SendFreeBuf>:
{
 80036bc:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80036be:	4c08      	ldr	r4, [pc, #32]	; (80036e0 <HW_IPCC_MM_SendFreeBuf+0x24>)
 80036c0:	68e3      	ldr	r3, [r4, #12]
 80036c2:	071b      	lsls	r3, r3, #28
 80036c4:	d506      	bpl.n	80036d4 <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80036c8:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80036d0:	6063      	str	r3, [r4, #4]
}
 80036d2:	bd10      	pop	{r4, pc}
    cb();
 80036d4:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80036d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80036da:	60a3      	str	r3, [r4, #8]
  return;
 80036dc:	e7f9      	b.n	80036d2 <HW_IPCC_MM_SendFreeBuf+0x16>
 80036de:	bf00      	nop
 80036e0:	58000c00 	.word	0x58000c00
 80036e4:	200015dc 	.word	0x200015dc

080036e8 <HW_IPCC_Rx_Handler>:
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80036ea:	4c12      	ldr	r4, [pc, #72]	; (8003734 <HW_IPCC_Rx_Handler+0x4c>)
 80036ec:	69e3      	ldr	r3, [r4, #28]
 80036ee:	f013 0f02 	tst.w	r3, #2
 80036f2:	4625      	mov	r5, r4
 80036f4:	d007      	beq.n	8003706 <HW_IPCC_Rx_Handler+0x1e>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80036f6:	6863      	ldr	r3, [r4, #4]
 80036f8:	079b      	lsls	r3, r3, #30
 80036fa:	d404      	bmi.n	8003706 <HW_IPCC_Rx_Handler+0x1e>
  HW_IPCC_SYS_EvtNot();
 80036fc:	f7ff fedc 	bl	80034b8 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003700:	2302      	movs	r3, #2
 8003702:	60a3      	str	r3, [r4, #8]
  return;
 8003704:	e009      	b.n	800371a <HW_IPCC_Rx_Handler+0x32>
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003706:	69eb      	ldr	r3, [r5, #28]
 8003708:	07d8      	lsls	r0, r3, #31
 800370a:	d507      	bpl.n	800371c <HW_IPCC_Rx_Handler+0x34>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800370c:	686b      	ldr	r3, [r5, #4]
 800370e:	07d9      	lsls	r1, r3, #31
 8003710:	d404      	bmi.n	800371c <HW_IPCC_Rx_Handler+0x34>
  HW_IPCC_BLE_RxEvtNot();
 8003712:	f7ff fe71 	bl	80033f8 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003716:	2301      	movs	r3, #1
 8003718:	60ab      	str	r3, [r5, #8]
}
 800371a:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800371c:	4c05      	ldr	r4, [pc, #20]	; (8003734 <HW_IPCC_Rx_Handler+0x4c>)
 800371e:	69e3      	ldr	r3, [r4, #28]
 8003720:	071a      	lsls	r2, r3, #28
 8003722:	d5fa      	bpl.n	800371a <HW_IPCC_Rx_Handler+0x32>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	071b      	lsls	r3, r3, #28
 8003728:	d4f7      	bmi.n	800371a <HW_IPCC_Rx_Handler+0x32>
  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 800372a:	f7ff ff09 	bl	8003540 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800372e:	2308      	movs	r3, #8
 8003730:	e7e7      	b.n	8003702 <HW_IPCC_Rx_Handler+0x1a>
 8003732:	bf00      	nop
 8003734:	58000c00 	.word	0x58000c00

08003738 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
 800373a:	4e26      	ldr	r6, [pc, #152]	; (80037d4 <tc_aes128_set_encrypt_key+0x9c>)
{
 800373c:	4607      	mov	r7, r0
 800373e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
 8003740:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8003742:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
 8003744:	ad01      	add	r5, sp, #4
 8003746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800374a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003750:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
 8003754:	4638      	mov	r0, r7
 8003756:	2f00      	cmp	r7, #0
 8003758:	d038      	beq.n	80037cc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
 800375a:	2c00      	cmp	r4, #0
 800375c:	d038      	beq.n	80037d0 <tc_aes128_set_encrypt_key+0x98>
 800375e:	1f38      	subs	r0, r7, #4
 8003760:	4621      	mov	r1, r4
 8003762:	4602      	mov	r2, r0
 8003764:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8003766:	784b      	ldrb	r3, [r1, #1]
 8003768:	780d      	ldrb	r5, [r1, #0]
 800376a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 800376c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003770:	78cd      	ldrb	r5, [r1, #3]
 8003772:	432b      	orrs	r3, r5
 8003774:	788d      	ldrb	r5, [r1, #2]
 8003776:	3104      	adds	r1, #4
 8003778:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
 800377c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800377e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
 8003782:	d1f0      	bne.n	8003766 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8003784:	4c14      	ldr	r4, [pc, #80]	; (80037d8 <tc_aes128_set_encrypt_key+0xa0>)
 8003786:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
 8003788:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
 800378a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
 800378c:	d116      	bne.n	80037bc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
 800378e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003792:	5ca5      	ldrb	r5, [r4, r2]
 8003794:	0e1a      	lsrs	r2, r3, #24
 8003796:	5ca2      	ldrb	r2, [r4, r2]
 8003798:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800379c:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	5d65      	ldrb	r5, [r4, r5]
 80037a4:	5ce3      	ldrb	r3, [r4, r3]
 80037a6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80037aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80037ae:	ad0c      	add	r5, sp, #48	; 0x30
 80037b0:	f021 0303 	bic.w	r3, r1, #3
 80037b4:	442b      	add	r3, r5
 80037b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037ba:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
 80037bc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
 80037c0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
 80037c2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
 80037c4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
 80037c6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
 80037c8:	d1de      	bne.n	8003788 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
 80037ca:	2001      	movs	r0, #1
}
 80037cc:	b00d      	add	sp, #52	; 0x34
 80037ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80037d0:	4620      	mov	r0, r4
 80037d2:	e7fb      	b.n	80037cc <tc_aes128_set_encrypt_key+0x94>
 80037d4:	08015c58 	.word	0x08015c58
 80037d8:	08017474 	.word	0x08017474

080037dc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
 80037dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e0:	4615      	mov	r5, r2
 80037e2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 80037e4:	4606      	mov	r6, r0
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d058      	beq.n	800389c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
 80037ea:	2900      	cmp	r1, #0
 80037ec:	d059      	beq.n	80038a2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d059      	beq.n	80038a6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 80037f2:	2310      	movs	r3, #16
 80037f4:	460a      	mov	r2, r1
 80037f6:	4668      	mov	r0, sp
 80037f8:	4619      	mov	r1, r3
 80037fa:	f00e ff09 	bl	8012610 <_copy>
	add_round_key(state, s->words);
 80037fe:	4629      	mov	r1, r5
 8003800:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
 8003802:	4c2a      	ldr	r4, [pc, #168]	; (80038ac <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
 8003804:	f00e ff1c 	bl	8012640 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
 8003808:	f105 0710 	add.w	r7, r5, #16
 800380c:	46a1      	mov	r9, r4
 800380e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
 8003810:	46e8      	mov	r8, sp
{
 8003812:	466a      	mov	r2, sp
 8003814:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
 8003816:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
 8003818:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
 800381a:	5c61      	ldrb	r1, [r4, r1]
 800381c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
 8003820:	d1f9      	bne.n	8003816 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
 8003822:	4668      	mov	r0, sp
 8003824:	f00e ff51 	bl	80126ca <shift_rows>
	mult_row_column(t, s);
 8003828:	4669      	mov	r1, sp
 800382a:	a804      	add	r0, sp, #16
 800382c:	f00e ff86 	bl	801273c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
 8003830:	a901      	add	r1, sp, #4
 8003832:	a805      	add	r0, sp, #20
 8003834:	f00e ff82 	bl	801273c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
 8003838:	a902      	add	r1, sp, #8
 800383a:	a806      	add	r0, sp, #24
 800383c:	f00e ff7e 	bl	801273c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
 8003840:	a903      	add	r1, sp, #12
 8003842:	a807      	add	r0, sp, #28
 8003844:	f00e ff7a 	bl	801273c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8003848:	2310      	movs	r3, #16
 800384a:	4619      	mov	r1, r3
 800384c:	eb0d 0203 	add.w	r2, sp, r3
 8003850:	4668      	mov	r0, sp
 8003852:	f00e fedd 	bl	8012610 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
 8003856:	4639      	mov	r1, r7
 8003858:	4668      	mov	r0, sp
 800385a:	3710      	adds	r7, #16
 800385c:	f00e fef0 	bl	8012640 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
 8003860:	42af      	cmp	r7, r5
 8003862:	d1d5      	bne.n	8003810 <tc_aes_encrypt+0x34>
 8003864:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
 8003866:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
 800386a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
 800386c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003870:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
 8003874:	d1f7      	bne.n	8003866 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
 8003876:	4668      	mov	r0, sp
 8003878:	f00e ff27 	bl	80126ca <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
 800387c:	4629      	mov	r1, r5
 800387e:	4668      	mov	r0, sp
 8003880:	f00e fede 	bl	8012640 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
 8003884:	2310      	movs	r3, #16
 8003886:	4619      	mov	r1, r3
 8003888:	466a      	mov	r2, sp
 800388a:	4630      	mov	r0, r6
 800388c:	f00e fec0 	bl	8012610 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 8003890:	4668      	mov	r0, sp
 8003892:	2210      	movs	r2, #16
 8003894:	4621      	mov	r1, r4
 8003896:	f00e fec8 	bl	801262a <_set>

	return TC_CRYPTO_SUCCESS;
 800389a:	2001      	movs	r0, #1
}
 800389c:	b009      	add	sp, #36	; 0x24
 800389e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
 80038a2:	4608      	mov	r0, r1
 80038a4:	e7fa      	b.n	800389c <tc_aes_encrypt+0xc0>
 80038a6:	4610      	mov	r0, r2
 80038a8:	e7f8      	b.n	800389c <tc_aes_encrypt+0xc0>
 80038aa:	bf00      	nop
 80038ac:	08017474 	.word	0x08017474

080038b0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	b09d      	sub	sp, #116	; 0x74
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	9303      	str	r3, [sp, #12]
 80038ba:	6843      	ldr	r3, [r0, #4]
 80038bc:	9304      	str	r3, [sp, #16]
 80038be:	6883      	ldr	r3, [r0, #8]
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	68c3      	ldr	r3, [r0, #12]
 80038c4:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 80038c6:	6903      	ldr	r3, [r0, #16]
 80038c8:	9307      	str	r3, [sp, #28]
 80038ca:	6943      	ldr	r3, [r0, #20]
 80038cc:	9308      	str	r3, [sp, #32]
 80038ce:	6983      	ldr	r3, [r0, #24]
 80038d0:	9309      	str	r3, [sp, #36]	; 0x24
 80038d2:	69c3      	ldr	r3, [r0, #28]
 80038d4:	930a      	str	r3, [sp, #40]	; 0x28
 80038d6:	4698      	mov	r8, r3
 80038d8:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80038dc:	9b05      	ldr	r3, [sp, #20]
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	e9dd e206 	ldrd	lr, r2, [sp, #24]
 80038e4:	9b04      	ldr	r3, [sp, #16]
 80038e6:	f8df a190 	ldr.w	sl, [pc, #400]	; 8003a78 <compress+0x1c8>
 80038ea:	9c03      	ldr	r4, [sp, #12]
{
 80038ec:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80038ee:	9300      	str	r3, [sp, #0]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 80038f0:	2700      	movs	r7, #0
	n = (((unsigned int)(*((*c)++))) << 24);
 80038f2:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
 80038f4:	9e01      	ldr	r6, [sp, #4]
 80038f6:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
 80038f8:	ab0c      	add	r3, sp, #48	; 0x30
 80038fa:	ba2d      	rev	r5, r5
 80038fc:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
 80038fe:	f85a 3b04 	ldr.w	r3, [sl], #4
 8003902:	eb05 0903 	add.w	r9, r5, r3
 8003906:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800390a:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
 800390e:	ea85 6572 	eor.w	r5, r5, r2, ror #25
 8003912:	444d      	add	r5, r9
 8003914:	ea2b 0302 	bic.w	r3, fp, r2
 8003918:	ea02 090c 	and.w	r9, r2, ip
 800391c:	ea83 0309 	eor.w	r3, r3, r9
 8003920:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
 8003922:	e9dd 1500 	ldrd	r1, r5, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8003926:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
 8003928:	404d      	eors	r5, r1
	return (((a) >> n) | ((a) << (32 - n)));
 800392a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800392e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8003932:	4025      	ands	r5, r4
 8003934:	ea01 0906 	and.w	r9, r1, r6
 8003938:	ea85 0509 	eor.w	r5, r5, r9
 800393c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
 8003940:	3704      	adds	r7, #4
 8003942:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
 8003944:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8003946:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
 800394a:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
 800394c:	46b6      	mov	lr, r6
 800394e:	46d8      	mov	r8, fp
 8003950:	f040 8081 	bne.w	8003a56 <compress+0x1a6>
 8003954:	4947      	ldr	r1, [pc, #284]	; (8003a74 <compress+0x1c4>)
 8003956:	910b      	str	r1, [sp, #44]	; 0x2c
 8003958:	f04f 0a10 	mov.w	sl, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 800395c:	4651      	mov	r1, sl
 800395e:	f10a 0a01 	add.w	sl, sl, #1
 8003962:	ae1c      	add	r6, sp, #112	; 0x70
 8003964:	f00a 070f 	and.w	r7, sl, #15
 8003968:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800396c:	f001 090f 	and.w	r9, r1, #15
		s0 = work_space[(i+1)&0x0f];
 8003970:	f857 6c40 	ldr.w	r6, [r7, #-64]
 8003974:	9602      	str	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 8003976:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
 800397a:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800397e:	3109      	adds	r1, #9
		s0 = sigma0(s0);
 8003980:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8003984:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
 8003988:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800398a:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800398e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
 8003992:	f007 070f 	and.w	r7, r7, #15
 8003996:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800399a:	f851 1c40 	ldr.w	r1, [r1, #-64]
 800399e:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
 80039a2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80039a6:	4431      	add	r1, r6
		s0 = sigma0(s0);
 80039a8:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 80039aa:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
 80039ae:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
 80039b2:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
 80039b6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80039ba:	4441      	add	r1, r8
 80039bc:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80039be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80039c0:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 80039c4:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80039c8:	ea05 0802 	and.w	r8, r5, r2
 80039cc:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
 80039d0:	ea2c 0705 	bic.w	r7, ip, r5
 80039d4:	f856 eb04 	ldr.w	lr, [r6], #4
 80039d8:	960b      	str	r6, [sp, #44]	; 0x2c
 80039da:	ea87 0708 	eor.w	r7, r7, r8
 80039de:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 80039e2:	444f      	add	r7, r9
		t2 = Sigma0(a) + Maj(a, b, c);
 80039e4:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80039e6:	4477      	add	r7, lr
 80039e8:	4439      	add	r1, r7
 80039ea:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
 80039ec:	ea04 0e06 	and.w	lr, r4, r6
 80039f0:	ea84 0b06 	eor.w	fp, r4, r6
	return (((a) >> n) | ((a) << (32 - n)));
 80039f4:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
 80039f8:	9e01      	ldr	r6, [sp, #4]
		t2 = Sigma0(a) + Maj(a, b, c);
 80039fa:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
 80039fe:	ea0b 0b03 	and.w	fp, fp, r3
		h = g; g = f; f = e; e = d + t1;
 8003a02:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
 8003a04:	ea8b 0b0e 	eor.w	fp, fp, lr
 8003a08:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8003a0c:	445f      	add	r7, fp
		h = g; g = f; f = e; e = d + t1;
 8003a0e:	46b0      	mov	r8, r6
	for ( ; i < 64; ++i) {
 8003a10:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8003a14:	9e00      	ldr	r6, [sp, #0]
 8003a16:	9601      	str	r6, [sp, #4]
		d = c; c = b; b = a; a = t1 + t2;
 8003a18:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
 8003a1a:	46e3      	mov	fp, ip
 8003a1c:	d123      	bne.n	8003a66 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 8003a1e:	9e03      	ldr	r6, [sp, #12]
 8003a20:	440e      	add	r6, r1
 8003a22:	9904      	ldr	r1, [sp, #16]
 8003a24:	6006      	str	r6, [r0, #0]
 8003a26:	4419      	add	r1, r3
 8003a28:	9b05      	ldr	r3, [sp, #20]
 8003a2a:	6041      	str	r1, [r0, #4]
 8003a2c:	4423      	add	r3, r4
 8003a2e:	9900      	ldr	r1, [sp, #0]
 8003a30:	6083      	str	r3, [r0, #8]
 8003a32:	9b06      	ldr	r3, [sp, #24]
 8003a34:	440b      	add	r3, r1
 8003a36:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8003a38:	9b07      	ldr	r3, [sp, #28]
 8003a3a:	4443      	add	r3, r8
 8003a3c:	6103      	str	r3, [r0, #16]
 8003a3e:	9b08      	ldr	r3, [sp, #32]
 8003a40:	442b      	add	r3, r5
 8003a42:	6143      	str	r3, [r0, #20]
 8003a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a46:	4413      	add	r3, r2
 8003a48:	6183      	str	r3, [r0, #24]
 8003a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a4c:	4463      	add	r3, ip
 8003a4e:	61c3      	str	r3, [r0, #28]
}
 8003a50:	b01d      	add	sp, #116	; 0x74
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	9900      	ldr	r1, [sp, #0]
 8003a58:	46e3      	mov	fp, ip
 8003a5a:	e9cd 4100 	strd	r4, r1, [sp]
 8003a5e:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
 8003a60:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
 8003a62:	462a      	mov	r2, r5
 8003a64:	e745      	b.n	80038f2 <compress+0x42>
 8003a66:	4694      	mov	ip, r2
 8003a68:	9400      	str	r4, [sp, #0]
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
 8003a6e:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
 8003a70:	460b      	mov	r3, r1
 8003a72:	e773      	b.n	800395c <compress+0xac>
 8003a74:	08016054 	.word	0x08016054
 8003a78:	08016014 	.word	0x08016014

08003a7c <tc_sha256_init>:
{
 8003a7c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 8003a7e:	4604      	mov	r4, r0
 8003a80:	b1c8      	cbz	r0, 8003ab6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8003a82:	2270      	movs	r2, #112	; 0x70
 8003a84:	2100      	movs	r1, #0
 8003a86:	f00e fdd0 	bl	801262a <_set>
	s->iv[1] = 0xbb67ae85;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <tc_sha256_init+0x3c>)
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
 8003a8e:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <tc_sha256_init+0x44>)
	s->iv[5] = 0x9b05688c;
 8003a90:	480c      	ldr	r0, [pc, #48]	; (8003ac4 <tc_sha256_init+0x48>)
	s->iv[1] = 0xbb67ae85;
 8003a92:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <tc_sha256_init+0x4c>)
 8003a98:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <tc_sha256_init+0x50>)
 8003a9e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	s->iv[6] = 0x1f83d9ab;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <tc_sha256_init+0x54>)
 8003aa4:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8003aa6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8003aaa:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8003aae:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8003ab2:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8003ab4:	2001      	movs	r0, #1
}
 8003ab6:	bd10      	pop	{r4, pc}
 8003ab8:	bb67ae85 	.word	0xbb67ae85
 8003abc:	6a09e667 	.word	0x6a09e667
 8003ac0:	3c6ef372 	.word	0x3c6ef372
 8003ac4:	510e527f 	.word	0x510e527f
 8003ac8:	a54ff53a 	.word	0xa54ff53a
 8003acc:	9b05688c 	.word	0x9b05688c
 8003ad0:	1f83d9ab 	.word	0x1f83d9ab

08003ad4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003ad4:	4901      	ldr	r1, [pc, #4]	; (8003adc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003ad6:	2210      	movs	r2, #16
	str	r2, [r1]
 8003ad8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003ada:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003adc:	e000ed10 	.word	0xe000ed10

08003ae0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003ae0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003ae2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003ae4:	f380 8811 	msr	BASEPRI, r0
	isb
 8003ae8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003aec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003af0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003af2:	b662      	cpsie	i
	isb
 8003af4:	f3bf 8f6f 	isb	sy

	bx	lr
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	4680      	mov	r8, r0
 8003b04:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8003b06:	460c      	mov	r4, r1
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d045      	beq.n	8003b98 <z_arm_fatal_error+0x9c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003b0c:	46e9      	mov	r9, sp
 8003b0e:	b088      	sub	sp, #32
 8003b10:	466d      	mov	r5, sp
 8003b12:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	4823      	ldr	r0, [pc, #140]	; (8003ba8 <z_arm_fatal_error+0xac>)
 8003b1a:	462e      	mov	r6, r5
 8003b1c:	f04f 0a05 	mov.w	sl, #5
 8003b20:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8003b24:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8003b28:	f846 af0c 	str.w	sl, [r6, #12]!
 8003b2c:	481f      	ldr	r0, [pc, #124]	; (8003bac <z_arm_fatal_error+0xb0>)
 8003b2e:	4632      	mov	r2, r6
 8003b30:	2300      	movs	r3, #0
 8003b32:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003b36:	f7ff fa11 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003b3a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8003b3e:	6963      	ldr	r3, [r4, #20]
 8003b40:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <z_arm_fatal_error+0xb4>)
 8003b42:	f8c5 a00c 	str.w	sl, [r5, #12]
 8003b46:	46cd      	mov	sp, r9
 8003b48:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8003b4c:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8003b50:	46ad      	mov	sp, r5
 8003b52:	4816      	ldr	r0, [pc, #88]	; (8003bac <z_arm_fatal_error+0xb0>)
 8003b54:	4632      	mov	r2, r6
 8003b56:	2300      	movs	r3, #0
 8003b58:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003b5c:	f7ff f9fe 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <z_arm_fatal_error+0xb8>)
 8003b62:	69e3      	ldr	r3, [r4, #28]
 8003b64:	2503      	movs	r5, #3
 8003b66:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003b6a:	46cd      	mov	sp, r9
 8003b6c:	60fd      	str	r5, [r7, #12]
 8003b6e:	480f      	ldr	r0, [pc, #60]	; (8003bac <z_arm_fatal_error+0xb0>)
 8003b70:	f107 020c 	add.w	r2, r7, #12
 8003b74:	2300      	movs	r3, #0
 8003b76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003b7a:	f7ff f9ef 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003b7e:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <z_arm_fatal_error+0xbc>)
 8003b80:	69a3      	ldr	r3, [r4, #24]
 8003b82:	60fd      	str	r5, [r7, #12]
 8003b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <z_arm_fatal_error+0xb0>)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f107 020c 	add.w	r2, r7, #12
 8003b90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003b94:	f7ff f9e2 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f00a fae4 	bl	800e168 <z_fatal_error>
}
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	08017574 	.word	0x08017574
 8003bac:	08015bac 	.word	0x08015bac
 8003bb0:	080175a3 	.word	0x080175a3
 8003bb4:	080175d2 	.word	0x080175d2
 8003bb8:	080175e1 	.word	0x080175e1

08003bbc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003bbc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	db08      	blt.n	8003bd4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f000 001f 	and.w	r0, r0, #31
 8003bc8:	fa02 f000 	lsl.w	r0, r2, r0
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	4a02      	ldr	r2, [pc, #8]	; (8003bd8 <arch_irq_enable+0x1c>)
 8003bd0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8003bde:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 8003be0:	2c0f      	cmp	r4, #15
{
 8003be2:	4605      	mov	r5, r0
 8003be4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
 8003be6:	d90f      	bls.n	8003c08 <z_arm_irq_priority_set+0x2c>
 8003be8:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <z_arm_irq_priority_set+0x54>)
 8003bea:	4912      	ldr	r1, [pc, #72]	; (8003c34 <z_arm_irq_priority_set+0x58>)
 8003bec:	4812      	ldr	r0, [pc, #72]	; (8003c38 <z_arm_irq_priority_set+0x5c>)
 8003bee:	2357      	movs	r3, #87	; 0x57
 8003bf0:	f00e fb5a 	bl	80122a8 <assert_print>
 8003bf4:	4811      	ldr	r0, [pc, #68]	; (8003c3c <z_arm_irq_priority_set+0x60>)
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	f00e fb54 	bl	80122a8 <assert_print>
 8003c00:	480b      	ldr	r0, [pc, #44]	; (8003c30 <z_arm_irq_priority_set+0x54>)
 8003c02:	2157      	movs	r1, #87	; 0x57
 8003c04:	f00e fb49 	bl	801229a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003c08:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	bfac      	ite	ge
 8003c0e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	4b0b      	ldrlt	r3, [pc, #44]	; (8003c40 <z_arm_irq_priority_set+0x64>)
 8003c14:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8003c18:	bfb8      	it	lt
 8003c1a:	f005 050f 	andlt.w	r5, r5, #15
 8003c1e:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	bfaa      	itet	ge
 8003c22:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	bf00      	nop
 8003c30:	0801760f 	.word	0x0801760f
 8003c34:	08017645 	.word	0x08017645
 8003c38:	08016836 	.word	0x08016836
 8003c3c:	08017660 	.word	0x08017660
 8003c40:	e000ed14 	.word	0xe000ed14

08003c44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003c44:	bf30      	wfi
    b z_SysNmiOnReset
 8003c46:	f7ff bffd 	b.w	8003c44 <z_SysNmiOnReset>
 8003c4a:	bf00      	nop

08003c4c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8003c4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <z_arm_prep_c+0x44>)
 8003c52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003c56:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003c6c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003c70:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003c74:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003c78:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003c7c:	f00a fb22 	bl	800e2c4 <z_bss_zero>
	z_data_copy();
 8003c80:	f00d f864 	bl	8010d4c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003c84:	f000 fbe0 	bl	8004448 <z_arm_interrupt_init>
	z_cstart();
 8003c88:	f00a fb60 	bl	800e34c <z_cstart>
 8003c8c:	08000000 	.word	0x08000000
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003c98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003c9e:	4909      	ldr	r1, [pc, #36]	; (8003cc4 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003ca0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003ca2:	684b      	ldr	r3, [r1, #4]
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	604b      	str	r3, [r1, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003cb4:	6893      	ldr	r3, [r2, #8]
}
 8003cb6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20001818 	.word	0x20001818
 8003cc0:	08016730 	.word	0x08016730
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003cc8:	4912      	ldr	r1, [pc, #72]	; (8003d14 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003cca:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003ccc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003cd0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003cd2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003cd6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003cda:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003cdc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003ce0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003ce4:	4f0c      	ldr	r7, [pc, #48]	; (8003d18 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003ce6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003cea:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003cec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003cee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003cf0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003cf2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003cf4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003cfa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003cfc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003cfe:	f000 fbe3 	bl	80044c8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003d02:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003d06:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003d0a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003d0e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003d12:	4770      	bx	lr
    ldr r1, =_kernel
 8003d14:	20001818 	.word	0x20001818
    ldr v4, =_SCS_ICSR
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003d1c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003d20:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003d22:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003d26:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003d2a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003d2c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003d30:	2902      	cmp	r1, #2
    beq _oops
 8003d32:	d0ff      	beq.n	8003d34 <_oops>

08003d34 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003d34:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003d36:	f00f f861 	bl	8012dfc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003d3a:	bd01      	pop	{r0, pc}

08003d3c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003d3c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003d40:	9b00      	ldr	r3, [sp, #0]
 8003d42:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8003d46:	490a      	ldr	r1, [pc, #40]	; (8003d70 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8003d48:	9b01      	ldr	r3, [sp, #4]
 8003d4a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003d4e:	9b02      	ldr	r3, [sp, #8]
 8003d50:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003d54:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d5c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003d60:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003d64:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003d66:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8003d68:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003d6a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	08011f95 	.word	0x08011f95

08003d74 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003d74:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <z_check_thread_stack_fail+0x30>)
{
 8003d76:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8003d78:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8003d7a:	b190      	cbz	r0, 8003da2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003d7c:	f113 0f16 	cmn.w	r3, #22
 8003d80:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003d82:	d005      	beq.n	8003d90 <z_check_thread_stack_fail+0x1c>
 8003d84:	f1a0 0220 	sub.w	r2, r0, #32
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d806      	bhi.n	8003d9a <z_check_thread_stack_fail+0x26>
 8003d8c:	4283      	cmp	r3, r0
 8003d8e:	d204      	bcs.n	8003d9a <z_check_thread_stack_fail+0x26>
 8003d90:	4281      	cmp	r1, r0
 8003d92:	bf2c      	ite	cs
 8003d94:	2100      	movcs	r1, #0
 8003d96:	2101      	movcc	r1, #1
 8003d98:	e000      	b.n	8003d9c <z_check_thread_stack_fail+0x28>
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003d9e:	bf08      	it	eq
 8003da0:	2000      	moveq	r0, #0
}
 8003da2:	4770      	bx	lr
 8003da4:	20001818 	.word	0x20001818

08003da8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003da8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <arch_switch_to_main_thread+0x28>)
 8003dac:	6098      	str	r0, [r3, #8]
{
 8003dae:	460d      	mov	r5, r1
 8003db0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003db2:	f000 fb89 	bl	80044c8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003db6:	4620      	mov	r0, r4
 8003db8:	f385 8809 	msr	PSP, r5
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	b663      	cpsie	if
 8003dc0:	f381 8811 	msr	BASEPRI, r1
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f00e f8e2 	bl	8011f94 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003dd0:	20001818 	.word	0x20001818

08003dd4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003dd4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003dd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003dda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003dde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003de2:	4904      	ldr	r1, [pc, #16]	; (8003df4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003de4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003de6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003de8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003dea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003dee:	4902      	ldr	r1, [pc, #8]	; (8003df8 <_isr_wrapper+0x24>)
	bx r1
 8003df0:	4708      	bx	r1
 8003df2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003df4:	080158ac 	.word	0x080158ac
	ldr r1, =z_arm_int_exit
 8003df8:	08003dfd 	.word	0x08003dfd

08003dfc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003dfe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003e00:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003e02:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003e04:	d003      	beq.n	8003e0e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003e06:	4903      	ldr	r1, [pc, #12]	; (8003e14 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003e0c:	600a      	str	r2, [r1, #0]

08003e0e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003e0e:	4770      	bx	lr
	ldr r3, =_kernel
 8003e10:	20001818 	.word	0x20001818
	ldr r1, =_SCS_ICSR
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8003e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e1c:	b086      	sub	sp, #24
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	; (8003f58 <mem_manage_fault+0x140>)
 8003e20:	9304      	str	r3, [sp, #16]
{
 8003e22:	4680      	mov	r8, r0
 8003e24:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003e26:	484d      	ldr	r0, [pc, #308]	; (8003f5c <mem_manage_fault+0x144>)
{
 8003e28:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003e2a:	2402      	movs	r4, #2
 8003e2c:	aa03      	add	r2, sp, #12
 8003e2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e32:	9403      	str	r4, [sp, #12]
 8003e34:	f00e fff1 	bl	8012e1a <z_log_msg2_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003e38:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <mem_manage_fault+0x148>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	06d8      	lsls	r0, r3, #27
 8003e3e:	d508      	bpl.n	8003e52 <mem_manage_fault+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8003e40:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <mem_manage_fault+0x14c>)
 8003e42:	4846      	ldr	r0, [pc, #280]	; (8003f5c <mem_manage_fault+0x144>)
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e4a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003e4e:	f00e ffe4 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003e52:	4b43      	ldr	r3, [pc, #268]	; (8003f60 <mem_manage_fault+0x148>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	0719      	lsls	r1, r3, #28
 8003e58:	d509      	bpl.n	8003e6e <mem_manage_fault+0x56>
		PR_FAULT_INFO("  Unstacking error");
 8003e5a:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <mem_manage_fault+0x150>)
 8003e5c:	9304      	str	r3, [sp, #16]
 8003e5e:	483f      	ldr	r0, [pc, #252]	; (8003f5c <mem_manage_fault+0x144>)
 8003e60:	2302      	movs	r3, #2
 8003e62:	aa03      	add	r2, sp, #12
 8003e64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	f00e ffd6 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003e6e:	4c3c      	ldr	r4, [pc, #240]	; (8003f60 <mem_manage_fault+0x148>)
 8003e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e72:	079a      	lsls	r2, r3, #30
 8003e74:	d430      	bmi.n	8003ed8 <mem_manage_fault+0xc0>
	uint32_t mmfar = -EINVAL;
 8003e76:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <mem_manage_fault+0x148>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	07dd      	lsls	r5, r3, #31
 8003e80:	d509      	bpl.n	8003e96 <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <mem_manage_fault+0x154>)
 8003e84:	9304      	str	r3, [sp, #16]
 8003e86:	4835      	ldr	r0, [pc, #212]	; (8003f5c <mem_manage_fault+0x144>)
 8003e88:	2302      	movs	r3, #2
 8003e8a:	aa03      	add	r2, sp, #12
 8003e8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	f00e ffc2 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <mem_manage_fault+0x148>)
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	069c      	lsls	r4, r3, #26
 8003e9c:	d509      	bpl.n	8003eb2 <mem_manage_fault+0x9a>
		PR_FAULT_INFO(
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <mem_manage_fault+0x158>)
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	482e      	ldr	r0, [pc, #184]	; (8003f5c <mem_manage_fault+0x144>)
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	aa03      	add	r2, sp, #12
 8003ea8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	f00e ffb4 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003eb2:	4d2b      	ldr	r5, [pc, #172]	; (8003f60 <mem_manage_fault+0x148>)
 8003eb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003eb6:	06d8      	lsls	r0, r3, #27
 8003eb8:	d42e      	bmi.n	8003f18 <mem_manage_fault+0x100>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003eba:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003ebc:	0799      	lsls	r1, r3, #30
 8003ebe:	d42b      	bmi.n	8003f18 <mem_manage_fault+0x100>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003ec0:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <mem_manage_fault+0x148>)
 8003ec4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003ec6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003eca:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 8003ecc:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	7033      	strb	r3, [r6, #0]
}
 8003ed2:	b006      	add	sp, #24
 8003ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <mem_manage_fault+0x15c>)
 8003eda:	9304      	str	r3, [sp, #16]
 8003edc:	481f      	ldr	r0, [pc, #124]	; (8003f5c <mem_manage_fault+0x144>)
 8003ede:	2302      	movs	r3, #2
 8003ee0:	aa03      	add	r2, sp, #12
 8003ee2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	f00e ff97 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8003eec:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003eee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	d5c0      	bpl.n	8003e76 <mem_manage_fault+0x5e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <mem_manage_fault+0x160>)
 8003ef6:	4819      	ldr	r0, [pc, #100]	; (8003f5c <mem_manage_fault+0x144>)
 8003ef8:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8003efc:	aa03      	add	r2, sp, #12
 8003efe:	2303      	movs	r3, #3
 8003f00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	f00e ff88 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	d0b5      	beq.n	8003e7a <mem_manage_fault+0x62>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f16:	e7b0      	b.n	8003e7a <mem_manage_fault+0x62>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003f18:	686b      	ldr	r3, [r5, #4]
 8003f1a:	051a      	lsls	r2, r3, #20
 8003f1c:	d5d0      	bpl.n	8003ec0 <mem_manage_fault+0xa8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003f1e:	4641      	mov	r1, r8
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff ff27 	bl	8003d74 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8003f26:	4604      	mov	r4, r0
 8003f28:	b118      	cbz	r0, 8003f32 <mem_manage_fault+0x11a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003f2a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003f2e:	2402      	movs	r4, #2
 8003f30:	e7c7      	b.n	8003ec2 <mem_manage_fault+0xaa>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
 8003f32:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003f34:	06db      	lsls	r3, r3, #27
 8003f36:	d5c3      	bpl.n	8003ec0 <mem_manage_fault+0xa8>
 8003f38:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <mem_manage_fault+0x164>)
 8003f3a:	4911      	ldr	r1, [pc, #68]	; (8003f80 <mem_manage_fault+0x168>)
 8003f3c:	4811      	ldr	r0, [pc, #68]	; (8003f84 <mem_manage_fault+0x16c>)
 8003f3e:	f240 1349 	movw	r3, #329	; 0x149
 8003f42:	f00e f9b1 	bl	80122a8 <assert_print>
 8003f46:	4810      	ldr	r0, [pc, #64]	; (8003f88 <mem_manage_fault+0x170>)
 8003f48:	f00e f9ae 	bl	80122a8 <assert_print>
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <mem_manage_fault+0x164>)
 8003f4e:	f240 1149 	movw	r1, #329	; 0x149
 8003f52:	f00e f9a2 	bl	801229a <assert_post_action>
 8003f56:	e7b4      	b.n	8003ec2 <mem_manage_fault+0xaa>
 8003f58:	080176a0 	.word	0x080176a0
 8003f5c:	08015bac 	.word	0x08015bac
 8003f60:	e000ed00 	.word	0xe000ed00
 8003f64:	080176b6 	.word	0x080176b6
 8003f68:	080176e9 	.word	0x080176e9
 8003f6c:	0801772a 	.word	0x0801772a
 8003f70:	08017749 	.word	0x08017749
 8003f74:	080176fc 	.word	0x080176fc
 8003f78:	08017714 	.word	0x08017714
 8003f7c:	08017778 	.word	0x08017778
 8003f80:	080177b2 	.word	0x080177b2
 8003f84:	08016836 	.word	0x08016836
 8003f88:	080177fc 	.word	0x080177fc

08003f8c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <usage_fault.isra.0+0xd4>)
 8003f92:	4834      	ldr	r0, [pc, #208]	; (8004064 <usage_fault.isra.0+0xd8>)
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	2402      	movs	r4, #2
 8003f98:	aa03      	add	r2, sp, #12
 8003f9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003f9e:	9403      	str	r4, [sp, #12]
 8003fa0:	f00e ff3b 	bl	8012e1a <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <usage_fault.isra.0+0xdc>)
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	d508      	bpl.n	8003fbe <usage_fault.isra.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8003fac:	4b2f      	ldr	r3, [pc, #188]	; (800406c <usage_fault.isra.0+0xe0>)
 8003fae:	482d      	ldr	r0, [pc, #180]	; (8004064 <usage_fault.isra.0+0xd8>)
 8003fb0:	aa03      	add	r2, sp, #12
 8003fb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003fb6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003fba:	f00e ff2e 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <usage_fault.isra.0+0xdc>)
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	01dc      	lsls	r4, r3, #7
 8003fc4:	d509      	bpl.n	8003fda <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <usage_fault.isra.0+0xe4>)
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	4826      	ldr	r0, [pc, #152]	; (8004064 <usage_fault.isra.0+0xd8>)
 8003fcc:	2302      	movs	r3, #2
 8003fce:	aa03      	add	r2, sp, #12
 8003fd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	f00e ff20 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <usage_fault.isra.0+0xdc>)
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	0318      	lsls	r0, r3, #12
 8003fe0:	d509      	bpl.n	8003ff6 <usage_fault.isra.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <usage_fault.isra.0+0xe8>)
 8003fe4:	9304      	str	r3, [sp, #16]
 8003fe6:	481f      	ldr	r0, [pc, #124]	; (8004064 <usage_fault.isra.0+0xd8>)
 8003fe8:	2302      	movs	r3, #2
 8003fea:	aa03      	add	r2, sp, #12
 8003fec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	f00e ff12 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003ff6:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <usage_fault.isra.0+0xdc>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	0359      	lsls	r1, r3, #13
 8003ffc:	d509      	bpl.n	8004012 <usage_fault.isra.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <usage_fault.isra.0+0xec>)
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	4818      	ldr	r0, [pc, #96]	; (8004064 <usage_fault.isra.0+0xd8>)
 8004004:	2302      	movs	r3, #2
 8004006:	aa03      	add	r2, sp, #12
 8004008:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	f00e ff04 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <usage_fault.isra.0+0xdc>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	039a      	lsls	r2, r3, #14
 8004018:	d509      	bpl.n	800402e <usage_fault.isra.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <usage_fault.isra.0+0xf0>)
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	4811      	ldr	r0, [pc, #68]	; (8004064 <usage_fault.isra.0+0xd8>)
 8004020:	2302      	movs	r3, #2
 8004022:	aa03      	add	r2, sp, #12
 8004024:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	f00e fef6 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <usage_fault.isra.0+0xdc>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	03db      	lsls	r3, r3, #15
 8004034:	d509      	bpl.n	800404a <usage_fault.isra.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <usage_fault.isra.0+0xf4>)
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	480a      	ldr	r0, [pc, #40]	; (8004064 <usage_fault.isra.0+0xd8>)
 800403c:	2302      	movs	r3, #2
 800403e:	aa03      	add	r2, sp, #12
 8004040:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	f00e fee8 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <usage_fault.isra.0+0xdc>)
 800404c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800404e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004052:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 8004056:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004058:	6293      	str	r3, [r2, #40]	; 0x28
}
 800405a:	b006      	add	sp, #24
 800405c:	bd10      	pop	{r4, pc}
 800405e:	bf00      	nop
 8004060:	0801781f 	.word	0x0801781f
 8004064:	08015bac 	.word	0x08015bac
 8004068:	e000ed00 	.word	0xe000ed00
 800406c:	08017837 	.word	0x08017837
 8004070:	0801784a 	.word	0x0801784a
 8004074:	08017864 	.word	0x08017864
 8004078:	08017882 	.word	0x08017882
 800407c:	080178a7 	.word	0x080178a7
 8004080:	080178c1 	.word	0x080178c1

08004084 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004088:	4b39      	ldr	r3, [pc, #228]	; (8004170 <bus_fault.isra.0+0xec>)
 800408a:	9304      	str	r3, [sp, #16]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800408c:	4606      	mov	r6, r0
 800408e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004090:	4838      	ldr	r0, [pc, #224]	; (8004174 <bus_fault.isra.0+0xf0>)
 8004092:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004096:	2402      	movs	r4, #2
 8004098:	aa03      	add	r2, sp, #12
 800409a:	9403      	str	r4, [sp, #12]
 800409c:	f00e febd 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <bus_fault.isra.0+0xf4>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	04d9      	lsls	r1, r3, #19
 80040a6:	d508      	bpl.n	80040ba <bus_fault.isra.0+0x36>
		PR_FAULT_INFO("  Stacking error");
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <bus_fault.isra.0+0xf8>)
 80040aa:	4832      	ldr	r0, [pc, #200]	; (8004174 <bus_fault.isra.0+0xf0>)
 80040ac:	aa03      	add	r2, sp, #12
 80040ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040b2:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80040b6:	f00e feb0 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <bus_fault.isra.0+0xf4>)
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	051a      	lsls	r2, r3, #20
 80040c0:	d509      	bpl.n	80040d6 <bus_fault.isra.0+0x52>
		PR_FAULT_INFO("  Unstacking error");
 80040c2:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <bus_fault.isra.0+0xfc>)
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	482b      	ldr	r0, [pc, #172]	; (8004174 <bus_fault.isra.0+0xf0>)
 80040c8:	2302      	movs	r3, #2
 80040ca:	aa03      	add	r2, sp, #12
 80040cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	f00e fea2 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80040d6:	4c28      	ldr	r4, [pc, #160]	; (8004178 <bus_fault.isra.0+0xf4>)
 80040d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040da:	059b      	lsls	r3, r3, #22
 80040dc:	d51d      	bpl.n	800411a <bus_fault.isra.0+0x96>
		PR_FAULT_INFO("  Precise data bus error");
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <bus_fault.isra.0+0x100>)
 80040e0:	4824      	ldr	r0, [pc, #144]	; (8004174 <bus_fault.isra.0+0xf0>)
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	aa03      	add	r2, sp, #12
 80040e6:	2302      	movs	r3, #2
 80040e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040ec:	9303      	str	r3, [sp, #12]
 80040ee:	f00e fe94 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
		STORE_xFAR(bfar, SCB->BFAR);
 80040f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80040f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040f6:	0410      	lsls	r0, r2, #16
 80040f8:	d50f      	bpl.n	800411a <bus_fault.isra.0+0x96>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80040fa:	4a23      	ldr	r2, [pc, #140]	; (8004188 <bus_fault.isra.0+0x104>)
 80040fc:	481d      	ldr	r0, [pc, #116]	; (8004174 <bus_fault.isra.0+0xf0>)
 80040fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004102:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004106:	2303      	movs	r3, #3
 8004108:	aa03      	add	r2, sp, #12
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	f00e fe85 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8004110:	b11e      	cbz	r6, 800411a <bus_fault.isra.0+0x96>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004114:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004118:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <bus_fault.isra.0+0xf4>)
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	0559      	lsls	r1, r3, #21
 8004120:	d509      	bpl.n	8004136 <bus_fault.isra.0+0xb2>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <bus_fault.isra.0+0x108>)
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	4813      	ldr	r0, [pc, #76]	; (8004174 <bus_fault.isra.0+0xf0>)
 8004128:	2302      	movs	r3, #2
 800412a:	aa03      	add	r2, sp, #12
 800412c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	f00e fe72 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <bus_fault.isra.0+0xf4>)
 8004138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413a:	05d2      	lsls	r2, r2, #23
 800413c:	d512      	bpl.n	8004164 <bus_fault.isra.0+0xe0>
		PR_FAULT_INFO("  Instruction bus error");
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <bus_fault.isra.0+0x10c>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	480c      	ldr	r0, [pc, #48]	; (8004174 <bus_fault.isra.0+0xf0>)
 8004144:	2302      	movs	r3, #2
 8004146:	aa03      	add	r2, sp, #12
 8004148:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	f00e fe64 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <bus_fault.isra.0+0xf4>)
 8004154:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004156:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004158:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800415c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800415e:	7028      	strb	r0, [r5, #0]
}
 8004160:	b006      	add	sp, #24
 8004162:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	049b      	lsls	r3, r3, #18
 8004168:	d5f3      	bpl.n	8004152 <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <bus_fault.isra.0+0x110>)
 800416c:	e7e8      	b.n	8004140 <bus_fault.isra.0+0xbc>
 800416e:	bf00      	nop
 8004170:	080178ec 	.word	0x080178ec
 8004174:	08015bac 	.word	0x08015bac
 8004178:	e000ed00 	.word	0xe000ed00
 800417c:	08017902 	.word	0x08017902
 8004180:	080176e9 	.word	0x080176e9
 8004184:	08017913 	.word	0x08017913
 8004188:	0801792c 	.word	0x0801792c
 800418c:	08017941 	.word	0x08017941
 8004190:	0801795c 	.word	0x0801795c
 8004194:	08017749 	.word	0x08017749

08004198 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800419c:	4b8b      	ldr	r3, [pc, #556]	; (80043cc <z_arm_fault+0x234>)
{
 800419e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80041a0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80041a8:	f3c8 0408 	ubfx	r4, r8, #0, #9
 80041ac:	2600      	movs	r6, #0
 80041ae:	f386 8811 	msr	BASEPRI, r6
 80041b2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80041b6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80041ba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80041be:	d10e      	bne.n	80041de <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80041c0:	f002 030c 	and.w	r3, r2, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d11b      	bne.n	8004200 <z_arm_fault+0x68>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80041c8:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <z_arm_fault+0x238>)
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	4881      	ldr	r0, [pc, #516]	; (80043d4 <z_arm_fault+0x23c>)
 80041ce:	2302      	movs	r3, #2
 80041d0:	f107 0214 	add.w	r2, r7, #20
 80041d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	f00e fe1e 	bl	8012e1a <z_log_msg2_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
 80041de:	4a7e      	ldr	r2, [pc, #504]	; (80043d8 <z_arm_fault+0x240>)
 80041e0:	497e      	ldr	r1, [pc, #504]	; (80043dc <z_arm_fault+0x244>)
 80041e2:	487f      	ldr	r0, [pc, #508]	; (80043e0 <z_arm_fault+0x248>)
 80041e4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80041e8:	f00e f85e 	bl	80122a8 <assert_print>
 80041ec:	487d      	ldr	r0, [pc, #500]	; (80043e4 <z_arm_fault+0x24c>)
 80041ee:	f00e f85b 	bl	80122a8 <assert_print>
 80041f2:	4879      	ldr	r0, [pc, #484]	; (80043d8 <z_arm_fault+0x240>)
 80041f4:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80041f8:	f00e f84f 	bl	801229a <assert_post_action>
 80041fc:	2500      	movs	r5, #0
 80041fe:	e005      	b.n	800420c <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004200:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
 8004202:	bf5c      	itt	pl
 8004204:	4605      	movpl	r5, r0
			*nested_exc = true;
 8004206:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
 8004208:	2d00      	cmp	r5, #0
 800420a:	d0e8      	beq.n	80041de <z_arm_fault+0x46>
	*recoverable = false;
 800420c:	2300      	movs	r3, #0
 800420e:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 8004210:	1ee3      	subs	r3, r4, #3
 8004212:	2b09      	cmp	r3, #9
 8004214:	f200 80ba 	bhi.w	800438c <z_arm_fault+0x1f4>
 8004218:	e8df f003 	tbb	[pc, r3]
 800421c:	8db0ad05 	.word	0x8db0ad05
 8004220:	b8b8b8b8 	.word	0xb8b8b8b8
 8004224:	b3b8      	.short	0xb3b8
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <z_arm_fault+0x250>)
 8004228:	486a      	ldr	r0, [pc, #424]	; (80043d4 <z_arm_fault+0x23c>)
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	f04f 0802 	mov.w	r8, #2
 8004230:	f107 0214 	add.w	r2, r7, #20
 8004234:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004238:	f8c7 8014 	str.w	r8, [r7, #20]
 800423c:	f00e fded 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004240:	4b62      	ldr	r3, [pc, #392]	; (80043cc <z_arm_fault+0x234>)
 8004242:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
 8004244:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004248:	ea14 0408 	ands.w	r4, r4, r8
	*recoverable = false;
 800424c:	f887 9007 	strb.w	r9, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004250:	d00b      	beq.n	800426a <z_arm_fault+0xd2>
		PR_EXC("  Bus fault on vector table read");
 8004252:	4b66      	ldr	r3, [pc, #408]	; (80043ec <z_arm_fault+0x254>)
 8004254:	e9c7 8305 	strd	r8, r3, [r7, #20]
	PR_FAULT_INFO(
 8004258:	485e      	ldr	r0, [pc, #376]	; (80043d4 <z_arm_fault+0x23c>)
 800425a:	f107 0214 	add.w	r2, r7, #20
 800425e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004262:	f00e fdda 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004266:	2400      	movs	r4, #0
}
 8004268:	e00c      	b.n	8004284 <z_arm_fault+0xec>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	2a00      	cmp	r2, #0
 800426e:	da26      	bge.n	80042be <z_arm_fault+0x126>
		PR_EXC("  Debug event");
 8004270:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <z_arm_fault+0x258>)
 8004272:	4858      	ldr	r0, [pc, #352]	; (80043d4 <z_arm_fault+0x23c>)
 8004274:	f107 0214 	add.w	r2, r7, #20
 8004278:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800427c:	e9c7 8305 	strd	r8, r3, [r7, #20]
 8004280:	f00e fdcb 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	b9b3      	cbnz	r3, 80042b6 <z_arm_fault+0x11e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004288:	2220      	movs	r2, #32
 800428a:	4629      	mov	r1, r5
 800428c:	f107 0008 	add.w	r0, r7, #8
 8004290:	f00e fdfc 	bl	8012e8c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2e00      	cmp	r6, #0
 8004298:	f000 8092 	beq.w	80043c0 <z_arm_fault+0x228>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800429c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042a0:	b922      	cbnz	r2, 80042ac <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80042a2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80042a6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80042ac:	f107 0108 	add.w	r1, r7, #8
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7ff fc23 	bl	8003afc <z_arm_fatal_error>
}
 80042b6:	372c      	adds	r7, #44	; 0x2c
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	d54b      	bpl.n	800435c <z_arm_fault+0x1c4>
		PR_EXC("  Fault escalation (see below)");
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <z_arm_fault+0x25c>)
 80042c6:	4843      	ldr	r0, [pc, #268]	; (80043d4 <z_arm_fault+0x23c>)
 80042c8:	f107 0214 	add.w	r2, r7, #20
 80042cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80042d0:	e9c7 8305 	strd	r8, r3, [r7, #20]
 80042d4:	f00e fda1 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
 80042d8:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80042da:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80042de:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d00c      	beq.n	8004300 <z_arm_fault+0x168>
		} else if (SCB_MMFSR != 0) {
 80042e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80042ea:	f603 6326 	addw	r3, r3, #3622	; 0xe26
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b1ab      	cbz	r3, 800431e <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
 80042f2:	1dfa      	adds	r2, r7, #7
 80042f4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7ff fd8e 	bl	8003e18 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 80042fc:	4604      	mov	r4, r0
		break;
 80042fe:	e7c1      	b.n	8004284 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <z_arm_fault+0x260>)
 8004304:	4833      	ldr	r0, [pc, #204]	; (80043d4 <z_arm_fault+0x23c>)
 8004306:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800430a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800430e:	2303      	movs	r3, #3
 8004310:	f107 0214 	add.w	r2, r7, #20
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	f00e fd80 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
 800431a:	682c      	ldr	r4, [r5, #0]
 800431c:	e7b2      	b.n	8004284 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <z_arm_fault+0x264>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b123      	cbz	r3, 800432e <z_arm_fault+0x196>
			reason = bus_fault(esf, 1, recoverable);
 8004324:	1df9      	adds	r1, r7, #7
 8004326:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8004328:	f7ff feac 	bl	8004084 <bus_fault.isra.0>
 800432c:	e7e6      	b.n	80042fc <z_arm_fault+0x164>
		} else if (SCB_UFSR != 0) {
 800432e:	4b34      	ldr	r3, [pc, #208]	; (8004400 <z_arm_fault+0x268>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	b113      	cbz	r3, 800433c <z_arm_fault+0x1a4>
		reason = usage_fault(esf);
 8004336:	f7ff fe29 	bl	8003f8c <usage_fault.isra.0>
 800433a:	e7df      	b.n	80042fc <z_arm_fault+0x164>
			__ASSERT(0,
 800433c:	4931      	ldr	r1, [pc, #196]	; (8004404 <z_arm_fault+0x26c>)
 800433e:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <z_arm_fault+0x240>)
 8004340:	4827      	ldr	r0, [pc, #156]	; (80043e0 <z_arm_fault+0x248>)
 8004342:	f240 23c2 	movw	r3, #706	; 0x2c2
 8004346:	f00d ffaf 	bl	80122a8 <assert_print>
 800434a:	482f      	ldr	r0, [pc, #188]	; (8004408 <z_arm_fault+0x270>)
 800434c:	f00d ffac 	bl	80122a8 <assert_print>
 8004350:	f240 21c2 	movw	r1, #706	; 0x2c2
		__ASSERT(0,
 8004354:	4820      	ldr	r0, [pc, #128]	; (80043d8 <z_arm_fault+0x240>)
 8004356:	f00d ffa0 	bl	801229a <assert_post_action>
 800435a:	e793      	b.n	8004284 <z_arm_fault+0xec>
 800435c:	4929      	ldr	r1, [pc, #164]	; (8004404 <z_arm_fault+0x26c>)
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <z_arm_fault+0x240>)
 8004360:	481f      	ldr	r0, [pc, #124]	; (80043e0 <z_arm_fault+0x248>)
 8004362:	f240 23c6 	movw	r3, #710	; 0x2c6
 8004366:	f00d ff9f 	bl	80122a8 <assert_print>
 800436a:	4828      	ldr	r0, [pc, #160]	; (800440c <z_arm_fault+0x274>)
 800436c:	f00d ff9c 	bl	80122a8 <assert_print>
 8004370:	f240 21c6 	movw	r1, #710	; 0x2c6
 8004374:	e7ee      	b.n	8004354 <z_arm_fault+0x1bc>
		reason = mem_manage_fault(esf, 0, recoverable);
 8004376:	1dfa      	adds	r2, r7, #7
 8004378:	2100      	movs	r1, #0
 800437a:	e7bc      	b.n	80042f6 <z_arm_fault+0x15e>
		reason = bus_fault(esf, 0, recoverable);
 800437c:	1df9      	adds	r1, r7, #7
 800437e:	2000      	movs	r0, #0
 8004380:	e7d2      	b.n	8004328 <z_arm_fault+0x190>
	PR_FAULT_INFO(
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <z_arm_fault+0x278>)
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	2302      	movs	r3, #2
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e765      	b.n	8004258 <z_arm_fault+0xc0>
	PR_FAULT_INFO("***** %s %d) *****",
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <z_arm_fault+0x27c>)
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <z_arm_fault+0x280>)
 8004390:	4922      	ldr	r1, [pc, #136]	; (800441c <z_arm_fault+0x284>)
 8004392:	4810      	ldr	r0, [pc, #64]	; (80043d4 <z_arm_fault+0x23c>)
 8004394:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 8004398:	46e8      	mov	r8, sp
 800439a:	b088      	sub	sp, #32
 800439c:	bf18      	it	ne
 800439e:	4613      	movne	r3, r2
 80043a0:	466a      	mov	r2, sp
 80043a2:	e9c2 1304 	strd	r1, r3, [r2, #16]
 80043a6:	2302      	movs	r3, #2
 80043a8:	7713      	strb	r3, [r2, #28]
 80043aa:	3c10      	subs	r4, #16
 80043ac:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <z_arm_fault+0x288>)
 80043ae:	6194      	str	r4, [r2, #24]
 80043b0:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 80043b4:	f842 3f0c 	str.w	r3, [r2, #12]!
 80043b8:	f00e fd2f 	bl	8012e1a <z_log_msg2_static_create.constprop.0>
 80043bc:	46c5      	mov	sp, r8
 80043be:	e752      	b.n	8004266 <z_arm_fault+0xce>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80043c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	e76f      	b.n	80042aa <z_arm_fault+0x112>
 80043ca:	bf00      	nop
 80043cc:	e000ed00 	.word	0xe000ed00
 80043d0:	080179a2 	.word	0x080179a2
 80043d4:	08015bac 	.word	0x08015bac
 80043d8:	08017778 	.word	0x08017778
 80043dc:	080179cd 	.word	0x080179cd
 80043e0:	08016836 	.word	0x08016836
 80043e4:	080179e0 	.word	0x080179e0
 80043e8:	08017a1e 	.word	0x08017a1e
 80043ec:	08017a35 	.word	0x08017a35
 80043f0:	08017a56 	.word	0x08017a56
 80043f4:	08017a64 	.word	0x08017a64
 80043f8:	08017a83 	.word	0x08017a83
 80043fc:	e000ed29 	.word	0xe000ed29
 8004400:	e000ed2a 	.word	0xe000ed2a
 8004404:	080169eb 	.word	0x080169eb
 8004408:	08017a9f 	.word	0x08017a9f
 800440c:	08017ac3 	.word	0x08017ac3
 8004410:	08017af3 	.word	0x08017af3
 8004414:	08017989 	.word	0x08017989
 8004418:	08017974 	.word	0x08017974
 800441c:	08017b17 	.word	0x08017b17
 8004420:	01000004 	.word	0x01000004

08004424 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004424:	4a02      	ldr	r2, [pc, #8]	; (8004430 <z_arm_fault_init+0xc>)
 8004426:	6953      	ldr	r3, [r2, #20]
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004434:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004438:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800443c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800443e:	4672      	mov	r2, lr
	bl z_arm_fault
 8004440:	f7ff feaa 	bl	8004198 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8004444:	bd01      	pop	{r0, pc}
 8004446:	bf00      	nop

08004448 <z_arm_interrupt_init>:
 8004448:	4804      	ldr	r0, [pc, #16]	; (800445c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	2110      	movs	r1, #16
 800444e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8004450:	3301      	adds	r3, #1
 8004452:	2b3f      	cmp	r3, #63	; 0x3f
 8004454:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8004458:	d1f9      	bne.n	800444e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100

08004460 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004460:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8004462:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004466:	4808      	ldr	r0, [pc, #32]	; (8004488 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004468:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 800446c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800446e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8004472:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004476:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004478:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800447a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800447e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8004482:	f7ff fbe3 	bl	8003c4c <z_arm_prep_c>
 8004486:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004488:	20002b20 	.word	0x20002b20

0800448c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <z_impl_k_thread_abort+0x1c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4283      	cmp	r3, r0
 8004492:	d107      	bne.n	80044a4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004494:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004498:	b123      	cbz	r3, 80044a4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800449a:	4a04      	ldr	r2, [pc, #16]	; (80044ac <z_impl_k_thread_abort+0x20>)
 800449c:	6853      	ldr	r3, [r2, #4]
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80044a4:	f00c bb34 	b.w	8010b10 <z_thread_abort>
 80044a8:	20001818 	.word	0x20001818
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <z_arm_configure_static_mpu_regions+0xc>)
 80044b2:	4a03      	ldr	r2, [pc, #12]	; (80044c0 <z_arm_configure_static_mpu_regions+0x10>)
 80044b4:	4803      	ldr	r0, [pc, #12]	; (80044c4 <z_arm_configure_static_mpu_regions+0x14>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	f000 b880 	b.w	80045bc <arm_core_mpu_configure_static_mpu_regions>
 80044bc:	20018000 	.word	0x20018000
 80044c0:	20000000 	.word	0x20000000
 80044c4:	08016114 	.word	0x08016114

080044c8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80044c8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80044cc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 80044ce:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80044d2:	2120      	movs	r1, #32
 80044d4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80044d8:	4618      	mov	r0, r3
 80044da:	2101      	movs	r1, #1
 80044dc:	f000 b896 	b.w	800460c <arm_core_mpu_configure_dynamic_mpu_regions>
 80044e0:	200015e0 	.word	0x200015e0
 80044e4:	150b0000 	.word	0x150b0000

080044e8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80044e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80044ea:	4f27      	ldr	r7, [pc, #156]	; (8004588 <mpu_configure_regions+0xa0>)
 80044ec:	b087      	sub	sp, #28
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80044ee:	2600      	movs	r6, #0
 80044f0:	428e      	cmp	r6, r1
 80044f2:	da16      	bge.n	8004522 <mpu_configure_regions+0x3a>
		if (regions[i].size == 0U) {
 80044f4:	6844      	ldr	r4, [r0, #4]
 80044f6:	2c00      	cmp	r4, #0
 80044f8:	d042      	beq.n	8004580 <mpu_configure_regions+0x98>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 80044fa:	b1db      	cbz	r3, 8004534 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80044fc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8004500:	ea14 0f0c 	tst.w	r4, ip
 8004504:	d010      	beq.n	8004528 <mpu_configure_regions+0x40>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004506:	4b21      	ldr	r3, [pc, #132]	; (800458c <mpu_configure_regions+0xa4>)
 8004508:	e9cd 3604 	strd	r3, r6, [sp, #16]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800450c:	2303      	movs	r3, #3
 800450e:	9303      	str	r3, [sp, #12]
 8004510:	481f      	ldr	r0, [pc, #124]	; (8004590 <mpu_configure_regions+0xa8>)
 8004512:	aa03      	add	r2, sp, #12
 8004514:	2300      	movs	r3, #0
 8004516:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800451a:	f7fe fd1f 	bl	8002f5c <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800451e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8004522:	4610      	mov	r0, r2
 8004524:	b007      	add	sp, #28
 8004526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 8004528:	2c1f      	cmp	r4, #31
 800452a:	d9ec      	bls.n	8004506 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 800452c:	6805      	ldr	r5, [r0, #0]
		&&
 800452e:	ea1c 0f05 	tst.w	ip, r5
 8004532:	d1e8      	bne.n	8004506 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8004534:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8004536:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8004538:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	d910      	bls.n	8004562 <mpu_configure_regions+0x7a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 8004540:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004544:	d80f      	bhi.n	8004566 <mpu_configure_regions+0x7e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8004546:	3c01      	subs	r4, #1
 8004548:	fab4 f484 	clz	r4, r4
 800454c:	f1c4 041f 	rsb	r4, r4, #31
 8004550:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8004552:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8004554:	ea4c 0404 	orr.w	r4, ip, r4
 8004558:	d907      	bls.n	800456a <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <mpu_configure_regions+0xac>)
 800455c:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8004560:	e7d4      	b.n	800450c <mpu_configure_regions+0x24>
		return REGION_32B;
 8004562:	2408      	movs	r4, #8
 8004564:	e7f5      	b.n	8004552 <mpu_configure_regions+0x6a>
		return REGION_4G;
 8004566:	243e      	movs	r4, #62	; 0x3e
 8004568:	e7f3      	b.n	8004552 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800456a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 800456e:	4315      	orrs	r5, r2
 8004570:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004574:	f044 0401 	orr.w	r4, r4, #1
 8004578:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800457a:	60fd      	str	r5, [r7, #12]
		reg_index++;
 800457c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800457e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 8004580:	3601      	adds	r6, #1
 8004582:	300c      	adds	r0, #12
 8004584:	e7b4      	b.n	80044f0 <mpu_configure_regions+0x8>
 8004586:	bf00      	nop
 8004588:	e000ed90 	.word	0xe000ed90
 800458c:	08017b2e 	.word	0x08017b2e
 8004590:	08015b9c 	.word	0x08015b9c
 8004594:	08017b51 	.word	0x08017b51

08004598 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <arm_core_mpu_enable+0x10>)
 800459a:	2205      	movs	r2, #5
 800459c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800459e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045a2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80045a6:	4770      	bx	lr
 80045a8:	e000ed90 	.word	0xe000ed90

080045ac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80045ac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <arm_core_mpu_disable+0xc>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	605a      	str	r2, [r3, #4]
}
 80045b6:	4770      	bx	lr
 80045b8:	e000ed90 	.word	0xe000ed90

080045bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80045bc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80045be:	4d0e      	ldr	r5, [pc, #56]	; (80045f8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80045c0:	2301      	movs	r3, #1
 80045c2:	782a      	ldrb	r2, [r5, #0]
 80045c4:	460c      	mov	r4, r1
 80045c6:	f7ff ff8f 	bl	80044e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80045ca:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 80045cc:	3016      	adds	r0, #22
 80045ce:	d111      	bne.n	80045f4 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 80045d0:	f240 1311 	movw	r3, #273	; 0x111
 80045d4:	4a09      	ldr	r2, [pc, #36]	; (80045fc <arm_core_mpu_configure_static_mpu_regions+0x40>)
 80045d6:	490a      	ldr	r1, [pc, #40]	; (8004600 <arm_core_mpu_configure_static_mpu_regions+0x44>)
 80045d8:	480a      	ldr	r0, [pc, #40]	; (8004604 <arm_core_mpu_configure_static_mpu_regions+0x48>)
 80045da:	f00d fe65 	bl	80122a8 <assert_print>
 80045de:	4621      	mov	r1, r4
 80045e0:	4809      	ldr	r0, [pc, #36]	; (8004608 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
 80045e2:	f00d fe61 	bl	80122a8 <assert_print>
			regions_num);
	}
}
 80045e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
 80045ea:	4804      	ldr	r0, [pc, #16]	; (80045fc <arm_core_mpu_configure_static_mpu_regions+0x40>)
 80045ec:	f240 1111 	movw	r1, #273	; 0x111
 80045f0:	f00d be53 	b.w	801229a <assert_post_action>
}
 80045f4:	bd38      	pop	{r3, r4, r5, pc}
 80045f6:	bf00      	nop
 80045f8:	200018a0 	.word	0x200018a0
 80045fc:	08017b77 	.word	0x08017b77
 8004600:	080169eb 	.word	0x080169eb
 8004604:	08016836 	.word	0x08016836
 8004608:	08017bae 	.word	0x08017bae

0800460c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800460c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
 8004610:	2300      	movs	r3, #0
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	460c      	mov	r4, r1
 8004616:	f7ff ff67 	bl	80044e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 800461a:	f110 0f16 	cmn.w	r0, #22
 800461e:	d008      	beq.n	8004632 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
 8004622:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004624:	2807      	cmp	r0, #7
 8004626:	dd00      	ble.n	800462a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8004628:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
 800462a:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 800462c:	611a      	str	r2, [r3, #16]
 800462e:	3001      	adds	r0, #1
 8004630:	e7f8      	b.n	8004624 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
 8004632:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
 8004636:	480c      	ldr	r0, [pc, #48]	; (8004668 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
 8004638:	f44f 7398 	mov.w	r3, #304	; 0x130
 800463c:	f00d fe34 	bl	80122a8 <assert_print>
 8004640:	4621      	mov	r1, r4
 8004642:	480a      	ldr	r0, [pc, #40]	; (800466c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
 8004644:	f00d fe30 	bl	80122a8 <assert_print>
}
 8004648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
 800464c:	4804      	ldr	r0, [pc, #16]	; (8004660 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
 800464e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004652:	f00d be22 	b.w	801229a <assert_post_action>
 8004656:	bf00      	nop
 8004658:	200018a0 	.word	0x200018a0
 800465c:	e000ed90 	.word	0xe000ed90
 8004660:	08017b77 	.word	0x08017b77
 8004664:	080169eb 	.word	0x080169eb
 8004668:	08016836 	.word	0x08016836
 800466c:	08017bda 	.word	0x08017bda

08004670 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004670:	4925      	ldr	r1, [pc, #148]	; (8004708 <z_arm_mpu_init+0x98>)
{
 8004672:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8004674:	680c      	ldr	r4, [r1, #0]
 8004676:	2c08      	cmp	r4, #8
 8004678:	d913      	bls.n	80046a2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
 800467a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <z_arm_mpu_init+0x9c>)
 8004680:	4923      	ldr	r1, [pc, #140]	; (8004710 <z_arm_mpu_init+0xa0>)
 8004682:	4824      	ldr	r0, [pc, #144]	; (8004714 <z_arm_mpu_init+0xa4>)
 8004684:	f00d fe10 	bl	80122a8 <assert_print>
 8004688:	4823      	ldr	r0, [pc, #140]	; (8004718 <z_arm_mpu_init+0xa8>)
 800468a:	2208      	movs	r2, #8
 800468c:	4621      	mov	r1, r4
 800468e:	f00d fe0b 	bl	80122a8 <assert_print>
 8004692:	481e      	ldr	r0, [pc, #120]	; (800470c <z_arm_mpu_init+0x9c>)
 8004694:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004698:	f00d fdff 	bl	801229a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
 80046a0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
 80046a2:	f7ff ff83 	bl	80045ac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80046a6:	6848      	ldr	r0, [r1, #4]
 80046a8:	491c      	ldr	r1, [pc, #112]	; (800471c <z_arm_mpu_init+0xac>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	4294      	cmp	r4, r2
 80046ae:	f100 000c 	add.w	r0, r0, #12
 80046b2:	d119      	bne.n	80046e8 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <z_arm_mpu_init+0xb0>)
 80046b6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 80046b8:	f7ff ff6e 	bl	8004598 <arm_core_mpu_enable>
	__ASSERT(
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d00e      	beq.n	80046e4 <z_arm_mpu_init+0x74>
 80046c6:	4917      	ldr	r1, [pc, #92]	; (8004724 <z_arm_mpu_init+0xb4>)
 80046c8:	4a10      	ldr	r2, [pc, #64]	; (800470c <z_arm_mpu_init+0x9c>)
 80046ca:	4812      	ldr	r0, [pc, #72]	; (8004714 <z_arm_mpu_init+0xa4>)
 80046cc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80046d0:	f00d fdea 	bl	80122a8 <assert_print>
 80046d4:	4814      	ldr	r0, [pc, #80]	; (8004728 <z_arm_mpu_init+0xb8>)
 80046d6:	f00d fde7 	bl	80122a8 <assert_print>
 80046da:	480c      	ldr	r0, [pc, #48]	; (800470c <z_arm_mpu_init+0x9c>)
 80046dc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80046e0:	f00d fddb 	bl	801229a <assert_post_action>
	return 0;
 80046e4:	2000      	movs	r0, #0
 80046e6:	e7db      	b.n	80046a0 <z_arm_mpu_init+0x30>
 80046e8:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80046ea:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 80046ee:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80046f8:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80046fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004704:	3201      	adds	r2, #1
 8004706:	e7d1      	b.n	80046ac <z_arm_mpu_init+0x3c>
 8004708:	08016120 	.word	0x08016120
 800470c:	08017b77 	.word	0x08017b77
 8004710:	080169eb 	.word	0x080169eb
 8004714:	08016836 	.word	0x08016836
 8004718:	08017c07 	.word	0x08017c07
 800471c:	e000ed90 	.word	0xe000ed90
 8004720:	200018a0 	.word	0x200018a0
 8004724:	08017c3b 	.word	0x08017c3b
 8004728:	08017c8b 	.word	0x08017c8b

0800472c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800472c:	4b01      	ldr	r3, [pc, #4]	; (8004734 <__stdout_hook_install+0x8>)
 800472e:	6018      	str	r0, [r3, #0]
}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000280 	.word	0x20000280

08004738 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <bt_hex_real+0x3c>)
 800473a:	2940      	cmp	r1, #64	; 0x40
{
 800473c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
 800473e:	bf28      	it	cs
 8004740:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
 8004742:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <bt_hex_real+0x40>)
 8004744:	1846      	adds	r6, r0, r1
 8004746:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
 8004748:	42b0      	cmp	r0, r6
 800474a:	f103 0302 	add.w	r3, r3, #2
 800474e:	d104      	bne.n	800475a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
 8004750:	2300      	movs	r3, #0
 8004752:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
 8004756:	4807      	ldr	r0, [pc, #28]	; (8004774 <bt_hex_real+0x3c>)
 8004758:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
 800475a:	7802      	ldrb	r2, [r0, #0]
 800475c:	0912      	lsrs	r2, r2, #4
 800475e:	5ca2      	ldrb	r2, [r4, r2]
 8004760:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
 8004764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004768:	f002 020f 	and.w	r2, r2, #15
 800476c:	5ca2      	ldrb	r2, [r4, r2]
 800476e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
 8004772:	e7e9      	b.n	8004748 <bt_hex_real+0x10>
 8004774:	200018a1 	.word	0x200018a1
 8004778:	08017cbb 	.word	0x08017cbb

0800477c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
 800477c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
 800477e:	7803      	ldrb	r3, [r0, #0]
 8004780:	b08b      	sub	sp, #44	; 0x2c
 8004782:	4604      	mov	r4, r0
 8004784:	ad07      	add	r5, sp, #28
 8004786:	2b03      	cmp	r3, #3
 8004788:	d821      	bhi.n	80047ce <bt_addr_le_str_real+0x52>
 800478a:	e8df f003 	tbb	[pc, r3]
 800478e:	1a02      	.short	0x1a02
 8004790:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
 8004792:	4912      	ldr	r1, [pc, #72]	; (80047dc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
 8004794:	4628      	mov	r0, r5
 8004796:	f00e fb43 	bl	8012e20 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
 800479a:	7863      	ldrb	r3, [r4, #1]
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	78a3      	ldrb	r3, [r4, #2]
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	78e3      	ldrb	r3, [r4, #3]
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	7923      	ldrb	r3, [r4, #4]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	7963      	ldrb	r3, [r4, #5]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <bt_addr_le_str_real+0x64>)
 80047b0:	79a3      	ldrb	r3, [r4, #6]
 80047b2:	9505      	str	r5, [sp, #20]
 80047b4:	211e      	movs	r1, #30
 80047b6:	480b      	ldr	r0, [pc, #44]	; (80047e4 <bt_addr_le_str_real+0x68>)
 80047b8:	f00d fbdf 	bl	8011f7a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
 80047bc:	4809      	ldr	r0, [pc, #36]	; (80047e4 <bt_addr_le_str_real+0x68>)
 80047be:	b00b      	add	sp, #44	; 0x2c
 80047c0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
 80047c2:	4909      	ldr	r1, [pc, #36]	; (80047e8 <bt_addr_le_str_real+0x6c>)
 80047c4:	e7e6      	b.n	8004794 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
 80047c6:	4909      	ldr	r1, [pc, #36]	; (80047ec <bt_addr_le_str_real+0x70>)
 80047c8:	e7e4      	b.n	8004794 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
 80047ca:	4909      	ldr	r1, [pc, #36]	; (80047f0 <bt_addr_le_str_real+0x74>)
 80047cc:	e7e2      	b.n	8004794 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <bt_addr_le_str_real+0x78>)
 80047d0:	210a      	movs	r1, #10
 80047d2:	4628      	mov	r0, r5
 80047d4:	f00d fbd1 	bl	8011f7a <snprintk>
		break;
 80047d8:	e7df      	b.n	800479a <bt_addr_le_str_real+0x1e>
 80047da:	bf00      	nop
 80047dc:	08016ae5 	.word	0x08016ae5
 80047e0:	08016b07 	.word	0x08016b07
 80047e4:	20001922 	.word	0x20001922
 80047e8:	08016aec 	.word	0x08016aec
 80047ec:	08016af3 	.word	0x08016af3
 80047f0:	08016afd 	.word	0x08016afd
 80047f4:	0801929e 	.word	0x0801929e

080047f8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
 80047f8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
 80047fa:	7802      	ldrb	r2, [r0, #0]
 80047fc:	2a01      	cmp	r2, #1
{
 80047fe:	4604      	mov	r4, r0
 8004800:	460b      	mov	r3, r1
	switch (src->type) {
 8004802:	d016      	beq.n	8004832 <uuid_to_uuid128+0x3a>
 8004804:	2a02      	cmp	r2, #2
 8004806:	d02c      	beq.n	8004862 <uuid_to_uuid128+0x6a>
 8004808:	b98a      	cbnz	r2, 800482e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
 800480a:	4a19      	ldr	r2, [pc, #100]	; (8004870 <uuid_to_uuid128+0x78>)
 800480c:	460d      	mov	r5, r1
 800480e:	f102 0710 	add.w	r7, r2, #16
 8004812:	6810      	ldr	r0, [r2, #0]
 8004814:	6851      	ldr	r1, [r2, #4]
 8004816:	462e      	mov	r6, r5
 8004818:	c603      	stmia	r6!, {r0, r1}
 800481a:	3208      	adds	r2, #8
 800481c:	42ba      	cmp	r2, r7
 800481e:	4635      	mov	r5, r6
 8004820:	d1f7      	bne.n	8004812 <uuid_to_uuid128+0x1a>
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
 8004826:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
 8004828:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 800482a:	0a12      	lsrs	r2, r2, #8
 800482c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
 800482e:	bcf0      	pop	{r4, r5, r6, r7}
 8004830:	4770      	bx	lr
		*dst = uuid128_base;
 8004832:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <uuid_to_uuid128+0x78>)
 8004834:	460d      	mov	r5, r1
 8004836:	f102 0710 	add.w	r7, r2, #16
 800483a:	6810      	ldr	r0, [r2, #0]
 800483c:	6851      	ldr	r1, [r2, #4]
 800483e:	462e      	mov	r6, r5
 8004840:	c603      	stmia	r6!, {r0, r1}
 8004842:	3208      	adds	r2, #8
 8004844:	42ba      	cmp	r2, r7
 8004846:	4635      	mov	r5, r6
 8004848:	d1f7      	bne.n	800483a <uuid_to_uuid128+0x42>
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
 800484e:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
 8004850:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 8004852:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
 8004856:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
 8004858:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
 800485a:	0a12      	lsrs	r2, r2, #8
 800485c:	7399      	strb	r1, [r3, #14]
 800485e:	741a      	strb	r2, [r3, #16]
}
 8004860:	e7e5      	b.n	800482e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
 8004862:	4601      	mov	r1, r0
}
 8004864:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
 8004866:	2211      	movs	r2, #17
 8004868:	4618      	mov	r0, r3
 800486a:	f00e bb0f 	b.w	8012e8c <memcpy>
 800486e:	bf00      	nop
 8004870:	08017cd3 	.word	0x08017cd3

08004874 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
 8004878:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 800487c:	2b01      	cmp	r3, #1
{
 800487e:	4605      	mov	r5, r0
 8004880:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
 8004882:	d00e      	beq.n	80048a2 <bt_buf_get_rx+0x2e>
 8004884:	2805      	cmp	r0, #5
 8004886:	d00c      	beq.n	80048a2 <bt_buf_get_rx+0x2e>
 8004888:	490d      	ldr	r1, [pc, #52]	; (80048c0 <bt_buf_get_rx+0x4c>)
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <bt_buf_get_rx+0x50>)
 800488c:	480e      	ldr	r0, [pc, #56]	; (80048c8 <bt_buf_get_rx+0x54>)
 800488e:	2341      	movs	r3, #65	; 0x41
 8004890:	f00d fd0a 	bl	80122a8 <assert_print>
 8004894:	480d      	ldr	r0, [pc, #52]	; (80048cc <bt_buf_get_rx+0x58>)
 8004896:	f00d fd07 	bl	80122a8 <assert_print>
 800489a:	480a      	ldr	r0, [pc, #40]	; (80048c4 <bt_buf_get_rx+0x50>)
 800489c:	2141      	movs	r1, #65	; 0x41
 800489e:	f00d fcfc 	bl	801229a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
 80048a2:	4623      	mov	r3, r4
 80048a4:	480a      	ldr	r0, [pc, #40]	; (80048d0 <bt_buf_get_rx+0x5c>)
 80048a6:	4632      	mov	r2, r6
 80048a8:	f010 facf 	bl	8014e4a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
 80048ac:	4604      	mov	r4, r0
 80048ae:	b120      	cbz	r0, 80048ba <bt_buf_get_rx+0x46>
	net_buf_simple_reserve(&buf->b, reserve);
 80048b0:	2101      	movs	r1, #1
 80048b2:	3008      	adds	r0, #8
 80048b4:	f007 fad4 	bl	800be60 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
 80048b8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
 80048ba:	4620      	mov	r0, r4
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
 80048be:	bf00      	nop
 80048c0:	08017d13 	.word	0x08017d13
 80048c4:	08017ce4 	.word	0x08017ce4
 80048c8:	08016836 	.word	0x08016836
 80048cc:	08017d58 	.word	0x08017d58
 80048d0:	20000710 	.word	0x20000710

080048d4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
 80048d4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
 80048d6:	490b      	ldr	r1, [pc, #44]	; (8004904 <bt_buf_get_cmd_complete+0x30>)
{
 80048d8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
 80048da:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
 80048de:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
 80048e0:	b920      	cbnz	r0, 80048ec <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
 80048e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7ff bfc4 	b.w	8004874 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
 80048ec:	f007 fb5c 	bl	800bfa8 <net_buf_ref>
 80048f0:	2101      	movs	r1, #1
		buf->len = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	7501      	strb	r1, [r0, #20]
 80048f6:	8183      	strh	r3, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
 80048f8:	4604      	mov	r4, r0
 80048fa:	3008      	adds	r0, #8
 80048fc:	f007 fab0 	bl	800be60 <net_buf_simple_reserve>
}
 8004900:	4620      	mov	r0, r4
 8004902:	bd10      	pop	{r4, pc}
 8004904:	20000000 	.word	0x20000000

08004908 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4604      	mov	r4, r0
	switch (evt) {
 800490c:	2c0f      	cmp	r4, #15
{
 800490e:	460d      	mov	r5, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
	switch (evt) {
 8004914:	d805      	bhi.n	8004922 <bt_buf_get_evt+0x1a>
 8004916:	2c0d      	cmp	r4, #13
 8004918:	d912      	bls.n	8004940 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
 800491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
 800491e:	f7ff bfd9 	b.w	80048d4 <bt_buf_get_cmd_complete>
	switch (evt) {
 8004922:	2c13      	cmp	r4, #19
 8004924:	d10c      	bne.n	8004940 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
 8004926:	480b      	ldr	r0, [pc, #44]	; (8004954 <bt_buf_get_evt+0x4c>)
 8004928:	f010 fa8f 	bl	8014e4a <net_buf_alloc_fixed>
			if (buf) {
 800492c:	4604      	mov	r4, r0
 800492e:	b128      	cbz	r0, 800493c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
 8004930:	2101      	movs	r1, #1
 8004932:	3008      	adds	r0, #8
 8004934:	f007 fa94 	bl	800be60 <net_buf_simple_reserve>
 8004938:	2301      	movs	r3, #1
 800493a:	7523      	strb	r3, [r4, #20]
}
 800493c:	4620      	mov	r0, r4
 800493e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
		if (discardable) {
 8004944:	b10d      	cbz	r5, 800494a <bt_buf_get_evt+0x42>
 8004946:	4804      	ldr	r0, [pc, #16]	; (8004958 <bt_buf_get_evt+0x50>)
 8004948:	e7ee      	b.n	8004928 <bt_buf_get_evt+0x20>
}
 800494a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800494e:	2001      	movs	r0, #1
 8004950:	f7ff bf90 	b.w	8004874 <bt_buf_get_rx>
 8004954:	20000744 	.word	0x20000744
 8004958:	20000674 	.word	0x20000674

0800495c <hci_disconn_complete_prio>:
{
 800495c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 800495e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	b972      	cbnz	r2, 8004982 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 8004964:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
 8004968:	4620      	mov	r0, r4
 800496a:	f002 fd43 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 800496e:	4605      	mov	r5, r0
 8004970:	b940      	cbnz	r0, 8004984 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <hci_disconn_complete_prio+0x38>)
 8004974:	881a      	ldrh	r2, [r3, #0]
 8004976:	b922      	cbnz	r2, 8004982 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
 8004978:	ea6f 5004 	mvn.w	r0, r4, lsl #20
 800497c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
 8004980:	8018      	strh	r0, [r3, #0]
}
 8004982:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
 8004984:	2101      	movs	r1, #1
 8004986:	f002 fd41 	bl	800740c <bt_conn_set_state>
	bt_conn_unref(conn);
 800498a:	4628      	mov	r0, r5
}
 800498c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
 8004990:	f002 bcf8 	b.w	8007384 <bt_conn_unref>
 8004994:	2000186c 	.word	0x2000186c

08004998 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
 8004998:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
 800499c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
 800499e:	2205      	movs	r2, #5
 80049a0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
 80049a4:	f003 f834 	bl	8007a10 <bt_conn_lookup_state_le>
		if (!conn) {
 80049a8:	b970      	cbnz	r0, 80049c8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <find_pending_connect.part.0+0x38>)
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	889a      	ldrh	r2, [r3, #4]
 80049b0:	9000      	str	r0, [sp, #0]
 80049b2:	799b      	ldrb	r3, [r3, #6]
 80049b4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
 80049b8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
 80049bc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
 80049c0:	2204      	movs	r2, #4
 80049c2:	4669      	mov	r1, sp
 80049c4:	f003 f824 	bl	8007a10 <bt_conn_lookup_state_le>
}
 80049c8:	b002      	add	sp, #8
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	20000000 	.word	0x20000000
 80049d0:	08015ccc 	.word	0x08015ccc

080049d4 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
 80049d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <le_conn_param_neg_reply.part.0+0x1c>)
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	4806      	ldr	r0, [pc, #24]	; (80049f4 <le_conn_param_neg_reply.part.0+0x20>)
 80049dc:	2302      	movs	r3, #2
 80049de:	aa03      	add	r2, sp, #12
 80049e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80049e4:	9303      	str	r3, [sp, #12]
 80049e6:	f00e fb37 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 80049ea:	b007      	add	sp, #28
 80049ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f0:	08017d7f 	.word	0x08017d7f
 80049f4:	08015b54 	.word	0x08015b54

080049f8 <hci_encrypt_change>:
{
 80049f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
 80049fa:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 80049fc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
 8004a00:	7835      	ldrb	r5, [r6, #0]
{
 8004a02:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
 8004a04:	4638      	mov	r0, r7
 8004a06:	f002 fcf5 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	b960      	cbnz	r0, 8004a28 <hci_encrypt_change+0x30>
		BT_ERR("Unable to look up conn with handle %u", handle);
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <hci_encrypt_change+0x94>)
 8004a10:	481f      	ldr	r0, [pc, #124]	; (8004a90 <hci_encrypt_change+0x98>)
 8004a12:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8004a16:	aa03      	add	r2, sp, #12
 8004a18:	2303      	movs	r3, #3
 8004a1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	f00e fb1a 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004a24:	b007      	add	sp, #28
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
 8004a28:	b15d      	cbz	r5, 8004a42 <hci_encrypt_change+0x4a>
	switch (hci_err) {
 8004a2a:	2d29      	cmp	r5, #41	; 0x29
 8004a2c:	bf96      	itet	ls
 8004a2e:	4b19      	ldrls	r3, [pc, #100]	; (8004a94 <hci_encrypt_change+0x9c>)
	if (status) {
 8004a30:	2209      	movhi	r2, #9
 8004a32:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
 8004a34:	4629      	mov	r1, r5
 8004a36:	f002 ff3f 	bl	80078b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f002 fca2 	bl	8007384 <bt_conn_unref>
 8004a40:	e7f0      	b.n	8004a24 <hci_encrypt_change+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
 8004a42:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
 8004a44:	78f3      	ldrb	r3, [r6, #3]
 8004a46:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
 8004a48:	2a01      	cmp	r2, #1
 8004a4a:	d108      	bne.n	8004a5e <hci_encrypt_change+0x66>
		if (conn->encrypt) {
 8004a4c:	b10b      	cbz	r3, 8004a52 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
 8004a4e:	f006 ff27 	bl	800b8a0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
 8004a52:	4620      	mov	r0, r4
 8004a54:	f00e fac9 	bl	8012fea <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	bf08      	it	eq
 8004a5c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <hci_encrypt_change+0x9c>)
 8004a60:	4629      	mov	r1, r5
 8004a62:	5d5a      	ldrb	r2, [r3, r5]
 8004a64:	4620      	mov	r0, r4
 8004a66:	f002 ff27 	bl	80078b8 <bt_conn_security_changed>
	if (status) {
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	d0e5      	beq.n	8004a3a <hci_encrypt_change+0x42>
		BT_ERR("Failed to set required security level");
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <hci_encrypt_change+0xa0>)
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	4807      	ldr	r0, [pc, #28]	; (8004a90 <hci_encrypt_change+0x98>)
 8004a74:	2302      	movs	r3, #2
 8004a76:	aa03      	add	r2, sp, #12
 8004a78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	f00e faeb 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
 8004a82:	4629      	mov	r1, r5
 8004a84:	4620      	mov	r0, r4
 8004a86:	f00e fe17 	bl	80136b8 <bt_conn_disconnect>
 8004a8a:	e7d6      	b.n	8004a3a <hci_encrypt_change+0x42>
 8004a8c:	08017d99 	.word	0x08017d99
 8004a90:	08015b54 	.word	0x08015b54
 8004a94:	08018252 	.word	0x08018252
 8004a98:	08017dbf 	.word	0x08017dbf

08004a9c <hci_encrypt_key_refresh_complete>:
{
 8004a9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
 8004a9e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 8004aa0:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
 8004aa4:	781d      	ldrb	r5, [r3, #0]
{
 8004aa6:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f002 fca3 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b960      	cbnz	r0, 8004acc <hci_encrypt_key_refresh_complete+0x30>
		BT_ERR("Unable to look up conn with handle %u", handle);
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <hci_encrypt_key_refresh_complete+0x90>)
 8004ab4:	481e      	ldr	r0, [pc, #120]	; (8004b30 <hci_encrypt_key_refresh_complete+0x94>)
 8004ab6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004aba:	aa03      	add	r2, sp, #12
 8004abc:	2303      	movs	r3, #3
 8004abe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004ac2:	9303      	str	r3, [sp, #12]
 8004ac4:	f00e fac8 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
 8004acc:	b15d      	cbz	r5, 8004ae6 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
 8004ace:	2d29      	cmp	r5, #41	; 0x29
 8004ad0:	bf96      	itet	ls
 8004ad2:	4b18      	ldrls	r3, [pc, #96]	; (8004b34 <hci_encrypt_key_refresh_complete+0x98>)
	if (status) {
 8004ad4:	2209      	movhi	r2, #9
 8004ad6:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f002 feed 	bl	80078b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f002 fc50 	bl	8007384 <bt_conn_unref>
 8004ae4:	e7f0      	b.n	8004ac8 <hci_encrypt_key_refresh_complete+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
 8004ae6:	7883      	ldrb	r3, [r0, #2]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
 8004aec:	f006 fed8 	bl	800b8a0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
 8004af0:	4620      	mov	r0, r4
 8004af2:	f00e fa7a 	bl	8012fea <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
 8004af6:	2800      	cmp	r0, #0
 8004af8:	bf08      	it	eq
 8004afa:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <hci_encrypt_key_refresh_complete+0x98>)
 8004afe:	4629      	mov	r1, r5
 8004b00:	5d5a      	ldrb	r2, [r3, r5]
 8004b02:	4620      	mov	r0, r4
 8004b04:	f002 fed8 	bl	80078b8 <bt_conn_security_changed>
	if (status) {
 8004b08:	2d00      	cmp	r5, #0
 8004b0a:	d0e8      	beq.n	8004ade <hci_encrypt_key_refresh_complete+0x42>
		BT_ERR("Failed to set required security level");
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <hci_encrypt_key_refresh_complete+0x9c>)
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	4807      	ldr	r0, [pc, #28]	; (8004b30 <hci_encrypt_key_refresh_complete+0x94>)
 8004b12:	2302      	movs	r3, #2
 8004b14:	aa03      	add	r2, sp, #12
 8004b16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	f00e fa9c 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
 8004b20:	4629      	mov	r1, r5
 8004b22:	4620      	mov	r0, r4
 8004b24:	f00e fdc8 	bl	80136b8 <bt_conn_disconnect>
 8004b28:	e7d9      	b.n	8004ade <hci_encrypt_key_refresh_complete+0x42>
 8004b2a:	bf00      	nop
 8004b2c:	08017d99 	.word	0x08017d99
 8004b30:	08015b54 	.word	0x08015b54
 8004b34:	08018252 	.word	0x08018252
 8004b38:	08017dbf 	.word	0x08017dbf

08004b3c <le_conn_update_complete>:
{
 8004b3c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
 8004b3e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 8004b40:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
 8004b44:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
 8004b46:	4630      	mov	r0, r6
 8004b48:	f002 fc54 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	b960      	cbnz	r0, 8004b6a <le_conn_update_complete+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <le_conn_update_complete+0x90>)
 8004b52:	481f      	ldr	r0, [pc, #124]	; (8004bd0 <le_conn_update_complete+0x94>)
 8004b54:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004b58:	aa03      	add	r2, sp, #12
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	f00e fa79 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004b66:	b006      	add	sp, #24
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
 8004b6a:	782b      	ldrb	r3, [r5, #0]
 8004b6c:	b9bb      	cbnz	r3, 8004b9e <le_conn_update_complete+0x62>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
 8004b6e:	792a      	ldrb	r2, [r5, #4]
 8004b70:	78eb      	ldrb	r3, [r5, #3]
 8004b72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b76:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
 8004b7a:	79aa      	ldrb	r2, [r5, #6]
 8004b7c:	796b      	ldrb	r3, [r5, #5]
 8004b7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b82:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 8004b86:	79eb      	ldrb	r3, [r5, #7]
 8004b88:	7a2a      	ldrb	r2, [r5, #8]
 8004b8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b8e:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
 8004b92:	f002 fd87 	bl	80076a4 <notify_le_param_updated>
	bt_conn_unref(conn);
 8004b96:	4620      	mov	r0, r4
 8004b98:	f002 fbf4 	bl	8007384 <bt_conn_unref>
 8004b9c:	e7e3      	b.n	8004b66 <le_conn_update_complete+0x2a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
 8004b9e:	2b1a      	cmp	r3, #26
 8004ba0:	d1f9      	bne.n	8004b96 <le_conn_update_complete+0x5a>
 8004ba2:	78c3      	ldrb	r3, [r0, #3]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d1f6      	bne.n	8004b96 <le_conn_update_complete+0x5a>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 8004ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bac:	3004      	adds	r0, #4
 8004bae:	f00e fa44 	bl	801303a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
 8004bb2:	0583      	lsls	r3, r0, #22
 8004bb4:	d4ef      	bmi.n	8004b96 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
 8004bb6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004bba:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
 8004bbc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004bc0:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
 8004bc2:	4669      	mov	r1, sp
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f003 fa5d 	bl	8008084 <bt_l2cap_update_conn_param>
 8004bca:	e7e4      	b.n	8004b96 <le_conn_update_complete+0x5a>
 8004bcc:	08017de5 	.word	0x08017de5
 8004bd0:	08015b54 	.word	0x08015b54

08004bd4 <handle_event.part.0>:
static inline void handle_event(uint8_t event, struct net_buf *buf,
 8004bd4:	b5b0      	push	{r4, r5, r7, lr}
 8004bd6:	460b      	mov	r3, r1
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 8004bd8:	898d      	ldrh	r5, [r1, #12]
static inline void handle_event(uint8_t event, struct net_buf *buf,
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4604      	mov	r4, r0
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 8004bde:	4629      	mov	r1, r5
 8004be0:	6898      	ldr	r0, [r3, #8]
 8004be2:	f7ff fda9 	bl	8004738 <bt_hex_real>
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <handle_event.part.0+0x3c>)
 8004bea:	466a      	mov	r2, sp
 8004bec:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f882 3020 	strb.w	r3, [r2, #32]
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <handle_event.part.0+0x40>)
 8004bf8:	e9c2 5006 	strd	r5, r0, [r2, #24]
 8004bfc:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
 8004c00:	f842 3f0c 	str.w	r3, [r2, #12]!
 8004c04:	4804      	ldr	r0, [pc, #16]	; (8004c18 <handle_event.part.0+0x44>)
 8004c06:	f00e fa27 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	08017e09 	.word	0x08017e09
 8004c14:	01000005 	.word	0x01000005
 8004c18:	08015b54 	.word	0x08015b54

08004c1c <handle_event>:
{
 8004c1c:	b598      	push	{r3, r4, r7, lr}
 8004c1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c22:	af00      	add	r7, sp, #0
		if (handler->event != event) {
 8004c24:	7814      	ldrb	r4, [r2, #0]
 8004c26:	4284      	cmp	r4, r0
 8004c28:	d005      	beq.n	8004c36 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
 8004c2a:	3208      	adds	r2, #8
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1f9      	bne.n	8004c24 <handle_event+0x8>
 8004c30:	f7ff ffd0 	bl	8004bd4 <handle_event.part.0>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
 8004c34:	e013      	b.n	8004c5e <handle_event+0x42>
		if (buf->len < handler->min_len) {
 8004c36:	898b      	ldrh	r3, [r1, #12]
 8004c38:	7854      	ldrb	r4, [r2, #1]
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d911      	bls.n	8004c62 <handle_event+0x46>
			BT_ERR("Too small (%u bytes) event 0x%02x",
 8004c3e:	490b      	ldr	r1, [pc, #44]	; (8004c6c <handle_event+0x50>)
 8004c40:	466c      	mov	r4, sp
 8004c42:	b088      	sub	sp, #32
 8004c44:	466a      	mov	r2, sp
 8004c46:	e9c2 1304 	strd	r1, r3, [r2, #16]
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	6190      	str	r0, [r2, #24]
 8004c4e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8004c52:	f842 3f0c 	str.w	r3, [r2, #12]!
 8004c56:	4806      	ldr	r0, [pc, #24]	; (8004c70 <handle_event+0x54>)
 8004c58:	f00e f9fe 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8004c5c:	46a5      	mov	sp, r4
}
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd98      	pop	{r3, r4, r7, pc}
		handler->handler(buf);
 8004c62:	6853      	ldr	r3, [r2, #4]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4798      	blx	r3
		return;
 8004c68:	e7f9      	b.n	8004c5e <handle_event+0x42>
 8004c6a:	bf00      	nop
 8004c6c:	08017e2b 	.word	0x08017e2b
 8004c70:	08015b54 	.word	0x08015b54

08004c74 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
 8004c78:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8004dd0 <hci_rx_thread+0x15c>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
 8004c7c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8004dd4 <hci_rx_thread+0x160>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 8004c80:	4e4b      	ldr	r6, [pc, #300]	; (8004db0 <hci_rx_thread+0x13c>)
{
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f007 f8b2 	bl	800bdf8 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
 8004c94:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
 8004c96:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
 8004c98:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
 8004c9a:	d057      	beq.n	8004d4c <hci_rx_thread+0xd8>
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	f040 8084 	bne.w	8004daa <hci_rx_thread+0x136>
	BT_ASSERT(buf->len >= sizeof(*hdr));
 8004ca2:	8983      	ldrh	r3, [r0, #12]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d80c      	bhi.n	8004cc2 <hci_rx_thread+0x4e>
 8004ca8:	4942      	ldr	r1, [pc, #264]	; (8004db4 <hci_rx_thread+0x140>)
 8004caa:	4843      	ldr	r0, [pc, #268]	; (8004db8 <hci_rx_thread+0x144>)
 8004cac:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	f00d faf9 	bl	80122a8 <assert_print>
 8004cb6:	4040      	eors	r0, r0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	f04f 0003 	mov.w	r0, #3
 8004cc0:	df02      	svc	2
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	f104 0008 	add.w	r0, r4, #8
 8004cc8:	f007 fa36 	bl	800c138 <net_buf_simple_pull_mem>
	if (buf->len != len) {
 8004ccc:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
 8004cce:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
 8004cd0:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
 8004cd4:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
 8004cd6:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
 8004cda:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
 8004cdc:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
 8004cde:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
 8004ce0:	d013      	beq.n	8004d0a <hci_rx_thread+0x96>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
 8004ce2:	466d      	mov	r5, sp
 8004ce4:	b088      	sub	sp, #32
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	4834      	ldr	r0, [pc, #208]	; (8004dbc <hci_rx_thread+0x148>)
 8004cea:	6193      	str	r3, [r2, #24]
 8004cec:	2304      	movs	r3, #4
 8004cee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004cf2:	f842 3f0c 	str.w	r3, [r2, #12]!
 8004cf6:	4832      	ldr	r0, [pc, #200]	; (8004dc0 <hci_rx_thread+0x14c>)
 8004cf8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8004cfc:	f00e f9ac 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8004d00:	46ad      	mov	sp, r5
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
 8004d02:	4620      	mov	r0, r4
 8004d04:	f007 f90a 	bl	800bf1c <net_buf_unref>
			break;
 8004d08:	e01d      	b.n	8004d46 <hci_rx_thread+0xd2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
 8004d0a:	f002 fb73 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004d0e:	4605      	mov	r5, r0
 8004d10:	b968      	cbnz	r0, 8004d2e <hci_rx_thread+0xba>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
 8004d12:	8ae3      	ldrh	r3, [r4, #22]
 8004d14:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <hci_rx_thread+0x150>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
 8004d16:	482a      	ldr	r0, [pc, #168]	; (8004dc0 <hci_rx_thread+0x14c>)
		switch (bt_buf_get_type(buf)) {
 8004d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
 8004d1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004d20:	2303      	movs	r3, #3
 8004d22:	f107 020c 	add.w	r2, r7, #12
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	f00e f996 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8004d2c:	e7e9      	b.n	8004d02 <hci_rx_thread+0x8e>
	acl(buf)->index = bt_conn_index(conn);
 8004d2e:	f002 fc63 	bl	80075f8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
 8004d32:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
 8004d36:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f002 f9ea 	bl	8007114 <bt_conn_recv>
	bt_conn_unref(conn);
 8004d40:	4628      	mov	r0, r5
 8004d42:	f002 fb1f 	bl	8007384 <bt_conn_unref>
	z_impl_k_yield();
 8004d46:	f00b fd45 	bl	80107d4 <z_impl_k_yield>
	while (1) {
 8004d4a:	e79c      	b.n	8004c86 <hci_rx_thread+0x12>
	BT_ASSERT(buf->len >= sizeof(*hdr));
 8004d4c:	8983      	ldrh	r3, [r0, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d80c      	bhi.n	8004d6c <hci_rx_thread+0xf8>
 8004d52:	4918      	ldr	r1, [pc, #96]	; (8004db4 <hci_rx_thread+0x140>)
 8004d54:	4818      	ldr	r0, [pc, #96]	; (8004db8 <hci_rx_thread+0x144>)
 8004d56:	f640 1311 	movw	r3, #2321	; 0x911
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	f00d faa4 	bl	80122a8 <assert_print>
 8004d60:	4040      	eors	r0, r0
 8004d62:	f380 8811 	msr	BASEPRI, r0
 8004d66:	f04f 0003 	mov.w	r0, #3
 8004d6a:	df02      	svc	2
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	f104 0008 	add.w	r0, r4, #8
 8004d72:	f007 f9e1 	bl	800c138 <net_buf_simple_pull_mem>
 8004d76:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
 8004d78:	7800      	ldrb	r0, [r0, #0]
 8004d7a:	f00e f924 	bl	8012fc6 <bt_hci_evt_get_flags>
 8004d7e:	0783      	lsls	r3, r0, #30
 8004d80:	d40c      	bmi.n	8004d9c <hci_rx_thread+0x128>
 8004d82:	4911      	ldr	r1, [pc, #68]	; (8004dc8 <hci_rx_thread+0x154>)
 8004d84:	480c      	ldr	r0, [pc, #48]	; (8004db8 <hci_rx_thread+0x144>)
 8004d86:	f640 1315 	movw	r3, #2325	; 0x915
 8004d8a:	4632      	mov	r2, r6
 8004d8c:	f00d fa8c 	bl	80122a8 <assert_print>
 8004d90:	4040      	eors	r0, r0
 8004d92:	f380 8811 	msr	BASEPRI, r0
 8004d96:	f04f 0003 	mov.w	r0, #3
 8004d9a:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
 8004d9c:	7828      	ldrb	r0, [r5, #0]
 8004d9e:	2306      	movs	r3, #6
 8004da0:	464a      	mov	r2, r9
 8004da2:	4621      	mov	r1, r4
 8004da4:	f7ff ff3a 	bl	8004c1c <handle_event>
	net_buf_unref(buf);
 8004da8:	e7ab      	b.n	8004d02 <hci_rx_thread+0x8e>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <hci_rx_thread+0x158>)
 8004dac:	e7b3      	b.n	8004d16 <hci_rx_thread+0xa2>
 8004dae:	bf00      	nop
 8004db0:	08017e4d 	.word	0x08017e4d
 8004db4:	08017e81 	.word	0x08017e81
 8004db8:	08016836 	.word	0x08016836
 8004dbc:	08017e9a 	.word	0x08017e9a
 8004dc0:	08015b54 	.word	0x08015b54
 8004dc4:	08017ebe 	.word	0x08017ebe
 8004dc8:	08017ee0 	.word	0x08017ee0
 8004dcc:	08017f0e 	.word	0x08017f0e
 8004dd0:	2000013c 	.word	0x2000013c
 8004dd4:	080161d0 	.word	0x080161d0

08004dd8 <hci_le_meta_event>:
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4604      	mov	r4, r0
 8004dde:	3008      	adds	r0, #8
 8004de0:	f007 f9aa 	bl	800c138 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
 8004de4:	4621      	mov	r1, r4
 8004de6:	4a03      	ldr	r2, [pc, #12]	; (8004df4 <hci_le_meta_event+0x1c>)
 8004de8:	7800      	ldrb	r0, [r0, #0]
}
 8004dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
 8004dee:	230a      	movs	r3, #10
 8004df0:	f7ff bf14 	b.w	8004c1c <handle_event>
 8004df4:	08016170 	.word	0x08016170

08004df8 <hci_hardware_error>:
{
 8004df8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	3008      	adds	r0, #8
 8004dfe:	f007 f99b 	bl	800c138 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
 8004e02:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <hci_hardware_error+0x28>)
 8004e04:	7803      	ldrb	r3, [r0, #0]
 8004e06:	4807      	ldr	r0, [pc, #28]	; (8004e24 <hci_hardware_error+0x2c>)
 8004e08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004e10:	2303      	movs	r3, #3
 8004e12:	aa03      	add	r2, sp, #12
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	f00e f91f 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004e1a:	b007      	add	sp, #28
 8004e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e20:	08017f22 	.word	0x08017f22
 8004e24:	08015b54 	.word	0x08015b54

08004e28 <hci_cmd_done>:
{
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004e30:	7990      	ldrb	r0, [r2, #6]
 8004e32:	4d44      	ldr	r5, [pc, #272]	; (8004f44 <hci_cmd_done+0x11c>)
{
 8004e34:	4688      	mov	r8, r1
 8004e36:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004e38:	f006 fe6e 	bl	800bb18 <net_buf_pool_get>
 8004e3c:	4285      	cmp	r5, r0
 8004e3e:	d018      	beq.n	8004e72 <hci_cmd_done+0x4a>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
 8004e40:	79a4      	ldrb	r4, [r4, #6]
 8004e42:	4620      	mov	r0, r4
 8004e44:	f006 fe68 	bl	800bb18 <net_buf_pool_get>
 8004e48:	46e8      	mov	r8, sp
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <hci_cmd_done+0x120>)
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	466a      	mov	r2, sp
 8004e50:	e9c2 3604 	strd	r3, r6, [r2, #16]
 8004e54:	2306      	movs	r3, #6
 8004e56:	e9c2 4006 	strd	r4, r0, [r2, #24]
 8004e5a:	6215      	str	r5, [r2, #32]
 8004e5c:	483b      	ldr	r0, [pc, #236]	; (8004f4c <hci_cmd_done+0x124>)
 8004e5e:	f842 3f0c 	str.w	r3, [r2, #12]!
 8004e62:	f44f 5142 	mov.w	r1, #12416	; 0x3080
 8004e66:	f00e f8f7 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8004e6a:	46c5      	mov	sp, r8
}
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
 8004e72:	4620      	mov	r0, r4
 8004e74:	f006 fe58 	bl	800bb28 <net_buf_id>
 8004e78:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8004f58 <hci_cmd_done+0x130>
 8004e7c:	f04f 0a0c 	mov.w	sl, #12
 8004e80:	fb0a 9000 	mla	r0, sl, r0, r9
 8004e84:	464d      	mov	r5, r9
 8004e86:	8843      	ldrh	r3, [r0, #2]
 8004e88:	42b3      	cmp	r3, r6
 8004e8a:	d016      	beq.n	8004eba <hci_cmd_done+0x92>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f006 fe4b 	bl	800bb28 <net_buf_id>
 8004e92:	466c      	mov	r4, sp
 8004e94:	fb0a 9000 	mla	r0, sl, r0, r9
 8004e98:	b088      	sub	sp, #32
 8004e9a:	466a      	mov	r2, sp
 8004e9c:	8843      	ldrh	r3, [r0, #2]
 8004e9e:	492c      	ldr	r1, [pc, #176]	; (8004f50 <hci_cmd_done+0x128>)
 8004ea0:	6193      	str	r3, [r2, #24]
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	e9c2 1604 	strd	r1, r6, [r2, #16]
 8004ea8:	4828      	ldr	r0, [pc, #160]	; (8004f4c <hci_cmd_done+0x124>)
 8004eaa:	f842 3f0c 	str.w	r3, [r2, #12]!
 8004eae:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8004eb2:	f00e f8d1 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8004eb6:	46a5      	mov	sp, r4
		return;
 8004eb8:	e7d8      	b.n	8004e6c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
 8004eba:	4e26      	ldr	r6, [pc, #152]	; (8004f54 <hci_cmd_done+0x12c>)
 8004ebc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
 8004ec0:	b120      	cbz	r0, 8004ecc <hci_cmd_done+0xa4>
		net_buf_unref(bt_dev.sent_cmd);
 8004ec2:	f007 f82b 	bl	800bf1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f006 fe2b 	bl	800bb28 <net_buf_id>
 8004ed2:	260c      	movs	r6, #12
 8004ed4:	fb06 5000 	mla	r0, r6, r0, r5
 8004ed8:	6843      	ldr	r3, [r0, #4]
 8004eda:	b1ab      	cbz	r3, 8004f08 <hci_cmd_done+0xe0>
 8004edc:	f1b8 0f00 	cmp.w	r8, #0
 8004ee0:	d112      	bne.n	8004f08 <hci_cmd_done+0xe0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f006 fe20 	bl	800bb28 <net_buf_id>
 8004ee8:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
 8004eec:	2101      	movs	r1, #1
 8004eee:	6842      	ldr	r2, [r0, #4]
 8004ef0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
 8004ef4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
 8004ef6:	f003 061f 	and.w	r6, r3, #31
 8004efa:	40b1      	lsls	r1, r6
	if (val) {
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	b1da      	cbz	r2, 8004f38 <hci_cmd_done+0x110>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 8004f00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004f04:	f00e f899 	bl	801303a <atomic_or>
	if (cmd(buf)->sync) {
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f006 fe0d 	bl	800bb28 <net_buf_id>
 8004f0e:	260c      	movs	r6, #12
 8004f10:	fb06 5000 	mla	r0, r6, r0, r5
 8004f14:	6883      	ldr	r3, [r0, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0a8      	beq.n	8004e6c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f006 fe04 	bl	800bb28 <net_buf_id>
 8004f20:	4370      	muls	r0, r6
 8004f22:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
 8004f26:	4620      	mov	r0, r4
 8004f28:	f006 fdfe 	bl	800bb28 <net_buf_id>
 8004f2c:	fb06 5500 	mla	r5, r6, r0, r5
 8004f30:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
 8004f32:	f009 ff8b 	bl	800ee4c <z_impl_k_sem_give>
}
 8004f36:	e799      	b.n	8004e6c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8004f38:	43c9      	mvns	r1, r1
 8004f3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004f3e:	f00e f86d 	bl	801301c <atomic_and>
 8004f42:	e7e1      	b.n	8004f08 <hci_cmd_done+0xe0>
 8004f44:	200006dc 	.word	0x200006dc
 8004f48:	08017f44 	.word	0x08017f44
 8004f4c:	08015b54 	.word	0x08015b54
 8004f50:	08017f79 	.word	0x08017f79
 8004f54:	20000000 	.word	0x20000000
 8004f58:	200015f0 	.word	0x200015f0

08004f5c <le_data_len_change>:
{
 8004f5c:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 8004f5e:	6883      	ldr	r3, [r0, #8]
 8004f60:	881c      	ldrh	r4, [r3, #0]
{
 8004f62:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
 8004f64:	4620      	mov	r0, r4
 8004f66:	f002 fa45 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004f6a:	b960      	cbnz	r0, 8004f86 <le_data_len_change+0x2a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <le_data_len_change+0x30>)
 8004f6e:	4808      	ldr	r0, [pc, #32]	; (8004f90 <le_data_len_change+0x34>)
 8004f70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	2303      	movs	r3, #3
 8004f78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	f00e f86b 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004f82:	b006      	add	sp, #24
 8004f84:	bd10      	pop	{r4, pc}
	bt_conn_unref(conn);
 8004f86:	f002 f9fd 	bl	8007384 <bt_conn_unref>
 8004f8a:	e7fa      	b.n	8004f82 <le_data_len_change+0x26>
 8004f8c:	08017de5 	.word	0x08017de5
 8004f90:	08015b54 	.word	0x08015b54

08004f94 <le_phy_update_complete>:
{
 8004f94:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 8004f96:	6883      	ldr	r3, [r0, #8]
 8004f98:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
 8004f9c:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f002 fa28 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004fa4:	b960      	cbnz	r0, 8004fc0 <le_phy_update_complete+0x2c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <le_phy_update_complete+0x34>)
 8004fa8:	4808      	ldr	r0, [pc, #32]	; (8004fcc <le_phy_update_complete+0x38>)
 8004faa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fae:	aa03      	add	r2, sp, #12
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	f00e f84e 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004fbc:	b006      	add	sp, #24
 8004fbe:	bd10      	pop	{r4, pc}
	bt_conn_unref(conn);
 8004fc0:	f002 f9e0 	bl	8007384 <bt_conn_unref>
 8004fc4:	e7fa      	b.n	8004fbc <le_phy_update_complete+0x28>
 8004fc6:	bf00      	nop
 8004fc8:	08017de5 	.word	0x08017de5
 8004fcc:	08015b54 	.word	0x08015b54

08004fd0 <hci_disconn_complete>:
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
 8004fd2:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
 8004fd4:	782e      	ldrb	r6, [r5, #0]
{
 8004fd6:	b087      	sub	sp, #28
	if (evt->status) {
 8004fd8:	b98e      	cbnz	r6, 8004ffe <hci_disconn_complete+0x2e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 8004fda:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f002 fa08 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	b960      	cbnz	r0, 8005002 <hci_disconn_complete+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <hci_disconn_complete+0x44>)
 8004fea:	480b      	ldr	r0, [pc, #44]	; (8005018 <hci_disconn_complete+0x48>)
 8004fec:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8004ff0:	aa03      	add	r2, sp, #12
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004ff8:	9303      	str	r3, [sp, #12]
 8004ffa:	f00e f82d 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8004ffe:	b007      	add	sp, #28
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
 8005002:	78eb      	ldrb	r3, [r5, #3]
 8005004:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8005006:	4631      	mov	r1, r6
 8005008:	f002 fa00 	bl	800740c <bt_conn_set_state>
		bt_conn_unref(conn);
 800500c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
 800500e:	f002 f9b9 	bl	8007384 <bt_conn_unref>
 8005012:	e7f4      	b.n	8004ffe <hci_disconn_complete+0x2e>
 8005014:	08017d99 	.word	0x08017d99
 8005018:	08015b54 	.word	0x08015b54

0800501c <hci_data_buf_overflow>:
{
 800501c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
 800501e:	6883      	ldr	r3, [r0, #8]
 8005020:	4a07      	ldr	r2, [pc, #28]	; (8005040 <hci_data_buf_overflow+0x24>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4807      	ldr	r0, [pc, #28]	; (8005044 <hci_data_buf_overflow+0x28>)
 8005026:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800502e:	2303      	movs	r3, #3
 8005030:	aa03      	add	r2, sp, #12
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	f00e f810 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8005038:	b007      	add	sp, #28
 800503a:	f85d fb04 	ldr.w	pc, [sp], #4
 800503e:	bf00      	nop
 8005040:	08017fac 	.word	0x08017fac
 8005044:	08015b54 	.word	0x08015b54

08005048 <le_remote_feat_complete>:
{
 8005048:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
 800504a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 800504c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
 8005050:	b086      	sub	sp, #24
	conn = bt_conn_lookup_handle(handle);
 8005052:	4630      	mov	r0, r6
 8005054:	f002 f9ce 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8005058:	4604      	mov	r4, r0
 800505a:	b960      	cbnz	r0, 8005076 <le_remote_feat_complete+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <le_remote_feat_complete+0x50>)
 800505e:	480f      	ldr	r0, [pc, #60]	; (800509c <le_remote_feat_complete+0x54>)
 8005060:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8005064:	aa03      	add	r2, sp, #12
 8005066:	2303      	movs	r3, #3
 8005068:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	f00d fff3 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8005072:	b006      	add	sp, #24
 8005074:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
 8005076:	782b      	ldrb	r3, [r5, #0]
 8005078:	b923      	cbnz	r3, 8005084 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
 800507a:	2208      	movs	r2, #8
 800507c:	1ce9      	adds	r1, r5, #3
 800507e:	30b4      	adds	r0, #180	; 0xb4
 8005080:	f00d ff04 	bl	8012e8c <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 8005084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005088:	1d20      	adds	r0, r4, #4
 800508a:	f00d ffd6 	bl	801303a <atomic_or>
	bt_conn_unref(conn);
 800508e:	4620      	mov	r0, r4
 8005090:	f002 f978 	bl	8007384 <bt_conn_unref>
 8005094:	e7ed      	b.n	8005072 <le_remote_feat_complete+0x2a>
 8005096:	bf00      	nop
 8005098:	08017de5 	.word	0x08017de5
 800509c:	08015b54 	.word	0x08015b54

080050a0 <hci_num_completed_packets>:
{
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
 80050a4:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
 80050a6:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
 80050a8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800519c <hci_num_completed_packets+0xfc>
{
 80050ac:	b086      	sub	sp, #24
			tx->pending_no_cb = 0U;
 80050ae:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
 80050b0:	783b      	ldrb	r3, [r7, #0]
 80050b2:	429d      	cmp	r5, r3
 80050b4:	db02      	blt.n	80050bc <hci_num_completed_packets+0x1c>
}
 80050b6:	b006      	add	sp, #24
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
 80050bc:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80050c0:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
 80050c4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
 80050c8:	4650      	mov	r0, sl
 80050ca:	f002 f993 	bl	80073f4 <bt_conn_lookup_handle>
		if (!conn) {
 80050ce:	4604      	mov	r4, r0
 80050d0:	b1d8      	cbz	r0, 800510a <hci_num_completed_packets+0x6a>
			k_work_submit(&conn->tx_complete_work);
 80050d2:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	d03b      	beq.n	8005152 <hci_num_completed_packets+0xb2>
	__asm__ volatile(
 80050da:	f04f 0310 	mov.w	r3, #16
 80050de:	f3ef 8211 	mrs	r2, BASEPRI
 80050e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80050e6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
 80050ea:	69e3      	ldr	r3, [r4, #28]
 80050ec:	b1d3      	cbz	r3, 8005124 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
 80050ee:	3b01      	subs	r3, #1
 80050f0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 80050f2:	f382 8811 	msr	BASEPRI, r2
 80050f6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
 80050fa:	4620      	mov	r0, r4
 80050fc:	f001 ff8a 	bl	8007014 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
 8005100:	3e01      	subs	r6, #1
 8005102:	f009 fea3 	bl	800ee4c <z_impl_k_sem_give>
 8005106:	b2b6      	uxth	r6, r6
 8005108:	e7e5      	b.n	80050d6 <hci_num_completed_packets+0x36>
			BT_ERR("No connection for handle %u", handle);
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <hci_num_completed_packets+0xf4>)
 800510c:	4822      	ldr	r0, [pc, #136]	; (8005198 <hci_num_completed_packets+0xf8>)
 800510e:	e9cd 3a04 	strd	r3, sl, [sp, #16]
 8005112:	aa03      	add	r2, sp, #12
 8005114:	2303      	movs	r3, #3
 8005116:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	f00d ff9c 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
 8005120:	3501      	adds	r5, #1
 8005122:	e7c5      	b.n	80050b0 <hci_num_completed_packets+0x10>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
 8005124:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8005126:	b12b      	cbz	r3, 8005134 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8005128:	69a1      	ldr	r1, [r4, #24]
 800512a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800512c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800512e:	428b      	cmp	r3, r1
	list->tail = node;
 8005130:	bf08      	it	eq
 8005132:	61a0      	streq	r0, [r4, #24]
 8005134:	f382 8811 	msr	BASEPRI, r2
 8005138:	f3bf 8f6f 	isb	sy
			if (!node) {
 800513c:	b96b      	cbnz	r3, 800515a <hci_num_completed_packets+0xba>
				BT_ERR("packets count mismatch");
 800513e:	2302      	movs	r3, #2
 8005140:	4815      	ldr	r0, [pc, #84]	; (8005198 <hci_num_completed_packets+0xf8>)
 8005142:	f8cd 9010 	str.w	r9, [sp, #16]
 8005146:	aa03      	add	r2, sp, #12
 8005148:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	f00d ff83 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
 8005152:	4620      	mov	r0, r4
 8005154:	f002 f916 	bl	8007384 <bt_conn_unref>
 8005158:	e7e2      	b.n	8005120 <hci_num_completed_packets+0x80>
	__asm__ volatile(
 800515a:	f04f 0210 	mov.w	r2, #16
 800515e:	f3ef 8111 	mrs	r1, BASEPRI
 8005162:	f382 8812 	msr	BASEPRI_MAX, r2
 8005166:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	61e2      	str	r2, [r4, #28]
	parent->next = child;
 800516e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
 8005172:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
 8005174:	f8c3 800c 	str.w	r8, [r3, #12]
 8005178:	b94a      	cbnz	r2, 800518e <hci_num_completed_packets+0xee>
	list->head = node;
 800517a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
 800517e:	f381 8811 	msr	BASEPRI, r1
 8005182:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
 8005186:	4650      	mov	r0, sl
 8005188:	f00a f9c0 	bl	800f50c <k_work_submit>
 800518c:	e7b5      	b.n	80050fa <hci_num_completed_packets+0x5a>
	parent->next = child;
 800518e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8005190:	6263      	str	r3, [r4, #36]	; 0x24
}
 8005192:	e7f4      	b.n	800517e <hci_num_completed_packets+0xde>
 8005194:	08017fd4 	.word	0x08017fd4
 8005198:	08015b54 	.word	0x08015b54
 800519c:	08017ff0 	.word	0x08017ff0

080051a0 <hci_cmd_status>:
{
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	2104      	movs	r1, #4
 80051a4:	4604      	mov	r4, r0
 80051a6:	3008      	adds	r0, #8
 80051a8:	f006 ffc6 	bl	800c138 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
 80051ac:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
 80051ae:	7801      	ldrb	r1, [r0, #0]
 80051b0:	8840      	ldrh	r0, [r0, #2]
 80051b2:	4622      	mov	r2, r4
 80051b4:	f7ff fe38 	bl	8004e28 <hci_cmd_done>
	if (ncmd) {
 80051b8:	b125      	cbz	r5, 80051c4 <hci_cmd_status+0x24>
 80051ba:	4803      	ldr	r0, [pc, #12]	; (80051c8 <hci_cmd_status+0x28>)
}
 80051bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c0:	f009 be44 	b.w	800ee4c <z_impl_k_sem_give>
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop
 80051c8:	20000120 	.word	0x20000120

080051cc <hci_cmd_complete>:
{
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	2103      	movs	r1, #3
 80051d0:	4604      	mov	r4, r0
 80051d2:	3008      	adds	r0, #8
 80051d4:	f006 ffb0 	bl	800c138 <net_buf_simple_pull_mem>
	status = buf->data[0];
 80051d8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
 80051da:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
 80051dc:	7819      	ldrb	r1, [r3, #0]
 80051de:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 80051e2:	4622      	mov	r2, r4
 80051e4:	f7ff fe20 	bl	8004e28 <hci_cmd_done>
	if (ncmd) {
 80051e8:	b125      	cbz	r5, 80051f4 <hci_cmd_complete+0x28>
 80051ea:	4803      	ldr	r0, [pc, #12]	; (80051f8 <hci_cmd_complete+0x2c>)
}
 80051ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051f0:	f009 be2c 	b.w	800ee4c <z_impl_k_sem_give>
 80051f4:	bd38      	pop	{r3, r4, r5, pc}
 80051f6:	bf00      	nop
 80051f8:	20000120 	.word	0x20000120

080051fc <bt_hci_cmd_state_set_init>:
{
 80051fc:	b510      	push	{r4, lr}
	state->bit = bit;
 80051fe:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
 8005202:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005206:	720b      	strb	r3, [r1, #8]
{
 8005208:	460c      	mov	r4, r1
	cmd(buf)->state = state;
 800520a:	f006 fc8d 	bl	800bb28 <net_buf_id>
 800520e:	4b03      	ldr	r3, [pc, #12]	; (800521c <bt_hci_cmd_state_set_init+0x20>)
 8005210:	220c      	movs	r2, #12
 8005212:	fb02 3000 	mla	r0, r2, r0, r3
 8005216:	6044      	str	r4, [r0, #4]
}
 8005218:	bd10      	pop	{r4, pc}
 800521a:	bf00      	nop
 800521c:	200015f0 	.word	0x200015f0

08005220 <bt_hci_cmd_create>:
{
 8005220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
 8005224:	f04f 32ff 	mov.w	r2, #4294967295
 8005228:	4605      	mov	r5, r0
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	481b      	ldr	r0, [pc, #108]	; (800529c <bt_hci_cmd_create+0x7c>)
 8005230:	460e      	mov	r6, r1
 8005232:	f00f fe0a 	bl	8014e4a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
 8005236:	4604      	mov	r4, r0
 8005238:	b948      	cbnz	r0, 800524e <bt_hci_cmd_create+0x2e>
 800523a:	4919      	ldr	r1, [pc, #100]	; (80052a0 <bt_hci_cmd_create+0x80>)
 800523c:	4819      	ldr	r0, [pc, #100]	; (80052a4 <bt_hci_cmd_create+0x84>)
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <bt_hci_cmd_create+0x88>)
 8005240:	23ec      	movs	r3, #236	; 0xec
 8005242:	f00d f831 	bl	80122a8 <assert_print>
 8005246:	4818      	ldr	r0, [pc, #96]	; (80052a8 <bt_hci_cmd_create+0x88>)
 8005248:	21ec      	movs	r1, #236	; 0xec
 800524a:	f00d f826 	bl	801229a <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
 800524e:	f104 0b08 	add.w	fp, r4, #8
 8005252:	2101      	movs	r1, #1
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
 8005254:	2700      	movs	r7, #0
 8005256:	4658      	mov	r0, fp
 8005258:	f006 fe02 	bl	800be60 <net_buf_simple_reserve>
 800525c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
 800525e:	4620      	mov	r0, r4
 8005260:	f006 fc62 	bl	800bb28 <net_buf_id>
 8005264:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80052ac <bt_hci_cmd_create+0x8c>
 8005268:	f04f 0a0c 	mov.w	sl, #12
 800526c:	fb0a 8000 	mla	r0, sl, r0, r8
 8005270:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
 8005272:	4620      	mov	r0, r4
 8005274:	f006 fc58 	bl	800bb28 <net_buf_id>
 8005278:	fb0a 8000 	mla	r0, sl, r0, r8
 800527c:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
 800527e:	4620      	mov	r0, r4
 8005280:	f006 fc52 	bl	800bb28 <net_buf_id>
 8005284:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
 8005288:	2103      	movs	r1, #3
 800528a:	6047      	str	r7, [r0, #4]
 800528c:	4658      	mov	r0, fp
 800528e:	f006 ff75 	bl	800c17c <net_buf_simple_add>
	hdr->param_len = param_len;
 8005292:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
 8005294:	8005      	strh	r5, [r0, #0]
}
 8005296:	4620      	mov	r0, r4
 8005298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	200006dc 	.word	0x200006dc
 80052a0:	08017d7b 	.word	0x08017d7b
 80052a4:	08016836 	.word	0x08016836
 80052a8:	08017e4d 	.word	0x08017e4d
 80052ac:	200015f0 	.word	0x200015f0

080052b0 <bt_hci_cmd_send_sync>:
{
 80052b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b4:	b087      	sub	sp, #28
 80052b6:	4681      	mov	r9, r0
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4615      	mov	r5, r2
	if (!buf) {
 80052bc:	460c      	mov	r4, r1
 80052be:	b921      	cbnz	r1, 80052ca <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
 80052c0:	f7ff ffae 	bl	8005220 <bt_hci_cmd_create>
		if (!buf) {
 80052c4:	4604      	mov	r4, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d058      	beq.n	800537c <bt_hci_cmd_send_sync+0xcc>
	return z_impl_k_sem_init(sem, initial_count, limit);
 80052ca:	2201      	movs	r2, #1
 80052cc:	2100      	movs	r1, #0
 80052ce:	4638      	mov	r0, r7
 80052d0:	f010 f883 	bl	80153da <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
 80052d4:	4620      	mov	r0, r4
 80052d6:	f006 fc27 	bl	800bb28 <net_buf_id>
 80052da:	4e2a      	ldr	r6, [pc, #168]	; (8005384 <bt_hci_cmd_send_sync+0xd4>)
 80052dc:	230c      	movs	r3, #12
 80052de:	fb03 6000 	mla	r0, r3, r0, r6
 80052e2:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
 80052e4:	4620      	mov	r0, r4
 80052e6:	f006 fe5f 	bl	800bfa8 <net_buf_ref>
 80052ea:	4601      	mov	r1, r0
 80052ec:	4826      	ldr	r0, [pc, #152]	; (8005388 <bt_hci_cmd_send_sync+0xd8>)
 80052ee:	f006 fde1 	bl	800beb4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <bt_hci_cmd_send_sync+0xdc>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4638      	mov	r0, r7
 80052f8:	f009 fdec 	bl	800eed4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
 80052fc:	4680      	mov	r8, r0
 80052fe:	b180      	cbz	r0, 8005322 <bt_hci_cmd_send_sync+0x72>
 8005300:	4a23      	ldr	r2, [pc, #140]	; (8005390 <bt_hci_cmd_send_sync+0xe0>)
 8005302:	4924      	ldr	r1, [pc, #144]	; (8005394 <bt_hci_cmd_send_sync+0xe4>)
 8005304:	4824      	ldr	r0, [pc, #144]	; (8005398 <bt_hci_cmd_send_sync+0xe8>)
 8005306:	f44f 739a 	mov.w	r3, #308	; 0x134
 800530a:	f00c ffcd 	bl	80122a8 <assert_print>
 800530e:	4823      	ldr	r0, [pc, #140]	; (800539c <bt_hci_cmd_send_sync+0xec>)
 8005310:	4641      	mov	r1, r8
 8005312:	f00c ffc9 	bl	80122a8 <assert_print>
 8005316:	4040      	eors	r0, r0
 8005318:	f380 8811 	msr	BASEPRI, r0
 800531c:	f04f 0003 	mov.w	r0, #3
 8005320:	df02      	svc	2
	status = cmd(buf)->status;
 8005322:	4620      	mov	r0, r4
 8005324:	f006 fc00 	bl	800bb28 <net_buf_id>
 8005328:	230c      	movs	r3, #12
 800532a:	4343      	muls	r3, r0
 800532c:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
 800532e:	b1e6      	cbz	r6, 800536a <bt_hci_cmd_send_sync+0xba>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <bt_hci_cmd_send_sync+0xf0>)
 8005332:	481c      	ldr	r0, [pc, #112]	; (80053a4 <bt_hci_cmd_send_sync+0xf4>)
 8005334:	466d      	mov	r5, sp
 8005336:	b088      	sub	sp, #32
 8005338:	466a      	mov	r2, sp
 800533a:	e9c2 3904 	strd	r3, r9, [r2, #16]
 800533e:	2304      	movs	r3, #4
 8005340:	6196      	str	r6, [r2, #24]
 8005342:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8005346:	f842 3f0c 	str.w	r3, [r2, #12]!
 800534a:	f00d fe85 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
 800534e:	4620      	mov	r0, r4
 8005350:	46ad      	mov	sp, r5
 8005352:	f006 fde3 	bl	800bf1c <net_buf_unref>
			return -EIO;
 8005356:	2e09      	cmp	r6, #9
 8005358:	bf0c      	ite	eq
 800535a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
 800535e:	f06f 0004 	mvnne.w	r0, #4
}
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
 800536a:	b115      	cbz	r5, 8005372 <bt_hci_cmd_send_sync+0xc2>
		*rsp = buf;
 800536c:	602c      	str	r4, [r5, #0]
	return 0;
 800536e:	4630      	mov	r0, r6
 8005370:	e7f7      	b.n	8005362 <bt_hci_cmd_send_sync+0xb2>
		net_buf_unref(buf);
 8005372:	4620      	mov	r0, r4
 8005374:	f006 fdd2 	bl	800bf1c <net_buf_unref>
	return 0;
 8005378:	4628      	mov	r0, r5
 800537a:	e7f2      	b.n	8005362 <bt_hci_cmd_send_sync+0xb2>
			return -ENOBUFS;
 800537c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8005380:	e7ef      	b.n	8005362 <bt_hci_cmd_send_sync+0xb2>
 8005382:	bf00      	nop
 8005384:	200015f0 	.word	0x200015f0
 8005388:	20000158 	.word	0x20000158
 800538c:	000186a0 	.word	0x000186a0
 8005390:	08017e4d 	.word	0x08017e4d
 8005394:	080170f2 	.word	0x080170f2
 8005398:	08016836 	.word	0x08016836
 800539c:	08018007 	.word	0x08018007
 80053a0:	08018027 	.word	0x08018027
 80053a4:	08015b54 	.word	0x08015b54

080053a8 <hci_le_read_max_data_len>:
{
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	4606      	mov	r6, r0
 80053ae:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
 80053b0:	aa01      	add	r2, sp, #4
 80053b2:	2100      	movs	r1, #0
 80053b4:	f242 002f 	movw	r0, #8239	; 0x202f
 80053b8:	f7ff ff7a 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 80053bc:	4604      	mov	r4, r0
 80053be:	b160      	cbz	r0, 80053da <hci_le_read_max_data_len+0x32>
		BT_ERR("Failed to read DLE max data len");
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <hci_le_read_max_data_len+0x48>)
 80053c2:	9306      	str	r3, [sp, #24]
 80053c4:	480b      	ldr	r0, [pc, #44]	; (80053f4 <hci_le_read_max_data_len+0x4c>)
 80053c6:	2302      	movs	r3, #2
 80053c8:	aa05      	add	r2, sp, #20
 80053ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	f00d fe42 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 80053d4:	4620      	mov	r0, r4
 80053d6:	b008      	add	sp, #32
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
 80053da:	9801      	ldr	r0, [sp, #4]
 80053dc:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 80053de:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 80053e2:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
 80053e4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80053e8:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
 80053ea:	f006 fd97 	bl	800bf1c <net_buf_unref>
	return 0;
 80053ee:	e7f1      	b.n	80053d4 <hci_le_read_max_data_len+0x2c>
 80053f0:	08018043 	.word	0x08018043
 80053f4:	08015b54 	.word	0x08015b54

080053f8 <bt_hci_le_enh_conn_complete>:
{
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	b08f      	sub	sp, #60	; 0x3c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 80053fe:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
 8005402:	4aae      	ldr	r2, [pc, #696]	; (80056bc <bt_hci_le_enh_conn_complete+0x2c4>)
	handle |= ~BT_ACL_HANDLE_MASK;
 8005404:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
 8005408:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
 800540a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
 800540e:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
 8005410:	b29b      	uxth	r3, r3
 8005412:	4299      	cmp	r1, r3
 8005414:	f04f 0600 	mov.w	r6, #0
{
 8005418:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
 800541a:	bf04      	itt	eq
 800541c:	8016      	strheq	r6, [r2, #0]
			return true;
 800541e:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
 8005420:	f000 fe0c 	bl	800603c <bt_id_pending_keys_update>
	if (evt->status) {
 8005424:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
 8005426:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
 800542a:	b374      	cbz	r4, 800548a <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 800542c:	2c3c      	cmp	r4, #60	; 0x3c
 800542e:	d122      	bne.n	8005476 <bt_hci_le_enh_conn_complete+0x7e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
 8005430:	f001 f8b8 	bl	80065a4 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8005434:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8005438:	3010      	adds	r0, #16
 800543a:	f00d fdef 	bl	801301c <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
 800543e:	2000      	movs	r0, #0
 8005440:	f7ff faaa 	bl	8004998 <find_pending_connect.part.0>
		if (!conn) {
 8005444:	4605      	mov	r5, r0
 8005446:	b970      	cbnz	r0, 8005466 <bt_hci_le_enh_conn_complete+0x6e>
			BT_ERR("No pending peripheral connection");
 8005448:	4b9d      	ldr	r3, [pc, #628]	; (80056c0 <bt_hci_le_enh_conn_complete+0x2c8>)
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	2302      	movs	r3, #2
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
 8005450:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005454:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Unexpected status 0x%02x", evt->status);
 8005458:	489a      	ldr	r0, [pc, #616]	; (80056c4 <bt_hci_le_enh_conn_complete+0x2cc>)
 800545a:	f00d fdfd 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 800545e:	3734      	adds	r7, #52	; 0x34
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
 8005466:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8005468:	2100      	movs	r1, #0
 800546a:	f001 ffcf 	bl	800740c <bt_conn_set_state>
		bt_conn_unref(conn);
 800546e:	4628      	mov	r0, r5
	bt_conn_unref(conn);
 8005470:	f001 ff88 	bl	8007384 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
 8005474:	e7f3      	b.n	800545e <bt_hci_le_enh_conn_complete+0x66>
		BT_WARN("Unexpected status 0x%02x", evt->status);
 8005476:	4b94      	ldr	r3, [pc, #592]	; (80056c8 <bt_hci_le_enh_conn_complete+0x2d0>)
 8005478:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800547c:	2303      	movs	r3, #3
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005484:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8005488:	e7e6      	b.n	8005458 <bt_hci_le_enh_conn_complete+0x60>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
 800548a:	792b      	ldrb	r3, [r5, #4]
 800548c:	3b02      	subs	r3, #2
 800548e:	2b01      	cmp	r3, #1
 8005490:	f105 0a04 	add.w	sl, r5, #4
 8005494:	d841      	bhi.n	800551a <bt_hci_le_enh_conn_complete+0x122>
	memcpy(dst, src, sizeof(*dst));
 8005496:	2207      	movs	r2, #7
 8005498:	4651      	mov	r1, sl
 800549a:	f107 0010 	add.w	r0, r7, #16
 800549e:	f00d fcf5 	bl	8012e8c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 80054a2:	7c3b      	ldrb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
 80054a4:	2206      	movs	r2, #6
 80054a6:	3b02      	subs	r3, #2
 80054a8:	f105 0111 	add.w	r1, r5, #17
 80054ac:	f107 0009 	add.w	r0, r7, #9
 80054b0:	743b      	strb	r3, [r7, #16]
 80054b2:	f00d fceb 	bl	8012e8c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
 80054b6:	2301      	movs	r3, #1
 80054b8:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
 80054ba:	78eb      	ldrb	r3, [r5, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d113      	bne.n	80054e8 <bt_hci_le_enh_conn_complete+0xf0>
 80054c0:	f107 0010 	add.w	r0, r7, #16
 80054c4:	f7ff fa68 	bl	8004998 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 80054c8:	78eb      	ldrb	r3, [r5, #3]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	4604      	mov	r4, r0
 80054ce:	d10a      	bne.n	80054e6 <bt_hci_le_enh_conn_complete+0xee>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
 80054d0:	f001 f868 	bl	80065a4 <bt_le_adv_lookup_legacy>
 80054d4:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80054d8:	4683      	mov	fp, r0
 80054da:	3010      	adds	r0, #16
 80054dc:	f00d fd9e 	bl	801301c <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
 80054e0:	4658      	mov	r0, fp
 80054e2:	f00e f845 	bl	8013570 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
 80054e6:	bb7c      	cbnz	r4, 8005548 <bt_hci_le_enh_conn_complete+0x150>
		BT_ERR("No pending conn for peer %s",
 80054e8:	4650      	mov	r0, sl
 80054ea:	f7ff f947 	bl	800477c <bt_addr_le_str_real>
 80054ee:	466c      	mov	r4, sp
 80054f0:	4b76      	ldr	r3, [pc, #472]	; (80056cc <bt_hci_le_enh_conn_complete+0x2d4>)
 80054f2:	b088      	sub	sp, #32
 80054f4:	aa02      	add	r2, sp, #8
 80054f6:	e9c2 3004 	strd	r3, r0, [r2, #16]
 80054fa:	2302      	movs	r3, #2
 80054fc:	7613      	strb	r3, [r2, #24]
 80054fe:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <bt_hci_le_enh_conn_complete+0x2d8>)
 8005500:	f842 3f0c 	str.w	r3, [r2, #12]!
 8005504:	486f      	ldr	r0, [pc, #444]	; (80056c4 <bt_hci_le_enh_conn_complete+0x2cc>)
 8005506:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800550a:	f00d fda5 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
 800550e:	211f      	movs	r1, #31
 8005510:	46a5      	mov	sp, r4
 8005512:	4640      	mov	r0, r8
 8005514:	f00d fdb3 	bl	801307e <bt_hci_disconnect>
		return;
 8005518:	e7a1      	b.n	800545e <bt_hci_le_enh_conn_complete+0x66>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
 800551a:	78eb      	ldrb	r3, [r5, #3]
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf04      	itt	eq
 8005520:	4b6c      	ldreq	r3, [pc, #432]	; (80056d4 <bt_hci_le_enh_conn_complete+0x2dc>)
 8005522:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
 8005526:	4651      	mov	r1, sl
 8005528:	4620      	mov	r0, r4
 800552a:	f00d ff08 	bl	801333e <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
 800552e:	2207      	movs	r2, #7
 8005530:	4601      	mov	r1, r0
 8005532:	f107 0010 	add.w	r0, r7, #16
 8005536:	f00d fca9 	bl	8012e8c <memcpy>
 800553a:	2207      	movs	r2, #7
 800553c:	4651      	mov	r1, sl
 800553e:	f107 0008 	add.w	r0, r7, #8
 8005542:	f00d fca3 	bl	8012e8c <memcpy>
}
 8005546:	e7b8      	b.n	80054ba <bt_hci_le_enh_conn_complete+0xc2>
	conn->handle = handle;
 8005548:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
 800554a:	2207      	movs	r2, #7
 800554c:	f820 9b90 	strh.w	r9, [r0], #144
 8005550:	f107 0110 	add.w	r1, r7, #16
 8005554:	f00d fc9a 	bl	8012e8c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
 8005558:	7e2a      	ldrb	r2, [r5, #24]
 800555a:	7deb      	ldrb	r3, [r5, #23]
 800555c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005560:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
 8005564:	7eaa      	ldrb	r2, [r5, #26]
 8005566:	7e6b      	ldrb	r3, [r5, #25]
 8005568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800556c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 8005570:	7eeb      	ldrb	r3, [r5, #27]
 8005572:	7f2a      	ldrb	r2, [r5, #28]
 8005574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005578:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
 800557c:	78eb      	ldrb	r3, [r5, #3]
 800557e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
 8005580:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 8005582:	2b01      	cmp	r3, #1
	conn->err = 0U;
 8005584:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 8005586:	d11c      	bne.n	80055c2 <bt_hci_le_enh_conn_complete+0x1ca>
 8005588:	2207      	movs	r2, #7
 800558a:	f107 0108 	add.w	r1, r7, #8
 800558e:	f104 0097 	add.w	r0, r4, #151	; 0x97
 8005592:	f00d fc7b 	bl	8012e8c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
 8005596:	f001 f805 	bl	80065a4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
 800559a:	7a21      	ldrb	r1, [r4, #8]
 800559c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80056d4 <bt_hci_le_enh_conn_complete+0x2dc>
 80055a0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80055a4:	2207      	movs	r2, #7
 80055a6:	4441      	add	r1, r8
 80055a8:	f104 009e 	add.w	r0, r4, #158	; 0x9e
 80055ac:	f00d fc6e 	bl	8012e8c <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
 80055b0:	f8d8 10dc 	ldr.w	r1, [r8, #220]	; 0xdc
 80055b4:	462a      	mov	r2, r5
 80055b6:	f001 0340 	and.w	r3, r1, #64	; 0x40
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d001      	beq.n	80055c2 <bt_hci_le_enh_conn_complete+0x1ca>
			bt_le_adv_resume();
 80055be:	f001 f9c9 	bl	8006954 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
 80055c2:	2107      	movs	r1, #7
 80055c4:	4620      	mov	r0, r4
 80055c6:	f001 ff21 	bl	800740c <bt_conn_set_state>
	if (is_disconnected) {
 80055ca:	b11e      	cbz	r6, 80055d4 <bt_hci_le_enh_conn_complete+0x1dc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
 80055cc:	2101      	movs	r1, #1
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 ff1c 	bl	800740c <bt_conn_set_state>
	bt_conn_connected(conn);
 80055d4:	4620      	mov	r0, r4
 80055d6:	f00e f866 	bl	80136a6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
 80055da:	7b63      	ldrb	r3, [r4, #13]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d167      	bne.n	80056b0 <bt_hci_le_enh_conn_complete+0x2b8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80055e0:	f3bf 8f5b 	dmb	ish
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	4e3b      	ldr	r6, [pc, #236]	; (80056d4 <bt_hci_le_enh_conn_complete+0x2dc>)
 80055e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
 80055ec:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80055f0:	d126      	bne.n	8005640 <bt_hci_le_enh_conn_complete+0x248>
 80055f2:	78e3      	ldrb	r3, [r4, #3]
 80055f4:	b11b      	cbz	r3, 80055fe <bt_hci_le_enh_conn_complete+0x206>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
 80055f6:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
 80055fa:	0718      	lsls	r0, r3, #28
 80055fc:	d520      	bpl.n	8005640 <bt_hci_le_enh_conn_complete+0x248>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
 80055fe:	2102      	movs	r1, #2
 8005600:	f242 0016 	movw	r0, #8214	; 0x2016
 8005604:	f7ff fe0c 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8005608:	4605      	mov	r5, r0
 800560a:	2800      	cmp	r0, #0
 800560c:	d052      	beq.n	80056b4 <bt_hci_le_enh_conn_complete+0x2bc>
 800560e:	2102      	movs	r1, #2
 8005610:	3008      	adds	r0, #8
 8005612:	f006 fdb3 	bl	800c17c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8005616:	8823      	ldrh	r3, [r4, #0]
 8005618:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
 800561a:	2200      	movs	r2, #0
 800561c:	4629      	mov	r1, r5
 800561e:	f242 0016 	movw	r0, #8214	; 0x2016
 8005622:	f7ff fe45 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8005626:	b158      	cbz	r0, 8005640 <bt_hci_le_enh_conn_complete+0x248>
			BT_ERR("Failed read remote features (%d)", err);
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <bt_hci_le_enh_conn_complete+0x2e0>)
 800562a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800562e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
 8005632:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005636:	2303      	movs	r3, #3
 8005638:	4822      	ldr	r0, [pc, #136]	; (80056c4 <bt_hci_le_enh_conn_complete+0x2cc>)
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	f00d fd0c 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
 8005640:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 8005644:	07d9      	lsls	r1, r3, #31
 8005646:	d513      	bpl.n	8005670 <bt_hci_le_enh_conn_complete+0x278>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
 8005648:	2100      	movs	r1, #0
 800564a:	2302      	movs	r3, #2
 800564c:	9100      	str	r1, [sp, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	4620      	mov	r0, r4
 8005652:	f00d fd4d 	bl	80130f0 <bt_le_set_phy>
		if (err) {
 8005656:	b158      	cbz	r0, 8005670 <bt_hci_le_enh_conn_complete+0x278>
			BT_ERR("Failed LE Set PHY (%d)", err);
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <bt_hci_le_enh_conn_complete+0x2e4>)
 800565a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800565e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
 8005662:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005666:	2303      	movs	r3, #3
 8005668:	4816      	ldr	r0, [pc, #88]	; (80056c4 <bt_hci_le_enh_conn_complete+0x2cc>)
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
 800566c:	f00d fcf4 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
 8005670:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
 8005674:	069a      	lsls	r2, r3, #26
 8005676:	d51b      	bpl.n	80056b0 <bt_hci_le_enh_conn_complete+0x2b8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
 8005678:	f8d6 3174 	ldr.w	r3, [r6, #372]	; 0x174
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	079b      	lsls	r3, r3, #30
 8005680:	d516      	bpl.n	80056b0 <bt_hci_le_enh_conn_complete+0x2b8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
 8005682:	1db9      	adds	r1, r7, #6
 8005684:	1d38      	adds	r0, r7, #4
 8005686:	f7ff fe8f 	bl	80053a8 <hci_le_read_max_data_len>
			if (!err) {
 800568a:	b988      	cbnz	r0, 80056b0 <bt_hci_le_enh_conn_complete+0x2b8>
				err = bt_le_set_data_len(conn,
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	88b9      	ldrh	r1, [r7, #4]
 8005690:	4620      	mov	r0, r4
 8005692:	f00d fd0f 	bl	80130b4 <bt_le_set_data_len>
				if (err) {
 8005696:	b158      	cbz	r0, 80056b0 <bt_hci_le_enh_conn_complete+0x2b8>
					BT_ERR("Failed to set data len (%d)", err);
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <bt_hci_le_enh_conn_complete+0x2e8>)
 800569a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800569e:	e9c7 300a 	strd	r3, r0, [r7, #40]	; 0x28
 80056a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80056a6:	2303      	movs	r3, #3
 80056a8:	4806      	ldr	r0, [pc, #24]	; (80056c4 <bt_hci_le_enh_conn_complete+0x2cc>)
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
 80056ac:	f00d fcd4 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
 80056b0:	4620      	mov	r0, r4
 80056b2:	e6dd      	b.n	8005470 <bt_hci_le_enh_conn_complete+0x78>
		return -ENOBUFS;
 80056b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80056b8:	e7b6      	b.n	8005628 <bt_hci_le_enh_conn_complete+0x230>
 80056ba:	bf00      	nop
 80056bc:	2000186c 	.word	0x2000186c
 80056c0:	080180aa 	.word	0x080180aa
 80056c4:	08015b54 	.word	0x08015b54
 80056c8:	080180cb 	.word	0x080180cb
 80056cc:	080180e4 	.word	0x080180e4
 80056d0:	01000003 	.word	0x01000003
 80056d4:	20000000 	.word	0x20000000
 80056d8:	08018100 	.word	0x08018100
 80056dc:	08018121 	.word	0x08018121
 80056e0:	08018138 	.word	0x08018138

080056e4 <bt_security_err_get>:
	switch (hci_err) {
 80056e4:	2829      	cmp	r0, #41	; 0x29
 80056e6:	bf9a      	itte	ls
 80056e8:	4b01      	ldrls	r3, [pc, #4]	; (80056f0 <bt_security_err_get+0xc>)
 80056ea:	5c18      	ldrbls	r0, [r3, r0]
{
 80056ec:	2009      	movhi	r0, #9
}
 80056ee:	4770      	bx	lr
 80056f0:	08018252 	.word	0x08018252

080056f4 <bt_send>:
	return bt_dev.drv->send(buf);
 80056f4:	4b02      	ldr	r3, [pc, #8]	; (8005700 <bt_send+0xc>)
 80056f6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	4718      	bx	r3
 80056fe:	bf00      	nop
 8005700:	20000000 	.word	0x20000000

08005704 <bt_hci_cmd_send>:
{
 8005704:	b530      	push	{r4, r5, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	b087      	sub	sp, #28
	if (!buf) {
 800570a:	460c      	mov	r4, r1
 800570c:	b919      	cbnz	r1, 8005716 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
 800570e:	f7ff fd87 	bl	8005220 <bt_hci_cmd_create>
		if (!buf) {
 8005712:	4604      	mov	r4, r0
 8005714:	b1f8      	cbz	r0, 8005756 <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
 8005716:	f640 4335 	movw	r3, #3125	; 0xc35
 800571a:	429d      	cmp	r5, r3
 800571c:	d115      	bne.n	800574a <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
 800571e:	4620      	mov	r0, r4
 8005720:	f7ff ffe8 	bl	80056f4 <bt_send>
		if (err) {
 8005724:	4605      	mov	r5, r0
 8005726:	b168      	cbz	r0, 8005744 <bt_hci_cmd_send+0x40>
			BT_ERR("Unable to send to driver (err %d)", err);
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <bt_hci_cmd_send+0x58>)
 800572a:	aa03      	add	r2, sp, #12
 800572c:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8005730:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005734:	480a      	ldr	r0, [pc, #40]	; (8005760 <bt_hci_cmd_send+0x5c>)
 8005736:	2303      	movs	r3, #3
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	f00d fc8d 	bl	8013058 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
 800573e:	4620      	mov	r0, r4
 8005740:	f006 fbec 	bl	800bf1c <net_buf_unref>
}
 8005744:	4628      	mov	r0, r5
 8005746:	b007      	add	sp, #28
 8005748:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 800574a:	4806      	ldr	r0, [pc, #24]	; (8005764 <bt_hci_cmd_send+0x60>)
 800574c:	4621      	mov	r1, r4
 800574e:	f006 fbb1 	bl	800beb4 <net_buf_put>
	return 0;
 8005752:	2500      	movs	r5, #0
 8005754:	e7f6      	b.n	8005744 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
 8005756:	f06f 0568 	mvn.w	r5, #104	; 0x68
 800575a:	e7f3      	b.n	8005744 <bt_hci_cmd_send+0x40>
 800575c:	08018154 	.word	0x08018154
 8005760:	08015b54 	.word	0x08015b54
 8005764:	20000158 	.word	0x20000158

08005768 <le_ltk_request>:
{
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
 800576a:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
 800576c:	8826      	ldrh	r6, [r4, #0]
 800576e:	b2b7      	uxth	r7, r6
{
 8005770:	b08d      	sub	sp, #52	; 0x34
	conn = bt_conn_lookup_handle(handle);
 8005772:	4638      	mov	r0, r7
 8005774:	f001 fe3e 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8005778:	4605      	mov	r5, r0
 800577a:	b960      	cbnz	r0, 8005796 <le_ltk_request+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <le_ltk_request+0xb0>)
 800577e:	4827      	ldr	r0, [pc, #156]	; (800581c <le_ltk_request+0xb4>)
 8005780:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
 8005784:	aa09      	add	r2, sp, #36	; 0x24
 8005786:	2303      	movs	r3, #3
 8005788:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800578c:	9309      	str	r3, [sp, #36]	; 0x24
 800578e:	f00d fc63 	bl	8013058 <z_log_msg2_static_create.constprop.0>
}
 8005792:	b00d      	add	sp, #52	; 0x34
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
 8005796:	af02      	add	r7, sp, #8
 8005798:	f8d4 2002 	ldr.w	r2, [r4, #2]
 800579c:	f8d4 3006 	ldr.w	r3, [r4, #6]
 80057a0:	9701      	str	r7, [sp, #4]
 80057a2:	8961      	ldrh	r1, [r4, #10]
 80057a4:	9100      	str	r1, [sp, #0]
 80057a6:	f00f f9e0 	bl	8014b6a <bt_smp_request_ltk>
 80057aa:	b320      	cbz	r0, 80057f6 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
 80057ac:	2112      	movs	r1, #18
 80057ae:	f242 001a 	movw	r0, #8218	; 0x201a
 80057b2:	f7ff fd35 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 80057b6:	4604      	mov	r4, r0
 80057b8:	b968      	cbnz	r0, 80057d6 <le_ltk_request+0x6e>
		BT_ERR("Out of command buffers");
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <le_ltk_request+0xb8>)
 80057bc:	930a      	str	r3, [sp, #40]	; 0x28
 80057be:	4817      	ldr	r0, [pc, #92]	; (800581c <le_ltk_request+0xb4>)
 80057c0:	2302      	movs	r3, #2
 80057c2:	aa09      	add	r2, sp, #36	; 0x24
 80057c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80057c8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ca:	f00d fc45 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
 80057ce:	4628      	mov	r0, r5
 80057d0:	f001 fdd8 	bl	8007384 <bt_conn_unref>
 80057d4:	e7dd      	b.n	8005792 <le_ltk_request+0x2a>
 80057d6:	2112      	movs	r1, #18
 80057d8:	3008      	adds	r0, #8
 80057da:	f006 fccf 	bl	800c17c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
 80057de:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
 80057e0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
 80057e4:	2210      	movs	r2, #16
 80057e6:	f00d fb51 	bl	8012e8c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
 80057ea:	4621      	mov	r1, r4
 80057ec:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
 80057f0:	f7ff ff88 	bl	8005704 <bt_hci_cmd_send>
 80057f4:	e7eb      	b.n	80057ce <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
 80057f6:	2102      	movs	r1, #2
 80057f8:	f242 001b 	movw	r0, #8219	; 0x201b
 80057fc:	f7ff fd10 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8005800:	4604      	mov	r4, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	d0d9      	beq.n	80057ba <le_ltk_request+0x52>
 8005806:	2102      	movs	r1, #2
 8005808:	3008      	adds	r0, #8
 800580a:	f006 fcb7 	bl	800c17c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
 800580e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
 8005810:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
 8005812:	f242 001b 	movw	r0, #8219	; 0x201b
 8005816:	e7eb      	b.n	80057f0 <le_ltk_request+0x88>
 8005818:	08017de5 	.word	0x08017de5
 800581c:	08015b54 	.word	0x08015b54
 8005820:	08018176 	.word	0x08018176

08005824 <le_conn_param_req>:
{
 8005824:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
 8005826:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 8005828:	78d9      	ldrb	r1, [r3, #3]
 800582a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
 800582c:	881f      	ldrh	r7, [r3, #0]
{
 800582e:	b089      	sub	sp, #36	; 0x24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 8005830:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005834:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
 8005838:	7959      	ldrb	r1, [r3, #5]
 800583a:	791a      	ldrb	r2, [r3, #4]
 800583c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005840:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
 8005844:	799a      	ldrb	r2, [r3, #6]
 8005846:	79d9      	ldrb	r1, [r3, #7]
 8005848:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800584c:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
 8005850:	7a1a      	ldrb	r2, [r3, #8]
 8005852:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
 8005854:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
 8005856:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
 800585a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
 800585c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
 8005860:	f001 fdc8 	bl	80073f4 <bt_conn_lookup_handle>
	if (!conn) {
 8005864:	4606      	mov	r6, r0
 8005866:	b980      	cbnz	r0, 800588a <le_conn_param_req+0x66>
		BT_ERR("Unable to lookup conn for handle %u", handle);
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <le_conn_param_req+0xc8>)
 800586a:	4821      	ldr	r0, [pc, #132]	; (80058f0 <le_conn_param_req+0xcc>)
 800586c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005870:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005874:	2303      	movs	r3, #3
 8005876:	aa05      	add	r2, sp, #20
 8005878:	9305      	str	r3, [sp, #20]
 800587a:	f00d fbed 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
 800587e:	2102      	movs	r1, #2
 8005880:	4620      	mov	r0, r4
 8005882:	f00d fcb8 	bl	80131f6 <le_conn_param_neg_reply>
}
 8005886:	b009      	add	sp, #36	; 0x24
 8005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
 800588a:	4669      	mov	r1, sp
 800588c:	f001 ff76 	bl	800777c <le_param_req>
 8005890:	b938      	cbnz	r0, 80058a2 <le_conn_param_req+0x7e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
 8005892:	211e      	movs	r1, #30
 8005894:	4620      	mov	r0, r4
 8005896:	f00d fcae 	bl	80131f6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
 800589a:	4630      	mov	r0, r6
 800589c:	f001 fd72 	bl	8007384 <bt_conn_unref>
 80058a0:	e7f1      	b.n	8005886 <le_conn_param_req+0x62>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
 80058a2:	210e      	movs	r1, #14
 80058a4:	f242 0020 	movw	r0, #8224	; 0x2020
 80058a8:	f7ff fcba 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 80058ac:	4605      	mov	r5, r0
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d0f3      	beq.n	800589a <le_conn_param_req+0x76>
 80058b2:	210e      	movs	r1, #14
 80058b4:	3008      	adds	r0, #8
 80058b6:	f006 fc61 	bl	800c17c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
 80058ba:	220e      	movs	r2, #14
 80058bc:	4604      	mov	r4, r0
 80058be:	2100      	movs	r1, #0
 80058c0:	f00d faef 	bl	8012ea2 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
 80058c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80058c8:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
 80058ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058ce:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
 80058d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80058d4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 80058d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
 80058da:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 80058dc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
 80058de:	4629      	mov	r1, r5
 80058e0:	f242 0020 	movw	r0, #8224	; 0x2020
 80058e4:	f7ff ff0e 	bl	8005704 <bt_hci_cmd_send>
 80058e8:	e7d7      	b.n	800589a <le_conn_param_req+0x76>
 80058ea:	bf00      	nop
 80058ec:	08017de5 	.word	0x08017de5
 80058f0:	08015b54 	.word	0x08015b54

080058f4 <hci_tx_thread>:
{
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
 80058f8:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8005a50 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
 80058fc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8005a80 <hci_tx_thread+0x18c>
{
 8005900:	b087      	sub	sp, #28
			ev_count += bt_conn_prepare_events(&events[1]);
 8005902:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
 8005906:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
 800590a:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
 800590c:	f36f 3352 	bfc	r3, #13, #6
 8005910:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
 8005914:	f001 fcf8 	bl	8007308 <bt_conn_prepare_events>
 8005918:	1c46      	adds	r6, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
 800591a:	484d      	ldr	r0, [pc, #308]	; (8005a50 <hci_tx_thread+0x15c>)
 800591c:	f04f 32ff 	mov.w	r2, #4294967295
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	4631      	mov	r1, r6
 8005926:	f00c f875 	bl	8011a14 <z_impl_k_poll>
		BT_ASSERT(err == 0);
 800592a:	b160      	cbz	r0, 8005946 <hci_tx_thread+0x52>
 800592c:	4949      	ldr	r1, [pc, #292]	; (8005a54 <hci_tx_thread+0x160>)
 800592e:	484a      	ldr	r0, [pc, #296]	; (8005a58 <hci_tx_thread+0x164>)
 8005930:	f640 138d 	movw	r3, #2445	; 0x98d
 8005934:	464a      	mov	r2, r9
 8005936:	f00c fcb7 	bl	80122a8 <assert_print>
 800593a:	4040      	eors	r0, r0
 800593c:	f380 8811 	msr	BASEPRI, r0
 8005940:	f04f 0003 	mov.w	r0, #3
 8005944:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
 8005946:	4d45      	ldr	r5, [pc, #276]	; (8005a5c <hci_tx_thread+0x168>)
{
 8005948:	4f41      	ldr	r7, [pc, #260]	; (8005a50 <hci_tx_thread+0x15c>)
 800594a:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
 800594e:	b916      	cbnz	r6, 8005956 <hci_tx_thread+0x62>
	z_impl_k_yield();
 8005950:	f00a ff40 	bl	80107d4 <z_impl_k_yield>
	while (1) {
 8005954:	e7d7      	b.n	8005906 <hci_tx_thread+0x12>
		switch (ev->state) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f3c3 3345 	ubfx	r3, r3, #13, #6
 800595c:	2b01      	cmp	r3, #1
 800595e:	d960      	bls.n	8005a22 <hci_tx_thread+0x12e>
 8005960:	2b04      	cmp	r3, #4
 8005962:	d168      	bne.n	8005a36 <hci_tx_thread+0x142>
			if (ev->tag == BT_EVENT_CMD_TX) {
 8005964:	7b3b      	ldrb	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d15e      	bne.n	8005a28 <hci_tx_thread+0x134>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 800596a:	483d      	ldr	r0, [pc, #244]	; (8005a60 <hci_tx_thread+0x16c>)
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	f006 fa42 	bl	800bdf8 <net_buf_get>
	BT_ASSERT(buf);
 8005974:	4604      	mov	r4, r0
 8005976:	b960      	cbnz	r0, 8005992 <hci_tx_thread+0x9e>
 8005978:	493a      	ldr	r1, [pc, #232]	; (8005a64 <hci_tx_thread+0x170>)
 800597a:	4837      	ldr	r0, [pc, #220]	; (8005a58 <hci_tx_thread+0x164>)
 800597c:	f640 1324 	movw	r3, #2340	; 0x924
 8005980:	464a      	mov	r2, r9
 8005982:	f00c fc91 	bl	80122a8 <assert_print>
 8005986:	4040      	eors	r0, r0
 8005988:	f380 8811 	msr	BASEPRI, r0
 800598c:	f04f 0003 	mov.w	r0, #3
 8005990:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	4658      	mov	r0, fp
 800599c:	f009 fa9a 	bl	800eed4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
 80059a0:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 80059a4:	b183      	cbz	r3, 80059c8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <hci_tx_thread+0x174>)
 80059a8:	4830      	ldr	r0, [pc, #192]	; (8005a6c <hci_tx_thread+0x178>)
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	aa03      	add	r2, sp, #12
 80059ae:	2302      	movs	r3, #2
 80059b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	f00d fb4f 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
 80059ba:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
 80059be:	f006 faad 	bl	800bf1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
 80059c8:	4620      	mov	r0, r4
 80059ca:	f006 faed 	bl	800bfa8 <net_buf_ref>
 80059ce:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
	err = bt_send(buf);
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7ff fe8e 	bl	80056f4 <bt_send>
	if (err) {
 80059d8:	b318      	cbz	r0, 8005a22 <hci_tx_thread+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <hci_tx_thread+0x17c>)
 80059dc:	aa03      	add	r2, sp, #12
 80059de:	e9cd 3004 	strd	r3, r0, [sp, #16]
 80059e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80059e6:	2303      	movs	r3, #3
 80059e8:	4820      	ldr	r0, [pc, #128]	; (8005a6c <hci_tx_thread+0x178>)
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	f00d fb34 	bl	8013058 <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
 80059f0:	4820      	ldr	r0, [pc, #128]	; (8005a74 <hci_tx_thread+0x180>)
 80059f2:	f009 fa2b 	bl	800ee4c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f006 f896 	bl	800bb28 <net_buf_id>
 80059fc:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <hci_tx_thread+0x184>)
 80059fe:	220c      	movs	r2, #12
 8005a00:	fb02 3000 	mla	r0, r2, r0, r3
 8005a04:	211f      	movs	r1, #31
 8005a06:	8840      	ldrh	r0, [r0, #2]
 8005a08:	4622      	mov	r2, r4
 8005a0a:	f7ff fa0d 	bl	8004e28 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
 8005a0e:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
 8005a12:	f006 fa83 	bl	800bf1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8005a16:	2300      	movs	r3, #0
		net_buf_unref(buf);
 8005a18:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
 8005a1a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
 8005a1e:	f006 fa7d 	bl	800bf1c <net_buf_unref>
	for (; count; ev++, count--) {
 8005a22:	3714      	adds	r7, #20
 8005a24:	3e01      	subs	r6, #1
 8005a26:	e792      	b.n	800594e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d1fa      	bne.n	8005a22 <hci_tx_thread+0x12e>
					conn = CONTAINER_OF(ev->fifo,
 8005a2c:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
 8005a2e:	3838      	subs	r0, #56	; 0x38
 8005a30:	f002 f8fe 	bl	8007c30 <bt_conn_process_tx>
 8005a34:	e7f5      	b.n	8005a22 <hci_tx_thread+0x12e>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
 8005a36:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <hci_tx_thread+0x188>)
 8005a38:	480c      	ldr	r0, [pc, #48]	; (8005a6c <hci_tx_thread+0x178>)
		switch (ev->state) {
 8005a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
 8005a3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8005a42:	2303      	movs	r3, #3
 8005a44:	aa03      	add	r2, sp, #12
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	f00d fb06 	bl	8013058 <z_log_msg2_static_create.constprop.0>
 8005a4c:	e7e9      	b.n	8005a22 <hci_tx_thread+0x12e>
 8005a4e:	bf00      	nop
 8005a50:	20000284 	.word	0x20000284
 8005a54:	080170f2 	.word	0x080170f2
 8005a58:	08016836 	.word	0x08016836
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20000158 	.word	0x20000158
 8005a64:	08017d7b 	.word	0x08017d7b
 8005a68:	0801818d 	.word	0x0801818d
 8005a6c:	08015b54 	.word	0x08015b54
 8005a70:	08018154 	.word	0x08018154
 8005a74:	20000120 	.word	0x20000120
 8005a78:	200015f0 	.word	0x200015f0
 8005a7c:	080181a8 	.word	0x080181a8
 8005a80:	08017e4d 	.word	0x08017e4d

08005a84 <hci_event_prio>:
{
 8005a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
 8005a8a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f00f f9ef 	bl	8014e72 <net_buf_simple_headroom>
	state->len = buf->len;
 8005a94:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
 8005a98:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	d80c      	bhi.n	8005aba <hci_event_prio+0x36>
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <hci_event_prio+0x90>)
 8005aa2:	491d      	ldr	r1, [pc, #116]	; (8005b18 <hci_event_prio+0x94>)
 8005aa4:	481d      	ldr	r0, [pc, #116]	; (8005b1c <hci_event_prio+0x98>)
 8005aa6:	f640 5329 	movw	r3, #3369	; 0xd29
 8005aaa:	f00c fbfd 	bl	80122a8 <assert_print>
 8005aae:	4040      	eors	r0, r0
 8005ab0:	f380 8811 	msr	BASEPRI, r0
 8005ab4:	f04f 0003 	mov.w	r0, #3
 8005ab8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
 8005aba:	2102      	movs	r1, #2
 8005abc:	4630      	mov	r0, r6
 8005abe:	f006 fb3b 	bl	800c138 <net_buf_simple_pull_mem>
 8005ac2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 8005ac4:	7800      	ldrb	r0, [r0, #0]
 8005ac6:	f00d fa7e 	bl	8012fc6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 8005aca:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
 8005acc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
 8005ace:	d40c      	bmi.n	8005aea <hci_event_prio+0x66>
 8005ad0:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <hci_event_prio+0x90>)
 8005ad2:	4913      	ldr	r1, [pc, #76]	; (8005b20 <hci_event_prio+0x9c>)
 8005ad4:	4811      	ldr	r0, [pc, #68]	; (8005b1c <hci_event_prio+0x98>)
 8005ad6:	f640 532d 	movw	r3, #3373	; 0xd2d
 8005ada:	f00c fbe5 	bl	80122a8 <assert_print>
 8005ade:	4040      	eors	r0, r0
 8005ae0:	f380 8811 	msr	BASEPRI, r0
 8005ae4:	f04f 0003 	mov.w	r0, #3
 8005ae8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
 8005aea:	2305      	movs	r3, #5
 8005aec:	4a0d      	ldr	r2, [pc, #52]	; (8005b24 <hci_event_prio+0xa0>)
 8005aee:	7838      	ldrb	r0, [r7, #0]
 8005af0:	4621      	mov	r1, r4
 8005af2:	f7ff f893 	bl	8004c1c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 8005af6:	07b3      	lsls	r3, r6, #30
 8005af8:	d507      	bpl.n	8005b0a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
 8005afa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
 8005afc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
 8005b00:	fa10 f585 	uxtah	r5, r0, r5
 8005b04:	60a5      	str	r5, [r4, #8]
}
 8005b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
 8005b0a:	4620      	mov	r0, r4
}
 8005b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
 8005b10:	f006 ba04 	b.w	800bf1c <net_buf_unref>
 8005b14:	08017e4d 	.word	0x08017e4d
 8005b18:	08017e81 	.word	0x08017e81
 8005b1c:	08016836 	.word	0x08016836
 8005b20:	080181c9 	.word	0x080181c9
 8005b24:	08016200 	.word	0x08016200

08005b28 <bt_recv>:
{
 8005b28:	b530      	push	{r4, r5, lr}
	if (bt_recv_thread_id == NULL) {
 8005b2a:	4c19      	ldr	r4, [pc, #100]	; (8005b90 <bt_recv+0x68>)
 8005b2c:	6823      	ldr	r3, [r4, #0]
{
 8005b2e:	b087      	sub	sp, #28
 8005b30:	4605      	mov	r5, r0
	if (bt_recv_thread_id == NULL) {
 8005b32:	b913      	cbnz	r3, 8005b3a <bt_recv+0x12>
	return z_impl_z_current_get();
 8005b34:	f00a ffd6 	bl	8010ae4 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
 8005b38:	6020      	str	r0, [r4, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
 8005b3a:	7d2b      	ldrb	r3, [r5, #20]
	switch (bt_buf_get_type(buf)) {
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d007      	beq.n	8005b50 <bt_recv+0x28>
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d114      	bne.n	8005b6e <bt_recv+0x46>
			net_buf_put(&bt_dev.rx_queue, buf);
 8005b44:	4813      	ldr	r0, [pc, #76]	; (8005b94 <bt_recv+0x6c>)
 8005b46:	4629      	mov	r1, r5
 8005b48:	f006 f9b4 	bl	800beb4 <net_buf_put>
		return 0;
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e00c      	b.n	8005b6a <bt_recv+0x42>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
 8005b50:	68ab      	ldr	r3, [r5, #8]
 8005b52:	7818      	ldrb	r0, [r3, #0]
 8005b54:	f00d fa37 	bl	8012fc6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
 8005b58:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
 8005b5a:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
 8005b5c:	d502      	bpl.n	8005b64 <bt_recv+0x3c>
			hci_event_prio(buf);
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff ff90 	bl	8005a84 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
 8005b64:	f014 0002 	ands.w	r0, r4, #2
 8005b68:	d1ec      	bne.n	8005b44 <bt_recv+0x1c>
}
 8005b6a:	b007      	add	sp, #28
 8005b6c:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	; (8005b98 <bt_recv+0x70>)
 8005b70:	480a      	ldr	r0, [pc, #40]	; (8005b9c <bt_recv+0x74>)
	switch (bt_buf_get_type(buf)) {
 8005b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
 8005b76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	aa03      	add	r2, sp, #12
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	f00d fa6a 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
 8005b84:	4628      	mov	r0, r5
 8005b86:	f006 f9c9 	bl	800bf1c <net_buf_unref>
		return -EINVAL;
 8005b8a:	f06f 0015 	mvn.w	r0, #21
 8005b8e:	e7ec      	b.n	8005b6a <bt_recv+0x42>
 8005b90:	200015ec 	.word	0x200015ec
 8005b94:	2000013c 	.word	0x2000013c
 8005b98:	080181e2 	.word	0x080181e2
 8005b9c:	08015b54 	.word	0x08015b54

08005ba0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <bt_hci_driver_register+0x24>)
{
 8005ba2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
 8005ba4:	f8d2 0174 	ldr.w	r0, [r2, #372]	; 0x174
 8005ba8:	b930      	cbnz	r0, 8005bb8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	b139      	cbz	r1, 8005bbe <bt_hci_driver_register+0x1e>
 8005bae:	6959      	ldr	r1, [r3, #20]
 8005bb0:	b129      	cbz	r1, 8005bbe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
 8005bb2:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
	return 0;
 8005bb6:	4770      	bx	lr
		return -EALREADY;
 8005bb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8005bbc:	4770      	bx	lr
		return -EINVAL;
 8005bbe:	f06f 0015 	mvn.w	r0, #21
}
 8005bc2:	4770      	bx	lr
 8005bc4:	20000000 	.word	0x20000000

08005bc8 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <bt_finalize_init+0x8>)
 8005bca:	2104      	movs	r1, #4
 8005bcc:	f00d ba35 	b.w	801303a <atomic_or>
 8005bd0:	200000c8 	.word	0x200000c8

08005bd4 <init_work>:
{
 8005bd4:	b510      	push	{r4, lr}
	err = hci_init();
 8005bd6:	f7fa fe17 	bl	8000808 <hci_init>
	if (err) {
 8005bda:	4604      	mov	r4, r0
 8005bdc:	b928      	cbnz	r0, 8005bea <init_work+0x16>
		err = bt_conn_init();
 8005bde:	f002 f8ab 	bl	8007d38 <bt_conn_init>
		if (err) {
 8005be2:	4604      	mov	r4, r0
 8005be4:	b908      	cbnz	r0, 8005bea <init_work+0x16>
	bt_finalize_init();
 8005be6:	f7ff ffef 	bl	8005bc8 <bt_finalize_init>
	if (ready_cb) {
 8005bea:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <init_work+0x28>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	b11b      	cbz	r3, 8005bf8 <init_work+0x24>
		ready_cb(err);
 8005bf0:	4620      	mov	r0, r4
}
 8005bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
 8005bf6:	4718      	bx	r3
}
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20001608 	.word	0x20001608

08005c00 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
 8005c00:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
 8005c04:	4d3c      	ldr	r5, [pc, #240]	; (8005cf8 <bt_enable+0xf8>)
 8005c06:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
{
 8005c0a:	b08e      	sub	sp, #56	; 0x38
 8005c0c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
 8005c0e:	b97b      	cbnz	r3, 8005c30 <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
 8005c10:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <bt_enable+0xfc>)
 8005c12:	930c      	str	r3, [sp, #48]	; 0x30
 8005c14:	483a      	ldr	r0, [pc, #232]	; (8005d00 <bt_enable+0x100>)
 8005c16:	2302      	movs	r3, #2
 8005c18:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
 8005c1e:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
 8005c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c24:	f00d fa18 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
 8005c28:	4620      	mov	r0, r4
 8005c2a:	b00e      	add	sp, #56	; 0x38
 8005c2c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8005c30:	f06f 0102 	mvn.w	r1, #2
 8005c34:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8005c38:	f00d f9f0 	bl	801301c <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8005c42:	f00d f9fa 	bl	801303a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 8005c46:	f010 0401 	ands.w	r4, r0, #1
 8005c4a:	d152      	bne.n	8005cf2 <bt_enable+0xf2>
	ready_cb = cb;
 8005c4c:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <bt_enable+0x104>)
 8005c4e:	f04f 0800 	mov.w	r8, #0
 8005c52:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
 8005c54:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005c58:	f06f 0308 	mvn.w	r3, #8
 8005c5c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005c60:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c64:	e9cd 4400 	strd	r4, r4, [sp]
 8005c68:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <bt_enable+0x108>)
 8005c6a:	4928      	ldr	r1, [pc, #160]	; (8005d0c <bt_enable+0x10c>)
 8005c6c:	9404      	str	r4, [sp, #16]
 8005c6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005c72:	4827      	ldr	r0, [pc, #156]	; (8005d10 <bt_enable+0x110>)
 8005c74:	f008 fe72 	bl	800e95c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8005c78:	4926      	ldr	r1, [pc, #152]	; (8005d14 <bt_enable+0x114>)
 8005c7a:	4825      	ldr	r0, [pc, #148]	; (8005d10 <bt_enable+0x110>)
 8005c7c:	f00f fb78 	bl	8015370 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005c80:	f06f 0307 	mvn.w	r3, #7
 8005c84:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005c88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c8c:	e9cd 4400 	strd	r4, r4, [sp]
 8005c90:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <bt_enable+0x118>)
 8005c92:	4922      	ldr	r1, [pc, #136]	; (8005d1c <bt_enable+0x11c>)
 8005c94:	9404      	str	r4, [sp, #16]
 8005c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c9a:	4821      	ldr	r0, [pc, #132]	; (8005d20 <bt_enable+0x120>)
 8005c9c:	f008 fe5e 	bl	800e95c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8005ca0:	4920      	ldr	r1, [pc, #128]	; (8005d24 <bt_enable+0x124>)
 8005ca2:	481f      	ldr	r0, [pc, #124]	; (8005d20 <bt_enable+0x120>)
 8005ca4:	f00f fb64 	bl	8015370 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
 8005ca8:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4798      	blx	r3
	if (err) {
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	b158      	cbz	r0, 8005ccc <bt_enable+0xcc>
		BT_ERR("HCI driver open failed (%d)", err);
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <bt_enable+0x128>)
 8005cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cb8:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
 8005cbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	480f      	ldr	r0, [pc, #60]	; (8005d00 <bt_enable+0x100>)
 8005cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc6:	f00d f9c7 	bl	8013058 <z_log_msg2_static_create.constprop.0>
		return err;
 8005cca:	e7ad      	b.n	8005c28 <bt_enable+0x28>
	if (!cb) {
 8005ccc:	b966      	cbnz	r6, 8005ce8 <bt_enable+0xe8>
	err = hci_init();
 8005cce:	f7fa fd9b 	bl	8000808 <hci_init>
	if (err) {
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d1a7      	bne.n	8005c28 <bt_enable+0x28>
		err = bt_conn_init();
 8005cd8:	f002 f82e 	bl	8007d38 <bt_conn_init>
		if (err) {
 8005cdc:	4604      	mov	r4, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1a2      	bne.n	8005c28 <bt_enable+0x28>
	bt_finalize_init();
 8005ce2:	f7ff ff71 	bl	8005bc8 <bt_finalize_init>
	return 0;
 8005ce6:	e79f      	b.n	8005c28 <bt_enable+0x28>
	k_work_submit(&bt_dev.init);
 8005ce8:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 8005cec:	f009 fc0e 	bl	800f50c <k_work_submit>
	return 0;
 8005cf0:	e79a      	b.n	8005c28 <bt_enable+0x28>
		return -EALREADY;
 8005cf2:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8005cf6:	e797      	b.n	8005c28 <bt_enable+0x28>
 8005cf8:	20000000 	.word	0x20000000
 8005cfc:	080181f6 	.word	0x080181f6
 8005d00:	08015b54 	.word	0x08015b54
 8005d04:	20001608 	.word	0x20001608
 8005d08:	080058f5 	.word	0x080058f5
 8005d0c:	200020e0 	.word	0x200020e0
 8005d10:	20000cb0 	.word	0x20000cb0
 8005d14:	0801820f 	.word	0x0801820f
 8005d18:	08004c75 	.word	0x08004c75
 8005d1c:	20001cc0 	.word	0x20001cc0
 8005d20:	20000c30 	.word	0x20000c30
 8005d24:	08018215 	.word	0x08018215
 8005d28:	0801821b 	.word	0x0801821b

08005d2c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
 8005d2c:	4800      	ldr	r0, [pc, #0]	; (8005d30 <bt_get_name+0x4>)
 8005d2e:	4770      	bx	lr
 8005d30:	08018237 	.word	0x08018237

08005d34 <bt_id_del.part.0>:
	bt_addr_le_copy(&cp->peer_id_addr, addr);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
}

void bt_id_del(struct bt_keys *keys)
 8005d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
	}
#endif /* CONFIG_BT_OBSERVER */

	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
 8005d38:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	4604      	mov	r4, r0
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
 8005d3e:	482f      	ldr	r0, [pc, #188]	; (8005dfc <bt_id_del.part.0+0xc8>)
 8005d40:	4d2f      	ldr	r5, [pc, #188]	; (8005e00 <bt_id_del.part.0+0xcc>)
 8005d42:	f000 fc29 	bl	8006598 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
	}
#endif /* CONFIG_BT_OBSERVER */

	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 8005d46:	2000      	movs	r0, #0
 8005d48:	f00d fa7f 	bl	801324a <addr_res_enable>
	if (err) {
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	b158      	cbz	r0, 8005d68 <bt_id_del.part.0+0x34>
		BT_ERR("Disabling address resolution failed (err %d)", err);
 8005d50:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <bt_id_del.part.0+0xd0>)
 8005d52:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8005d56:	2303      	movs	r3, #3
 8005d58:	9303      	str	r3, [sp, #12]
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		goto done;
	}

	err = hci_id_del(&keys->addr);
	if (err) {
		BT_ERR("Failed to remove IRK from controller");
 8005d60:	4829      	ldr	r0, [pc, #164]	; (8005e08 <bt_id_del.part.0+0xd4>)
 8005d62:	f00d fabb 	bl	80132dc <z_log_msg2_static_create.constprop.0>
		goto done;
 8005d66:	e011      	b.n	8005d8c <bt_id_del.part.0+0x58>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 8005d68:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
 8005d6c:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d218      	bcs.n	8005da6 <bt_id_del.part.0+0x72>
		bt_dev.le.rl_entries--;
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
 8005d7a:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
 8005d7c:	4923      	ldr	r1, [pc, #140]	; (8005e0c <bt_id_del.part.0+0xd8>)
		keys->state &= ~BT_KEYS_ID_ADDED;
 8005d7e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
 8005d82:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
 8005d84:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
 8005d86:	2002      	movs	r0, #2
 8005d88:	f005 fe58 	bl	800ba3c <bt_keys_foreach>
	bt_dev.le.rl_entries--;
	keys->state &= ~BT_KEYS_ID_ADDED;

done:
	/* Only re-enable if there are entries to do resolving with */
	if (bt_dev.le.rl_entries) {
 8005d8c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
 8005d90:	b113      	cbz	r3, 8005d98 <bt_id_del.part.0+0x64>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 8005d92:	2001      	movs	r0, #1
 8005d94:	f00d fa59 	bl	801324a <addr_res_enable>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	}
#endif /* CONFIG_BT_OBSERVER */

	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
 8005d98:	481d      	ldr	r0, [pc, #116]	; (8005e10 <bt_id_del.part.0+0xdc>)
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f000 fbfc 	bl	8006598 <bt_le_ext_adv_foreach>
	}
}
 8005da0:	b006      	add	sp, #24
 8005da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
 8005da6:	2107      	movs	r1, #7
 8005da8:	f242 0028 	movw	r0, #8232	; 0x2028
 8005dac:	f7ff fa38 	bl	8005220 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
 8005db0:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
 8005db4:	4607      	mov	r7, r0
 8005db6:	b938      	cbnz	r0, 8005dc8 <bt_id_del.part.0+0x94>
		BT_ERR("Failed to remove IRK from controller");
 8005db8:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <bt_id_del.part.0+0xe0>)
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	aa03      	add	r2, sp, #12
 8005dc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005dc6:	e7cb      	b.n	8005d60 <bt_id_del.part.0+0x2c>
	return net_buf_simple_add(&buf->b, len);
 8005dc8:	2107      	movs	r1, #7
 8005dca:	3008      	adds	r0, #8
 8005dcc:	f006 f9d6 	bl	800c17c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	f00d fa37 	bl	8013244 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	4639      	mov	r1, r7
 8005dda:	f242 0028 	movw	r0, #8232	; 0x2028
 8005dde:	f7ff fa67 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d1e8      	bne.n	8005db8 <bt_id_del.part.0+0x84>
	bt_dev.le.rl_entries--;
 8005de6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
 8005dea:	3b01      	subs	r3, #1
 8005dec:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
 8005df0:	7a23      	ldrb	r3, [r4, #8]
 8005df2:	f023 0304 	bic.w	r3, r3, #4
 8005df6:	7223      	strb	r3, [r4, #8]
 8005df8:	e7c8      	b.n	8005d8c <bt_id_del.part.0+0x58>
 8005dfa:	bf00      	nop
 8005dfc:	0801330d 	.word	0x0801330d
 8005e00:	20000000 	.word	0x20000000
 8005e04:	0801827c 	.word	0x0801827c
 8005e08:	08015b5c 	.word	0x08015b5c
 8005e0c:	080132cb 	.word	0x080132cb
 8005e10:	080132e3 	.word	0x080132e3
 8005e14:	080182a9 	.word	0x080182a9

08005e18 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_dev.le.rl_entries) {
 8005e1a:	4c41      	ldr	r4, [pc, #260]	; (8005f20 <bt_id_add.part.0+0x108>)
void bt_id_add(struct bt_keys *keys)
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	4605      	mov	r5, r0
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
 8005e20:	2100      	movs	r1, #0
 8005e22:	4840      	ldr	r0, [pc, #256]	; (8005f24 <bt_id_add.part.0+0x10c>)
 8005e24:	f000 fbb8 	bl	8006598 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
 8005e28:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
 8005e2c:	b173      	cbz	r3, 8005e4c <bt_id_add.part.0+0x34>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f00d fa0b 	bl	801324a <addr_res_enable>
		if (err) {
 8005e34:	b150      	cbz	r0, 8005e4c <bt_id_add.part.0+0x34>
			BT_WARN("Failed to disable address resolution");
 8005e36:	4b3c      	ldr	r3, [pc, #240]	; (8005f28 <bt_id_add.part.0+0x110>)
		BT_WARN("Set privacy mode command is not supported");
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	aa03      	add	r2, sp, #12
 8005e40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8005e44:	4839      	ldr	r0, [pc, #228]	; (8005f2c <bt_id_add.part.0+0x114>)
 8005e46:	f00d fa49 	bl	80132dc <z_log_msg2_static_create.constprop.0>
	if (err) {
 8005e4a:	e026      	b.n	8005e9a <bt_id_add.part.0+0x82>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
 8005e4c:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
 8005e50:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d129      	bne.n	8005eac <bt_id_add.part.0+0x94>
		BT_WARN("Resolving list size exceeded. Switching to host.");
 8005e58:	4b35      	ldr	r3, [pc, #212]	; (8005f30 <bt_id_add.part.0+0x118>)
 8005e5a:	4834      	ldr	r0, [pc, #208]	; (8005f2c <bt_id_add.part.0+0x114>)
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	aa03      	add	r2, sp, #12
 8005e60:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8005e64:	2602      	movs	r6, #2
 8005e66:	9603      	str	r6, [sp, #12]
 8005e68:	f00d fa38 	bl	80132dc <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4611      	mov	r1, r2
 8005e70:	f242 0029 	movw	r0, #8233	; 0x2029
 8005e74:	f7ff fa1c 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (err) {
 8005e78:	b130      	cbz	r0, 8005e88 <bt_id_add.part.0+0x70>
			BT_ERR("Failed to clear resolution list");
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <bt_id_add.part.0+0x11c>)
 8005e7c:	e9cd 6303 	strd	r6, r3, [sp, #12]
		BT_ERR("Failed to set privacy mode");
 8005e80:	aa03      	add	r2, sp, #12
 8005e82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005e86:	e7dd      	b.n	8005e44 <bt_id_add.part.0+0x2c>
		bt_dev.le.rl_entries++;
 8005e88:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
 8005e92:	7a2b      	ldrb	r3, [r5, #8]
 8005e94:	f043 0304 	orr.w	r3, r3, #4
 8005e98:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f00d f9d5 	bl	801324a <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
 8005ea0:	4825      	ldr	r0, [pc, #148]	; (8005f38 <bt_id_add.part.0+0x120>)
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f000 fb78 	bl	8006598 <bt_le_ext_adv_foreach>
}
 8005ea8:	b007      	add	sp, #28
 8005eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
 8005eac:	1c6f      	adds	r7, r5, #1
 8005eae:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f00d f9e1 	bl	801327a <hci_id_add.isra.0>
	if (err) {
 8005eb8:	4606      	mov	r6, r0
 8005eba:	b120      	cbz	r0, 8005ec6 <bt_id_add.part.0+0xae>
		BT_ERR("Failed to add IRK to controller");
 8005ebc:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <bt_id_add.part.0+0x124>)
		BT_ERR("Failed to set privacy mode");
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	9303      	str	r3, [sp, #12]
 8005ec4:	e7dc      	b.n	8005e80 <bt_id_add.part.0+0x68>
	bt_dev.le.rl_entries++;
 8005ec6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
 8005ed0:	7a2b      	ldrb	r3, [r5, #8]
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
 8005ed8:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8005edc:	075b      	lsls	r3, r3, #29
 8005ede:	d401      	bmi.n	8005ee4 <bt_id_add.part.0+0xcc>
		BT_WARN("Set privacy mode command is not supported");
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <bt_id_add.part.0+0x128>)
 8005ee2:	e7a9      	b.n	8005e38 <bt_id_add.part.0+0x20>
	bt_addr_le_copy(&cp.id_addr, addr);
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	4668      	mov	r0, sp
 8005ee8:	f00d f9ac 	bl	8013244 <bt_addr_le_copy>
	cp.mode = mode;
 8005eec:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
 8005eee:	2108      	movs	r1, #8
 8005ef0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
 8005ef4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
 8005ef8:	f7ff f992 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8005efc:	4604      	mov	r4, r0
 8005efe:	b908      	cbnz	r0, 8005f04 <bt_id_add.part.0+0xec>
		BT_ERR("Failed to set privacy mode");
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <bt_id_add.part.0+0x12c>)
 8005f02:	e7dc      	b.n	8005ebe <bt_id_add.part.0+0xa6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
 8005f04:	2208      	movs	r2, #8
 8005f06:	4669      	mov	r1, sp
 8005f08:	4410      	add	r0, r2
 8005f0a:	f00e ffbe 	bl	8014e8a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
 8005f0e:	4632      	mov	r2, r6
 8005f10:	4621      	mov	r1, r4
 8005f12:	f242 004e 	movw	r0, #8270	; 0x204e
 8005f16:	f7ff f9cb 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d0bd      	beq.n	8005e9a <bt_id_add.part.0+0x82>
 8005f1e:	e7ef      	b.n	8005f00 <bt_id_add.part.0+0xe8>
 8005f20:	20000000 	.word	0x20000000
 8005f24:	0801330d 	.word	0x0801330d
 8005f28:	080182ce 	.word	0x080182ce
 8005f2c:	08015b5c 	.word	0x08015b5c
 8005f30:	080182f3 	.word	0x080182f3
 8005f34:	08018324 	.word	0x08018324
 8005f38:	080132e3 	.word	0x080132e3
 8005f3c:	08018344 	.word	0x08018344
 8005f40:	08018364 	.word	0x08018364
 8005f44:	0801838e 	.word	0x0801838e

08005f48 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
 8005f4a:	4f0b      	ldr	r7, [pc, #44]	; (8005f78 <id_find+0x30>)
{
 8005f4c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
 8005f4e:	2500      	movs	r5, #0
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	b2ec      	uxtb	r4, r5
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d802      	bhi.n	8005f5e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
 8005f58:	f06f 0401 	mvn.w	r4, #1
 8005f5c:	e009      	b.n	8005f72 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
 8005f5e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
 8005f62:	2207      	movs	r2, #7
 8005f64:	4439      	add	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	f00c ff80 	bl	8012e6c <memcmp>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d1ee      	bne.n	8005f50 <id_find+0x8>
}
 8005f72:	4620      	mov	r0, r4
 8005f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000000 	.word	0x20000000

08005f7c <set_random_address>:
{
 8005f7c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
 8005f7e:	4914      	ldr	r1, [pc, #80]	; (8005fd0 <set_random_address+0x54>)
 8005f80:	2206      	movs	r2, #6
 8005f82:	4605      	mov	r5, r0
 8005f84:	f00c ff72 	bl	8012e6c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
 8005f88:	4604      	mov	r4, r0
 8005f8a:	b1e0      	cbz	r0, 8005fc6 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
 8005f8c:	2106      	movs	r1, #6
 8005f8e:	f242 0005 	movw	r0, #8197	; 0x2005
 8005f92:	f7ff f945 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8005f96:	4604      	mov	r4, r0
 8005f98:	b1b8      	cbz	r0, 8005fca <set_random_address+0x4e>
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	3008      	adds	r0, #8
 8005fa0:	f00e ff73 	bl	8014e8a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f242 0005 	movw	r0, #8197	; 0x2005
 8005fac:	f7ff f980 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	b940      	cbnz	r0, 8005fc6 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
 8005fb4:	2206      	movs	r2, #6
 8005fb6:	4806      	ldr	r0, [pc, #24]	; (8005fd0 <set_random_address+0x54>)
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f00c ff67 	bl	8012e8c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <set_random_address+0x58>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 8005fca:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8005fce:	e7fa      	b.n	8005fc6 <set_random_address+0x4a>
 8005fd0:	20000061 	.word	0x20000061
 8005fd4:	20000000 	.word	0x20000000

08005fd8 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
 8005fd8:	b530      	push	{r4, r5, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 8005fde:	460d      	mov	r5, r1
 8005fe0:	b199      	cbz	r1, 800600a <id_create.isra.0+0x32>
 8005fe2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
 8005fe4:	2207      	movs	r2, #7
 8005fe6:	a902      	add	r1, sp, #8
 8005fe8:	4628      	mov	r0, r5
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	f8cd 300b 	str.w	r3, [sp, #11]
 8005ff0:	f00c ff3c 	bl	8012e6c <memcmp>
 8005ff4:	b148      	cbz	r0, 800600a <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
 8005ff6:	4810      	ldr	r0, [pc, #64]	; (8006038 <id_create.isra.0+0x60>)
 8005ff8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
 8006000:	f00d f920 	bl	8013244 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
 8006004:	2000      	movs	r0, #0
}
 8006006:	b005      	add	sp, #20
 8006008:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
 800600a:	4668      	mov	r0, sp
 800600c:	f00c ffcd 	bl	8012faa <bt_addr_le_create_static>
			if (err) {
 8006010:	2800      	cmp	r0, #0
 8006012:	d1f8      	bne.n	8006006 <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
 8006014:	4668      	mov	r0, sp
 8006016:	f7ff ff97 	bl	8005f48 <id_find>
 800601a:	2800      	cmp	r0, #0
 800601c:	daf5      	bge.n	800600a <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
 800601e:	4806      	ldr	r0, [pc, #24]	; (8006038 <id_create.isra.0+0x60>)
 8006020:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8006024:	4404      	add	r4, r0
 8006026:	4669      	mov	r1, sp
 8006028:	4620      	mov	r0, r4
 800602a:	f00d f90b 	bl	8013244 <bt_addr_le_copy>
		if (addr) {
 800602e:	2d00      	cmp	r5, #0
 8006030:	d0e8      	beq.n	8006004 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
 8006032:	4621      	mov	r1, r4
 8006034:	4628      	mov	r0, r5
 8006036:	e7e3      	b.n	8006000 <id_create.isra.0+0x28>
 8006038:	20000000 	.word	0x20000000

0800603c <bt_id_pending_keys_update>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <bt_id_pending_keys_update+0x2c>)
 800603e:	f3bf 8f5b 	dmb	ish
 8006042:	e853 2f00 	ldrex	r2, [r3]
 8006046:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 800604a:	e843 1000 	strex	r0, r1, [r3]
 800604e:	2800      	cmp	r0, #0
 8006050:	d1f7      	bne.n	8006042 <bt_id_pending_keys_update+0x6>
 8006052:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
 8006056:	0453      	lsls	r3, r2, #17
 8006058:	d504      	bpl.n	8006064 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
 800605a:	4904      	ldr	r1, [pc, #16]	; (800606c <bt_id_pending_keys_update+0x30>)
 800605c:	2200      	movs	r2, #0
 800605e:	2002      	movs	r0, #2
 8006060:	f005 bcec 	b.w	800ba3c <bt_keys_foreach>
}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	200000c8 	.word	0x200000c8
 800606c:	08013377 	.word	0x08013377

08006070 <bt_id_add>:
{
 8006070:	b538      	push	{r3, r4, r5, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 8006072:	4d19      	ldr	r5, [pc, #100]	; (80060d8 <bt_id_add+0x68>)
 8006074:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
 8006078:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
 800607c:	4604      	mov	r4, r0
 800607e:	4629      	mov	r1, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
 8006080:	b10a      	cbz	r2, 8006086 <bt_id_add+0x16>
 8006082:	4293      	cmp	r3, r2
 8006084:	d907      	bls.n	8006096 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
 8006086:	3301      	adds	r3, #1
 8006088:	f881 3119 	strb.w	r3, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
 800608c:	7a23      	ldrb	r3, [r4, #8]
 800608e:	f043 0304 	orr.w	r3, r3, #4
 8006092:	7223      	strb	r3, [r4, #8]
}
 8006094:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
 8006096:	2100      	movs	r1, #0
 8006098:	2206      	movs	r2, #6
 800609a:	4608      	mov	r0, r1
 800609c:	f001 fcb8 	bl	8007a10 <bt_conn_lookup_state_le>
	if (conn) {
 80060a0:	b1a0      	cbz	r0, 80060cc <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80060a2:	f3bf 8f5b 	dmb	ish
 80060a6:	35c8      	adds	r5, #200	; 0xc8
 80060a8:	e855 3f00 	ldrex	r3, [r5]
 80060ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060b0:	e845 3200 	strex	r2, r3, [r5]
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d1f7      	bne.n	80060a8 <bt_id_add+0x38>
 80060b8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
 80060bc:	7a23      	ldrb	r3, [r4, #8]
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	7223      	strb	r3, [r4, #8]
}
 80060c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_conn_unref(conn);
 80060c8:	f001 b95c 	b.w	8007384 <bt_conn_unref>
 80060cc:	4620      	mov	r0, r4
}
 80060ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060d2:	f7ff bea1 	b.w	8005e18 <bt_id_add.part.0>
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000

080060dc <bt_id_del>:
{
 80060dc:	b538      	push	{r3, r4, r5, lr}
	if (!bt_dev.le.rl_size ||
 80060de:	4d19      	ldr	r5, [pc, #100]	; (8006144 <bt_id_del+0x68>)
 80060e0:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
 80060e4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
 80060e8:	4604      	mov	r4, r0
 80060ea:	4629      	mov	r1, r5
	if (!bt_dev.le.rl_size ||
 80060ec:	b112      	cbz	r2, 80060f4 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
 80060ee:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
 80060f0:	4293      	cmp	r3, r2
 80060f2:	dd07      	ble.n	8006104 <bt_id_del+0x28>
		bt_dev.le.rl_entries--;
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f881 3119 	strb.w	r3, [r1, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
 80060fa:	7a23      	ldrb	r3, [r4, #8]
 80060fc:	f023 0304 	bic.w	r3, r3, #4
 8006100:	7223      	strb	r3, [r4, #8]
}
 8006102:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
 8006104:	2100      	movs	r1, #0
 8006106:	2206      	movs	r2, #6
 8006108:	4608      	mov	r0, r1
 800610a:	f001 fc81 	bl	8007a10 <bt_conn_lookup_state_le>
	if (conn) {
 800610e:	b1a0      	cbz	r0, 800613a <bt_id_del+0x5e>
 8006110:	f3bf 8f5b 	dmb	ish
 8006114:	35c8      	adds	r5, #200	; 0xc8
 8006116:	e855 3f00 	ldrex	r3, [r5]
 800611a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800611e:	e845 3200 	strex	r2, r3, [r5]
 8006122:	2a00      	cmp	r2, #0
 8006124:	d1f7      	bne.n	8006116 <bt_id_del+0x3a>
 8006126:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
 800612a:	7a23      	ldrb	r3, [r4, #8]
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	7223      	strb	r3, [r4, #8]
}
 8006132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_conn_unref(conn);
 8006136:	f001 b925 	b.w	8007384 <bt_conn_unref>
 800613a:	4620      	mov	r0, r4
}
 800613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006140:	f7ff bdf8 	b.w	8005d34 <bt_id_del.part.0>
 8006144:	20000000 	.word	0x20000000

08006148 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	b088      	sub	sp, #32
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800614e:	4604      	mov	r4, r0
 8006150:	b918      	cbnz	r0, 800615a <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
 8006152:	b346      	cbz	r6, 80061a6 <bt_id_create+0x5e>
		return -EINVAL;
 8006154:	f06f 0015 	mvn.w	r0, #21
 8006158:	e023      	b.n	80061a2 <bt_id_create+0x5a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
 800615a:	2300      	movs	r3, #0
 800615c:	2207      	movs	r2, #7
 800615e:	4669      	mov	r1, sp
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	f8cd 3003 	str.w	r3, [sp, #3]
 8006166:	f00c fe81 	bl	8012e6c <memcmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	d0f1      	beq.n	8006152 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
 800616e:	7823      	ldrb	r3, [r4, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d104      	bne.n	800617e <bt_id_create+0x36>
 8006174:	79a3      	ldrb	r3, [r4, #6]
 8006176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d00a      	beq.n	8006194 <bt_id_create+0x4c>
			BT_ERR("Only static random identity address supported");
 800617e:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <bt_id_create+0xac>)
 8006180:	9306      	str	r3, [sp, #24]
 8006182:	481d      	ldr	r0, [pc, #116]	; (80061f8 <bt_id_create+0xb0>)
 8006184:	2302      	movs	r3, #2
 8006186:	aa05      	add	r2, sp, #20
 8006188:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800618c:	9305      	str	r3, [sp, #20]
 800618e:	f00d f8a5 	bl	80132dc <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
 8006192:	e7df      	b.n	8006154 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff fed7 	bl	8005f48 <id_find>
 800619a:	2800      	cmp	r0, #0
 800619c:	dbd9      	blt.n	8006152 <bt_id_create+0xa>
			return -EALREADY;
 800619e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
 80061a2:	b008      	add	sp, #32
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
 80061a6:	4d15      	ldr	r5, [pc, #84]	; (80061fc <bt_id_create+0xb4>)
 80061a8:	79eb      	ldrb	r3, [r5, #7]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d01e      	beq.n	80061ec <bt_id_create+0xa4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80061ae:	f3bf 8f5b 	dmb	ish
 80061b2:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 80061b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 80061ba:	07db      	lsls	r3, r3, #31
 80061bc:	d40b      	bmi.n	80061d6 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
 80061be:	2c00      	cmp	r4, #0
 80061c0:	d0c8      	beq.n	8006154 <bt_id_create+0xc>
 80061c2:	2207      	movs	r2, #7
 80061c4:	a902      	add	r1, sp, #8
 80061c6:	4620      	mov	r0, r4
 80061c8:	9602      	str	r6, [sp, #8]
 80061ca:	f8cd 600b 	str.w	r6, [sp, #11]
 80061ce:	f00c fe4d 	bl	8012e6c <memcmp>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d0be      	beq.n	8006154 <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
 80061d6:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
 80061d8:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
 80061da:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
 80061dc:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
 80061de:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
 80061e0:	f7ff fefa 	bl	8005fd8 <id_create.isra.0>
	new_id = bt_dev.id_count++;
 80061e4:	2800      	cmp	r0, #0
 80061e6:	bf08      	it	eq
 80061e8:	4630      	moveq	r0, r6
 80061ea:	e7da      	b.n	80061a2 <bt_id_create+0x5a>
		return -ENOMEM;
 80061ec:	f06f 000b 	mvn.w	r0, #11
 80061f0:	e7d7      	b.n	80061a2 <bt_id_create+0x5a>
 80061f2:	bf00      	nop
 80061f4:	080183a9 	.word	0x080183a9
 80061f8:	08015b5c 	.word	0x08015b5c
 80061fc:	20000000 	.word	0x20000000

08006200 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
 8006206:	aa01      	add	r2, sp, #4
 8006208:	2100      	movs	r1, #0
 800620a:	f241 0009 	movw	r0, #4105	; 0x1009
 800620e:	f7ff f84f 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8006212:	4604      	mov	r4, r0
 8006214:	b160      	cbz	r0, 8006230 <bt_id_read_public_addr+0x30>
		BT_WARN("Failed to read public address");
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <bt_id_read_public_addr+0x80>)
 8006218:	9308      	str	r3, [sp, #32]
 800621a:	481a      	ldr	r0, [pc, #104]	; (8006284 <bt_id_read_public_addr+0x84>)
 800621c:	2302      	movs	r3, #2
 800621e:	aa07      	add	r2, sp, #28
 8006220:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	f00d f859 	bl	80132dc <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
 800622a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
 800622c:	b00a      	add	sp, #40	; 0x28
 800622e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
 8006230:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 8006232:	9002      	str	r0, [sp, #8]
 8006234:	689d      	ldr	r5, [r3, #8]
 8006236:	f8ad 000c 	strh.w	r0, [sp, #12]
 800623a:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
 800623c:	2206      	movs	r2, #6
 800623e:	a902      	add	r1, sp, #8
 8006240:	4628      	mov	r0, r5
 8006242:	f00c fe13 	bl	8012e6c <memcmp>
 8006246:	b918      	cbnz	r0, 8006250 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
 8006248:	9801      	ldr	r0, [sp, #4]
 800624a:	f005 fe67 	bl	800bf1c <net_buf_unref>
 800624e:	e7ec      	b.n	800622a <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	2206      	movs	r2, #6
 8006256:	a904      	add	r1, sp, #16
 8006258:	4628      	mov	r0, r5
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006260:	f00c fe04 	bl	8012e6c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
 8006264:	2800      	cmp	r0, #0
 8006266:	d0ef      	beq.n	8006248 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
 8006268:	2206      	movs	r2, #6
 800626a:	4629      	mov	r1, r5
 800626c:	1c70      	adds	r0, r6, #1
 800626e:	f00c fe0d 	bl	8012e8c <memcpy>
	net_buf_unref(rsp);
 8006272:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
 8006274:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
 8006276:	f005 fe51 	bl	800bf1c <net_buf_unref>
	return 1U;
 800627a:	2001      	movs	r0, #1
 800627c:	e7d6      	b.n	800622c <bt_id_read_public_addr+0x2c>
 800627e:	bf00      	nop
 8006280:	080183d7 	.word	0x080183d7
 8006284:	08015b5c 	.word	0x08015b5c

08006288 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
 8006288:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
 800628a:	4668      	mov	r0, sp
 800628c:	f7ff ffb8 	bl	8006200 <bt_id_read_public_addr>
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <bt_setup_public_id_addr+0x1c>)
 8006292:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
 8006294:	b118      	cbz	r0, 800629e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
 8006296:	4669      	mov	r1, sp
 8006298:	2000      	movs	r0, #0
 800629a:	f7ff fe9d 	bl	8005fd8 <id_create.isra.0>
}
 800629e:	b003      	add	sp, #12
 80062a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80062a4:	20000000 	.word	0x20000000

080062a8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
 80062a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
 80062ac:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
 80062b0:	7805      	ldrb	r5, [r0, #0]
{
 80062b2:	460e      	mov	r6, r1
 80062b4:	4690      	mov	r8, r2
 80062b6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
 80062b8:	d026      	beq.n	8006308 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
 80062ba:	4c22      	ldr	r4, [pc, #136]	; (8006344 <bt_id_set_adv_own_addr+0x9c>)
 80062bc:	b12a      	cbz	r2, 80062ca <bt_id_set_adv_own_addr+0x22>
 80062be:	0688      	lsls	r0, r1, #26
 80062c0:	d503      	bpl.n	80062ca <bt_id_set_adv_own_addr+0x22>
 80062c2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
 80062c6:	0659      	lsls	r1, r3, #25
 80062c8:	d539      	bpl.n	800633e <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 80062ca:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80062ce:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 80062d2:	5ce3      	ldrb	r3, [r4, r3]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d008      	beq.n	80062ea <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
 80062d8:	eba9 0505 	sub.w	r5, r9, r5
 80062dc:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	d10c      	bne.n	80062fe <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
 80062e4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
 80062e6:	2000      	movs	r0, #0
 80062e8:	e007      	b.n	80062fa <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
 80062ea:	2007      	movs	r0, #7
 80062ec:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
 80062f0:	4420      	add	r0, r4
 80062f2:	f7ff fe43 	bl	8005f7c <set_random_address>
				if (err) {
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0ee      	beq.n	80062d8 <bt_id_set_adv_own_addr+0x30>
}
 80062fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
 80062fe:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
 8006300:	bf48      	it	mi
 8006302:	f043 0302 	orrmi.w	r3, r3, #2
 8006306:	e7ed      	b.n	80062e4 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
 8006308:	074b      	lsls	r3, r1, #29
 800630a:	d514      	bpl.n	8006336 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
 800630c:	4e0d      	ldr	r6, [pc, #52]	; (8006344 <bt_id_set_adv_own_addr+0x9c>)
 800630e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8006312:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8006316:	5cf3      	ldrb	r3, [r6, r3]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10a      	bne.n	8006332 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
 800631c:	2007      	movs	r0, #7
 800631e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
 8006322:	4430      	add	r0, r6
 8006324:	f7ff fe2a 	bl	8005f7c <set_random_address>
			*own_addr_type = id_addr->type;
 8006328:	eba8 0505 	sub.w	r5, r8, r5
 800632c:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
 800632e:	703b      	strb	r3, [r7, #0]
		if (err) {
 8006330:	e7e3      	b.n	80062fa <bt_id_set_adv_own_addr+0x52>
	int err = 0;
 8006332:	4620      	mov	r0, r4
 8006334:	e7f8      	b.n	8006328 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
 8006336:	f00d f80a 	bl	801334e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
 800633a:	2301      	movs	r3, #1
 800633c:	e7f7      	b.n	800632e <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
 800633e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006342:	e7da      	b.n	80062fa <bt_id_set_adv_own_addr+0x52>
 8006344:	20000000 	.word	0x20000000

08006348 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
 8006348:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
 800634a:	4d13      	ldr	r5, [pc, #76]	; (8006398 <bt_id_init+0x50>)
 800634c:	79eb      	ldrb	r3, [r5, #7]
{
 800634e:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
 8006350:	b11b      	cbz	r3, 800635a <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
 8006352:	2400      	movs	r4, #0
}
 8006354:	4620      	mov	r0, r4
 8006356:	b007      	add	sp, #28
 8006358:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
 800635a:	f7ff ff95 	bl	8006288 <bt_setup_public_id_addr>
		if (err) {
 800635e:	4604      	mov	r4, r0
 8006360:	b150      	cbz	r0, 8006378 <bt_id_init+0x30>
			BT_ERR("Unable to set identity address");
 8006362:	4b0e      	ldr	r3, [pc, #56]	; (800639c <bt_id_init+0x54>)
			BT_ERR("Unable to set random address");
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <bt_id_init+0x58>)
 8006368:	2302      	movs	r3, #2
 800636a:	aa03      	add	r2, sp, #12
 800636c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006370:	9303      	str	r3, [sp, #12]
 8006372:	f00c ffb3 	bl	80132dc <z_log_msg2_static_create.constprop.0>
			return err;
 8006376:	e7ed      	b.n	8006354 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
 8006378:	79eb      	ldrb	r3, [r5, #7]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e9      	bne.n	8006352 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
 800637e:	f00d f80a 	bl	8013396 <bt_setup_random_id_addr>
		if (err) {
 8006382:	4604      	mov	r4, r0
 8006384:	2800      	cmp	r0, #0
 8006386:	d1ec      	bne.n	8006362 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
 8006388:	1c68      	adds	r0, r5, #1
 800638a:	f7ff fdf7 	bl	8005f7c <set_random_address>
		if (err) {
 800638e:	4604      	mov	r4, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	d0df      	beq.n	8006354 <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <bt_id_init+0x5c>)
 8006396:	e7e5      	b.n	8006364 <bt_id_init+0x1c>
 8006398:	20000000 	.word	0x20000000
 800639c:	080183f5 	.word	0x080183f5
 80063a0:	08015b5c 	.word	0x08015b5c
 80063a4:	08018414 	.word	0x08018414

080063a8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
 80063a8:	6843      	ldr	r3, [r0, #4]
{
 80063aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ac:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
 80063ae:	0558      	lsls	r0, r3, #21
 80063b0:	d502      	bpl.n	80063b8 <valid_adv_param+0x10>
		return false;
 80063b2:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
 80063b4:	b003      	add	sp, #12
 80063b6:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 80063b8:	6922      	ldr	r2, [r4, #16]
 80063ba:	b10a      	cbz	r2, 80063c0 <valid_adv_param+0x18>
 80063bc:	07d9      	lsls	r1, r3, #31
 80063be:	d5f8      	bpl.n	80063b2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
 80063c0:	4d1a      	ldr	r5, [pc, #104]	; (800642c <valid_adv_param+0x84>)
 80063c2:	7820      	ldrb	r0, [r4, #0]
 80063c4:	79eb      	ldrb	r3, [r5, #7]
 80063c6:	4283      	cmp	r3, r0
 80063c8:	d9f3      	bls.n	80063b2 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
 80063ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80063ce:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
 80063d0:	2207      	movs	r2, #7
 80063d2:	4669      	mov	r1, sp
 80063d4:	4428      	add	r0, r5
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	f8cd 3003 	str.w	r3, [sp, #3]
 80063dc:	f00c fd46 	bl	8012e6c <memcmp>
	if (param->id >= bt_dev.id_count ||
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d0e6      	beq.n	80063b2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 80063e4:	6860      	ldr	r0, [r4, #4]
 80063e6:	07c2      	lsls	r2, r0, #31
 80063e8:	d406      	bmi.n	80063f8 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 80063ea:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d802      	bhi.n	80063f8 <valid_adv_param+0x50>
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	2b9f      	cmp	r3, #159	; 0x9f
 80063f6:	d9dc      	bls.n	80063b2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
 80063f8:	f010 0f30 	tst.w	r0, #48	; 0x30
 80063fc:	d002      	beq.n	8006404 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0d6      	beq.n	80063b2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
 8006404:	06c3      	lsls	r3, r0, #27
 8006406:	d401      	bmi.n	800640c <valid_adv_param+0x64>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	b943      	cbnz	r3, 800641e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
 800640c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	d8ce      	bhi.n	80063b2 <valid_adv_param+0xa>
 8006414:	2a1f      	cmp	r2, #31
 8006416:	d9cc      	bls.n	80063b2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
 8006418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800641c:	d8c9      	bhi.n	80063b2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
 800641e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
 8006422:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
 8006426:	bf18      	it	ne
 8006428:	2001      	movne	r0, #1
 800642a:	e7c3      	b.n	80063b4 <valid_adv_param+0xc>
 800642c:	20000000 	.word	0x20000000

08006430 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
 8006430:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
 8006432:	4606      	mov	r6, r0
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <le_adv_start_add_conn+0x80>)
 8006436:	f816 2b09 	ldrb.w	r2, [r6], #9
 800643a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
 800643e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 8006440:	2300      	movs	r3, #0
{
 8006442:	4605      	mov	r5, r0
 8006444:	2207      	movs	r2, #7
 8006446:	460f      	mov	r7, r1
 8006448:	4630      	mov	r0, r6
 800644a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	f8cd 3003 	str.w	r3, [sp, #3]
 8006452:	f00c fd0b 	bl	8012e6c <memcmp>
 8006456:	782a      	ldrb	r2, [r5, #0]
 8006458:	4604      	mov	r4, r0
 800645a:	b9a8      	cbnz	r0, 8006488 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
 800645c:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <le_adv_start_add_conn+0x84>)
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	8899      	ldrh	r1, [r3, #4]
 8006462:	9002      	str	r0, [sp, #8]
 8006464:	799b      	ldrb	r3, [r3, #6]
 8006466:	f8ad 100c 	strh.w	r1, [sp, #12]
 800646a:	4610      	mov	r0, r2
 800646c:	a902      	add	r1, sp, #8
 800646e:	f88d 300e 	strb.w	r3, [sp, #14]
 8006472:	f001 fa65 	bl	8007940 <bt_conn_add_le>
		if (!conn) {
 8006476:	4605      	mov	r5, r0
 8006478:	b1b8      	cbz	r0, 80064aa <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
 800647a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
 800647c:	f000 ffc6 	bl	800740c <bt_conn_set_state>
	*out_conn = conn;
 8006480:	603d      	str	r5, [r7, #0]
	return 0;
}
 8006482:	4620      	mov	r0, r4
 8006484:	b005      	add	sp, #20
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
 8006488:	4631      	mov	r1, r6
 800648a:	4610      	mov	r0, r2
 800648c:	f001 fa92 	bl	80079b4 <bt_conn_exists_le>
 8006490:	4604      	mov	r4, r0
 8006492:	b938      	cbnz	r0, 80064a4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
 8006494:	7828      	ldrb	r0, [r5, #0]
 8006496:	4631      	mov	r1, r6
 8006498:	f001 fa52 	bl	8007940 <bt_conn_add_le>
	if (!conn) {
 800649c:	4605      	mov	r5, r0
 800649e:	b120      	cbz	r0, 80064aa <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
 80064a0:	2105      	movs	r1, #5
 80064a2:	e7eb      	b.n	800647c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
 80064a4:	f06f 0415 	mvn.w	r4, #21
 80064a8:	e7eb      	b.n	8006482 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
 80064aa:	f06f 040b 	mvn.w	r4, #11
 80064ae:	e7e8      	b.n	8006482 <le_adv_start_add_conn+0x52>
 80064b0:	20000000 	.word	0x20000000
 80064b4:	08015cd3 	.word	0x08015cd3

080064b8 <hci_set_ad>:
{
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	460c      	mov	r4, r1
 80064be:	b089      	sub	sp, #36	; 0x24
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 80064c0:	2120      	movs	r1, #32
{
 80064c2:	4682      	mov	sl, r0
 80064c4:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 80064c6:	f7fe feab 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 80064ca:	4605      	mov	r5, r0
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d05b      	beq.n	8006588 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
 80064d0:	2120      	movs	r1, #32
 80064d2:	3008      	adds	r0, #8
 80064d4:	f005 fe52 	bl	800c17c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
 80064d8:	2220      	movs	r2, #32
 80064da:	2100      	movs	r1, #0
 80064dc:	4681      	mov	r9, r0
 80064de:	f00c fce0 	bl	8012ea2 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
 80064e2:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80064e6:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
 80064ea:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
 80064ec:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
 80064ee:	f8d4 8000 	ldr.w	r8, [r4]
 80064f2:	2300      	movs	r3, #0
 80064f4:	6862      	ldr	r2, [r4, #4]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d30b      	bcc.n	8006512 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
 80064fa:	9b00      	ldr	r3, [sp, #0]
 80064fc:	3408      	adds	r4, #8
 80064fe:	42a3      	cmp	r3, r4
 8006500:	d1f5      	bne.n	80064ee <hci_set_ad+0x36>
	*data_len = set_data_len;
 8006502:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 8006506:	2200      	movs	r2, #0
 8006508:	4629      	mov	r1, r5
 800650a:	4650      	mov	r0, sl
 800650c:	f7fe fed0 	bl	80052b0 <bt_hci_cmd_send_sync>
 8006510:	e01e      	b.n	8006550 <hci_set_ad+0x98>
			size_t len = data[j].data_len;
 8006512:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
 8006516:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
 800651a:	1cb0      	adds	r0, r6, #2
 800651c:	1881      	adds	r1, r0, r2
 800651e:	291f      	cmp	r1, #31
 8006520:	d91b      	bls.n	800655a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
 8006522:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
 8006526:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
 800652a:	d101      	bne.n	8006530 <hci_set_ad+0x78>
 800652c:	2a00      	cmp	r2, #0
 800652e:	dc12      	bgt.n	8006556 <hci_set_ad+0x9e>
					BT_ERR("Too big advertising data");
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <hci_set_ad+0xd8>)
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	2302      	movs	r3, #2
 8006536:	9305      	str	r3, [sp, #20]
 8006538:	4816      	ldr	r0, [pc, #88]	; (8006594 <hci_set_ad+0xdc>)
 800653a:	2300      	movs	r3, #0
 800653c:	aa05      	add	r2, sp, #20
 800653e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006542:	f7fc fd0b 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		net_buf_unref(buf);
 8006546:	4628      	mov	r0, r5
 8006548:	f005 fce8 	bl	800bf1c <net_buf_unref>
					return -EINVAL;
 800654c:	f06f 0015 	mvn.w	r0, #21
}
 8006550:	b009      	add	sp, #36	; 0x24
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
 8006556:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
 800655a:	b2d7      	uxtb	r7, r2
 800655c:	1c79      	adds	r1, r7, #1
 800655e:	f80b 1006 	strb.w	r1, [fp, r6]
 8006562:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
 8006564:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
 8006566:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
 800656a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
 800656e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006572:	9301      	str	r3, [sp, #4]
			set_data_len += len;
 8006574:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
 8006576:	f00c fc89 	bl	8012e8c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
 800657a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
 800657c:	443e      	add	r6, r7
 800657e:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
 8006580:	3301      	adds	r3, #1
 8006582:	f108 0808 	add.w	r8, r8, #8
 8006586:	e7b5      	b.n	80064f4 <hci_set_ad+0x3c>
		return -ENOBUFS;
 8006588:	f06f 0068 	mvn.w	r0, #104	; 0x68
 800658c:	e7e0      	b.n	8006550 <hci_set_ad+0x98>
 800658e:	bf00      	nop
 8006590:	08018437 	.word	0x08018437
 8006594:	08015b14 	.word	0x08015b14

08006598 <bt_le_ext_adv_foreach>:
{
 8006598:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
 800659a:	4801      	ldr	r0, [pc, #4]	; (80065a0 <bt_le_ext_adv_foreach+0x8>)
 800659c:	4718      	bx	r3
 800659e:	bf00      	nop
 80065a0:	20000018 	.word	0x20000018

080065a4 <bt_le_adv_lookup_legacy>:
}
 80065a4:	4800      	ldr	r0, [pc, #0]	; (80065a8 <bt_le_adv_lookup_legacy+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	20000018 	.word	0x20000018

080065ac <bt_le_adv_stop.part.0>:
	}

	return err;
}

int bt_le_adv_stop(void)
 80065ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 80065ae:	4818      	ldr	r0, [pc, #96]	; (8006610 <bt_le_adv_stop.part.0+0x64>)
 80065b0:	f00c ff04 	bl	80133bc <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 80065b4:	0583      	lsls	r3, r0, #22
 80065b6:	d521      	bpl.n	80065fc <bt_le_adv_stop.part.0+0x50>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
 80065b8:	2300      	movs	r3, #0
 80065ba:	4816      	ldr	r0, [pc, #88]	; (8006614 <bt_le_adv_stop.part.0+0x68>)
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2207      	movs	r2, #7
 80065c0:	4669      	mov	r1, sp
 80065c2:	f8cd 3003 	str.w	r3, [sp, #3]
 80065c6:	f00c fc51 	bl	8012e6c <memcmp>
 80065ca:	4b13      	ldr	r3, [pc, #76]	; (8006618 <bt_le_adv_stop.part.0+0x6c>)
 80065cc:	b9e0      	cbnz	r0, 8006608 <bt_le_adv_stop.part.0+0x5c>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <bt_le_adv_stop.part.0+0x70>)
 80065d0:	8891      	ldrh	r1, [r2, #4]
 80065d2:	6810      	ldr	r0, [r2, #0]
 80065d4:	7992      	ldrb	r2, [r2, #6]
 80065d6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80065da:	f88d 200e 	strb.w	r2, [sp, #14]
 80065de:	9002      	str	r0, [sp, #8]
 80065e0:	2204      	movs	r2, #4
 80065e2:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
 80065e4:	7e18      	ldrb	r0, [r3, #24]
 80065e6:	f001 fa13 	bl	8007a10 <bt_conn_lookup_state_le>
 80065ea:	4604      	mov	r4, r0
	if (conn) {
 80065ec:	b130      	cbz	r0, 80065fc <bt_le_adv_stop.part.0+0x50>
		conn->err = status;
 80065ee:	2100      	movs	r1, #0
 80065f0:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 80065f2:	f000 ff0b 	bl	800740c <bt_conn_set_state>
		bt_conn_unref(conn);
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fec4 	bl	8007384 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
 80065fc:	2100      	movs	r1, #0
 80065fe:	4808      	ldr	r0, [pc, #32]	; (8006620 <bt_le_adv_stop.part.0+0x74>)
 8006600:	f00c ff8f 	bl	8013522 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
 8006604:	b004      	add	sp, #16
 8006606:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
 8006608:	2205      	movs	r2, #5
 800660a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800660e:	e7e9      	b.n	80065e4 <bt_le_adv_stop.part.0+0x38>
 8006610:	20000028 	.word	0x20000028
 8006614:	20000021 	.word	0x20000021
 8006618:	20000000 	.word	0x20000000
 800661c:	08015cd3 	.word	0x08015cd3
 8006620:	20000018 	.word	0x20000018

08006624 <bt_le_adv_start_legacy>:
{
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	b093      	sub	sp, #76	; 0x4c
	bool dir_adv = (param->peer != NULL), scannable = false;
 800662a:	690f      	ldr	r7, [r1, #16]
{
 800662c:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
 800662e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
 8006630:	1afc      	subs	r4, r7, r3
{
 8006632:	4606      	mov	r6, r0
 8006634:	4891      	ldr	r0, [pc, #580]	; (800687c <bt_le_adv_start_legacy+0x258>)
	struct bt_conn *conn = NULL;
 8006636:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
 8006638:	bf18      	it	ne
 800663a:	2401      	movne	r4, #1
{
 800663c:	460d      	mov	r5, r1
 800663e:	4693      	mov	fp, r2
 8006640:	f00c febc 	bl	80133bc <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8006644:	0740      	lsls	r0, r0, #29
 8006646:	f140 810d 	bpl.w	8006864 <bt_le_adv_start_legacy+0x240>
	if (!valid_adv_param(param)) {
 800664a:	4608      	mov	r0, r1
 800664c:	f7ff feac 	bl	80063a8 <valid_adv_param>
 8006650:	b928      	cbnz	r0, 800665e <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
 8006652:	f06f 0415 	mvn.w	r4, #21
}
 8006656:	4620      	mov	r0, r4
 8006658:	b013      	add	sp, #76	; 0x4c
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
 800665e:	4628      	mov	r0, r5
 8006660:	f00c fe87 	bl	8013372 <bt_id_adv_random_addr_check>
 8006664:	4681      	mov	r9, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	d0f3      	beq.n	8006652 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800666a:	f106 0810 	add.w	r8, r6, #16
 800666e:	4640      	mov	r0, r8
 8006670:	f00c fea4 	bl	80133bc <atomic_get>
 8006674:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8006676:	f3c0 1a80 	ubfx	sl, r0, #6, #1
 800667a:	f100 80f6 	bmi.w	800686a <bt_le_adv_start_legacy+0x246>
	(void)memset(&set_param, 0, sizeof(set_param));
 800667e:	220f      	movs	r2, #15
 8006680:	4651      	mov	r1, sl
 8006682:	a808      	add	r0, sp, #32
 8006684:	f00c fc0d 	bl	8012ea2 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
 8006688:	68ab      	ldr	r3, [r5, #8]
 800668a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
 800668e:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
 8006690:	68eb      	ldr	r3, [r5, #12]
 8006692:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
 8006696:	f00c fe82 	bl	801339e <get_adv_channel_map>
	if (adv->id != param->id) {
 800669a:	7832      	ldrb	r2, [r6, #0]
 800669c:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
 800669e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
 80066a2:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
 80066a4:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
 80066a8:	d004      	beq.n	80066b4 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80066aa:	4874      	ldr	r0, [pc, #464]	; (800687c <bt_le_adv_start_legacy+0x258>)
 80066ac:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
 80066b0:	f00c fe8a 	bl	80133c8 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
 80066b4:	4a72      	ldr	r2, [pc, #456]	; (8006880 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
 80066b6:	782b      	ldrb	r3, [r5, #0]
 80066b8:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
 80066ba:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
 80066be:	6869      	ldr	r1, [r5, #4]
 80066c0:	4622      	mov	r2, r4
 80066c2:	f10d 0325 	add.w	r3, sp, #37	; 0x25
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff fdee 	bl	80062a8 <bt_id_set_adv_own_addr>
	if (err) {
 80066cc:	4604      	mov	r4, r0
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d1c1      	bne.n	8006656 <bt_le_adv_start_legacy+0x32>
	if (dir_adv) {
 80066d2:	f106 0009 	add.w	r0, r6, #9
 80066d6:	2f00      	cmp	r7, #0
 80066d8:	d054      	beq.n	8006784 <bt_le_adv_start_legacy+0x160>
	memcpy(dst, src, sizeof(*dst));
 80066da:	6929      	ldr	r1, [r5, #16]
 80066dc:	2207      	movs	r2, #7
 80066de:	f00c fbd5 	bl	8012e8c <memcpy>
	name_type = get_adv_name_type_param(param);
 80066e2:	4628      	mov	r0, r5
 80066e4:	f00c ff0d 	bl	8013502 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 80066e8:	686b      	ldr	r3, [r5, #4]
 80066ea:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
 80066ec:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 80066ee:	d552      	bpl.n	8006796 <bt_le_adv_start_legacy+0x172>
		if (dir_adv) {
 80066f0:	2f00      	cmp	r7, #0
 80066f2:	d04d      	beq.n	8006790 <bt_le_adv_start_legacy+0x16c>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
 80066f4:	f013 0f10 	tst.w	r3, #16
 80066f8:	bf14      	ite	ne
 80066fa:	2304      	movne	r3, #4
 80066fc:	2301      	moveq	r3, #1
 80066fe:	6929      	ldr	r1, [r5, #16]
 8006700:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006704:	2207      	movs	r2, #7
 8006706:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 800670a:	f00c fbbf 	bl	8012e8c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
 800670e:	f04f 0900 	mov.w	r9, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 8006712:	210f      	movs	r1, #15
 8006714:	f242 0006 	movw	r0, #8198	; 0x2006
 8006718:	f7fe fd82 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 800671c:	4604      	mov	r4, r0
 800671e:	2800      	cmp	r0, #0
 8006720:	f000 80a6 	beq.w	8006870 <bt_le_adv_start_legacy+0x24c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
 8006724:	220f      	movs	r2, #15
 8006726:	a908      	add	r1, sp, #32
 8006728:	3008      	adds	r0, #8
 800672a:	f00e fbae 	bl	8014e8a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
 800672e:	2200      	movs	r2, #0
 8006730:	4621      	mov	r1, r4
 8006732:	f242 0006 	movw	r0, #8198	; 0x2006
 8006736:	f7fe fdbb 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800673a:	2800      	cmp	r0, #0
 800673c:	f040 809b 	bne.w	8006876 <bt_le_adv_start_legacy+0x252>
	if (!dir_adv) {
 8006740:	2f00      	cmp	r7, #0
 8006742:	d038      	beq.n	80067b6 <bt_le_adv_start_legacy+0x192>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 8006744:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 8006746:	07dc      	lsls	r4, r3, #31
 8006748:	d443      	bmi.n	80067d2 <bt_le_adv_start_legacy+0x1ae>
	return bt_le_adv_set_enable_legacy(adv, enable);
 800674a:	2101      	movs	r1, #1
 800674c:	4630      	mov	r0, r6
 800674e:	f00c fee8 	bl	8013522 <bt_le_adv_set_enable_legacy>
	if (err) {
 8006752:	4604      	mov	r4, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	d07e      	beq.n	8006856 <bt_le_adv_start_legacy+0x232>
		BT_ERR("Failed to start advertiser");
 8006758:	4b4a      	ldr	r3, [pc, #296]	; (8006884 <bt_le_adv_start_legacy+0x260>)
 800675a:	9310      	str	r3, [sp, #64]	; 0x40
 800675c:	2302      	movs	r3, #2
 800675e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006760:	4849      	ldr	r0, [pc, #292]	; (8006888 <bt_le_adv_start_legacy+0x264>)
 8006762:	2300      	movs	r3, #0
 8006764:	aa0f      	add	r2, sp, #60	; 0x3c
 8006766:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800676a:	f7fc fbf7 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 800676e:	9807      	ldr	r0, [sp, #28]
 8006770:	2800      	cmp	r0, #0
 8006772:	f43f af70 	beq.w	8006656 <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8006776:	2100      	movs	r1, #0
 8006778:	f000 fe48 	bl	800740c <bt_conn_set_state>
			bt_conn_unref(conn);
 800677c:	9807      	ldr	r0, [sp, #28]
 800677e:	f000 fe01 	bl	8007384 <bt_conn_unref>
 8006782:	e768      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
 8006784:	970c      	str	r7, [sp, #48]	; 0x30
 8006786:	2207      	movs	r2, #7
 8006788:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
 800678c:	a90c      	add	r1, sp, #48	; 0x30
 800678e:	e7a6      	b.n	80066de <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
 8006790:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8006794:	e7bd      	b.n	8006712 <bt_le_adv_start_legacy+0xee>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
 8006796:	059b      	lsls	r3, r3, #22
 8006798:	d403      	bmi.n	80067a2 <bt_le_adv_start_legacy+0x17e>
 800679a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800679c:	b90b      	cbnz	r3, 80067a2 <bt_le_adv_start_legacy+0x17e>
 800679e:	2802      	cmp	r0, #2
 80067a0:	d103      	bne.n	80067aa <bt_le_adv_start_legacy+0x186>
		set_param.type = BT_HCI_ADV_SCAN_IND;
 80067a2:	2302      	movs	r3, #2
 80067a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80067a8:	e7b3      	b.n	8006712 <bt_le_adv_start_legacy+0xee>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
 80067aa:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
 80067ac:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
 80067b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80067b4:	e7ad      	b.n	8006712 <bt_le_adv_start_legacy+0xee>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
 80067b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80067be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80067c0:	9a05      	ldr	r2, [sp, #20]
 80067c2:	4659      	mov	r1, fp
 80067c4:	4630      	mov	r0, r6
 80067c6:	f00c fe25 	bl	8013414 <le_adv_update.constprop.0>
		if (err) {
 80067ca:	4604      	mov	r4, r0
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0b9      	beq.n	8006744 <bt_le_adv_start_legacy+0x120>
 80067d0:	e741      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
 80067d2:	a907      	add	r1, sp, #28
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff fe2b 	bl	8006430 <le_adv_start_add_conn>
		if (err) {
 80067da:	4604      	mov	r4, r0
 80067dc:	2800      	cmp	r0, #0
 80067de:	d0b4      	beq.n	800674a <bt_le_adv_start_legacy+0x126>
			if (err == -ENOMEM && !dir_adv &&
 80067e0:	f110 0f0c 	cmn.w	r0, #12
 80067e4:	f47f af37 	bne.w	8006656 <bt_le_adv_start_legacy+0x32>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	f47f af34 	bne.w	8006656 <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
 80067ee:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
 80067f0:	0798      	lsls	r0, r3, #30
 80067f2:	f53f af30 	bmi.w	8006656 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 80067f6:	686c      	ldr	r4, [r5, #4]
 80067f8:	f084 0402 	eor.w	r4, r4, #2
 80067fc:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8006800:	f004 0201 	and.w	r2, r4, #1
 8006804:	210d      	movs	r1, #13
 8006806:	4640      	mov	r0, r8
 8006808:	f00c fded 	bl	80133e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
 800680c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006810:	425a      	negs	r2, r3
 8006812:	415a      	adcs	r2, r3
 8006814:	2107      	movs	r1, #7
 8006816:	4640      	mov	r0, r8
 8006818:	f00c fde5 	bl	80133e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
 800681c:	f1aa 0102 	sub.w	r1, sl, #2
 8006820:	424a      	negs	r2, r1
 8006822:	414a      	adcs	r2, r1
 8006824:	4640      	mov	r0, r8
 8006826:	2108      	movs	r1, #8
 8006828:	f00c fddd 	bl	80133e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
 800682c:	686a      	ldr	r2, [r5, #4]
 800682e:	2109      	movs	r1, #9
 8006830:	f002 0201 	and.w	r2, r2, #1
 8006834:	4640      	mov	r0, r8
 8006836:	f00c fdd6 	bl	80133e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
 800683a:	464a      	mov	r2, r9
 800683c:	210a      	movs	r1, #10
 800683e:	4640      	mov	r0, r8
 8006840:	f00c fdd1 	bl	80133e6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
 8006844:	686a      	ldr	r2, [r5, #4]
 8006846:	210c      	movs	r1, #12
 8006848:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800684c:	4640      	mov	r0, r8
 800684e:	f00c fdca 	bl	80133e6 <atomic_set_bit_to>
	return 0;
 8006852:	2400      	movs	r4, #0
 8006854:	e6ff      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
 8006856:	9807      	ldr	r0, [sp, #28]
 8006858:	b108      	cbz	r0, 800685e <bt_le_adv_start_legacy+0x23a>
		bt_conn_unref(conn);
 800685a:	f000 fd93 	bl	8007384 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
 800685e:	2f00      	cmp	r7, #0
 8006860:	d1ce      	bne.n	8006800 <bt_le_adv_start_legacy+0x1dc>
 8006862:	e7c8      	b.n	80067f6 <bt_le_adv_start_legacy+0x1d2>
		return -EAGAIN;
 8006864:	f06f 040a 	mvn.w	r4, #10
 8006868:	e6f5      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
 800686a:	f06f 0477 	mvn.w	r4, #119	; 0x77
 800686e:	e6f2      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
 8006870:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8006874:	e6ef      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
 8006876:	4604      	mov	r4, r0
 8006878:	e6ed      	b.n	8006656 <bt_le_adv_start_legacy+0x32>
 800687a:	bf00      	nop
 800687c:	200000c8 	.word	0x200000c8
 8006880:	20000000 	.word	0x20000000
 8006884:	08018450 	.word	0x08018450
 8006888:	08015b14 	.word	0x08015b14

0800688c <bt_le_adv_start>:
{
 800688c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800688e:	4615      	mov	r5, r2
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
 8006890:	9a06      	ldr	r2, [sp, #24]
{
 8006892:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
 8006894:	e9cd 3200 	strd	r3, r2, [sp]
 8006898:	462b      	mov	r3, r5
 800689a:	460a      	mov	r2, r1
 800689c:	4601      	mov	r1, r0
 800689e:	4811      	ldr	r0, [pc, #68]	; (80068e4 <bt_le_adv_start+0x58>)
 80068a0:	f7ff fec0 	bl	8006624 <bt_le_adv_start_legacy>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
 80068a8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
 80068aa:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
 80068ae:	429d      	cmp	r5, r3
 80068b0:	d102      	bne.n	80068b8 <bt_le_adv_start+0x2c>
}
 80068b2:	4630      	mov	r0, r6
 80068b4:	b002      	add	sp, #8
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
 80068b8:	880a      	ldrh	r2, [r1, #0]
 80068ba:	4282      	cmp	r2, r0
 80068bc:	d104      	bne.n	80068c8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
 80068be:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
 80068c0:	b112      	cbz	r2, 80068c8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
 80068c2:	7812      	ldrb	r2, [r2, #0]
 80068c4:	07d2      	lsls	r2, r2, #31
 80068c6:	d402      	bmi.n	80068ce <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
 80068c8:	3301      	adds	r3, #1
 80068ca:	3108      	adds	r1, #8
 80068cc:	e7ef      	b.n	80068ae <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
 80068ce:	4906      	ldr	r1, [pc, #24]	; (80068e8 <bt_le_adv_start+0x5c>)
 80068d0:	4806      	ldr	r0, [pc, #24]	; (80068ec <bt_le_adv_start+0x60>)
 80068d2:	f008 fe93 	bl	800f5fc <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
 80068d6:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <bt_le_adv_start+0x64>)
 80068d8:	4804      	ldr	r0, [pc, #16]	; (80068ec <bt_le_adv_start+0x60>)
 80068da:	2300      	movs	r3, #0
 80068dc:	f008 ffb2 	bl	800f844 <k_work_reschedule>
 80068e0:	e7e7      	b.n	80068b2 <bt_le_adv_start+0x26>
 80068e2:	bf00      	nop
 80068e4:	20000018 	.word	0x20000018
 80068e8:	08006929 	.word	0x08006929
 80068ec:	20000030 	.word	0x20000030
 80068f0:	000493e0 	.word	0x000493e0

080068f4 <bt_le_adv_stop>:
{
 80068f4:	b508      	push	{r3, lr}
	(void)bt_le_lim_adv_cancel_timeout(adv);
 80068f6:	480a      	ldr	r0, [pc, #40]	; (8006920 <bt_le_adv_stop+0x2c>)
 80068f8:	f00c fe3a 	bl	8013570 <bt_le_lim_adv_cancel_timeout>
 80068fc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
 8006900:	4808      	ldr	r0, [pc, #32]	; (8006924 <bt_le_adv_stop+0x30>)
 8006902:	f00c fd61 	bl	80133c8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 8006906:	4807      	ldr	r0, [pc, #28]	; (8006924 <bt_le_adv_stop+0x30>)
 8006908:	f00c fd58 	bl	80133bc <atomic_get>
 800690c:	4603      	mov	r3, r0
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 800690e:	065b      	lsls	r3, r3, #25
 8006910:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8006914:	d503      	bpl.n	800691e <bt_le_adv_stop+0x2a>
}
 8006916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800691a:	f7ff be47 	b.w	80065ac <bt_le_adv_stop.part.0>
 800691e:	bd08      	pop	{r3, pc}
 8006920:	20000018 	.word	0x20000018
 8006924:	20000028 	.word	0x20000028

08006928 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
 8006928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
 800692a:	f7ff ffe3 	bl	80068f4 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <adv_timeout+0x24>)
 8006930:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8006934:	2303      	movs	r3, #3
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	4805      	ldr	r0, [pc, #20]	; (8006950 <adv_timeout+0x28>)
 800693a:	2300      	movs	r3, #0
 800693c:	aa03      	add	r2, sp, #12
 800693e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8006942:	f7fc fb0b 	bl	8002f5c <z_impl_z_log_msg2_static_create>
}
 8006946:	b007      	add	sp, #28
 8006948:	f85d fb04 	ldr.w	pc, [sp], #4
 800694c:	0801846b 	.word	0x0801846b
 8006950:	08015b14 	.word	0x08015b14

08006954 <bt_le_adv_resume>:
{
 8006954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006956:	481e      	ldr	r0, [pc, #120]	; (80069d0 <bt_le_adv_resume+0x7c>)
 8006958:	4c1d      	ldr	r4, [pc, #116]	; (80069d0 <bt_le_adv_resume+0x7c>)
 800695a:	f00c fd2f 	bl	80133bc <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
 800695e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006962:	d032      	beq.n	80069ca <bt_le_adv_resume+0x76>
 8006964:	4620      	mov	r0, r4
 8006966:	f00c fd29 	bl	80133bc <atomic_get>
 800696a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 800696c:	f3c0 1580 	ubfx	r5, r0, #6, #1
 8006970:	d42b      	bmi.n	80069ca <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 8006972:	4620      	mov	r0, r4
 8006974:	f00c fd22 	bl	80133bc <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
 8006978:	0583      	lsls	r3, r0, #22
 800697a:	d526      	bpl.n	80069ca <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
 800697c:	a901      	add	r1, sp, #4
 800697e:	f1a4 0010 	sub.w	r0, r4, #16
 8006982:	f7ff fd55 	bl	8006430 <le_adv_start_add_conn>
	if (err) {
 8006986:	bb00      	cbnz	r0, 80069ca <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
 8006988:	2101      	movs	r1, #1
 800698a:	f1a4 0010 	sub.w	r0, r4, #16
 800698e:	f00c fdc8 	bl	8013522 <bt_le_adv_set_enable_legacy>
	if (err) {
 8006992:	b150      	cbz	r0, 80069aa <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8006994:	4629      	mov	r1, r5
 8006996:	9801      	ldr	r0, [sp, #4]
 8006998:	f000 fd38 	bl	800740c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800699c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
 80069a0:	4620      	mov	r0, r4
 80069a2:	f00c fd11 	bl	80133c8 <atomic_and>
	return (old & mask) != 0;
 80069a6:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
 80069aa:	9801      	ldr	r0, [sp, #4]
 80069ac:	f000 fcea 	bl	8007384 <bt_conn_unref>
	if (persist_paused) {
 80069b0:	b15d      	cbz	r5, 80069ca <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80069b2:	f3bf 8f5b 	dmb	ish
 80069b6:	e854 3f00 	ldrex	r3, [r4]
 80069ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069be:	e844 3200 	strex	r2, r3, [r4]
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d1f7      	bne.n	80069b6 <bt_le_adv_resume+0x62>
 80069c6:	f3bf 8f5b 	dmb	ish
}
 80069ca:	b003      	add	sp, #12
 80069cc:	bd30      	pop	{r4, r5, pc}
 80069ce:	bf00      	nop
 80069d0:	20000028 	.word	0x20000028

080069d4 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 80069d4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
 80069d6:	b570      	push	{r4, r5, r6, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 80069e0:	d919      	bls.n	8006a16 <sys_memcpy_swap.constprop.0+0x42>
 80069e2:	42b0      	cmp	r0, r6
 80069e4:	d20e      	bcs.n	8006a04 <sys_memcpy_swap.constprop.0+0x30>
 80069e6:	490e      	ldr	r1, [pc, #56]	; (8006a20 <sys_memcpy_swap.constprop.0+0x4c>)
 80069e8:	4a0e      	ldr	r2, [pc, #56]	; (8006a24 <sys_memcpy_swap.constprop.0+0x50>)
 80069ea:	480f      	ldr	r0, [pc, #60]	; (8006a28 <sys_memcpy_swap.constprop.0+0x54>)
 80069ec:	f240 2317 	movw	r3, #535	; 0x217
 80069f0:	f00b fc5a 	bl	80122a8 <assert_print>
 80069f4:	480d      	ldr	r0, [pc, #52]	; (8006a2c <sys_memcpy_swap.constprop.0+0x58>)
 80069f6:	f00b fc57 	bl	80122a8 <assert_print>
 80069fa:	480a      	ldr	r0, [pc, #40]	; (8006a24 <sys_memcpy_swap.constprop.0+0x50>)
 80069fc:	f240 2117 	movw	r1, #535	; 0x217
 8006a00:	f00b fc4b 	bl	801229a <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
 8006a04:	4633      	mov	r3, r6
 8006a06:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
 8006a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a0c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	d1f9      	bne.n	8006a08 <sys_memcpy_swap.constprop.0+0x34>
	}
}
 8006a14:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 8006a16:	d0e6      	beq.n	80069e6 <sys_memcpy_swap.constprop.0+0x12>
 8006a18:	f100 0310 	add.w	r3, r0, #16
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	e7e1      	b.n	80069e4 <sys_memcpy_swap.constprop.0+0x10>
 8006a20:	080184bc 	.word	0x080184bc
 8006a24:	08018491 	.word	0x08018491
 8006a28:	08016836 	.word	0x08016836
 8006a2c:	08018513 	.word	0x08018513

08006a30 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
 8006a30:	b530      	push	{r4, r5, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
 8006a32:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
 8006a34:	b093      	sub	sp, #76	; 0x4c
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 8006a36:	aa04      	add	r2, sp, #16
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f242 0018 	movw	r0, #8216	; 0x2018
 8006a3e:	f7fe fc37 	bl	80052b0 <bt_hci_cmd_send_sync>
		if (ret) {
 8006a42:	4604      	mov	r4, r0
 8006a44:	bb60      	cbnz	r0, 8006aa0 <prng_reseed.constprop.0+0x70>
			return ret;
		}

		rp = (void *)rsp->data;
 8006a46:	9b04      	ldr	r3, [sp, #16]
		memcpy(&seed[i * 8], rp->rand, 8);
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	ab0a      	add	r3, sp, #40	; 0x28
 8006a4c:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8006a50:	2208      	movs	r2, #8
 8006a52:	3101      	adds	r1, #1
 8006a54:	f00c fa1a 	bl	8012e8c <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 8006a58:	3501      	adds	r5, #1

		net_buf_unref(rsp);
 8006a5a:	9804      	ldr	r0, [sp, #16]
 8006a5c:	f005 fa5e 	bl	800bf1c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 8006a60:	2d04      	cmp	r5, #4
 8006a62:	d1e8      	bne.n	8006a36 <prng_reseed.constprop.0+0x6>
	return z_impl_k_uptime_ticks();
 8006a64:	f00e fd4e 	bl	8015504 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8006a68:	220a      	movs	r2, #10
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f7f9 fd50 	bl	8000510 <__aeabi_uldivmod>
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
 8006a70:	2308      	movs	r3, #8
	extra = k_uptime_get();
 8006a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	480b      	ldr	r0, [pc, #44]	; (8006aa8 <prng_reseed.constprop.0+0x78>)
 8006a7a:	446b      	add	r3, sp
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	a90a      	add	r1, sp, #40	; 0x28
 8006a80:	f00c f95c 	bl	8012d3c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
 8006a84:	b960      	cbnz	r0, 8006aa0 <prng_reseed.constprop.0+0x70>
		BT_ERR("Failed to re-seed PRNG");
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <prng_reseed.constprop.0+0x7c>)
 8006a88:	9308      	str	r3, [sp, #32]
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	4808      	ldr	r0, [pc, #32]	; (8006ab0 <prng_reseed.constprop.0+0x80>)
 8006a90:	4623      	mov	r3, r4
 8006a92:	aa07      	add	r2, sp, #28
 8006a94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006a98:	f06f 0404 	mvn.w	r4, #4
 8006a9c:	f7fc fa5e 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		return -EIO;
	}

	return 0;
}
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	b013      	add	sp, #76	; 0x4c
 8006aa4:	bd30      	pop	{r4, r5, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000d30 	.word	0x20000d30
 8006aac:	08018545 	.word	0x08018545
 8006ab0:	08015b34 	.word	0x08015b34

08006ab4 <prng_init>:

int prng_init(void)
{
 8006ab4:	b530      	push	{r4, r5, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
 8006ab6:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <prng_init+0x64>)
 8006ab8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
 8006abc:	2b00      	cmp	r3, #0
{
 8006abe:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
 8006ac0:	da27      	bge.n	8006b12 <prng_init+0x5e>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 8006ac2:	aa01      	add	r2, sp, #4
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f242 0018 	movw	r0, #8216	; 0x2018
 8006aca:	f7fe fbf1 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (ret) {
 8006ace:	4604      	mov	r4, r0
 8006ad0:	b9c0      	cbnz	r0, 8006b04 <prng_init+0x50>
		return ret;
	}

	rp = (void *)rsp->data;
 8006ad2:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
 8006ad4:	4811      	ldr	r0, [pc, #68]	; (8006b1c <prng_init+0x68>)
 8006ad6:	6899      	ldr	r1, [r3, #8]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	3101      	adds	r1, #1
 8006adc:	f00c f90e 	bl	8012cfc <tc_hmac_prng_init>
 8006ae0:	4605      	mov	r5, r0

	net_buf_unref(rsp);
 8006ae2:	9801      	ldr	r0, [sp, #4]
 8006ae4:	f005 fa1a 	bl	800bf1c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
 8006ae8:	b97d      	cbnz	r5, 8006b0a <prng_init+0x56>
		BT_ERR("Failed to initialize PRNG");
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <prng_init+0x6c>)
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	2302      	movs	r3, #2
 8006af0:	9305      	str	r3, [sp, #20]
 8006af2:	480c      	ldr	r0, [pc, #48]	; (8006b24 <prng_init+0x70>)
 8006af4:	4623      	mov	r3, r4
 8006af6:	aa05      	add	r2, sp, #20
 8006af8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 8006afc:	f06f 0404 	mvn.w	r4, #4
 8006b00:	f7fc fa2c 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
 8006b04:	4620      	mov	r0, r4
 8006b06:	b009      	add	sp, #36	; 0x24
 8006b08:	bd30      	pop	{r4, r5, pc}
	return prng_reseed(&prng);
 8006b0a:	f7ff ff91 	bl	8006a30 <prng_reseed.constprop.0>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	e7f8      	b.n	8006b04 <prng_init+0x50>
		return -ENOTSUP;
 8006b12:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8006b16:	e7f5      	b.n	8006b04 <prng_init+0x50>
 8006b18:	20000000 	.word	0x20000000
 8006b1c:	20000d30 	.word	0x20000d30
 8006b20:	0801855c 	.word	0x0801855c
 8006b24:	08015b34 	.word	0x08015b34

08006b28 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
 8006b28:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <bt_rand+0x2c>)
{
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
 8006b30:	f00c f91d 	bl	8012d6e <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d107      	bne.n	8006b48 <bt_rand+0x20>
		ret = prng_reseed(&prng);
 8006b38:	f7ff ff7a 	bl	8006a30 <prng_reseed.constprop.0>
		if (ret) {
 8006b3c:	b948      	cbnz	r0, 8006b52 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
 8006b3e:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <bt_rand+0x2c>)
 8006b40:	4629      	mov	r1, r5
 8006b42:	4620      	mov	r0, r4
 8006b44:	f00c f913 	bl	8012d6e <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
 8006b48:	2801      	cmp	r0, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	f06f 0004 	mvnne.w	r0, #4
 8006b50:	2000      	moveq	r0, #0
	}

	return -EIO;
}
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20000d30 	.word	0x20000d30

08006b58 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
 8006b58:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
 8006b5a:	4904      	ldr	r1, [pc, #16]	; (8006b6c <bt_pub_key_is_debug+0x14>)
 8006b5c:	2240      	movs	r2, #64	; 0x40
 8006b5e:	f00c f985 	bl	8012e6c <memcmp>
}
 8006b62:	fab0 f080 	clz	r0, r0
 8006b66:	0940      	lsrs	r0, r0, #5
 8006b68:	bd08      	pop	{r3, pc}
 8006b6a:	bf00      	nop
 8006b6c:	0801860e 	.word	0x0801860e

08006b70 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
 8006b72:	4b43      	ldr	r3, [pc, #268]	; (8006c80 <bt_pub_key_gen+0x110>)
 8006b74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006b78:	f003 0306 	and.w	r3, r3, #6
 8006b7c:	2b06      	cmp	r3, #6
{
 8006b7e:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
 8006b80:	d00f      	beq.n	8006ba2 <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
 8006b82:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <bt_pub_key_gen+0x114>)
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	2302      	movs	r3, #2
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	483f      	ldr	r0, [pc, #252]	; (8006c88 <bt_pub_key_gen+0x118>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	aa03      	add	r2, sp, #12
 8006b90:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
 8006b94:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8006b98:	f7fc f9e0 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	b007      	add	sp, #28
 8006ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d069      	beq.n	8006c7a <bt_pub_key_gen+0x10a>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006ba6:	4c39      	ldr	r4, [pc, #228]	; (8006c8c <bt_pub_key_gen+0x11c>)
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	b1a2      	cbz	r2, 8006bd6 <bt_pub_key_gen+0x66>
 8006bac:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	d10d      	bne.n	8006bce <bt_pub_key_gen+0x5e>
			BT_WARN("Callback already registered");
 8006bb2:	4b37      	ldr	r3, [pc, #220]	; (8006c90 <bt_pub_key_gen+0x120>)
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	4833      	ldr	r0, [pc, #204]	; (8006c88 <bt_pub_key_gen+0x118>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	aa03      	add	r2, sp, #12
 8006bc0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8006bc4:	f7fc f9ca 	bl	8002f5c <z_impl_z_log_msg2_static_create>
			return -EALREADY;
 8006bc8:	f06f 0677 	mvn.w	r6, #119	; 0x77
 8006bcc:	e7e6      	b.n	8006b9c <bt_pub_key_gen+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006bce:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006bd0:	b10b      	cbz	r3, 8006bd6 <bt_pub_key_gen+0x66>
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	e7eb      	b.n	8006bae <bt_pub_key_gen+0x3e>
	parent->next = child;
 8006bd6:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
 8006bd8:	6862      	ldr	r2, [r4, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
 8006bda:	1d03      	adds	r3, r0, #4
	list->head = node;
 8006bdc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 8006bde:	b902      	cbnz	r2, 8006be2 <bt_pub_key_gen+0x72>
	list->tail = node;
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	4d2c      	ldr	r5, [pc, #176]	; (8006c94 <bt_pub_key_gen+0x124>)
 8006be4:	f3bf 8f5b 	dmb	ish
 8006be8:	e855 7f00 	ldrex	r7, [r5]
 8006bec:	f047 0320 	orr.w	r3, r7, #32
 8006bf0:	e845 3200 	strex	r2, r3, [r5]
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d1f7      	bne.n	8006be8 <bt_pub_key_gen+0x78>
 8006bf8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 8006bfc:	f017 0720 	ands.w	r7, r7, #32
 8006c00:	d001      	beq.n	8006c06 <bt_pub_key_gen+0x96>
		return 0;
 8006c02:	2600      	movs	r6, #0
 8006c04:	e7ca      	b.n	8006b9c <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8006c06:	f3bf 8f5b 	dmb	ish
 8006c0a:	e855 3f00 	ldrex	r3, [r5]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	e845 3200 	strex	r2, r3, [r5]
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	d1f7      	bne.n	8006c0a <bt_pub_key_gen+0x9a>
 8006c1a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
 8006c1e:	463a      	mov	r2, r7
 8006c20:	4639      	mov	r1, r7
 8006c22:	f242 0025 	movw	r0, #8229	; 0x2025
 8006c26:	f7fe fb43 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d0e8      	beq.n	8006c02 <bt_pub_key_gen+0x92>
		BT_ERR("Sending LE P256 Public Key command failed");
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <bt_pub_key_gen+0x128>)
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	2302      	movs	r3, #2
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	4813      	ldr	r0, [pc, #76]	; (8006c88 <bt_pub_key_gen+0x118>)
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	aa03      	add	r2, sp, #12
 8006c3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006c42:	f7fc f98b 	bl	8002f5c <z_impl_z_log_msg2_static_create>
 8006c46:	f3bf 8f5b 	dmb	ish
 8006c4a:	e855 3f00 	ldrex	r3, [r5]
 8006c4e:	f023 0320 	bic.w	r3, r3, #32
 8006c52:	e845 3200 	strex	r2, r3, [r5]
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	d1f7      	bne.n	8006c4a <bt_pub_key_gen+0xda>
 8006c5a:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006c5e:	6825      	ldr	r5, [r4, #0]
 8006c60:	b13d      	cbz	r5, 8006c72 <bt_pub_key_gen+0x102>
			if (cb->func) {
 8006c62:	f855 3c04 	ldr.w	r3, [r5, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006c66:	3d04      	subs	r5, #4
			if (cb->func) {
 8006c68:	b10b      	cbz	r3, 8006c6e <bt_pub_key_gen+0xfe>
				cb->func(NULL);
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006c6e:	686d      	ldr	r5, [r5, #4]
	return node->next;
 8006c70:	e7f6      	b.n	8006c60 <bt_pub_key_gen+0xf0>
	list->head = NULL;
 8006c72:	2300      	movs	r3, #0
	list->tail = NULL;
 8006c74:	e9c4 3300 	strd	r3, r3, [r4]
		return err;
 8006c78:	e790      	b.n	8006b9c <bt_pub_key_gen+0x2c>
		return -EINVAL;
 8006c7a:	f06f 0615 	mvn.w	r6, #21
 8006c7e:	e78d      	b.n	8006b9c <bt_pub_key_gen+0x2c>
 8006c80:	20000000 	.word	0x20000000
 8006c84:	08018580 	.word	0x08018580
 8006c88:	08015b44 	.word	0x08015b44
 8006c8c:	20001610 	.word	0x20001610
 8006c90:	0801859f 	.word	0x0801859f
 8006c94:	200000c8 	.word	0x200000c8
 8006c98:	080185bb 	.word	0x080185bb

08006c9c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <bt_pub_key_get+0x18>)
 8006c9e:	f3bf 8f5b 	dmb	ish
 8006ca2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
 8006ca4:	4804      	ldr	r0, [pc, #16]	; (8006cb8 <bt_pub_key_get+0x1c>)
 8006ca6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 8006caa:	f013 0f10 	tst.w	r3, #16
}
 8006cae:	bf08      	it	eq
 8006cb0:	2000      	moveq	r0, #0
 8006cb2:	4770      	bx	lr
 8006cb4:	200000c8 	.word	0x200000c8
 8006cb8:	20001940 	.word	0x20001940

08006cbc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
 8006cbe:	4d26      	ldr	r5, [pc, #152]	; (8006d58 <bt_dh_key_gen+0x9c>)
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	428b      	cmp	r3, r1
{
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
 8006cc8:	d040      	beq.n	8006d4c <bt_dh_key_gen+0x90>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 8006cca:	b123      	cbz	r3, 8006cd6 <bt_dh_key_gen+0x1a>
		return -EBUSY;
 8006ccc:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	b007      	add	sp, #28
 8006cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd6:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <bt_dh_key_gen+0xa0>)
 8006cd8:	f3bf 8f5b 	dmb	ish
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 8006ce2:	f3c2 1740 	ubfx	r7, r2, #5, #1
 8006ce6:	0692      	lsls	r2, r2, #26
 8006ce8:	d4f0      	bmi.n	8006ccc <bt_dh_key_gen+0x10>
 8006cea:	f3bf 8f5b 	dmb	ish
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 8006cf4:	06db      	lsls	r3, r3, #27
 8006cf6:	d52c      	bpl.n	8006d52 <bt_dh_key_gen+0x96>
	dh_key_cb = cb;
 8006cf8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 8006cfa:	f242 0026 	movw	r0, #8230	; 0x2026
 8006cfe:	2140      	movs	r1, #64	; 0x40
 8006d00:	f7fe fa8e 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8006d04:	4604      	mov	r4, r0
 8006d06:	b1f0      	cbz	r0, 8006d46 <bt_dh_key_gen+0x8a>
	return net_buf_simple_add(&buf->b, len);
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	3008      	adds	r0, #8
 8006d0c:	f005 fa36 	bl	800c17c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
 8006d10:	2240      	movs	r2, #64	; 0x40
 8006d12:	4631      	mov	r1, r6
 8006d14:	f00c f8ba 	bl	8012e8c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
 8006d18:	4621      	mov	r1, r4
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	f242 0026 	movw	r0, #8230	; 0x2026
 8006d20:	f7fe fac6 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 8006d24:	4604      	mov	r4, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d0d2      	beq.n	8006cd0 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
 8006d2a:	4a0d      	ldr	r2, [pc, #52]	; (8006d60 <bt_dh_key_gen+0xa4>)
		dh_key_cb = NULL;
 8006d2c:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
 8006d2e:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8006d32:	2203      	movs	r2, #3
		dh_key_cb = NULL;
 8006d34:	602b      	str	r3, [r5, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
 8006d36:	9203      	str	r2, [sp, #12]
 8006d38:	480a      	ldr	r0, [pc, #40]	; (8006d64 <bt_dh_key_gen+0xa8>)
 8006d3a:	aa03      	add	r2, sp, #12
 8006d3c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8006d40:	f7fc f90c 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		return err;
 8006d44:	e7c4      	b.n	8006cd0 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
 8006d46:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8006d4a:	e7ee      	b.n	8006d2a <bt_dh_key_gen+0x6e>
		return -EALREADY;
 8006d4c:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8006d50:	e7be      	b.n	8006cd0 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
 8006d52:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8006d56:	e7bb      	b.n	8006cd0 <bt_dh_key_gen+0x14>
 8006d58:	2000160c 	.word	0x2000160c
 8006d5c:	200000c8 	.word	0x200000c8
 8006d60:	080185e5 	.word	0x080185e5
 8006d64:	08015b44 	.word	0x08015b44

08006d68 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8006d6a:	4c1b      	ldr	r4, [pc, #108]	; (8006dd8 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
 8006d6c:	6886      	ldr	r6, [r0, #8]
 8006d6e:	f3bf 8f5b 	dmb	ish
 8006d72:	e854 3f00 	ldrex	r3, [r4]
 8006d76:	f023 0320 	bic.w	r3, r3, #32
 8006d7a:	e844 3200 	strex	r2, r3, [r4]
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d1f7      	bne.n	8006d72 <bt_hci_evt_le_pkey_complete+0xa>
 8006d82:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
 8006d86:	7833      	ldrb	r3, [r6, #0]
 8006d88:	b983      	cbnz	r3, 8006dac <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
 8006d8a:	4814      	ldr	r0, [pc, #80]	; (8006ddc <bt_hci_evt_le_pkey_complete+0x74>)
 8006d8c:	2240      	movs	r2, #64	; 0x40
 8006d8e:	1c71      	adds	r1, r6, #1
 8006d90:	f00c f87c 	bl	8012e8c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8006d94:	f3bf 8f5b 	dmb	ish
 8006d98:	e854 3f00 	ldrex	r3, [r4]
 8006d9c:	f043 0310 	orr.w	r3, r3, #16
 8006da0:	e844 3200 	strex	r2, r3, [r4]
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d1f7      	bne.n	8006d98 <bt_hci_evt_le_pkey_complete+0x30>
 8006da8:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006dac:	4d0c      	ldr	r5, [pc, #48]	; (8006de0 <bt_hci_evt_le_pkey_complete+0x78>)
 8006dae:	682c      	ldr	r4, [r5, #0]
 8006db0:	b16c      	cbz	r4, 8006dce <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
 8006db2:	4f0a      	ldr	r7, [pc, #40]	; (8006ddc <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006db4:	3c04      	subs	r4, #4
		if (cb->func) {
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	b12b      	cbz	r3, 8006dc6 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
 8006dba:	7832      	ldrb	r2, [r6, #0]
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	bf0c      	ite	eq
 8006dc0:	4638      	moveq	r0, r7
 8006dc2:	2000      	movne	r0, #0
 8006dc4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006dc6:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
 8006dc8:	b10c      	cbz	r4, 8006dce <bt_hci_evt_le_pkey_complete+0x66>
 8006dca:	3c04      	subs	r4, #4
 8006dcc:	e7f3      	b.n	8006db6 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
 8006dce:	2300      	movs	r3, #0
	list->tail = NULL;
 8006dd0:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200000c8 	.word	0x200000c8
 8006ddc:	20001940 	.word	0x20001940
 8006de0:	20001610 	.word	0x20001610

08006de4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
 8006de4:	4905      	ldr	r1, [pc, #20]	; (8006dfc <bt_hci_evt_le_dhkey_complete+0x18>)
 8006de6:	680b      	ldr	r3, [r1, #0]
 8006de8:	b133      	cbz	r3, 8006df8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
 8006dea:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
 8006dec:	2000      	movs	r0, #0
 8006dee:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
 8006df0:	7811      	ldrb	r1, [r2, #0]
 8006df2:	b901      	cbnz	r1, 8006df6 <bt_hci_evt_le_dhkey_complete+0x12>
 8006df4:	1c50      	adds	r0, r2, #1
 8006df6:	4718      	bx	r3
	}
}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	2000160c 	.word	0x2000160c

08006e00 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
 8006e00:	2300      	movs	r3, #0
	tx->user_data = NULL;
 8006e02:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
 8006e06:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
 8006e08:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
 8006e0a:	4801      	ldr	r0, [pc, #4]	; (8006e10 <tx_free+0x10>)
 8006e0c:	f00e bad0 	b.w	80153b0 <k_queue_append>
 8006e10:	20000608 	.word	0x20000608

08006e14 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <notify_connected+0x5c>)
{
 8006e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
 8006e1a:	681d      	ldr	r5, [r3, #0]
{
 8006e1c:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 8006e1e:	b9c5      	cbnz	r5, 8006e52 <notify_connected+0x3e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8006e20:	4e14      	ldr	r6, [pc, #80]	; (8006e74 <notify_connected+0x60>)
 8006e22:	4d15      	ldr	r5, [pc, #84]	; (8006e78 <notify_connected+0x64>)
 8006e24:	4f15      	ldr	r7, [pc, #84]	; (8006e7c <notify_connected+0x68>)
 8006e26:	46b0      	mov	r8, r6
 8006e28:	42b5      	cmp	r5, r6
 8006e2a:	d90e      	bls.n	8006e4a <notify_connected+0x36>
 8006e2c:	4914      	ldr	r1, [pc, #80]	; (8006e80 <notify_connected+0x6c>)
 8006e2e:	4815      	ldr	r0, [pc, #84]	; (8006e84 <notify_connected+0x70>)
 8006e30:	f240 5312 	movw	r3, #1298	; 0x512
 8006e34:	463a      	mov	r2, r7
 8006e36:	f00b fa37 	bl	80122a8 <assert_print>
 8006e3a:	4813      	ldr	r0, [pc, #76]	; (8006e88 <notify_connected+0x74>)
 8006e3c:	f00b fa34 	bl	80122a8 <assert_print>
 8006e40:	f240 5112 	movw	r1, #1298	; 0x512
 8006e44:	4638      	mov	r0, r7
 8006e46:	f00b fa28 	bl	801229a <assert_post_action>
 8006e4a:	4545      	cmp	r5, r8
 8006e4c:	d308      	bcc.n	8006e60 <notify_connected+0x4c>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
 8006e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->connected) {
 8006e52:	682b      	ldr	r3, [r5, #0]
 8006e54:	b113      	cbz	r3, 8006e5c <notify_connected+0x48>
			cb->connected(conn, conn->err);
 8006e56:	7b21      	ldrb	r1, [r4, #12]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 8006e5c:	69ad      	ldr	r5, [r5, #24]
 8006e5e:	e7de      	b.n	8006e1e <notify_connected+0xa>
		if (cb->connected) {
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b113      	cbz	r3, 8006e6a <notify_connected+0x56>
			cb->connected(conn, conn->err);
 8006e64:	7b21      	ldrb	r1, [r4, #12]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8006e6a:	351c      	adds	r5, #28
 8006e6c:	e7dc      	b.n	8006e28 <notify_connected+0x14>
 8006e6e:	bf00      	nop
 8006e70:	20001624 	.word	0x20001624
 8006e74:	08015ae4 	.word	0x08015ae4
 8006e78:	08015ac8 	.word	0x08015ac8
 8006e7c:	0801864e 	.word	0x0801864e
 8006e80:	0801867e 	.word	0x0801867e
 8006e84:	08016836 	.word	0x08016836
 8006e88:	08018699 	.word	0x08018699

08006e8c <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
 8006e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_WARN("Unable to allocate buffer within timeout");
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <bt_conn_create_pdu_timeout.part.0+0x20>)
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	4807      	ldr	r0, [pc, #28]	; (8006eb0 <bt_conn_create_pdu_timeout.part.0+0x24>)
 8006e94:	2302      	movs	r3, #2
 8006e96:	aa03      	add	r2, sp, #12
 8006e98:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	f00c fb93 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
}
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	b007      	add	sp, #28
 8006ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eaa:	bf00      	nop
 8006eac:	080186b8 	.word	0x080186b8
 8006eb0:	08015b2c 	.word	0x08015b2c

08006eb4 <send_frag>:
{
 8006eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
 8006eb8:	694d      	ldr	r5, [r1, #20]
{
 8006eba:	b087      	sub	sp, #28
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	4691      	mov	r9, r2
 8006ec2:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	484c      	ldr	r0, [pc, #304]	; (8006ffc <send_frag+0x148>)
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ece:	f008 f801 	bl	800eed4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
 8006ed2:	7b63      	ldrb	r3, [r4, #13]
 8006ed4:	2b07      	cmp	r3, #7
 8006ed6:	d151      	bne.n	8006f7c <send_frag+0xc8>
	__asm__ volatile(
 8006ed8:	f04f 0310 	mov.w	r3, #16
 8006edc:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee0:	f383 8812 	msr	BASEPRI_MAX, r3
 8006ee4:	f3bf 8f6f 	isb	sy
	if (tx) {
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	d05a      	beq.n	8006fa2 <send_frag+0xee>
	parent->next = child;
 8006eec:	2300      	movs	r3, #0
 8006eee:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
 8006ef0:	69a3      	ldr	r3, [r4, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d152      	bne.n	8006f9c <send_frag+0xe8>
	list->head = node;
 8006ef6:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
 8006efa:	f382 8811 	msr	BASEPRI, r2
 8006efe:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
 8006f02:	2104      	movs	r1, #4
 8006f04:	f106 0008 	add.w	r0, r6, #8
 8006f08:	f005 f8d4 	bl	800c0b4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 8006f0c:	8823      	ldrh	r3, [r4, #0]
 8006f0e:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
 8006f12:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8006f16:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 8006f18:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
 8006f20:	2302      	movs	r3, #2
 8006f22:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7fe fbe5 	bl	80056f4 <bt_send>
	if (err) {
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d064      	beq.n	8006ff8 <send_frag+0x144>
		BT_ERR("Unable to send to driver (err %d)", err);
 8006f2e:	4b34      	ldr	r3, [pc, #208]	; (8007000 <send_frag+0x14c>)
 8006f30:	aa03      	add	r2, sp, #12
 8006f32:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8006f36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	4831      	ldr	r0, [pc, #196]	; (8007004 <send_frag+0x150>)
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	f00c fb42 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
 8006f44:	f04f 0310 	mov.w	r3, #16
 8006f48:	f3ef 8911 	mrs	r9, BASEPRI
 8006f4c:	f383 8812 	msr	BASEPRI_MAX, r3
 8006f50:	f3bf 8f6f 	isb	sy
		if (tx) {
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d03a      	beq.n	8006fce <send_frag+0x11a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006f58:	6963      	ldr	r3, [r4, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	b153      	cbz	r3, 8006f74 <send_frag+0xc0>
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	d132      	bne.n	8006fc8 <send_frag+0x114>
Z_GENLIST_REMOVE(slist, snode)
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	bb52      	cbnz	r2, 8006fbc <send_frag+0x108>
 8006f66:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
 8006f68:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
 8006f6a:	4295      	cmp	r5, r2
 8006f6c:	d100      	bne.n	8006f70 <send_frag+0xbc>
	list->tail = node;
 8006f6e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
 8006f70:	2300      	movs	r3, #0
 8006f72:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
 8006f74:	f389 8811 	msr	BASEPRI, r9
 8006f78:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 8006f7c:	481f      	ldr	r0, [pc, #124]	; (8006ffc <send_frag+0x148>)
 8006f7e:	f007 ff65 	bl	800ee4c <z_impl_k_sem_give>
	if (tx) {
 8006f82:	b115      	cbz	r5, 8006f8a <send_frag+0xd6>
		tx_free(tx);
 8006f84:	4628      	mov	r0, r5
 8006f86:	f7ff ff3b 	bl	8006e00 <tx_free>
	if (always_consume) {
 8006f8a:	b11f      	cbz	r7, 8006f94 <send_frag+0xe0>
		net_buf_unref(buf);
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f004 ffc5 	bl	800bf1c <net_buf_unref>
	return false;
 8006f92:	2700      	movs	r7, #0
}
 8006f94:	4638      	mov	r0, r7
 8006f96:	b007      	add	sp, #28
 8006f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f9c:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8006f9e:	61a5      	str	r5, [r4, #24]
}
 8006fa0:	e7ab      	b.n	8006efa <send_frag+0x46>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
 8006fa2:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
 8006fa4:	b133      	cbz	r3, 8006fb4 <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
 8006fa6:	f103 080c 	add.w	r8, r3, #12
 8006faa:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
 8006fac:	3301      	adds	r3, #1
 8006fae:	f8c8 3000 	str.w	r3, [r8]
 8006fb2:	e7a2      	b.n	8006efa <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
 8006fb4:	69e3      	ldr	r3, [r4, #28]
 8006fb6:	f104 081c 	add.w	r8, r4, #28
 8006fba:	e7f7      	b.n	8006fac <send_frag+0xf8>
	parent->next = child;
 8006fbc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006fbe:	69a3      	ldr	r3, [r4, #24]
 8006fc0:	429d      	cmp	r5, r3
	list->tail = node;
 8006fc2:	bf08      	it	eq
 8006fc4:	61a2      	streq	r2, [r4, #24]
}
 8006fc6:	e7d3      	b.n	8006f70 <send_frag+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006fc8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	e7c6      	b.n	8006f5c <send_frag+0xa8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
 8006fce:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd2:	b95b      	cbnz	r3, 8006fec <send_frag+0x138>
 8006fd4:	490c      	ldr	r1, [pc, #48]	; (8007008 <send_frag+0x154>)
 8006fd6:	480d      	ldr	r0, [pc, #52]	; (800700c <send_frag+0x158>)
 8006fd8:	4a0d      	ldr	r2, [pc, #52]	; (8007010 <send_frag+0x15c>)
 8006fda:	f44f 7304 	mov.w	r3, #528	; 0x210
 8006fde:	f00b f963 	bl	80122a8 <assert_print>
 8006fe2:	480b      	ldr	r0, [pc, #44]	; (8007010 <send_frag+0x15c>)
 8006fe4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006fe8:	f00b f957 	bl	801229a <assert_post_action>
			(*pending_no_cb)--;
 8006fec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	f8c8 3000 	str.w	r3, [r8]
 8006ff6:	e7bd      	b.n	8006f74 <send_frag+0xc0>
	return true;
 8006ff8:	2701      	movs	r7, #1
 8006ffa:	e7cb      	b.n	8006f94 <send_frag+0xe0>
 8006ffc:	20000100 	.word	0x20000100
 8007000:	08018154 	.word	0x08018154
 8007004:	08015b2c 	.word	0x08015b2c
 8007008:	080186e1 	.word	0x080186e1
 800700c:	08016836 	.word	0x08016836
 8007010:	0801864e 	.word	0x0801864e

08007014 <bt_conn_get_pkts>:
}
 8007014:	4800      	ldr	r0, [pc, #0]	; (8007018 <bt_conn_get_pkts+0x4>)
 8007016:	4770      	bx	lr
 8007018:	20000100 	.word	0x20000100

0800701c <bt_conn_new>:
{
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
 8007020:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007022:	2501      	movs	r5, #1
 8007024:	428b      	cmp	r3, r1
 8007026:	d102      	bne.n	800702e <bt_conn_new+0x12>
		return NULL;
 8007028:	2400      	movs	r4, #0
}
 800702a:	4620      	mov	r0, r4
 800702c:	bd38      	pop	{r3, r4, r5, pc}
 800702e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
 8007032:	f3bf 8f5b 	dmb	ish
 8007036:	e852 0f00 	ldrex	r0, [r2]
 800703a:	2800      	cmp	r0, #0
 800703c:	d104      	bne.n	8007048 <bt_conn_new+0x2c>
 800703e:	e842 5c00 	strex	ip, r5, [r2]
 8007042:	f1bc 0f00 	cmp.w	ip, #0
 8007046:	d1f6      	bne.n	8007036 <bt_conn_new+0x1a>
 8007048:	f3bf 8f5b 	dmb	ish
 800704c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
 8007050:	d002      	beq.n	8007058 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
 8007052:	3301      	adds	r3, #1
 8007054:	4604      	mov	r4, r0
 8007056:	e7e5      	b.n	8007024 <bt_conn_new+0x8>
	if (!conn) {
 8007058:	2c00      	cmp	r4, #0
 800705a:	d0e6      	beq.n	800702a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
 800705c:	22c0      	movs	r2, #192	; 0xc0
 800705e:	2100      	movs	r1, #0
 8007060:	4620      	mov	r0, r4
 8007062:	f00b ff1e 	bl	8012ea2 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
 8007066:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800706a:	4904      	ldr	r1, [pc, #16]	; (800707c <bt_conn_new+0x60>)
 800706c:	f008 fac6 	bl	800f5fc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
 8007070:	4903      	ldr	r1, [pc, #12]	; (8007080 <bt_conn_new+0x64>)
 8007072:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007076:	f008 f9bd 	bl	800f3f4 <k_work_init>
	return conn;
 800707a:	e7d6      	b.n	800702a <bt_conn_new+0xe>
 800707c:	08007ac1 	.word	0x08007ac1
 8007080:	08013615 	.word	0x08013615

08007084 <conn_cleanup>:
{
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 8007088:	f100 0638 	add.w	r6, r0, #56	; 0x38
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	4630      	mov	r0, r6
 8007092:	f004 feb1 	bl	800bdf8 <net_buf_get>
 8007096:	4605      	mov	r5, r0
 8007098:	bb48      	cbnz	r0, 80070ee <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
 800709a:	6963      	ldr	r3, [r4, #20]
 800709c:	b173      	cbz	r3, 80070bc <conn_cleanup+0x38>
 800709e:	4918      	ldr	r1, [pc, #96]	; (8007100 <conn_cleanup+0x7c>)
 80070a0:	4a18      	ldr	r2, [pc, #96]	; (8007104 <conn_cleanup+0x80>)
 80070a2:	4819      	ldr	r0, [pc, #100]	; (8007108 <conn_cleanup+0x84>)
 80070a4:	f240 2393 	movw	r3, #659	; 0x293
 80070a8:	f00b f8fe 	bl	80122a8 <assert_print>
 80070ac:	4817      	ldr	r0, [pc, #92]	; (800710c <conn_cleanup+0x88>)
 80070ae:	f00b f8fb 	bl	80122a8 <assert_print>
 80070b2:	4814      	ldr	r0, [pc, #80]	; (8007104 <conn_cleanup+0x80>)
 80070b4:	f240 2193 	movw	r1, #659	; 0x293
 80070b8:	f00b f8ef 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
 80070bc:	69e3      	ldr	r3, [r4, #28]
 80070be:	b15b      	cbz	r3, 80070d8 <conn_cleanup+0x54>
 80070c0:	4913      	ldr	r1, [pc, #76]	; (8007110 <conn_cleanup+0x8c>)
 80070c2:	4811      	ldr	r0, [pc, #68]	; (8007108 <conn_cleanup+0x84>)
 80070c4:	4a0f      	ldr	r2, [pc, #60]	; (8007104 <conn_cleanup+0x80>)
 80070c6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80070ca:	f00b f8ed 	bl	80122a8 <assert_print>
 80070ce:	480d      	ldr	r0, [pc, #52]	; (8007104 <conn_cleanup+0x80>)
 80070d0:	f44f 7125 	mov.w	r1, #660	; 0x294
 80070d4:	f00b f8e1 	bl	801229a <assert_post_action>
	bt_conn_reset_rx_state(conn);
 80070d8:	4620      	mov	r0, r4
 80070da:	f00c fa9e 	bl	801361a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
 80070de:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80070e2:	2200      	movs	r2, #0
}
 80070e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
 80070e8:	2300      	movs	r3, #0
 80070ea:	f008 bbab 	b.w	800f844 <k_work_reschedule>
		if (tx_data(buf)->tx) {
 80070ee:	6968      	ldr	r0, [r5, #20]
 80070f0:	b108      	cbz	r0, 80070f6 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
 80070f2:	f7ff fe85 	bl	8006e00 <tx_free>
		net_buf_unref(buf);
 80070f6:	4628      	mov	r0, r5
 80070f8:	f004 ff10 	bl	800bf1c <net_buf_unref>
 80070fc:	e7c6      	b.n	800708c <conn_cleanup+0x8>
 80070fe:	bf00      	nop
 8007100:	080186f4 	.word	0x080186f4
 8007104:	0801864e 	.word	0x0801864e
 8007108:	08016836 	.word	0x08016836
 800710c:	0801871a 	.word	0x0801871a
 8007110:	0801872f 	.word	0x0801872f

08007114 <bt_conn_recv>:
{
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	b087      	sub	sp, #28
 8007118:	4616      	mov	r6, r2
 800711a:	af00      	add	r7, sp, #0
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
	tx_notify(conn);
 8007120:	f00c fa55 	bl	80135ce <tx_notify>
	switch (flags) {
 8007124:	2e01      	cmp	r6, #1
 8007126:	d033      	beq.n	8007190 <bt_conn_recv+0x7c>
 8007128:	2e02      	cmp	r6, #2
 800712a:	d16c      	bne.n	8007206 <bt_conn_recv+0xf2>
		if (conn->rx) {
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	b163      	cbz	r3, 800714a <bt_conn_recv+0x36>
			BT_ERR("Unexpected first L2CAP frame");
 8007130:	4b3d      	ldr	r3, [pc, #244]	; (8007228 <bt_conn_recv+0x114>)
 8007132:	483e      	ldr	r0, [pc, #248]	; (800722c <bt_conn_recv+0x118>)
 8007134:	f107 020c 	add.w	r2, r7, #12
 8007138:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800713c:	e9c7 6303 	strd	r6, r3, [r7, #12]
 8007140:	f00c fa42 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
 8007144:	4620      	mov	r0, r4
 8007146:	f00c fa68 	bl	801361a <bt_conn_reset_rx_state>
		conn->rx = buf;
 800714a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
 800714c:	6921      	ldr	r1, [r4, #16]
 800714e:	8988      	ldrh	r0, [r1, #12]
 8007150:	2801      	cmp	r0, #1
 8007152:	d933      	bls.n	80071bc <bt_conn_recv+0xa8>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
 8007154:	688a      	ldr	r2, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
 8007156:	7855      	ldrb	r5, [r2, #1]
 8007158:	7813      	ldrb	r3, [r2, #0]
 800715a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800715e:	3304      	adds	r3, #4
 8007160:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
 8007162:	4298      	cmp	r0, r3
 8007164:	d32a      	bcc.n	80071bc <bt_conn_recv+0xa8>
	if (conn->rx->len > acl_total_len) {
 8007166:	d958      	bls.n	800721a <bt_conn_recv+0x106>
		BT_ERR("ACL len mismatch (%u > %u)",
 8007168:	466d      	mov	r5, sp
 800716a:	b088      	sub	sp, #32
 800716c:	466a      	mov	r2, sp
 800716e:	4930      	ldr	r1, [pc, #192]	; (8007230 <bt_conn_recv+0x11c>)
 8007170:	6193      	str	r3, [r2, #24]
 8007172:	2304      	movs	r3, #4
 8007174:	e9c2 1004 	strd	r1, r0, [r2, #16]
 8007178:	f842 3f0c 	str.w	r3, [r2, #12]!
 800717c:	482b      	ldr	r0, [pc, #172]	; (800722c <bt_conn_recv+0x118>)
 800717e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8007182:	f00c fa21 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
 8007186:	4620      	mov	r0, r4
 8007188:	46ad      	mov	sp, r5
 800718a:	f00c fa46 	bl	801361a <bt_conn_reset_rx_state>
		return;
 800718e:	e015      	b.n	80071bc <bt_conn_recv+0xa8>
		if (!conn->rx) {
 8007190:	6920      	ldr	r0, [r4, #16]
 8007192:	b970      	cbnz	r0, 80071b2 <bt_conn_recv+0x9e>
			BT_ERR("Unexpected L2CAP continuation");
 8007194:	4b27      	ldr	r3, [pc, #156]	; (8007234 <bt_conn_recv+0x120>)
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	2302      	movs	r3, #2
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	f107 020c 	add.w	r2, r7, #12
 80071a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
 80071a4:	4821      	ldr	r0, [pc, #132]	; (800722c <bt_conn_recv+0x118>)
 80071a6:	f00c fa0f 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
 80071aa:	4620      	mov	r0, r4
 80071ac:	f00c fa35 	bl	801361a <bt_conn_reset_rx_state>
 80071b0:	e001      	b.n	80071b6 <bt_conn_recv+0xa2>
		if (!buf->len) {
 80071b2:	89ae      	ldrh	r6, [r5, #12]
 80071b4:	b92e      	cbnz	r6, 80071c2 <bt_conn_recv+0xae>
		net_buf_unref(buf);
 80071b6:	4628      	mov	r0, r5
 80071b8:	f004 feb0 	bl	800bf1c <net_buf_unref>
}
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
 80071c2:	3008      	adds	r0, #8
 80071c4:	f00d fe59 	bl	8014e7a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
 80071c8:	4286      	cmp	r6, r0
 80071ca:	d912      	bls.n	80071f2 <bt_conn_recv+0xde>
			BT_ERR("Not enough buffer space for L2CAP data");
 80071cc:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <bt_conn_recv+0x124>)
 80071ce:	4817      	ldr	r0, [pc, #92]	; (800722c <bt_conn_recv+0x118>)
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	f107 020c 	add.w	r2, r7, #12
 80071d6:	2302      	movs	r3, #2
 80071d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	f00c f9f3 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
 80071e2:	2200      	movs	r2, #0
 80071e4:	6921      	ldr	r1, [r4, #16]
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 ff18 	bl	800801c <bt_l2cap_recv>
			conn->rx = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
 80071f0:	e7e1      	b.n	80071b6 <bt_conn_recv+0xa2>
	return net_buf_simple_add_mem(&buf->b, mem, len);
 80071f2:	6920      	ldr	r0, [r4, #16]
 80071f4:	89aa      	ldrh	r2, [r5, #12]
 80071f6:	68a9      	ldr	r1, [r5, #8]
 80071f8:	3008      	adds	r0, #8
 80071fa:	f00d fe46 	bl	8014e8a <net_buf_simple_add_mem>
		net_buf_unref(buf);
 80071fe:	4628      	mov	r0, r5
 8007200:	f004 fe8c 	bl	800bf1c <net_buf_unref>
		break;
 8007204:	e7a2      	b.n	800714c <bt_conn_recv+0x38>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <bt_conn_recv+0x128>)
	switch (flags) {
 8007208:	e9c7 3604 	strd	r3, r6, [r7, #16]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
 800720c:	2303      	movs	r3, #3
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	f107 020c 	add.w	r2, r7, #12
 8007214:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8007218:	e7c4      	b.n	80071a4 <bt_conn_recv+0x90>
	conn->rx = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
 800721e:	2201      	movs	r2, #1
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fefb 	bl	800801c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
 8007226:	e7c9      	b.n	80071bc <bt_conn_recv+0xa8>
 8007228:	08018748 	.word	0x08018748
 800722c:	08015b2c 	.word	0x08015b2c
 8007230:	080187c8 	.word	0x080187c8
 8007234:	08018765 	.word	0x08018765
 8007238:	08018783 	.word	0x08018783
 800723c:	080187aa 	.word	0x080187aa

08007240 <bt_conn_send_cb>:
{
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
 8007246:	7b43      	ldrb	r3, [r0, #13]
 8007248:	2b07      	cmp	r3, #7
{
 800724a:	b086      	sub	sp, #24
 800724c:	4605      	mov	r5, r0
 800724e:	460e      	mov	r6, r1
 8007250:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
 8007252:	d00c      	beq.n	800726e <bt_conn_send_cb+0x2e>
		BT_ERR("not connected!");
 8007254:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <bt_conn_send_cb+0xb0>)
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	4826      	ldr	r0, [pc, #152]	; (80072f4 <bt_conn_send_cb+0xb4>)
 800725a:	2302      	movs	r3, #2
 800725c:	aa03      	add	r2, sp, #12
 800725e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007262:	9303      	str	r3, [sp, #12]
 8007264:	f00c f9b0 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
 8007268:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 800726c:	e01d      	b.n	80072aa <bt_conn_send_cb+0x6a>
	if (cb) {
 800726e:	2a00      	cmp	r2, #0
 8007270:	d03b      	beq.n	80072ea <bt_conn_send_cb+0xaa>
	return z_impl_z_current_get();
 8007272:	f009 fc37 	bl	8010ae4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
 8007276:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <bt_conn_send_cb+0xb8>)
 8007278:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
 800727a:	4820      	ldr	r0, [pc, #128]	; (80072fc <bt_conn_send_cb+0xbc>)
 800727c:	bf07      	ittee	eq
 800727e:	2200      	moveq	r2, #0
 8007280:	2300      	moveq	r3, #0
 8007282:	f04f 32ff 	movne.w	r2, #4294967295
 8007286:	f04f 33ff 	movne.w	r3, #4294967295
 800728a:	f007 fd73 	bl	800ed74 <z_impl_k_queue_get>
 800728e:	4604      	mov	r4, r0
		if (!tx) {
 8007290:	b970      	cbnz	r0, 80072b0 <bt_conn_send_cb+0x70>
			BT_ERR("Unable to allocate TX context");
 8007292:	4b1b      	ldr	r3, [pc, #108]	; (8007300 <bt_conn_send_cb+0xc0>)
 8007294:	4817      	ldr	r0, [pc, #92]	; (80072f4 <bt_conn_send_cb+0xb4>)
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	aa03      	add	r2, sp, #12
 800729a:	2302      	movs	r3, #2
 800729c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	f00c f991 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
 80072a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80072aa:	b006      	add	sp, #24
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
 80072b0:	7b6b      	ldrb	r3, [r5, #13]
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d00d      	beq.n	80072d2 <bt_conn_send_cb+0x92>
			BT_WARN("Disconnected while allocating context");
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <bt_conn_send_cb+0xc4>)
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	480e      	ldr	r0, [pc, #56]	; (80072f4 <bt_conn_send_cb+0xb4>)
 80072bc:	2302      	movs	r3, #2
 80072be:	aa03      	add	r2, sp, #12
 80072c0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	f00c f97f 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7ff fd98 	bl	8006e00 <tx_free>
 80072d0:	e7ca      	b.n	8007268 <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
 80072d2:	2300      	movs	r3, #0
		tx->user_data = user_data;
 80072d4:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
 80072d8:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
 80072da:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
 80072dc:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80072e0:	4631      	mov	r1, r6
 80072e2:	f004 fde7 	bl	800beb4 <net_buf_put>
	return 0;
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7df      	b.n	80072aa <bt_conn_send_cb+0x6a>
		tx_data(buf)->tx = NULL;
 80072ea:	614a      	str	r2, [r1, #20]
 80072ec:	e7f6      	b.n	80072dc <bt_conn_send_cb+0x9c>
 80072ee:	bf00      	nop
 80072f0:	080187e3 	.word	0x080187e3
 80072f4:	08015b2c 	.word	0x08015b2c
 80072f8:	20001470 	.word	0x20001470
 80072fc:	20000608 	.word	0x20000608
 8007300:	080187f2 	.word	0x080187f2
 8007304:	08018810 	.word	0x08018810

08007308 <bt_conn_prepare_events>:
{
 8007308:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <bt_conn_prepare_events+0x70>)
 800730c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 800730e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
 8007310:	609a      	str	r2, [r3, #8]
{
 8007312:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 8007314:	f00a fb30 	bl	8011978 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8007318:	f3bf 8f5b 	dmb	ish
 800731c:	4b17      	ldr	r3, [pc, #92]	; (800737c <bt_conn_prepare_events+0x74>)
 800731e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007322:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
 8007326:	f104 0014 	add.w	r0, r4, #20
 800732a:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
 800732c:	b90a      	cbnz	r2, 8007332 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
 800732e:	2001      	movs	r0, #1
}
 8007330:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
 8007332:	7b5a      	ldrb	r2, [r3, #13]
 8007334:	b99a      	cbnz	r2, 800735e <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8007336:	f3bf 8f5b 	dmb	ish
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	e852 5f00 	ldrex	r5, [r2]
 8007340:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
 8007344:	e842 ce00 	strex	lr, ip, [r2]
 8007348:	f1be 0f00 	cmp.w	lr, #0
 800734c:	d1f6      	bne.n	800733c <bt_conn_prepare_events+0x34>
 800734e:	f3bf 8f5b 	dmb	ish
 8007352:	066a      	lsls	r2, r5, #25
 8007354:	d503      	bpl.n	800735e <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fe94 	bl	8007084 <conn_cleanup>
 800735c:	e7e7      	b.n	800732e <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
 800735e:	7b4b      	ldrb	r3, [r1, #13]
 8007360:	2b07      	cmp	r3, #7
 8007362:	d1e4      	bne.n	800732e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <bt_conn_prepare_events+0x78>)
 8007366:	2200      	movs	r2, #0
 8007368:	2104      	movs	r1, #4
 800736a:	f00a fb05 	bl	8011978 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
 800736e:	2301      	movs	r3, #1
 8007370:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
 8007374:	2002      	movs	r0, #2
	return ev_count;
 8007376:	e7db      	b.n	8007330 <bt_conn_prepare_events+0x28>
 8007378:	200002c0 	.word	0x200002c0
 800737c:	20000e68 	.word	0x20000e68
 8007380:	20000ea0 	.word	0x20000ea0

08007384 <bt_conn_unref>:
{
 8007384:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
 8007386:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
 800738a:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800738c:	f3bf 8f5b 	dmb	ish
 8007390:	e853 2f00 	ldrex	r2, [r3]
 8007394:	1e51      	subs	r1, r2, #1
 8007396:	e843 1000 	strex	r0, r1, [r3]
 800739a:	2800      	cmp	r0, #0
 800739c:	d1f8      	bne.n	8007390 <bt_conn_unref+0xc>
 800739e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	dc0e      	bgt.n	80073c4 <bt_conn_unref+0x40>
 80073a6:	490f      	ldr	r1, [pc, #60]	; (80073e4 <bt_conn_unref+0x60>)
 80073a8:	4a0f      	ldr	r2, [pc, #60]	; (80073e8 <bt_conn_unref+0x64>)
 80073aa:	4810      	ldr	r0, [pc, #64]	; (80073ec <bt_conn_unref+0x68>)
 80073ac:	f240 434f 	movw	r3, #1103	; 0x44f
 80073b0:	f00a ff7a 	bl	80122a8 <assert_print>
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <bt_conn_unref+0x6c>)
 80073b6:	f00a ff77 	bl	80122a8 <assert_print>
 80073ba:	480b      	ldr	r0, [pc, #44]	; (80073e8 <bt_conn_unref+0x64>)
 80073bc:	f240 414f 	movw	r1, #1103	; 0x44f
 80073c0:	f00a ff6b 	bl	801229a <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
 80073c4:	78a3      	ldrb	r3, [r4, #2]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10a      	bne.n	80073e0 <bt_conn_unref+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80073ca:	f3bf 8f5b 	dmb	ish
 80073ce:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80073d2:	f3bf 8f5b 	dmb	ish
 80073d6:	b91b      	cbnz	r3, 80073e0 <bt_conn_unref+0x5c>
}
 80073d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
 80073dc:	f7ff baba 	b.w	8006954 <bt_le_adv_resume>
}
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	bf00      	nop
 80073e4:	08018836 	.word	0x08018836
 80073e8:	0801864e 	.word	0x0801864e
 80073ec:	08016836 	.word	0x08016836
 80073f0:	0801883e 	.word	0x0801883e

080073f4 <bt_conn_lookup_handle>:
{
 80073f4:	4602      	mov	r2, r0
 80073f6:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
 80073f8:	2101      	movs	r1, #1
 80073fa:	4803      	ldr	r0, [pc, #12]	; (8007408 <bt_conn_lookup_handle+0x14>)
 80073fc:	f00c f931 	bl	8013662 <conn_lookup_handle>
}
 8007400:	2800      	cmp	r0, #0
 8007402:	bf38      	it	cc
 8007404:	2000      	movcc	r0, #0
 8007406:	bd08      	pop	{r3, pc}
 8007408:	20000e68 	.word	0x20000e68

0800740c <bt_conn_set_state>:
{
 800740c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740e:	b087      	sub	sp, #28
	if (conn->state == state) {
 8007410:	7b46      	ldrb	r6, [r0, #13]
 8007412:	428e      	cmp	r6, r1
{
 8007414:	af00      	add	r7, sp, #0
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
	if (conn->state == state) {
 800741a:	d119      	bne.n	8007450 <bt_conn_set_state+0x44>
	switch (state) {
 800741c:	2e08      	cmp	r6, #8
 800741e:	bf96      	itet	ls
 8007420:	4b6c      	ldrls	r3, [pc, #432]	; (80075d4 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
 8007422:	4b6d      	ldrhi	r3, [pc, #436]	; (80075d8 <bt_conn_set_state+0x1cc>)
 8007424:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
 8007428:	496c      	ldr	r1, [pc, #432]	; (80075dc <bt_conn_set_state+0x1d0>)
 800742a:	486d      	ldr	r0, [pc, #436]	; (80075e0 <bt_conn_set_state+0x1d4>)
 800742c:	466c      	mov	r4, sp
 800742e:	b088      	sub	sp, #32
 8007430:	466a      	mov	r2, sp
 8007432:	e9c2 1304 	strd	r1, r3, [r2, #16]
 8007436:	2302      	movs	r3, #2
 8007438:	7613      	strb	r3, [r2, #24]
 800743a:	4b6a      	ldr	r3, [pc, #424]	; (80075e4 <bt_conn_set_state+0x1d8>)
 800743c:	f842 3f0c 	str.w	r3, [r2, #12]!
 8007440:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 8007444:	f00c f8c0 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
 8007448:	46a5      	mov	sp, r4
}
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
 8007450:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
 8007452:	b926      	cbnz	r6, 800745e <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
 8007454:	7883      	ldrb	r3, [r0, #2]
 8007456:	2b08      	cmp	r3, #8
 8007458:	d001      	beq.n	800745e <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
 800745a:	f00c f8e7 	bl	801362c <bt_conn_ref>
	switch (conn->state) {
 800745e:	7b63      	ldrb	r3, [r4, #13]
 8007460:	2b08      	cmp	r3, #8
 8007462:	f200 80b4 	bhi.w	80075ce <bt_conn_set_state+0x1c2>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <bt_conn_set_state+0x60>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	080074f1 	.word	0x080074f1
 8007470:	08007491 	.word	0x08007491
 8007474:	0800744b 	.word	0x0800744b
 8007478:	0800744b 	.word	0x0800744b
 800747c:	0800744b 	.word	0x0800744b
 8007480:	0800744b 	.word	0x0800744b
 8007484:	0800744b 	.word	0x0800744b
 8007488:	080074bf 	.word	0x080074bf
 800748c:	0800744b 	.word	0x0800744b
	z_impl_k_sem_give(sem);
 8007490:	4d55      	ldr	r5, [pc, #340]	; (80075e8 <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
 8007492:	2600      	movs	r6, #0
	__asm__ volatile(
 8007494:	f04f 0310 	mov.w	r3, #16
 8007498:	f3ef 8211 	mrs	r2, BASEPRI
 800749c:	f383 8812 	msr	BASEPRI_MAX, r3
 80074a0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
 80074a4:	69e3      	ldr	r3, [r4, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d070      	beq.n	800758c <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
 80074aa:	3b01      	subs	r3, #1
 80074ac:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 80074ae:	f382 8811 	msr	BASEPRI, r2
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	4628      	mov	r0, r5
 80074b8:	f007 fcc8 	bl	800ee4c <z_impl_k_sem_give>
}
 80074bc:	e7ea      	b.n	8007494 <bt_conn_set_state+0x88>
		if (conn->type == BT_CONN_TYPE_SCO) {
 80074be:	78a3      	ldrb	r3, [r4, #2]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d0c2      	beq.n	800744a <bt_conn_set_state+0x3e>
	z_impl_k_queue_init(queue);
 80074c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80074c8:	f00d ff65 	bl	8015396 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 80074cc:	4847      	ldr	r0, [pc, #284]	; (80075ec <bt_conn_set_state+0x1e0>)
 80074ce:	2100      	movs	r1, #0
 80074d0:	f00a fbae 	bl	8011c30 <z_impl_k_poll_signal_raise>
	list->head = NULL;
 80074d4:	2300      	movs	r3, #0
	list->tail = NULL;
 80074d6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
 80074da:	78e3      	ldrb	r3, [r4, #3]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d1b4      	bne.n	800744a <bt_conn_set_state+0x3e>
			k_work_schedule(&conn->deferred_work,
 80074e0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80074e4:	2300      	movs	r3, #0
 80074e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80074ea:	f008 f92f 	bl	800f74c <k_work_schedule>
 80074ee:	e7ac      	b.n	800744a <bt_conn_set_state+0x3e>
		if (conn->type == BT_CONN_TYPE_SCO) {
 80074f0:	78a3      	ldrb	r3, [r4, #2]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d103      	bne.n	80074fe <bt_conn_set_state+0xf2>
			bt_conn_unref(conn);
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7ff ff44 	bl	8007384 <bt_conn_unref>
			break;
 80074fc:	e7a5      	b.n	800744a <bt_conn_set_state+0x3e>
		switch (old_state) {
 80074fe:	2e08      	cmp	r6, #8
 8007500:	d8a3      	bhi.n	800744a <bt_conn_set_state+0x3e>
 8007502:	a301      	add	r3, pc, #4	; (adr r3, 8007508 <bt_conn_set_state+0xfc>)
 8007504:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8007508:	08007573 	.word	0x08007573
 800750c:	0800752d 	.word	0x0800752d
 8007510:	08007565 	.word	0x08007565
 8007514:	080074f7 	.word	0x080074f7
 8007518:	080074f7 	.word	0x080074f7
 800751c:	08007565 	.word	0x08007565
 8007520:	08007565 	.word	0x08007565
 8007524:	08007573 	.word	0x08007573
 8007528:	08007573 	.word	0x08007573
			tx_notify(conn);
 800752c:	4620      	mov	r0, r4
 800752e:	f00c f84e 	bl	80135ce <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
 8007532:	78a3      	ldrb	r3, [r4, #2]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d103      	bne.n	8007540 <bt_conn_set_state+0x134>
				k_work_cancel_delayable(&conn->deferred_work);
 8007538:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800753c:	f008 f988 	bl	800f850 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8007540:	f3bf 8f5b 	dmb	ish
 8007544:	3404      	adds	r4, #4
 8007546:	e854 3f00 	ldrex	r3, [r4]
 800754a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754e:	e844 3200 	strex	r2, r3, [r4]
 8007552:	2a00      	cmp	r2, #0
 8007554:	d1f7      	bne.n	8007546 <bt_conn_set_state+0x13a>
 8007556:	f3bf 8f5b 	dmb	ish
 800755a:	2100      	movs	r1, #0
 800755c:	4823      	ldr	r0, [pc, #140]	; (80075ec <bt_conn_set_state+0x1e0>)
 800755e:	f00a fb67 	bl	8011c30 <z_impl_k_poll_signal_raise>
 8007562:	e772      	b.n	800744a <bt_conn_set_state+0x3e>
			if (conn->err) {
 8007564:	7b23      	ldrb	r3, [r4, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0c5      	beq.n	80074f6 <bt_conn_set_state+0xea>
				notify_connected(conn);
 800756a:	4620      	mov	r0, r4
 800756c:	f7ff fc52 	bl	8006e14 <notify_connected>
 8007570:	e7c1      	b.n	80074f6 <bt_conn_set_state+0xea>
			BT_WARN("Invalid (%u) old state", state);
 8007572:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <bt_conn_set_state+0x1e4>)
		BT_WARN("no valid (%u) state was set", state);
 8007574:	481a      	ldr	r0, [pc, #104]	; (80075e0 <bt_conn_set_state+0x1d4>)
 8007576:	e9c7 3504 	strd	r3, r5, [r7, #16]
 800757a:	f107 020c 	add.w	r2, r7, #12
 800757e:	2303      	movs	r3, #3
 8007580:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	f00c f81f 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
 800758a:	e75e      	b.n	800744a <bt_conn_set_state+0x3e>
Z_GENLIST_IS_EMPTY(slist)
 800758c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
 800758e:	b128      	cbz	r0, 800759c <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8007590:	69a1      	ldr	r1, [r4, #24]
 8007592:	6803      	ldr	r3, [r0, #0]
	list->head = node;
 8007594:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8007596:	4288      	cmp	r0, r1
	list->tail = node;
 8007598:	bf08      	it	eq
 800759a:	61a3      	streq	r3, [r4, #24]
 800759c:	f382 8811 	msr	BASEPRI, r2
 80075a0:	f3bf 8f6f 	isb	sy
		if (!node) {
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f43f af50 	beq.w	800744a <bt_conn_set_state+0x3e>
	__asm__ volatile(
 80075aa:	f04f 0210 	mov.w	r2, #16
 80075ae:	f3ef 8311 	mrs	r3, BASEPRI
 80075b2:	f382 8812 	msr	BASEPRI_MAX, r2
 80075b6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
 80075ba:	68c2      	ldr	r2, [r0, #12]
 80075bc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
 80075be:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
 80075c8:	f7ff fc1a 	bl	8006e00 <tx_free>
 80075cc:	e773      	b.n	80074b6 <bt_conn_set_state+0xaa>
		BT_WARN("no valid (%u) state was set", state);
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <bt_conn_set_state+0x1e8>)
 80075d0:	e7d0      	b.n	8007574 <bt_conn_set_state+0x168>
 80075d2:	bf00      	nop
 80075d4:	08016228 	.word	0x08016228
 80075d8:	0801885c 	.word	0x0801885c
 80075dc:	08018866 	.word	0x08018866
 80075e0:	08015b2c 	.word	0x08015b2c
 80075e4:	01000003 	.word	0x01000003
 80075e8:	20000100 	.word	0x20000100
 80075ec:	200002c0 	.word	0x200002c0
 80075f0:	08018877 	.word	0x08018877
 80075f4:	0801888e 	.word	0x0801888e

080075f8 <bt_conn_index>:
		index = conn - acl_conns;
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <bt_conn_index+0x34>)
{
 80075fa:	b510      	push	{r4, lr}
		index = conn - acl_conns;
 80075fc:	1a84      	subs	r4, r0, r2
 80075fe:	10e3      	asrs	r3, r4, #3
 8007600:	4c0b      	ldr	r4, [pc, #44]	; (8007630 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
 8007602:	4290      	cmp	r0, r2
		index = conn - acl_conns;
 8007604:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
 8007608:	d00e      	beq.n	8007628 <bt_conn_index+0x30>
 800760a:	490a      	ldr	r1, [pc, #40]	; (8007634 <bt_conn_index+0x3c>)
 800760c:	4a0a      	ldr	r2, [pc, #40]	; (8007638 <bt_conn_index+0x40>)
 800760e:	480b      	ldr	r0, [pc, #44]	; (800763c <bt_conn_index+0x44>)
 8007610:	f240 436d 	movw	r3, #1133	; 0x46d
 8007614:	f00a fe48 	bl	80122a8 <assert_print>
 8007618:	4809      	ldr	r0, [pc, #36]	; (8007640 <bt_conn_index+0x48>)
 800761a:	f00a fe45 	bl	80122a8 <assert_print>
 800761e:	4806      	ldr	r0, [pc, #24]	; (8007638 <bt_conn_index+0x40>)
 8007620:	f240 416d 	movw	r1, #1133	; 0x46d
 8007624:	f00a fe39 	bl	801229a <assert_post_action>
}
 8007628:	b2e0      	uxtb	r0, r4
 800762a:	bd10      	pop	{r4, pc}
 800762c:	20000e68 	.word	0x20000e68
 8007630:	c28f5c29 	.word	0xc28f5c29
 8007634:	080188aa 	.word	0x080188aa
 8007638:	0801864e 	.word	0x0801864e
 800763c:	08016836 	.word	0x08016836
 8007640:	08018973 	.word	0x08018973

08007644 <bt_conn_create_pdu_timeout>:
{
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	4617      	mov	r7, r2
 800764c:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
 800764e:	f00d fe89 	bl	8015364 <k_is_in_isr>
 8007652:	b158      	cbz	r0, 800766c <bt_conn_create_pdu_timeout+0x28>
 8007654:	490f      	ldr	r1, [pc, #60]	; (8007694 <bt_conn_create_pdu_timeout+0x50>)
 8007656:	4810      	ldr	r0, [pc, #64]	; (8007698 <bt_conn_create_pdu_timeout+0x54>)
 8007658:	4a10      	ldr	r2, [pc, #64]	; (800769c <bt_conn_create_pdu_timeout+0x58>)
 800765a:	f240 4389 	movw	r3, #1161	; 0x489
 800765e:	f00a fe23 	bl	80122a8 <assert_print>
 8007662:	480e      	ldr	r0, [pc, #56]	; (800769c <bt_conn_create_pdu_timeout+0x58>)
 8007664:	f240 4189 	movw	r1, #1161	; 0x489
 8007668:	f00a fe17 	bl	801229a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
 800766c:	480c      	ldr	r0, [pc, #48]	; (80076a0 <bt_conn_create_pdu_timeout+0x5c>)
 800766e:	463a      	mov	r2, r7
 8007670:	2c00      	cmp	r4, #0
 8007672:	bf18      	it	ne
 8007674:	4620      	movne	r0, r4
 8007676:	4633      	mov	r3, r6
 8007678:	f00d fbe7 	bl	8014e4a <net_buf_alloc_fixed>
	if (!buf) {
 800767c:	4604      	mov	r4, r0
 800767e:	b918      	cbnz	r0, 8007688 <bt_conn_create_pdu_timeout+0x44>
}
 8007680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007684:	f7ff bc02 	b.w	8006e8c <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
 8007688:	1d69      	adds	r1, r5, #5
 800768a:	3008      	adds	r0, #8
 800768c:	f004 fbe8 	bl	800be60 <net_buf_simple_reserve>
 8007690:	4620      	mov	r0, r4
 8007692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007694:	0801898d 	.word	0x0801898d
 8007698:	08016836 	.word	0x08016836
 800769c:	0801864e 	.word	0x0801864e
 80076a0:	20000640 	.word	0x20000640

080076a4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80076a8:	f3bf 8f5b 	dmb	ish
 80076ac:	6842      	ldr	r2, [r0, #4]
 80076ae:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
 80076b2:	05d2      	lsls	r2, r2, #23
{
 80076b4:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
 80076b6:	f100 0304 	add.w	r3, r0, #4
 80076ba:	d519      	bpl.n	80076f0 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
 80076bc:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
 80076c0:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
 80076c4:	4291      	cmp	r1, r2
 80076c6:	d813      	bhi.n	80076f0 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
 80076c8:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
 80076cc:	4291      	cmp	r1, r2
 80076ce:	d30f      	bcc.n	80076f0 <notify_le_param_updated+0x4c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
 80076d0:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
 80076d4:	4291      	cmp	r1, r2
 80076d6:	d10b      	bne.n	80076f0 <notify_le_param_updated+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80076d8:	f3bf 8f5b 	dmb	ish
 80076dc:	e853 2f00 	ldrex	r2, [r3]
 80076e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e4:	e843 2100 	strex	r1, r2, [r3]
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d1f7      	bne.n	80076dc <notify_le_param_updated+0x38>
 80076ec:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
 80076f0:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <notify_le_param_updated+0xbc>)
 80076f2:	681d      	ldr	r5, [r3, #0]
 80076f4:	b9c5      	cbnz	r5, 8007728 <notify_le_param_updated+0x84>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 80076f6:	4e1b      	ldr	r6, [pc, #108]	; (8007764 <notify_le_param_updated+0xc0>)
 80076f8:	4d1b      	ldr	r5, [pc, #108]	; (8007768 <notify_le_param_updated+0xc4>)
 80076fa:	4f1c      	ldr	r7, [pc, #112]	; (800776c <notify_le_param_updated+0xc8>)
 80076fc:	46b1      	mov	r9, r6
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d90e      	bls.n	8007720 <notify_le_param_updated+0x7c>
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <notify_le_param_updated+0xcc>)
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <notify_le_param_updated+0xd0>)
 8007706:	f240 535c 	movw	r3, #1372	; 0x55c
 800770a:	463a      	mov	r2, r7
 800770c:	f00a fdcc 	bl	80122a8 <assert_print>
 8007710:	4819      	ldr	r0, [pc, #100]	; (8007778 <notify_le_param_updated+0xd4>)
 8007712:	f00a fdc9 	bl	80122a8 <assert_print>
 8007716:	f240 515c 	movw	r1, #1372	; 0x55c
 800771a:	4638      	mov	r0, r7
 800771c:	f00a fdbd 	bl	801229a <assert_post_action>
 8007720:	454d      	cmp	r5, r9
 8007722:	d30d      	bcc.n	8007740 <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
 8007724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
 8007728:	68ee      	ldr	r6, [r5, #12]
 800772a:	b13e      	cbz	r6, 800773c <notify_le_param_updated+0x98>
			cb->le_param_updated(conn, conn->le.interval,
 800772c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8007730:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8007734:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
 8007738:	4620      	mov	r0, r4
 800773a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
 800773c:	69ad      	ldr	r5, [r5, #24]
 800773e:	e7d9      	b.n	80076f4 <notify_le_param_updated+0x50>
		if (cb->le_param_updated) {
 8007740:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007744:	f1b8 0f00 	cmp.w	r8, #0
 8007748:	d007      	beq.n	800775a <notify_le_param_updated+0xb6>
			cb->le_param_updated(conn, conn->le.interval,
 800774a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800774e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8007752:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
 8007756:	4620      	mov	r0, r4
 8007758:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 800775a:	351c      	adds	r5, #28
 800775c:	e7cf      	b.n	80076fe <notify_le_param_updated+0x5a>
 800775e:	bf00      	nop
 8007760:	20001624 	.word	0x20001624
 8007764:	08015ae4 	.word	0x08015ae4
 8007768:	08015ac8 	.word	0x08015ac8
 800776c:	0801864e 	.word	0x0801864e
 8007770:	0801867e 	.word	0x0801867e
 8007774:	08016836 	.word	0x08016836
 8007778:	08018699 	.word	0x08018699

0800777c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
 8007782:	4608      	mov	r0, r1
{
 8007784:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
 8007786:	f00b fd16 	bl	80131b6 <bt_le_conn_params_valid>
 800778a:	4605      	mov	r5, r0
 800778c:	b918      	cbnz	r0, 8007796 <le_param_req+0x1a>
		return false;
 800778e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <le_param_req+0x90>)
 8007798:	681e      	ldr	r6, [r3, #0]
 800779a:	b9e6      	cbnz	r6, 80077d6 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 800779c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8007820 <le_param_req+0xa4>
 80077a0:	4e1b      	ldr	r6, [pc, #108]	; (8007810 <le_param_req+0x94>)
 80077a2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007824 <le_param_req+0xa8>
 80077a6:	46c2      	mov	sl, r8
 80077a8:	4546      	cmp	r6, r8
 80077aa:	d90e      	bls.n	80077ca <le_param_req+0x4e>
 80077ac:	4919      	ldr	r1, [pc, #100]	; (8007814 <le_param_req+0x98>)
 80077ae:	481a      	ldr	r0, [pc, #104]	; (8007818 <le_param_req+0x9c>)
 80077b0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80077b4:	464a      	mov	r2, r9
 80077b6:	f00a fd77 	bl	80122a8 <assert_print>
 80077ba:	4818      	ldr	r0, [pc, #96]	; (800781c <le_param_req+0xa0>)
 80077bc:	f00a fd74 	bl	80122a8 <assert_print>
 80077c0:	f240 51a4 	movw	r1, #1444	; 0x5a4
 80077c4:	4648      	mov	r0, r9
 80077c6:	f00a fd68 	bl	801229a <assert_post_action>
 80077ca:	4556      	cmp	r6, sl
 80077cc:	d2e0      	bcs.n	8007790 <le_param_req+0x14>
		if (!cb->le_param_req) {
 80077ce:	68b3      	ldr	r3, [r6, #8]
 80077d0:	b983      	cbnz	r3, 80077f4 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 80077d2:	361c      	adds	r6, #28
 80077d4:	e7e8      	b.n	80077a8 <le_param_req+0x2c>
		if (!cb->le_param_req) {
 80077d6:	68b3      	ldr	r3, [r6, #8]
 80077d8:	b90b      	cbnz	r3, 80077de <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
 80077da:	69b6      	ldr	r6, [r6, #24]
 80077dc:	e7dd      	b.n	800779a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
 80077de:	4621      	mov	r1, r4
 80077e0:	4638      	mov	r0, r7
 80077e2:	4798      	blx	r3
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d0d2      	beq.n	800778e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
 80077e8:	4620      	mov	r0, r4
 80077ea:	f00b fce4 	bl	80131b6 <bt_le_conn_params_valid>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d1f3      	bne.n	80077da <le_param_req+0x5e>
 80077f2:	e7cc      	b.n	800778e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
 80077f4:	4621      	mov	r1, r4
 80077f6:	4638      	mov	r0, r7
 80077f8:	4798      	blx	r3
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d0c7      	beq.n	800778e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
 80077fe:	4620      	mov	r0, r4
 8007800:	f00b fcd9 	bl	80131b6 <bt_le_conn_params_valid>
 8007804:	2800      	cmp	r0, #0
 8007806:	d1e4      	bne.n	80077d2 <le_param_req+0x56>
 8007808:	e7c1      	b.n	800778e <le_param_req+0x12>
 800780a:	bf00      	nop
 800780c:	20001624 	.word	0x20001624
 8007810:	08015ac8 	.word	0x08015ac8
 8007814:	0801867e 	.word	0x0801867e
 8007818:	08016836 	.word	0x08016836
 800781c:	08018699 	.word	0x08018699
 8007820:	08015ae4 	.word	0x08015ae4
 8007824:	0801864e 	.word	0x0801864e

08007828 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
 800782c:	78c3      	ldrb	r3, [r0, #3]
{
 800782e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
 8007830:	bb03      	cbnz	r3, 8007874 <bt_conn_identity_resolved+0x4c>
		rpa = &conn->le.resp_addr;
 8007832:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
 8007836:	4b19      	ldr	r3, [pc, #100]	; (800789c <bt_conn_identity_resolved+0x74>)
 8007838:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
 800783a:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
 800783e:	b9e5      	cbnz	r5, 800787a <bt_conn_identity_resolved+0x52>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8007840:	4f17      	ldr	r7, [pc, #92]	; (80078a0 <bt_conn_identity_resolved+0x78>)
 8007842:	4d18      	ldr	r5, [pc, #96]	; (80078a4 <bt_conn_identity_resolved+0x7c>)
 8007844:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80078b4 <bt_conn_identity_resolved+0x8c>
 8007848:	46b9      	mov	r9, r7
 800784a:	42bd      	cmp	r5, r7
 800784c:	d90e      	bls.n	800786c <bt_conn_identity_resolved+0x44>
 800784e:	4916      	ldr	r1, [pc, #88]	; (80078a8 <bt_conn_identity_resolved+0x80>)
 8007850:	4816      	ldr	r0, [pc, #88]	; (80078ac <bt_conn_identity_resolved+0x84>)
 8007852:	f240 7361 	movw	r3, #1889	; 0x761
 8007856:	4642      	mov	r2, r8
 8007858:	f00a fd26 	bl	80122a8 <assert_print>
 800785c:	4814      	ldr	r0, [pc, #80]	; (80078b0 <bt_conn_identity_resolved+0x88>)
 800785e:	f00a fd23 	bl	80122a8 <assert_print>
 8007862:	f240 7161 	movw	r1, #1889	; 0x761
 8007866:	4640      	mov	r0, r8
 8007868:	f00a fd17 	bl	801229a <assert_post_action>
 800786c:	454d      	cmp	r5, r9
 800786e:	d30c      	bcc.n	800788a <bt_conn_identity_resolved+0x62>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
 8007870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rpa = &conn->le.init_addr;
 8007874:	f100 0697 	add.w	r6, r0, #151	; 0x97
 8007878:	e7dd      	b.n	8007836 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
 800787a:	692b      	ldr	r3, [r5, #16]
 800787c:	b11b      	cbz	r3, 8007886 <bt_conn_identity_resolved+0x5e>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
 800787e:	463a      	mov	r2, r7
 8007880:	4631      	mov	r1, r6
 8007882:	4620      	mov	r0, r4
 8007884:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 8007886:	69ad      	ldr	r5, [r5, #24]
 8007888:	e7d9      	b.n	800783e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
 800788a:	692b      	ldr	r3, [r5, #16]
 800788c:	b123      	cbz	r3, 8007898 <bt_conn_identity_resolved+0x70>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
 800788e:	f104 0290 	add.w	r2, r4, #144	; 0x90
 8007892:	4631      	mov	r1, r6
 8007894:	4620      	mov	r0, r4
 8007896:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8007898:	351c      	adds	r5, #28
 800789a:	e7d6      	b.n	800784a <bt_conn_identity_resolved+0x22>
 800789c:	20001624 	.word	0x20001624
 80078a0:	08015ae4 	.word	0x08015ae4
 80078a4:	08015ac8 	.word	0x08015ac8
 80078a8:	0801867e 	.word	0x0801867e
 80078ac:	08016836 	.word	0x08016836
 80078b0:	08018699 	.word	0x08018699
 80078b4:	0801864e 	.word	0x0801864e

080078b8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn->required_sec_level = conn->sec_level;
 80078bc:	7a43      	ldrb	r3, [r0, #9]
 80078be:	7283      	strb	r3, [r0, #10]
{
 80078c0:	4604      	mov	r4, r0
 80078c2:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
 80078c4:	f00c f802 	bl	80138cc <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <bt_conn_security_changed+0x6c>)
 80078ca:	681d      	ldr	r5, [r3, #0]
 80078cc:	b9cd      	cbnz	r5, 8007902 <bt_conn_security_changed+0x4a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 80078ce:	4f16      	ldr	r7, [pc, #88]	; (8007928 <bt_conn_security_changed+0x70>)
 80078d0:	4d16      	ldr	r5, [pc, #88]	; (800792c <bt_conn_security_changed+0x74>)
 80078d2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800793c <bt_conn_security_changed+0x84>
 80078d6:	46b9      	mov	r9, r7
 80078d8:	42bd      	cmp	r5, r7
 80078da:	d90e      	bls.n	80078fa <bt_conn_security_changed+0x42>
 80078dc:	4914      	ldr	r1, [pc, #80]	; (8007930 <bt_conn_security_changed+0x78>)
 80078de:	4815      	ldr	r0, [pc, #84]	; (8007934 <bt_conn_security_changed+0x7c>)
 80078e0:	f240 73ca 	movw	r3, #1994	; 0x7ca
 80078e4:	4642      	mov	r2, r8
 80078e6:	f00a fcdf 	bl	80122a8 <assert_print>
 80078ea:	4813      	ldr	r0, [pc, #76]	; (8007938 <bt_conn_security_changed+0x80>)
 80078ec:	f00a fcdc 	bl	80122a8 <assert_print>
 80078f0:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80078f4:	4640      	mov	r0, r8
 80078f6:	f00a fcd0 	bl	801229a <assert_post_action>
 80078fa:	454d      	cmp	r5, r9
 80078fc:	d309      	bcc.n	8007912 <bt_conn_security_changed+0x5a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
 80078fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->security_changed) {
 8007902:	696b      	ldr	r3, [r5, #20]
 8007904:	b11b      	cbz	r3, 800790e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
 8007906:	7a61      	ldrb	r1, [r4, #9]
 8007908:	4632      	mov	r2, r6
 800790a:	4620      	mov	r0, r4
 800790c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 800790e:	69ad      	ldr	r5, [r5, #24]
 8007910:	e7dc      	b.n	80078cc <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
 8007912:	696b      	ldr	r3, [r5, #20]
 8007914:	b11b      	cbz	r3, 800791e <bt_conn_security_changed+0x66>
			cb->security_changed(conn, conn->sec_level, err);
 8007916:	7a61      	ldrb	r1, [r4, #9]
 8007918:	4632      	mov	r2, r6
 800791a:	4620      	mov	r0, r4
 800791c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 800791e:	351c      	adds	r5, #28
 8007920:	e7da      	b.n	80078d8 <bt_conn_security_changed+0x20>
 8007922:	bf00      	nop
 8007924:	20001624 	.word	0x20001624
 8007928:	08015ae4 	.word	0x08015ae4
 800792c:	08015ac8 	.word	0x08015ac8
 8007930:	0801867e 	.word	0x0801867e
 8007934:	08016836 	.word	0x08016836
 8007938:	08018699 	.word	0x08018699
 800793c:	0801864e 	.word	0x0801864e

08007940 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	4606      	mov	r6, r0
 8007944:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
 8007946:	480a      	ldr	r0, [pc, #40]	; (8007970 <bt_conn_add_le+0x30>)
 8007948:	2101      	movs	r1, #1
 800794a:	f7ff fb67 	bl	800701c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
 800794e:	4604      	mov	r4, r0
 8007950:	b160      	cbz	r0, 800796c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
 8007952:	7206      	strb	r6, [r0, #8]
 8007954:	2207      	movs	r2, #7
 8007956:	4629      	mov	r1, r5
 8007958:	3090      	adds	r0, #144	; 0x90
 800795a:	f00b fa97 	bl	8012e8c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
 800795e:	2301      	movs	r3, #1
 8007960:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
 8007962:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
 8007964:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <bt_conn_add_le+0x34>)
 8007968:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
 800796c:	4620      	mov	r0, r4
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	20000e68 	.word	0x20000e68
 8007974:	00280018 	.word	0x00280018

08007978 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
 800797c:	480c      	ldr	r0, [pc, #48]	; (80079b0 <bt_conn_lookup_addr_le+0x38>)
{
 800797e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
 8007980:	f00b fe54 	bl	801362c <bt_conn_ref>

		if (!conn) {
 8007984:	4604      	mov	r4, r0
 8007986:	b128      	cbz	r0, 8007994 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
 8007988:	7883      	ldrb	r3, [r0, #2]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d004      	beq.n	8007998 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
 800798e:	f7ff fcf9 	bl	8007384 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
 8007992:	2400      	movs	r4, #0
}
 8007994:	4620      	mov	r0, r4
 8007996:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
 8007998:	4629      	mov	r1, r5
 800799a:	4632      	mov	r2, r6
 800799c:	f00b fee5 	bl	801376a <bt_conn_is_peer_addr_le>
 80079a0:	4605      	mov	r5, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1f6      	bne.n	8007994 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff fcec 	bl	8007384 <bt_conn_unref>
	return NULL;
 80079ac:	462c      	mov	r4, r5
			continue;
 80079ae:	e7f1      	b.n	8007994 <bt_conn_lookup_addr_le+0x1c>
 80079b0:	20000e68 	.word	0x20000e68

080079b4 <bt_conn_exists_le>:
{
 80079b4:	b5b0      	push	{r4, r5, r7, lr}
 80079b6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
 80079b8:	f7ff ffde 	bl	8007978 <bt_conn_lookup_addr_le>
	if (conn) {
 80079bc:	4604      	mov	r4, r0
 80079be:	b1d8      	cbz	r0, 80079f8 <bt_conn_exists_le+0x44>
		BT_WARN("Found valid connection in %s state",
 80079c0:	7b43      	ldrb	r3, [r0, #13]
 80079c2:	490e      	ldr	r1, [pc, #56]	; (80079fc <bt_conn_exists_le+0x48>)
 80079c4:	480e      	ldr	r0, [pc, #56]	; (8007a00 <bt_conn_exists_le+0x4c>)
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	bf96      	itet	ls
 80079ca:	4a0e      	ldrls	r2, [pc, #56]	; (8007a04 <bt_conn_exists_le+0x50>)
 80079cc:	4b0e      	ldrhi	r3, [pc, #56]	; (8007a08 <bt_conn_exists_le+0x54>)
 80079ce:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 80079d2:	466d      	mov	r5, sp
 80079d4:	b088      	sub	sp, #32
 80079d6:	466a      	mov	r2, sp
 80079d8:	e9c2 1304 	strd	r1, r3, [r2, #16]
 80079dc:	2302      	movs	r3, #2
 80079de:	7613      	strb	r3, [r2, #24]
 80079e0:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <bt_conn_exists_le+0x58>)
 80079e2:	f842 3f0c 	str.w	r3, [r2, #12]!
 80079e6:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 80079ea:	f00b fded 	bl	80135c8 <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
 80079ee:	4620      	mov	r0, r4
 80079f0:	46ad      	mov	sp, r5
 80079f2:	f7ff fcc7 	bl	8007384 <bt_conn_unref>
		return true;
 80079f6:	2001      	movs	r0, #1
}
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bdb0      	pop	{r4, r5, r7, pc}
 80079fc:	0801899c 	.word	0x0801899c
 8007a00:	08015b2c 	.word	0x08015b2c
 8007a04:	08016228 	.word	0x08016228
 8007a08:	0801885c 	.word	0x0801885c
 8007a0c:	01000003 	.word	0x01000003

08007a10 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
 8007a14:	480e      	ldr	r0, [pc, #56]	; (8007a50 <bt_conn_lookup_state_le+0x40>)
{
 8007a16:	460e      	mov	r6, r1
 8007a18:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
 8007a1a:	f00b fe07 	bl	801362c <bt_conn_ref>

		if (!conn) {
 8007a1e:	4604      	mov	r4, r0
 8007a20:	b1a0      	cbz	r0, 8007a4c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
 8007a22:	7883      	ldrb	r3, [r0, #2]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d003      	beq.n	8007a30 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
 8007a28:	f7ff fcac 	bl	8007384 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
 8007a2c:	2400      	movs	r4, #0
			continue;
 8007a2e:	e00d      	b.n	8007a4c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
 8007a30:	b136      	cbz	r6, 8007a40 <bt_conn_lookup_state_le+0x30>
 8007a32:	4632      	mov	r2, r6
 8007a34:	4629      	mov	r1, r5
 8007a36:	f00b fe98 	bl	801376a <bt_conn_is_peer_addr_le>
 8007a3a:	b908      	cbnz	r0, 8007a40 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	e7f3      	b.n	8007a28 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
 8007a40:	7b63      	ldrb	r3, [r4, #13]
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	d1fa      	bne.n	8007a3c <bt_conn_lookup_state_le+0x2c>
 8007a46:	7a23      	ldrb	r3, [r4, #8]
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	d1f7      	bne.n	8007a3c <bt_conn_lookup_state_le+0x2c>
}
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	20000e68 	.word	0x20000e68

08007a54 <send_conn_le_param_update>:
{
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
 8007a58:	4608      	mov	r0, r1
{
 8007a5a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
 8007a5c:	f00b fbab 	bl	80131b6 <bt_le_conn_params_valid>
 8007a60:	b348      	cbz	r0, 8007ab6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 8007a62:	4b16      	ldr	r3, [pc, #88]	; (8007abc <send_conn_le_param_update+0x68>)
 8007a64:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8007a68:	0799      	lsls	r1, r3, #30
 8007a6a:	d407      	bmi.n	8007a7c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
 8007a6c:	78e3      	ldrb	r3, [r4, #3]
 8007a6e:	b183      	cbz	r3, 8007a92 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
 8007a70:	4629      	mov	r1, r5
 8007a72:	4620      	mov	r0, r4
}
 8007a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
 8007a78:	f000 bb04 	b.w	8008084 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 8007a7c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8007a80:	079a      	lsls	r2, r3, #30
 8007a82:	d5f3      	bpl.n	8007a6c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8007a84:	f3bf 8f5b 	dmb	ish
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
 8007a8e:	059b      	lsls	r3, r3, #22
 8007a90:	d4ec      	bmi.n	8007a6c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
 8007a92:	4629      	mov	r1, r5
 8007a94:	4620      	mov	r0, r4
 8007a96:	f00b fe8a 	bl	80137ae <bt_conn_le_conn_update>
		if (rc == 0) {
 8007a9a:	b958      	cbnz	r0, 8007ab4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
 8007a9c:	882b      	ldrh	r3, [r5, #0]
 8007a9e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
 8007aa2:	886b      	ldrh	r3, [r5, #2]
 8007aa4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
 8007aa8:	88ab      	ldrh	r3, [r5, #4]
 8007aaa:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
 8007aae:	88eb      	ldrh	r3, [r5, #6]
 8007ab0:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
 8007ab4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8007ab6:	f06f 0015 	mvn.w	r0, #21
 8007aba:	e7fb      	b.n	8007ab4 <send_conn_le_param_update+0x60>
 8007abc:	20000000 	.word	0x20000000

08007ac0 <deferred_work>:
{
 8007ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
 8007ac4:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
 8007ac8:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
 8007aca:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d133      	bne.n	8007b3a <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f00b fee9 	bl	80138aa <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
 8007ad8:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <deferred_work+0xd8>)
 8007ada:	681e      	ldr	r6, [r3, #0]
 8007adc:	b9ee      	cbnz	r6, 8007b1a <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8007ade:	4f2f      	ldr	r7, [pc, #188]	; (8007b9c <deferred_work+0xdc>)
 8007ae0:	4e2f      	ldr	r6, [pc, #188]	; (8007ba0 <deferred_work+0xe0>)
 8007ae2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bb4 <deferred_work+0xf4>
 8007ae6:	46b9      	mov	r9, r7
 8007ae8:	42be      	cmp	r6, r7
 8007aea:	d90e      	bls.n	8007b0a <deferred_work+0x4a>
 8007aec:	492d      	ldr	r1, [pc, #180]	; (8007ba4 <deferred_work+0xe4>)
 8007aee:	482e      	ldr	r0, [pc, #184]	; (8007ba8 <deferred_work+0xe8>)
 8007af0:	f240 5323 	movw	r3, #1315	; 0x523
 8007af4:	4642      	mov	r2, r8
 8007af6:	f00a fbd7 	bl	80122a8 <assert_print>
 8007afa:	482c      	ldr	r0, [pc, #176]	; (8007bac <deferred_work+0xec>)
 8007afc:	f00a fbd4 	bl	80122a8 <assert_print>
 8007b00:	f240 5123 	movw	r1, #1315	; 0x523
 8007b04:	4640      	mov	r0, r8
 8007b06:	f00a fbc8 	bl	801229a <assert_post_action>
 8007b0a:	454e      	cmp	r6, r9
 8007b0c:	d30d      	bcc.n	8007b2a <deferred_work+0x6a>
		bt_conn_unref(conn);
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7ff fc38 	bl	8007384 <bt_conn_unref>
}
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
 8007b1a:	6873      	ldr	r3, [r6, #4]
 8007b1c:	b11b      	cbz	r3, 8007b26 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
 8007b1e:	f814 1c54 	ldrb.w	r1, [r4, #-84]
 8007b22:	4628      	mov	r0, r5
 8007b24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 8007b26:	69b6      	ldr	r6, [r6, #24]
 8007b28:	e7d8      	b.n	8007adc <deferred_work+0x1c>
		if (cb->disconnected) {
 8007b2a:	6873      	ldr	r3, [r6, #4]
 8007b2c:	b11b      	cbz	r3, 8007b36 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
 8007b2e:	f814 1c54 	ldrb.w	r1, [r4, #-84]
 8007b32:	4628      	mov	r0, r5
 8007b34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
 8007b36:	361c      	adds	r6, #28
 8007b38:	e7d6      	b.n	8007ae8 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
 8007b3a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d1e8      	bne.n	8007b14 <deferred_work+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8007b42:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
 8007b46:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
 8007b4a:	e856 3f00 	ldrex	r3, [r6]
 8007b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b52:	e846 2100 	strex	r1, r2, [r6]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d1f7      	bne.n	8007b4a <deferred_work+0x8a>
 8007b5a:	f3bf 8f5b 	dmb	ish
 8007b5e:	05db      	lsls	r3, r3, #23
 8007b60:	d514      	bpl.n	8007b8c <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
 8007b62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007b68:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
 8007b6a:	4669      	mov	r1, sp
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f7ff ff71 	bl	8007a54 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8007b72:	f3bf 8f5b 	dmb	ish
 8007b76:	e856 3f00 	ldrex	r3, [r6]
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	e846 3200 	strex	r2, r3, [r6]
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	d1f7      	bne.n	8007b76 <deferred_work+0xb6>
 8007b86:	f3bf 8f5b 	dmb	ish
 8007b8a:	e7c3      	b.n	8007b14 <deferred_work+0x54>
		param = BT_LE_CONN_PARAM(
 8007b8c:	4a08      	ldr	r2, [pc, #32]	; (8007bb0 <deferred_work+0xf0>)
 8007b8e:	6810      	ldr	r0, [r2, #0]
 8007b90:	6851      	ldr	r1, [r2, #4]
 8007b92:	466b      	mov	r3, sp
 8007b94:	c303      	stmia	r3!, {r0, r1}
 8007b96:	e7e8      	b.n	8007b6a <deferred_work+0xaa>
 8007b98:	20001624 	.word	0x20001624
 8007b9c:	08015ae4 	.word	0x08015ae4
 8007ba0:	08015ac8 	.word	0x08015ac8
 8007ba4:	0801867e 	.word	0x0801867e
 8007ba8:	08016836 	.word	0x08016836
 8007bac:	08018699 	.word	0x08018699
 8007bb0:	08015cc4 	.word	0x08015cc4
 8007bb4:	0801864e 	.word	0x0801864e

08007bb8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
 8007bb8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
 8007bba:	4801      	ldr	r0, [pc, #4]	; (8007bc0 <bt_conn_create_frag_timeout+0x8>)
 8007bbc:	f7ff bd42 	b.w	8007644 <bt_conn_create_pdu_timeout>
 8007bc0:	200006a8 	.word	0x200006a8

08007bc4 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
 8007bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
 8007bd4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
 8007bd6:	f7ff ffef 	bl	8007bb8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
 8007bda:	7833      	ldrb	r3, [r6, #0]
 8007bdc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
 8007bde:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
 8007be0:	f04f 0600 	mov.w	r6, #0
 8007be4:	d005      	beq.n	8007bf2 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
 8007be6:	f004 f999 	bl	800bf1c <net_buf_unref>
		return NULL;
 8007bea:	4635      	mov	r5, r6
}
 8007bec:	4628      	mov	r0, r5
 8007bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
 8007bf2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
 8007bf4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
 8007bf8:	4e0c      	ldr	r6, [pc, #48]	; (8007c2c <create_frag.isra.0+0x68>)
 8007bfa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 8007bfc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
 8007c00:	f00d f93b 	bl	8014e7a <net_buf_simple_tailroom>
 8007c04:	4580      	cmp	r8, r0
 8007c06:	d20c      	bcs.n	8007c22 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
 8007c08:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
 8007c0c:	f854 1f08 	ldr.w	r1, [r4, #8]!
 8007c10:	4632      	mov	r2, r6
 8007c12:	4638      	mov	r0, r7
 8007c14:	f00d f939 	bl	8014e8a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f004 fa6c 	bl	800c0f8 <net_buf_simple_pull>
 8007c20:	e7e4      	b.n	8007bec <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
 8007c22:	4638      	mov	r0, r7
 8007c24:	f00d f929 	bl	8014e7a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
 8007c28:	b286      	uxth	r6, r0
 8007c2a:	e7ef      	b.n	8007c0c <create_frag.isra.0+0x48>
 8007c2c:	20000000 	.word	0x20000000

08007c30 <bt_conn_process_tx>:
{
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
 8007c32:	7b43      	ldrb	r3, [r0, #13]
{
 8007c34:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
 8007c36:	b993      	cbnz	r3, 8007c5e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8007c38:	f3bf 8f5b 	dmb	ish
 8007c3c:	1d03      	adds	r3, r0, #4
 8007c3e:	e853 2f00 	ldrex	r2, [r3]
 8007c42:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 8007c46:	e843 1400 	strex	r4, r1, [r3]
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	d1f7      	bne.n	8007c3e <bt_conn_process_tx+0xe>
 8007c4e:	f3bf 8f5b 	dmb	ish
 8007c52:	0653      	lsls	r3, r2, #25
 8007c54:	d503      	bpl.n	8007c5e <bt_conn_process_tx+0x2e>
}
 8007c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
 8007c5a:	f7ff ba13 	b.w	8007084 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007c66:	f004 f8c7 	bl	800bdf8 <net_buf_get>
	BT_ASSERT(buf);
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	b960      	cbnz	r0, 8007c88 <bt_conn_process_tx+0x58>
 8007c6e:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <bt_conn_process_tx+0xc0>)
 8007c70:	4920      	ldr	r1, [pc, #128]	; (8007cf4 <bt_conn_process_tx+0xc4>)
 8007c72:	4821      	ldr	r0, [pc, #132]	; (8007cf8 <bt_conn_process_tx+0xc8>)
 8007c74:	f44f 733a 	mov.w	r3, #744	; 0x2e8
 8007c78:	f00a fb16 	bl	80122a8 <assert_print>
 8007c7c:	4040      	eors	r0, r0
 8007c7e:	f380 8811 	msr	BASEPRI, r0
 8007c82:	f04f 0003 	mov.w	r0, #3
 8007c86:	df02      	svc	2
	return bt_dev.le.acl_mtu;
 8007c88:	4f1c      	ldr	r7, [pc, #112]	; (8007cfc <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
 8007c8a:	89a1      	ldrh	r1, [r4, #12]
 8007c8c:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 8007c90:	4291      	cmp	r1, r2
 8007c92:	d807      	bhi.n	8007ca4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
 8007c94:	2300      	movs	r3, #0
 8007c96:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f7ff f90a 	bl	8006eb4 <send_frag>
	if (!send_buf(conn, buf)) {
 8007ca0:	b140      	cbz	r0, 8007cb4 <bt_conn_process_tx+0x84>
}
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
 8007ca4:	f105 060d 	add.w	r6, r5, #13
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ff8a 	bl	8007bc4 <create_frag.isra.0>
	if (!frag) {
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	b920      	cbnz	r0, 8007cbe <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
 8007cb4:	4620      	mov	r0, r4
}
 8007cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
 8007cba:	f004 b92f 	b.w	800bf1c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7ff f8f6 	bl	8006eb4 <send_frag>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0f3      	beq.n	8007cb4 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
 8007ccc:	89a2      	ldrh	r2, [r4, #12]
 8007cce:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d802      	bhi.n	8007cdc <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2203      	movs	r2, #3
 8007cda:	e7dd      	b.n	8007c98 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff ff70 	bl	8007bc4 <create_frag.isra.0>
		if (!frag) {
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d0e4      	beq.n	8007cb4 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
 8007cea:	2301      	movs	r3, #1
 8007cec:	461a      	mov	r2, r3
 8007cee:	e7e8      	b.n	8007cc2 <bt_conn_process_tx+0x92>
 8007cf0:	0801864e 	.word	0x0801864e
 8007cf4:	08017d7b 	.word	0x08017d7b
 8007cf8:	08016836 	.word	0x08016836
 8007cfc:	20000000 	.word	0x20000000

08007d00 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <bt_conn_auth_cb_register+0x34>)
 8007d02:	b908      	cbnz	r0, 8007d08 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
 8007d04:	6018      	str	r0, [r3, #0]
		return 0;
 8007d06:	4770      	bx	lr
	}

	if (bt_auth) {
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	b962      	cbnz	r2, 8007d26 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
 8007d0c:	6902      	ldr	r2, [r0, #16]
 8007d0e:	b93a      	cbnz	r2, 8007d20 <bt_conn_auth_cb_register+0x20>
 8007d10:	6802      	ldr	r2, [r0, #0]
 8007d12:	b95a      	cbnz	r2, 8007d2c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
 8007d14:	6842      	ldr	r2, [r0, #4]
 8007d16:	b94a      	cbnz	r2, 8007d2c <bt_conn_auth_cb_register+0x2c>
 8007d18:	6882      	ldr	r2, [r0, #8]
 8007d1a:	b93a      	cbnz	r2, 8007d2c <bt_conn_auth_cb_register+0x2c>
 8007d1c:	6942      	ldr	r2, [r0, #20]
 8007d1e:	b92a      	cbnz	r2, 8007d2c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
 8007d20:	6018      	str	r0, [r3, #0]
	return 0;
 8007d22:	2000      	movs	r0, #0
 8007d24:	4770      	bx	lr
		return -EALREADY;
 8007d26:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8007d2a:	4770      	bx	lr
		return -EINVAL;
 8007d2c:	f06f 0015 	mvn.w	r0, #21
}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20001618 	.word	0x20001618

08007d38 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
 8007d38:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
 8007d3a:	490b      	ldr	r1, [pc, #44]	; (8007d68 <bt_conn_init+0x30>)
 8007d3c:	480b      	ldr	r0, [pc, #44]	; (8007d6c <bt_conn_init+0x34>)
 8007d3e:	f00d fb37 	bl	80153b0 <k_queue_append>
 8007d42:	490b      	ldr	r1, [pc, #44]	; (8007d70 <bt_conn_init+0x38>)
 8007d44:	4809      	ldr	r0, [pc, #36]	; (8007d6c <bt_conn_init+0x34>)
 8007d46:	f00d fb33 	bl	80153b0 <k_queue_append>
 8007d4a:	490a      	ldr	r1, [pc, #40]	; (8007d74 <bt_conn_init+0x3c>)
 8007d4c:	4807      	ldr	r0, [pc, #28]	; (8007d6c <bt_conn_init+0x34>)
 8007d4e:	f00d fb2f 	bl	80153b0 <k_queue_append>
	}

	bt_att_init();
 8007d52:	f00c f983 	bl	801405c <bt_att_init>

	err = bt_smp_init();
 8007d56:	f003 fe33 	bl	800b9c0 <bt_smp_init>
	if (err) {
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	b908      	cbnz	r0, 8007d62 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
 8007d5e:	f00b fdfc 	bl	801395a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
 8007d62:	4620      	mov	r0, r4
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	20001628 	.word	0x20001628
 8007d6c:	20000608 	.word	0x20000608
 8007d70:	20001638 	.word	0x20001638
 8007d74:	20001648 	.word	0x20001648

08007d78 <l2cap_create_le_sig_pdu.isra.0.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
 8007d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
 8007d7a:	4b07      	ldr	r3, [pc, #28]	; (8007d98 <l2cap_create_le_sig_pdu.isra.0.part.0+0x20>)
 8007d7c:	aa03      	add	r2, sp, #12
 8007d7e:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8007d82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8007d86:	2303      	movs	r3, #3
 8007d88:	4804      	ldr	r0, [pc, #16]	; (8007d9c <l2cap_create_le_sig_pdu.isra.0.part.0+0x24>)
 8007d8a:	9303      	str	r3, [sp, #12]
 8007d8c:	f00b fd3b 	bl	8013806 <z_log_msg2_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
 8007d90:	2000      	movs	r0, #0
 8007d92:	b007      	add	sp, #28
 8007d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d98:	08018a38 	.word	0x08018a38
 8007d9c:	08015b6c 	.word	0x08015b6c

08007da0 <l2cap_accept.part.0>:
	 * so this should always succeed.
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
 8007da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <l2cap_accept.part.0+0x24>)
 8007da4:	aa03      	add	r2, sp, #12
 8007da6:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8007daa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8007dae:	2303      	movs	r3, #3
 8007db0:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <l2cap_accept.part.0+0x28>)
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	f00b fd27 	bl	8013806 <z_log_msg2_static_create.constprop.0>

	return -ENOMEM;
}
 8007db8:	f06f 000b 	mvn.w	r0, #11
 8007dbc:	b007      	add	sp, #28
 8007dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dc2:	bf00      	nop
 8007dc4:	08018a60 	.word	0x08018a60
 8007dc8:	08015b6c 	.word	0x08015b6c

08007dcc <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
 8007dcc:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <l2cap_accept+0x14>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	b10a      	cbz	r2, 8007dd6 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
 8007dd2:	f7ff bfe5 	b.w	8007da0 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
 8007dd6:	4803      	ldr	r0, [pc, #12]	; (8007de4 <l2cap_accept+0x18>)
 8007dd8:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
 8007dda:	600b      	str	r3, [r1, #0]
}
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4770      	bx	lr
 8007de0:	20000f30 	.word	0x20000f30
 8007de4:	0801626c 	.word	0x0801626c

08007de8 <l2cap_rtx_timeout>:
{
 8007de8:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
 8007dea:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
 8007dee:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
 8007df2:	480b      	ldr	r0, [pc, #44]	; (8007e20 <l2cap_rtx_timeout+0x38>)
{
 8007df4:	b087      	sub	sp, #28
	BT_ERR("chan %p timeout", chan);
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8007e00:	2303      	movs	r3, #3
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	f00b fcff 	bl	8013806 <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f00b fd19 	bl	8013842 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
 8007e10:	4620      	mov	r0, r4
 8007e12:	f00b fd35 	bl	8013880 <bt_l2cap_chan_del>
}
 8007e16:	b007      	add	sp, #28
 8007e18:	bd30      	pop	{r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08018a87 	.word	0x08018a87
 8007e20:	08015b6c 	.word	0x08015b6c

08007e24 <bt_l2cap_connected>:
{
 8007e24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
 8007e28:	4f32      	ldr	r7, [pc, #200]	; (8007ef4 <bt_l2cap_connected+0xd0>)
 8007e2a:	4e33      	ldr	r6, [pc, #204]	; (8007ef8 <bt_l2cap_connected+0xd4>)
 8007e2c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007f0c <bt_l2cap_connected+0xe8>
{
 8007e30:	4604      	mov	r4, r0
 8007e32:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
 8007e34:	42be      	cmp	r6, r7
 8007e36:	d90e      	bls.n	8007e56 <bt_l2cap_connected+0x32>
 8007e38:	4930      	ldr	r1, [pc, #192]	; (8007efc <bt_l2cap_connected+0xd8>)
 8007e3a:	4831      	ldr	r0, [pc, #196]	; (8007f00 <bt_l2cap_connected+0xdc>)
 8007e3c:	f240 136d 	movw	r3, #365	; 0x16d
 8007e40:	4642      	mov	r2, r8
 8007e42:	f00a fa31 	bl	80122a8 <assert_print>
 8007e46:	482f      	ldr	r0, [pc, #188]	; (8007f04 <bt_l2cap_connected+0xe0>)
 8007e48:	f00a fa2e 	bl	80122a8 <assert_print>
 8007e4c:	f240 116d 	movw	r1, #365	; 0x16d
 8007e50:	4640      	mov	r0, r8
 8007e52:	f00a fa22 	bl	801229a <assert_post_action>
 8007e56:	454e      	cmp	r6, r9
 8007e58:	d302      	bcc.n	8007e60 <bt_l2cap_connected+0x3c>
}
 8007e5a:	b002      	add	sp, #8
 8007e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
 8007e60:	6873      	ldr	r3, [r6, #4]
 8007e62:	a901      	add	r1, sp, #4
 8007e64:	4620      	mov	r0, r4
 8007e66:	4798      	blx	r3
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	db3d      	blt.n	8007ee8 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
 8007e6c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
 8007e6e:	8833      	ldrh	r3, [r6, #0]
 8007e70:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
 8007e74:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
 8007e78:	4923      	ldr	r1, [pc, #140]	; (8007f08 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
 8007e7a:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
 8007e7e:	f105 0010 	add.w	r0, r5, #16
 8007e82:	f007 fbbb 	bl	800f5fc <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007e86:	f3bf 8f5b 	dmb	ish
 8007e8a:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8007e8e:	2200      	movs	r2, #0
 8007e90:	e853 1f00 	ldrex	r1, [r3]
 8007e94:	e843 2000 	strex	r0, r2, [r3]
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d1f9      	bne.n	8007e90 <bt_l2cap_connected+0x6c>
 8007e9c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
 8007ea0:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
 8007ea2:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
 8007ea4:	f105 0308 	add.w	r3, r5, #8
 8007ea8:	bb02      	cbnz	r2, 8007eec <bt_l2cap_connected+0xc8>
	list->head = node;
 8007eaa:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
 8007eae:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
 8007eb0:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
 8007eb2:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
 8007eb4:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
 8007ebc:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	f3bf 8f5b 	dmb	ish
 8007ec4:	3368      	adds	r3, #104	; 0x68
 8007ec6:	e853 2f00 	ldrex	r2, [r3]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	e843 2100 	strex	r1, r2, [r3]
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d1f7      	bne.n	8007ec6 <bt_l2cap_connected+0xa2>
 8007ed6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
 8007eda:	9801      	ldr	r0, [sp, #4]
 8007edc:	6843      	ldr	r3, [r0, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	b113      	cbz	r3, 8007ee8 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
 8007ee2:	f100 0168 	add.w	r1, r0, #104	; 0x68
 8007ee6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
 8007ee8:	360c      	adds	r6, #12
 8007eea:	e7a3      	b.n	8007e34 <bt_l2cap_connected+0x10>
	parent->next = child;
 8007eec:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8007eee:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007ef0:	e7dd      	b.n	8007eae <bt_l2cap_connected+0x8a>
 8007ef2:	bf00      	nop
 8007ef4:	08015ac8 	.word	0x08015ac8
 8007ef8:	08015aa4 	.word	0x08015aa4
 8007efc:	08018ac8 	.word	0x08018ac8
 8007f00:	08016836 	.word	0x08016836
 8007f04:	08018699 	.word	0x08018699
 8007f08:	08007de9 	.word	0x08007de9
 8007f0c:	08018a97 	.word	0x08018a97

08007f10 <l2cap_recv.part.0>:
static int l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
 8007f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f12:	460d      	mov	r5, r1
 8007f14:	b089      	sub	sp, #36	; 0x24
	return net_buf_simple_pull_mem(&buf->b, len);
 8007f16:	2104      	movs	r1, #4
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	f105 0008 	add.w	r0, r5, #8
 8007f20:	f004 f90a 	bl	800c138 <net_buf_simple_pull_mem>
	if (buf->len != len) {
 8007f24:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
 8007f26:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	d012      	beq.n	8007f54 <l2cap_recv.part.0+0x44>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
 8007f2e:	4829      	ldr	r0, [pc, #164]	; (8007fd4 <l2cap_recv.part.0+0xc4>)
 8007f30:	466c      	mov	r4, sp
 8007f32:	b088      	sub	sp, #32
 8007f34:	aa02      	add	r2, sp, #8
 8007f36:	e9c2 0304 	strd	r0, r3, [r2, #16]
 8007f3a:	2304      	movs	r3, #4
 8007f3c:	6191      	str	r1, [r2, #24]
 8007f3e:	4826      	ldr	r0, [pc, #152]	; (8007fd8 <l2cap_recv.part.0+0xc8>)
 8007f40:	f842 3f0c 	str.w	r3, [r2, #12]!
 8007f44:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8007f48:	f00b fc5d 	bl	8013806 <z_log_msg2_static_create.constprop.0>
 8007f4c:	46a5      	mov	sp, r4
}
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
 8007f54:	7843      	ldrb	r3, [r0, #1]
 8007f56:	b95b      	cbnz	r3, 8007f70 <l2cap_recv.part.0+0x60>
		BT_ERR("Invalid ident value in L2CAP PDU");
 8007f58:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <l2cap_recv.part.0+0xcc>)
		BT_ERR("Too small LE conn param rsp");
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	481e      	ldr	r0, [pc, #120]	; (8007fd8 <l2cap_recv.part.0+0xc8>)
 8007f5e:	2302      	movs	r3, #2
 8007f60:	f107 020c 	add.w	r2, r7, #12
 8007f64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	f00b fc4c 	bl	8013806 <z_log_msg2_static_create.constprop.0>
		return;
 8007f6e:	e7ee      	b.n	8007f4e <l2cap_recv.part.0+0x3e>
	switch (hdr->code) {
 8007f70:	7803      	ldrb	r3, [r0, #0]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d0eb      	beq.n	8007f4e <l2cap_recv.part.0+0x3e>
 8007f76:	2b13      	cmp	r3, #19
 8007f78:	d103      	bne.n	8007f82 <l2cap_recv.part.0+0x72>
	if (buf->len < sizeof(*rsp)) {
 8007f7a:	2901      	cmp	r1, #1
 8007f7c:	d8e7      	bhi.n	8007f4e <l2cap_recv.part.0+0x3e>
		BT_ERR("Too small LE conn param rsp");
 8007f7e:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <l2cap_recv.part.0+0xd0>)
 8007f80:	e7eb      	b.n	8007f5a <l2cap_recv.part.0+0x4a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
 8007f82:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <l2cap_recv.part.0+0xd4>)
 8007f84:	4814      	ldr	r0, [pc, #80]	; (8007fd8 <l2cap_recv.part.0+0xc8>)
	switch (hdr->code) {
 8007f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
 8007f8a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8007f8e:	2303      	movs	r3, #3
 8007f90:	f107 020c 	add.w	r2, r7, #12
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	f00b fc36 	bl	8013806 <z_log_msg2_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
 8007f9e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f00b fc33 	bl	801380c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0d0      	beq.n	8007f4e <l2cap_recv.part.0+0x3e>
	return net_buf_simple_add(&buf->b, len);
 8007fac:	2102      	movs	r1, #2
 8007fae:	3008      	adds	r0, #8
 8007fb0:	f004 f8e4 	bl	800c17c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	7003      	strb	r3, [r0, #0]
 8007fb8:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
 8007fba:	4622      	mov	r2, r4
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2105      	movs	r1, #5
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f00b fc9b 	bl	80138fc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d0c1      	beq.n	8007f4e <l2cap_recv.part.0+0x3e>
		net_buf_unref(buf);
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f003 ffa6 	bl	800bf1c <net_buf_unref>
 8007fd0:	e7bd      	b.n	8007f4e <l2cap_recv.part.0+0x3e>
 8007fd2:	bf00      	nop
 8007fd4:	08018aef 	.word	0x08018aef
 8007fd8:	08015b6c 	.word	0x08015b6c
 8007fdc:	08018b10 	.word	0x08018b10
 8007fe0:	08018b31 	.word	0x08018b31
 8007fe4:	08018b4d 	.word	0x08018b4d

08007fe8 <l2cap_recv>:
{
 8007fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
 8007fea:	898b      	ldrh	r3, [r1, #12]
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d80d      	bhi.n	800800c <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
 8007ff0:	4b08      	ldr	r3, [pc, #32]	; (8008014 <l2cap_recv+0x2c>)
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	4808      	ldr	r0, [pc, #32]	; (8008018 <l2cap_recv+0x30>)
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	aa03      	add	r2, sp, #12
 8007ffa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	f00b fc01 	bl	8013806 <z_log_msg2_static_create.constprop.0>
}
 8008004:	2000      	movs	r0, #0
 8008006:	b007      	add	sp, #28
 8008008:	f85d fb04 	ldr.w	pc, [sp], #4
 800800c:	f7ff ff80 	bl	8007f10 <l2cap_recv.part.0>
 8008010:	e7f8      	b.n	8008004 <l2cap_recv+0x1c>
 8008012:	bf00      	nop
 8008014:	08018b6b 	.word	0x08018b6b
 8008018:	08015b6c 	.word	0x08015b6c

0800801c <bt_l2cap_recv>:
{
 800801c:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
 800801e:	898b      	ldrh	r3, [r1, #12]
 8008020:	2b03      	cmp	r3, #3
{
 8008022:	b087      	sub	sp, #28
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
 8008028:	d80e      	bhi.n	8008048 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
 800802a:	4b13      	ldr	r3, [pc, #76]	; (8008078 <bt_l2cap_recv+0x5c>)
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	2302      	movs	r3, #2
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	aa03      	add	r2, sp, #12
 8008034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
 8008038:	4810      	ldr	r0, [pc, #64]	; (800807c <bt_l2cap_recv+0x60>)
 800803a:	f00b fbe4 	bl	8013806 <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
 800803e:	4620      	mov	r0, r4
 8008040:	f003 ff6c 	bl	800bf1c <net_buf_unref>
}
 8008044:	b007      	add	sp, #28
 8008046:	bd30      	pop	{r4, r5, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
 8008048:	2104      	movs	r1, #4
 800804a:	f104 0008 	add.w	r0, r4, #8
 800804e:	f004 f873 	bl	800c138 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
 8008052:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
 8008054:	4628      	mov	r0, r5
 8008056:	f00b fc75 	bl	8013944 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 800805a:	b940      	cbnz	r0, 800806e <bt_l2cap_recv+0x52>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
 800805c:	4b08      	ldr	r3, [pc, #32]	; (8008080 <bt_l2cap_recv+0x64>)
 800805e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8008062:	2303      	movs	r3, #3
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	aa03      	add	r2, sp, #12
 8008068:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800806c:	e7e4      	b.n	8008038 <bt_l2cap_recv+0x1c>
	chan->ops->recv(chan, buf);
 800806e:	6843      	ldr	r3, [r0, #4]
 8008070:	4621      	mov	r1, r4
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	4798      	blx	r3
 8008076:	e7e2      	b.n	800803e <bt_l2cap_recv+0x22>
 8008078:	08018b89 	.word	0x08018b89
 800807c:	08015b6c 	.word	0x08015b6c
 8008080:	08018ba6 	.word	0x08018ba6

08008084 <bt_l2cap_update_conn_param>:
{
 8008084:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
 8008086:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <bt_l2cap_update_conn_param+0x60>)
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	3201      	adds	r2, #1
	if (!ident) {
 800808c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
 8008090:	bf08      	it	eq
 8008092:	2201      	moveq	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
{
 8008096:	4606      	mov	r6, r0
 8008098:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
 800809a:	2208      	movs	r2, #8
 800809c:	7819      	ldrb	r1, [r3, #0]
 800809e:	2012      	movs	r0, #18
 80080a0:	f00b fbb4 	bl	801380c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
 80080a4:	4604      	mov	r4, r0
 80080a6:	b1d0      	cbz	r0, 80080de <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
 80080a8:	2108      	movs	r1, #8
 80080aa:	4408      	add	r0, r1
 80080ac:	f004 f866 	bl	800c17c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
 80080b0:	882b      	ldrh	r3, [r5, #0]
 80080b2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
 80080b4:	886b      	ldrh	r3, [r5, #2]
 80080b6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
 80080b8:	88ab      	ldrh	r3, [r5, #4]
 80080ba:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
 80080bc:	88eb      	ldrh	r3, [r5, #6]
 80080be:	80c3      	strh	r3, [r0, #6]
 80080c0:	2300      	movs	r3, #0
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4622      	mov	r2, r4
 80080c6:	2105      	movs	r1, #5
 80080c8:	4630      	mov	r0, r6
 80080ca:	f00b fc17 	bl	80138fc <bt_l2cap_send_cb>
	if (err) {
 80080ce:	4605      	mov	r5, r0
 80080d0:	b110      	cbz	r0, 80080d8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f003 ff22 	bl	800bf1c <net_buf_unref>
}
 80080d8:	4628      	mov	r0, r5
 80080da:	b002      	add	sp, #8
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 80080de:	f06f 050b 	mvn.w	r5, #11
 80080e2:	e7f9      	b.n	80080d8 <bt_l2cap_update_conn_param+0x54>
 80080e4:	20001980 	.word	0x20001980

080080e8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
 80080e8:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <att_cfm_sent+0xc>)
 80080ea:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
 80080ee:	f00b bc62 	b.w	80139b6 <att_sent>
 80080f2:	bf00      	nop
 80080f4:	08013ce7 	.word	0x08013ce7

080080f8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <att_rsp_sent+0xc>)
 80080fa:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
 80080fe:	f00b bc5a 	b.w	80139b6 <att_sent>
 8008102:	bf00      	nop
 8008104:	08013ccb 	.word	0x08013ccb

08008108 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
 8008108:	4b02      	ldr	r3, [pc, #8]	; (8008114 <att_req_sent+0xc>)
 800810a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
 800810e:	f00b bc52 	b.w	80139b6 <att_sent>
 8008112:	bf00      	nop
 8008114:	08008285 	.word	0x08008285

08008118 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
 8008118:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
 800811a:	3808      	subs	r0, #8
 800811c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
 800811e:	a901      	add	r1, sp, #4
 8008120:	4802      	ldr	r0, [pc, #8]	; (800812c <bt_att_released+0x14>)
 8008122:	f006 fb53 	bl	800e7cc <k_mem_slab_free>
}
 8008126:	b003      	add	sp, #12
 8008128:	f85d fb04 	ldr.w	pc, [sp], #4
 800812c:	20000538 	.word	0x20000538

08008130 <read_group_cb>:
{
 8008130:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008134:	4606      	mov	r6, r0
 8008136:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8008138:	f04f 0800 	mov.w	r8, #0
 800813c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008140:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
 8008142:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8008144:	f88d 8008 	strb.w	r8, [sp, #8]
 8008148:	a902      	add	r1, sp, #8
{
 800814a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 800814c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008150:	f00a fed9 	bl	8012f06 <bt_uuid_cmp>
 8008154:	b1a0      	cbz	r0, 8008180 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 8008156:	f642 0301 	movw	r3, #10241	; 0x2801
 800815a:	6830      	ldr	r0, [r6, #0]
 800815c:	f88d 800c 	strb.w	r8, [sp, #12]
 8008160:	a903      	add	r1, sp, #12
 8008162:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008166:	f00a fece 	bl	8012f06 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 800816a:	b148      	cbz	r0, 8008180 <read_group_cb+0x50>
		if (data->group &&
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b11b      	cbz	r3, 8008178 <read_group_cb+0x48>
 8008170:	885a      	ldrh	r2, [r3, #2]
 8008172:	42aa      	cmp	r2, r5
 8008174:	d200      	bcs.n	8008178 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
 8008176:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 8008178:	2001      	movs	r0, #1
}
 800817a:	b004      	add	sp, #16
 800817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	6830      	ldr	r0, [r6, #0]
 8008184:	f00a febf 	bl	8012f06 <bt_uuid_cmp>
 8008188:	b110      	cbz	r0, 8008190 <read_group_cb+0x60>
		data->group = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	6123      	str	r3, [r4, #16]
 800818e:	e7f3      	b.n	8008178 <read_group_cb+0x48>
	if (data->rsp->len &&
 8008190:	68e3      	ldr	r3, [r4, #12]
 8008192:	68a0      	ldr	r0, [r4, #8]
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	b13a      	cbz	r2, 80081a8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
 8008198:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800819c:	8981      	ldrh	r1, [r0, #12]
 800819e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
 80081a0:	4293      	cmp	r3, r2
 80081a2:	da01      	bge.n	80081a8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
 80081a4:	2000      	movs	r0, #0
 80081a6:	e7e8      	b.n	800817a <read_group_cb+0x4a>
 80081a8:	2104      	movs	r1, #4
 80081aa:	3008      	adds	r0, #8
 80081ac:	f003 ffe6 	bl	800c17c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 80081b2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
 80081b4:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
 80081b6:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 80081b8:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
 80081ba:	4631      	mov	r1, r6
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	9401      	str	r4, [sp, #4]
 80081c0:	2300      	movs	r3, #0
 80081c2:	4638      	mov	r0, r7
 80081c4:	f00b fc5f 	bl	8013a86 <att_chan_read>
	if (read < 0) {
 80081c8:	2800      	cmp	r0, #0
 80081ca:	dbeb      	blt.n	80081a4 <read_group_cb+0x74>
	if (!data->group) {
 80081cc:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
 80081ce:	3800      	subs	r0, #0
 80081d0:	bf18      	it	ne
 80081d2:	2001      	movne	r0, #1
 80081d4:	e7d1      	b.n	800817a <read_group_cb+0x4a>
 80081d6:	bf00      	nop
 80081d8:	08013ca1 	.word	0x08013ca1

080081dc <read_type_cb>:
{
 80081dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
 80081e0:	f8d2 8000 	ldr.w	r8, [r2]
{
 80081e4:	4606      	mov	r6, r0
 80081e6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80081e8:	6800      	ldr	r0, [r0, #0]
 80081ea:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
 80081ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
 80081f0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80081f2:	f00a fe88 	bl	8012f06 <bt_uuid_cmp>
 80081f6:	4607      	mov	r7, r0
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d13e      	bne.n	800827a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 80081fc:	4628      	mov	r0, r5
 80081fe:	2215      	movs	r2, #21
 8008200:	4631      	mov	r1, r6
 8008202:	f00c fa28 	bl	8014656 <bt_gatt_check_perm>
 8008206:	4605      	mov	r5, r0
 8008208:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 800820a:	b148      	cbz	r0, 8008220 <read_type_cb+0x44>
		if (data->rsp->len) {
 800820c:	68e3      	ldr	r3, [r4, #12]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b923      	cbnz	r3, 800821c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
 8008212:	2500      	movs	r5, #0
}
 8008214:	4628      	mov	r0, r5
 8008216:	b003      	add	sp, #12
 8008218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
 800821c:	7527      	strb	r7, [r4, #20]
 800821e:	e7f8      	b.n	8008212 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
 8008220:	68a0      	ldr	r0, [r4, #8]
 8008222:	f003 fedb 	bl	800bfdc <net_buf_frag_last>
 8008226:	2102      	movs	r1, #2
 8008228:	3008      	adds	r0, #8
 800822a:	f003 ffa7 	bl	800c17c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
 8008230:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
 8008232:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
 8008234:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
 8008238:	4631      	mov	r1, r6
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	9401      	str	r4, [sp, #4]
 800823e:	462b      	mov	r3, r5
 8008240:	4640      	mov	r0, r8
 8008242:	f00b fc20 	bl	8013a86 <att_chan_read>
	if (read < 0) {
 8008246:	2800      	cmp	r0, #0
 8008248:	da07      	bge.n	800825a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
 800824a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
 800824e:	bf26      	itte	cs
 8008250:	4240      	negcs	r0, r0
 8008252:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
 8008254:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
 8008256:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
 8008258:	e7dc      	b.n	8008214 <read_type_cb+0x38>
	if (!data->item) {
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0d8      	beq.n	8008212 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 8008260:	68a0      	ldr	r0, [r4, #8]
 8008262:	f00b fba0 	bl	80139a6 <net_buf_frags_len>
 8008266:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 800826a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
 800826c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 800826e:	7818      	ldrb	r0, [r3, #0]
 8008270:	4285      	cmp	r5, r0
 8008272:	bf94      	ite	ls
 8008274:	2500      	movls	r5, #0
 8008276:	2501      	movhi	r5, #1
 8008278:	e7cc      	b.n	8008214 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
 800827a:	2501      	movs	r5, #1
 800827c:	e7ca      	b.n	8008214 <read_type_cb+0x38>
 800827e:	bf00      	nop
 8008280:	080139c3 	.word	0x080139c3

08008284 <chan_req_sent>:
	if (chan->req) {
 8008284:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 8008288:	b12b      	cbz	r3, 8008296 <chan_req_sent+0x12>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
 800828a:	4a03      	ldr	r2, [pc, #12]	; (8008298 <chan_req_sent+0x14>)
 800828c:	2300      	movs	r3, #0
 800828e:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8008292:	f007 bad7 	b.w	800f844 <k_work_reschedule>
}
 8008296:	4770      	bx	lr
 8008298:	000493e0 	.word	0x000493e0

0800829c <bt_att_create_pdu.part.0>:
struct net_buf *bt_att_create_pdu(struct bt_conn *conn, uint8_t op, size_t len)
 800829c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
 800829e:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <bt_att_create_pdu.part.0+0x24>)
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	3001      	adds	r0, #1
 80082a4:	9005      	str	r0, [sp, #20]
 80082a6:	2303      	movs	r3, #3
 80082a8:	4806      	ldr	r0, [pc, #24]	; (80082c4 <bt_att_create_pdu.part.0+0x28>)
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	aa03      	add	r2, sp, #12
 80082ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80082b2:	f00b fd05 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
}
 80082b6:	2000      	movs	r0, #0
 80082b8:	b007      	add	sp, #28
 80082ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80082be:	bf00      	nop
 80082c0:	08018be2 	.word	0x08018be2
 80082c4:	08015b1c 	.word	0x08015b1c

080082c8 <find_type_cb>:
{
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
 80082cc:	f8d2 9000 	ldr.w	r9, [r2]
{
 80082d0:	b097      	sub	sp, #92	; 0x5c
 80082d2:	4607      	mov	r7, r0
 80082d4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80082d6:	2500      	movs	r5, #0
 80082d8:	f642 0301 	movw	r3, #10241	; 0x2801
 80082dc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
 80082de:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80082e2:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
 80082e6:	a910      	add	r1, sp, #64	; 0x40
{
 80082e8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80082ea:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80082ee:	f00a fe0a 	bl	8012f06 <bt_uuid_cmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d067      	beq.n	80083c6 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
 80082f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80082fa:	6838      	ldr	r0, [r7, #0]
 80082fc:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
 8008300:	a910      	add	r1, sp, #64	; 0x40
 8008302:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8008306:	f00a fdfe 	bl	8012f06 <bt_uuid_cmp>
 800830a:	b138      	cbz	r0, 800831c <find_type_cb+0x54>
		if (data->group &&
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	b11b      	cbz	r3, 8008318 <find_type_cb+0x50>
 8008310:	885a      	ldrh	r2, [r3, #2]
 8008312:	42b2      	cmp	r2, r6
 8008314:	d200      	bcs.n	8008318 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
 8008316:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
 8008318:	2001      	movs	r0, #1
 800831a:	e009      	b.n	8008330 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
 800831c:	6861      	ldr	r1, [r4, #4]
 800831e:	4608      	mov	r0, r1
 8008320:	f00b fb41 	bl	80139a6 <net_buf_frags_len>
 8008324:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
 8008328:	1a1b      	subs	r3, r3, r0
 800832a:	2b03      	cmp	r3, #3
 800832c:	d803      	bhi.n	8008336 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
 800832e:	2000      	movs	r0, #0
}
 8008330:	b017      	add	sp, #92	; 0x5c
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
 8008336:	4608      	mov	r0, r1
 8008338:	f003 fe50 	bl	800bfdc <net_buf_frag_last>
 800833c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
 800833e:	6860      	ldr	r0, [r4, #4]
 8008340:	f00b fb31 	bl	80139a6 <net_buf_frags_len>
 8008344:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
 8008348:	f105 0b08 	add.w	fp, r5, #8
 800834c:	ebaa 0a00 	sub.w	sl, sl, r0
 8008350:	4658      	mov	r0, fp
 8008352:	f00c fd92 	bl	8014e7a <net_buf_simple_tailroom>
 8008356:	4550      	cmp	r0, sl
 8008358:	d938      	bls.n	80083cc <find_type_cb+0x104>
 800835a:	6860      	ldr	r0, [r4, #4]
 800835c:	f00b fb23 	bl	80139a6 <net_buf_frags_len>
 8008360:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
 8008364:	1a18      	subs	r0, r3, r0
	if (!len) {
 8008366:	b970      	cbnz	r0, 8008386 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
 8008368:	6863      	ldr	r3, [r4, #4]
 800836a:	7998      	ldrb	r0, [r3, #6]
 800836c:	f003 fbd4 	bl	800bb18 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	f00c fd69 	bl	8014e4a <net_buf_alloc_fixed>
		if (!frag) {
 8008378:	4605      	mov	r5, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d0d7      	beq.n	800832e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
 800837e:	4601      	mov	r1, r0
 8008380:	6860      	ldr	r0, [r4, #4]
 8008382:	f003 fe73 	bl	800c06c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
 8008386:	2300      	movs	r3, #0
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800838e:	4639      	mov	r1, r7
 8008390:	2310      	movs	r3, #16
 8008392:	aa02      	add	r2, sp, #8
 8008394:	4640      	mov	r0, r8
 8008396:	47c8      	blx	r9
	if (read < 0) {
 8008398:	1e07      	subs	r7, r0, #0
 800839a:	db14      	blt.n	80083c6 <find_type_cb+0xfe>
	if (read != data->value_len) {
 800839c:	7c22      	ldrb	r2, [r4, #16]
 800839e:	68e0      	ldr	r0, [r4, #12]
 80083a0:	4297      	cmp	r7, r2
 80083a2:	d032      	beq.n	800840a <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
 80083a4:	4601      	mov	r1, r0
 80083a6:	a80b      	add	r0, sp, #44	; 0x2c
 80083a8:	f00a fdd7 	bl	8012f5a <bt_uuid_create>
 80083ac:	b990      	cbnz	r0, 80083d4 <find_type_cb+0x10c>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
 80083ae:	7c23      	ldrb	r3, [r4, #16]
 80083b0:	4a18      	ldr	r2, [pc, #96]	; (8008414 <find_type_cb+0x14c>)
 80083b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_WARN("Unable to create UUID: size %d", read);
 80083b6:	2303      	movs	r3, #3
 80083b8:	4817      	ldr	r0, [pc, #92]	; (8008418 <find_type_cb+0x150>)
 80083ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80083bc:	aa13      	add	r2, sp, #76	; 0x4c
 80083be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80083c2:	f00b fc7d 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60a3      	str	r3, [r4, #8]
 80083ca:	e7a5      	b.n	8008318 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
 80083cc:	4658      	mov	r0, fp
 80083ce:	f00c fd54 	bl	8014e7a <net_buf_simple_tailroom>
 80083d2:	e7c8      	b.n	8008366 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
 80083d4:	b2fa      	uxtb	r2, r7
 80083d6:	a902      	add	r1, sp, #8
 80083d8:	a806      	add	r0, sp, #24
 80083da:	f00a fdbe 	bl	8012f5a <bt_uuid_create>
 80083de:	b918      	cbnz	r0, 80083e8 <find_type_cb+0x120>
			BT_WARN("Unable to create UUID: size %d", read);
 80083e0:	4b0e      	ldr	r3, [pc, #56]	; (800841c <find_type_cb+0x154>)
 80083e2:	e9cd 3714 	strd	r3, r7, [sp, #80]	; 0x50
 80083e6:	e7e6      	b.n	80083b6 <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
 80083e8:	a906      	add	r1, sp, #24
 80083ea:	a80b      	add	r0, sp, #44	; 0x2c
 80083ec:	f00a fd8b 	bl	8012f06 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d1e8      	bne.n	80083c6 <find_type_cb+0xfe>
	data->err = 0x00;
 80083f4:	2300      	movs	r3, #0
 80083f6:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
 80083f8:	2104      	movs	r1, #4
 80083fa:	f105 0008 	add.w	r0, r5, #8
 80083fe:	f003 febd 	bl	800c17c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
 8008402:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
 8008404:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
 8008406:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
 8008408:	e786      	b.n	8008318 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
 800840a:	463a      	mov	r2, r7
 800840c:	a902      	add	r1, sp, #8
 800840e:	f00a fd2d 	bl	8012e6c <memcmp>
 8008412:	e7ed      	b.n	80083f0 <find_type_cb+0x128>
 8008414:	08018bfd 	.word	0x08018bfd
 8008418:	08015b1c 	.word	0x08015b1c
 800841c:	08018c1c 	.word	0x08018c1c

08008420 <bt_att_accept.part.0>:
	}

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
 8008420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
		BT_ERR("No available ATT context for conn %p", conn);
 8008422:	4b08      	ldr	r3, [pc, #32]	; (8008444 <bt_att_accept.part.0+0x24>)
 8008424:	aa03      	add	r2, sp, #12
 8008426:	e9cd 3004 	strd	r3, r0, [sp, #16]
 800842a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800842e:	2303      	movs	r3, #3
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <bt_att_accept.part.0+0x28>)
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	f00b fc44 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
	}

	*ch = &chan->chan.chan;

	return 0;
}
 8008438:	f06f 000b 	mvn.w	r0, #11
 800843c:	b007      	add	sp, #28
 800843e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008442:	bf00      	nop
 8008444:	08018c3b 	.word	0x08018c3b
 8008448:	08015b1c 	.word	0x08015b1c

0800844c <att_get>:
{
 800844c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
 800844e:	7b43      	ldrb	r3, [r0, #13]
 8008450:	2b07      	cmp	r3, #7
{
 8008452:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
 8008454:	d00d      	beq.n	8008472 <att_get+0x26>
		BT_WARN("Not connected");
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <att_get+0x7c>)
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	481c      	ldr	r0, [pc, #112]	; (80084cc <att_get+0x80>)
 800845c:	2302      	movs	r3, #2
 800845e:	aa03      	add	r2, sp, #12
 8008460:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return NULL;
 8008464:	2400      	movs	r4, #0
		BT_WARN("Not connected");
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	f00b fc2a 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
}
 800846c:	4620      	mov	r0, r4
 800846e:	b006      	add	sp, #24
 8008470:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
 8008472:	2104      	movs	r1, #4
 8008474:	f00b fa66 	bl	8013944 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 8008478:	4604      	mov	r4, r0
 800847a:	b950      	cbnz	r0, 8008492 <att_get+0x46>
		BT_ERR("Unable to find ATT channel");
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <att_get+0x84>)
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	4812      	ldr	r0, [pc, #72]	; (80084cc <att_get+0x80>)
 8008482:	2302      	movs	r3, #2
 8008484:	aa03      	add	r2, sp, #12
 8008486:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800848a:	9303      	str	r3, [sp, #12]
 800848c:	f00b fc18 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
		return NULL;
 8008490:	e7ec      	b.n	800846c <att_get+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8008492:	f3bf 8f5b 	dmb	ish
 8008496:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 800849a:	f3bf 8f5b 	dmb	ish
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
 800849e:	075b      	lsls	r3, r3, #29
 80084a0:	d40e      	bmi.n	80084c0 <att_get+0x74>
 80084a2:	490c      	ldr	r1, [pc, #48]	; (80084d4 <att_get+0x88>)
 80084a4:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <att_get+0x8c>)
 80084a6:	480d      	ldr	r0, [pc, #52]	; (80084dc <att_get+0x90>)
 80084a8:	f640 232b 	movw	r3, #2603	; 0xa2b
 80084ac:	f009 fefc 	bl	80122a8 <assert_print>
 80084b0:	480b      	ldr	r0, [pc, #44]	; (80084e0 <att_get+0x94>)
 80084b2:	f009 fef9 	bl	80122a8 <assert_print>
 80084b6:	4808      	ldr	r0, [pc, #32]	; (80084d8 <att_get+0x8c>)
 80084b8:	f640 212b 	movw	r1, #2603	; 0xa2b
 80084bc:	f009 feed 	bl	801229a <assert_post_action>
	return att_chan->att;
 80084c0:	f854 4c08 	ldr.w	r4, [r4, #-8]
 80084c4:	e7d2      	b.n	800846c <att_get+0x20>
 80084c6:	bf00      	nop
 80084c8:	08018c60 	.word	0x08018c60
 80084cc:	08015b1c 	.word	0x08015b1c
 80084d0:	08018c6e 	.word	0x08018c6e
 80084d4:	08018cb8 	.word	0x08018cb8
 80084d8:	08018c89 	.word	0x08018c89
 80084dc:	08016836 	.word	0x08016836
 80084e0:	08018ce8 	.word	0x08018ce8

080084e4 <bt_att_connected>:
{
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
 80084e8:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
 80084ec:	3808      	subs	r0, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80084ee:	f3bf 8f5b 	dmb	ish
 80084f2:	e853 2f00 	ldrex	r2, [r3]
 80084f6:	f042 0204 	orr.w	r2, r2, #4
 80084fa:	e843 2100 	strex	r1, r2, [r3]
 80084fe:	2900      	cmp	r1, #0
 8008500:	d1f7      	bne.n	80084f2 <bt_att_connected+0xe>
 8008502:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8008506:	f3bf 8f5b 	dmb	ish
 800850a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800850e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
 8008512:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 8008514:	bf5e      	ittt	pl
 8008516:	2317      	movpl	r3, #23
 8008518:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
 800851c:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
 8008520:	f00b fb88 	bl	8013c34 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
 8008524:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8008528:	4903      	ldr	r1, [pc, #12]	; (8008538 <bt_att_connected+0x54>)
 800852a:	f007 f867 	bl	800f5fc <k_work_init_delayable>
	bt_gatt_connected(ch->chan.conn);
 800852e:	6820      	ldr	r0, [r4, #0]
}
 8008530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
 8008534:	f001 bd12 	b.w	8009f5c <bt_gatt_connected>
 8008538:	080090d1 	.word	0x080090d1

0800853c <bt_att_accept>:
{
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	4607      	mov	r7, r0
 8008542:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
 8008544:	4830      	ldr	r0, [pc, #192]	; (8008608 <bt_att_accept+0xcc>)
 8008546:	2200      	movs	r2, #0
 8008548:	2300      	movs	r3, #0
 800854a:	4669      	mov	r1, sp
 800854c:	f006 f8d2 	bl	800e6f4 <k_mem_slab_alloc>
 8008550:	4605      	mov	r5, r0
 8008552:	b130      	cbz	r0, 8008562 <bt_att_accept+0x26>
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff ff63 	bl	8008420 <bt_att_accept.part.0>
 800855a:	4605      	mov	r5, r0
}
 800855c:	4628      	mov	r0, r5
 800855e:	b009      	add	sp, #36	; 0x24
 8008560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
 8008562:	4601      	mov	r1, r0
 8008564:	2230      	movs	r2, #48	; 0x30
 8008566:	9800      	ldr	r0, [sp, #0]
 8008568:	f00a fc9b 	bl	8012ea2 <memset>
	att->conn = conn;
 800856c:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
 800856e:	4827      	ldr	r0, [pc, #156]	; (800860c <bt_att_accept+0xd0>)
	list->tail = NULL;
 8008570:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
 8008572:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
 8008576:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
 8008580:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
 8008582:	f006 f8b7 	bl	800e6f4 <k_mem_slab_alloc>
 8008586:	4605      	mov	r5, r0
 8008588:	b170      	cbz	r0, 80085a8 <bt_att_accept+0x6c>
		BT_WARN("No available ATT channel for conn %p", att->conn);
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	4a20      	ldr	r2, [pc, #128]	; (8008610 <bt_att_accept+0xd4>)
 800858e:	4821      	ldr	r0, [pc, #132]	; (8008614 <bt_att_accept+0xd8>)
 8008590:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008594:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8008598:	2303      	movs	r3, #3
 800859a:	aa05      	add	r2, sp, #20
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	f00b fb8f 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
 80085a2:	f06f 050b 	mvn.w	r5, #11
 80085a6:	e7d9      	b.n	800855c <bt_att_accept+0x20>
	(void)memset(chan, 0, sizeof(*chan));
 80085a8:	4601      	mov	r1, r0
 80085aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80085ae:	9801      	ldr	r0, [sp, #4]
 80085b0:	f00a fc77 	bl	8012ea2 <memset>
	chan->chan.chan.ops = &ops;
 80085b4:	9801      	ldr	r0, [sp, #4]
 80085b6:	4b18      	ldr	r3, [pc, #96]	; (8008618 <bt_att_accept+0xdc>)
 80085b8:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
 80085ba:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80085be:	f00c feea 	bl	8015396 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	f3bf 8f5b 	dmb	ish
 80085c8:	33f8      	adds	r3, #248	; 0xf8
 80085ca:	e853 2f00 	ldrex	r2, [r3]
 80085ce:	e843 5100 	strex	r1, r5, [r3]
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d1f9      	bne.n	80085ca <bt_att_accept+0x8e>
 80085d6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
 80085da:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
 80085dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	chan->att = att;
 80085de:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
 80085e0:	b91b      	cbnz	r3, 80085ea <bt_att_accept+0xae>
 80085e2:	f104 000c 	add.w	r0, r4, #12
 80085e6:	f00c fed6 	bl	8015396 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
 80085ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
 80085ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
Z_GENLIST_PREPEND(slist, snode)
 80085f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
 80085f2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
	list->head = node;
 80085f6:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
 80085f8:	b902      	cbnz	r2, 80085fc <bt_att_accept+0xc0>
	list->tail = node;
 80085fa:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
 80085fc:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0cf      	beq.n	80085a2 <bt_att_accept+0x66>
	*ch = &chan->chan.chan;
 8008602:	3308      	adds	r3, #8
 8008604:	6033      	str	r3, [r6, #0]
	return 0;
 8008606:	e7a9      	b.n	800855c <bt_att_accept+0x20>
 8008608:	20000518 	.word	0x20000518
 800860c:	20000538 	.word	0x20000538
 8008610:	08018d04 	.word	0x08018d04
 8008614:	08015b1c 	.word	0x08015b1c
 8008618:	200002d0 	.word	0x200002d0

0800861c <chan_send>:
{
 800861c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
 8008620:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8008622:	f3bf 8f5b 	dmb	ish
{
 8008626:	4691      	mov	r9, r2
 8008628:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800862c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
 8008630:	0752      	lsls	r2, r2, #29
{
 8008632:	b089      	sub	sp, #36	; 0x24
 8008634:	4606      	mov	r6, r0
 8008636:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
 8008638:	d552      	bpl.n	80086e0 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2bd2      	cmp	r3, #210	; 0xd2
 800863e:	d116      	bne.n	800866e <chan_send+0x52>
		err = bt_smp_sign(chan->att->conn, buf);
 8008640:	6803      	ldr	r3, [r0, #0]
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f00c fb30 	bl	8014ca8 <bt_smp_sign>
		if (err) {
 8008648:	4605      	mov	r5, r0
 800864a:	b180      	cbz	r0, 800866e <chan_send+0x52>
			BT_ERR("Error signing data");
 800864c:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <chan_send+0xcc>)
 800864e:	4827      	ldr	r0, [pc, #156]	; (80086ec <chan_send+0xd0>)
 8008650:	9306      	str	r3, [sp, #24]
 8008652:	aa05      	add	r2, sp, #20
 8008654:	2302      	movs	r3, #2
 8008656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800865a:	9305      	str	r3, [sp, #20]
 800865c:	f00b fb30 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
 8008660:	4620      	mov	r0, r4
 8008662:	f003 fc5b 	bl	800bf1c <net_buf_unref>
}
 8008666:	4628      	mov	r0, r5
 8008668:	b009      	add	sp, #36	; 0x24
 800866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
 800866e:	f104 0008 	add.w	r0, r4, #8
 8008672:	f00c fbfe 	bl	8014e72 <net_buf_simple_headroom>
	state->len = buf->len;
 8008676:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
 800867a:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	d10a      	bne.n	8008698 <chan_send+0x7c>
	switch (att_op_get_type(buf->data[0])) {
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	7818      	ldrb	r0, [r3, #0]
 8008686:	f00b f9ae 	bl	80139e6 <att_op_get_type>
 800868a:	1e41      	subs	r1, r0, #1
 800868c:	b2c9      	uxtb	r1, r1
 800868e:	2904      	cmp	r1, #4
 8008690:	bf9c      	itt	ls
 8008692:	4b17      	ldrls	r3, [pc, #92]	; (80086f0 <chan_send+0xd4>)
 8008694:	f853 9021 	ldrls.w	r9, [r3, r1, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 8008698:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
 800869a:	f8c6 9150 	str.w	r9, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 800869e:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <chan_send+0xd8>)
 80086a2:	4599      	cmp	r9, r3
 80086a4:	d018      	beq.n	80086d8 <chan_send+0xbc>
	} else if (cb == chan_cfm_sent) {
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <chan_send+0xdc>)
 80086a8:	4599      	cmp	r9, r3
 80086aa:	d017      	beq.n	80086dc <chan_send+0xc0>
		return att_sent;
 80086ac:	4913      	ldr	r1, [pc, #76]	; (80086fc <chan_send+0xe0>)
 80086ae:	4b14      	ldr	r3, [pc, #80]	; (8008700 <chan_send+0xe4>)
 80086b0:	4a14      	ldr	r2, [pc, #80]	; (8008704 <chan_send+0xe8>)
 80086b2:	4589      	cmp	r9, r1
 80086b4:	bf18      	it	ne
 80086b6:	4613      	movne	r3, r2
			       &chan->chan.chan);
 80086b8:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
 80086ba:	9600      	str	r6, [sp, #0]
 80086bc:	4622      	mov	r2, r4
 80086be:	2104      	movs	r1, #4
 80086c0:	f00b f91c 	bl	80138fc <bt_l2cap_send_cb>
	if (err) {
 80086c4:	4605      	mov	r5, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0cd      	beq.n	8008666 <chan_send+0x4a>
	buf->data = buf->__buf + state->offset;
 80086ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
 80086cc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
 80086d0:	fa10 f787 	uxtah	r7, r0, r7
 80086d4:	60a7      	str	r7, [r4, #8]
}
 80086d6:	e7c6      	b.n	8008666 <chan_send+0x4a>
		return att_rsp_sent;
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <chan_send+0xec>)
 80086da:	e7ed      	b.n	80086b8 <chan_send+0x9c>
		return att_cfm_sent;
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <chan_send+0xf0>)
 80086de:	e7eb      	b.n	80086b8 <chan_send+0x9c>
		return -EINVAL;
 80086e0:	f06f 0515 	mvn.w	r5, #21
 80086e4:	e7bf      	b.n	8008666 <chan_send+0x4a>
 80086e6:	bf00      	nop
 80086e8:	08018d29 	.word	0x08018d29
 80086ec:	08015b1c 	.word	0x08015b1c
 80086f0:	08016290 	.word	0x08016290
 80086f4:	08013ccb 	.word	0x08013ccb
 80086f8:	08013ce7 	.word	0x08013ce7
 80086fc:	08008285 	.word	0x08008285
 8008700:	08008109 	.word	0x08008109
 8008704:	080139b7 	.word	0x080139b7
 8008708:	080080f9 	.word	0x080080f9
 800870c:	080080e9 	.word	0x080080e9

08008710 <bt_att_chan_req_send>:
{
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
 8008714:	4604      	mov	r4, r0
 8008716:	b958      	cbnz	r0, 8008730 <bt_att_chan_req_send+0x20>
 8008718:	491d      	ldr	r1, [pc, #116]	; (8008790 <bt_att_chan_req_send+0x80>)
 800871a:	481e      	ldr	r0, [pc, #120]	; (8008794 <bt_att_chan_req_send+0x84>)
 800871c:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <bt_att_chan_req_send+0x88>)
 800871e:	f44f 7312 	mov.w	r3, #584	; 0x248
 8008722:	f009 fdc1 	bl	80122a8 <assert_print>
 8008726:	481c      	ldr	r0, [pc, #112]	; (8008798 <bt_att_chan_req_send+0x88>)
 8008728:	f44f 7112 	mov.w	r1, #584	; 0x248
 800872c:	f009 fdb5 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(req);
 8008730:	b95d      	cbnz	r5, 800874a <bt_att_chan_req_send+0x3a>
 8008732:	491a      	ldr	r1, [pc, #104]	; (800879c <bt_att_chan_req_send+0x8c>)
 8008734:	4817      	ldr	r0, [pc, #92]	; (8008794 <bt_att_chan_req_send+0x84>)
 8008736:	4a18      	ldr	r2, [pc, #96]	; (8008798 <bt_att_chan_req_send+0x88>)
 8008738:	f240 2349 	movw	r3, #585	; 0x249
 800873c:	f009 fdb4 	bl	80122a8 <assert_print>
 8008740:	4815      	ldr	r0, [pc, #84]	; (8008798 <bt_att_chan_req_send+0x88>)
 8008742:	f240 2149 	movw	r1, #585	; 0x249
 8008746:	f009 fda8 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(req->func);
 800874a:	686b      	ldr	r3, [r5, #4]
 800874c:	b95b      	cbnz	r3, 8008766 <bt_att_chan_req_send+0x56>
 800874e:	4914      	ldr	r1, [pc, #80]	; (80087a0 <bt_att_chan_req_send+0x90>)
 8008750:	4810      	ldr	r0, [pc, #64]	; (8008794 <bt_att_chan_req_send+0x84>)
 8008752:	4a11      	ldr	r2, [pc, #68]	; (8008798 <bt_att_chan_req_send+0x88>)
 8008754:	f240 234a 	movw	r3, #586	; 0x24a
 8008758:	f009 fda6 	bl	80122a8 <assert_print>
 800875c:	480e      	ldr	r0, [pc, #56]	; (8008798 <bt_att_chan_req_send+0x88>)
 800875e:	f240 214a 	movw	r1, #586	; 0x24a
 8008762:	f009 fd9a 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
 8008766:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800876a:	b15b      	cbz	r3, 8008784 <bt_att_chan_req_send+0x74>
 800876c:	490d      	ldr	r1, [pc, #52]	; (80087a4 <bt_att_chan_req_send+0x94>)
 800876e:	4809      	ldr	r0, [pc, #36]	; (8008794 <bt_att_chan_req_send+0x84>)
 8008770:	4a09      	ldr	r2, [pc, #36]	; (8008798 <bt_att_chan_req_send+0x88>)
 8008772:	f240 234b 	movw	r3, #587	; 0x24b
 8008776:	f009 fd97 	bl	80122a8 <assert_print>
 800877a:	4807      	ldr	r0, [pc, #28]	; (8008798 <bt_att_chan_req_send+0x88>)
 800877c:	f240 214b 	movw	r1, #587	; 0x24b
 8008780:	f009 fd8b 	bl	801229a <assert_post_action>
	return chan_req_send(chan, req);
 8008784:	4629      	mov	r1, r5
 8008786:	4620      	mov	r0, r4
}
 8008788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
 800878c:	f00b bab9 	b.w	8013d02 <chan_req_send>
 8008790:	08018d3c 	.word	0x08018d3c
 8008794:	08016836 	.word	0x08016836
 8008798:	08018c89 	.word	0x08018c89
 800879c:	08018d52 	.word	0x08018d52
 80087a0:	08018d41 	.word	0x08018d41
 80087a4:	08018d4b 	.word	0x08018d4b

080087a8 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
 80087a8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
 80087aa:	4a07      	ldr	r2, [pc, #28]	; (80087c8 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
 80087ac:	4604      	mov	r4, r0
 80087ae:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
 80087b0:	f7ff ff34 	bl	800861c <chan_send>
	if (err) {
 80087b4:	b130      	cbz	r0, 80087c4 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
 80087b6:	4629      	mov	r1, r5
 80087b8:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
 80087bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
 80087c0:	f003 bb78 	b.w	800beb4 <net_buf_put>
}
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	08013ccb 	.word	0x08013ccb

080087cc <att_write_cmd>:
{
 80087cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
 80087d2:	f101 0008 	add.w	r0, r1, #8
 80087d6:	460d      	mov	r5, r1
 80087d8:	f00c fb43 	bl	8014e62 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 80087dc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
 80087de:	68af      	ldr	r7, [r5, #8]
 80087e0:	89ad      	ldrh	r5, [r5, #12]
 80087e2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 80087e4:	2100      	movs	r1, #0
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	f00b ff60 	bl	80146ac <bt_gatt_change_aware>
 80087ec:	b320      	cbz	r0, 8008838 <att_write_cmd+0x6c>
	if (!handle) {
 80087ee:	b32e      	cbz	r6, 800883c <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
 80087f0:	2218      	movs	r2, #24
 80087f2:	2100      	movs	r1, #0
 80087f4:	4668      	mov	r0, sp
 80087f6:	f00a fb54 	bl	8012ea2 <memset>
	data.conn = chan->att->conn;
 80087fa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 80087fc:	4a10      	ldr	r2, [pc, #64]	; (8008840 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	9300      	str	r3, [sp, #0]
	data.req = req;
 8008802:	2300      	movs	r3, #0
 8008804:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
 8008808:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 800880c:	2301      	movs	r3, #1
 800880e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 8008812:	4631      	mov	r1, r6
 8008814:	466b      	mov	r3, sp
 8008816:	4630      	mov	r0, r6
	data.value = value;
 8008818:	9703      	str	r7, [sp, #12]
	data.len = len;
 800881a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 800881e:	f00b f927 	bl	8013a70 <bt_gatt_foreach_attr>
	if (data.err) {
 8008822:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008826:	b923      	cbnz	r3, 8008832 <att_write_cmd+0x66>
	if (data.buf) {
 8008828:	9901      	ldr	r1, [sp, #4]
 800882a:	b111      	cbz	r1, 8008832 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 800882c:	4620      	mov	r0, r4
 800882e:	f7ff ffbb 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
 8008832:	2000      	movs	r0, #0
}
 8008834:	b007      	add	sp, #28
 8008836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 8008838:	2012      	movs	r0, #18
 800883a:	e7fb      	b.n	8008834 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
 800883c:	2001      	movs	r0, #1
 800883e:	e7f9      	b.n	8008834 <att_write_cmd+0x68>
 8008840:	08013e07 	.word	0x08013e07

08008844 <bt_att_chan_create_pdu>:
{
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
 800884a:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
 800884e:	1c53      	adds	r3, r2, #1
 8008850:	428b      	cmp	r3, r1
{
 8008852:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
 8008854:	d914      	bls.n	8008880 <bt_att_chan_create_pdu+0x3c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
 8008856:	466c      	mov	r4, sp
 8008858:	b088      	sub	sp, #32
 800885a:	466a      	mov	r2, sp
 800885c:	481c      	ldr	r0, [pc, #112]	; (80088d0 <bt_att_chan_create_pdu+0x8c>)
 800885e:	6193      	str	r3, [r2, #24]
 8008860:	2304      	movs	r3, #4
 8008862:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008866:	f842 3f0c 	str.w	r3, [r2, #12]!
 800886a:	481a      	ldr	r0, [pc, #104]	; (80088d4 <bt_att_chan_create_pdu+0x90>)
 800886c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8008870:	f00b fa26 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
 8008874:	46a5      	mov	sp, r4
		return NULL;
 8008876:	2400      	movs	r4, #0
}
 8008878:	4620      	mov	r0, r4
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bdb0      	pop	{r4, r5, r7, pc}
	switch (att_op_get_type(op)) {
 8008880:	4628      	mov	r0, r5
 8008882:	f00b f8b0 	bl	80139e6 <att_op_get_type>
 8008886:	2802      	cmp	r0, #2
 8008888:	d001      	beq.n	800888e <bt_att_chan_create_pdu+0x4a>
 800888a:	2804      	cmp	r0, #4
 800888c:	d114      	bne.n	80088b8 <bt_att_chan_create_pdu+0x74>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
 800888e:	4a12      	ldr	r2, [pc, #72]	; (80088d8 <bt_att_chan_create_pdu+0x94>)
 8008890:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
 8008892:	2100      	movs	r1, #0
 8008894:	4608      	mov	r0, r1
 8008896:	f00b f82e 	bl	80138f6 <bt_l2cap_create_pdu_timeout>
 800889a:	4604      	mov	r4, r0
	if (!buf) {
 800889c:	b988      	cbnz	r0, 80088c2 <bt_att_chan_create_pdu+0x7e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <bt_att_chan_create_pdu+0x98>)
 80088a0:	480c      	ldr	r0, [pc, #48]	; (80088d4 <bt_att_chan_create_pdu+0x90>)
 80088a2:	e9c7 3504 	strd	r3, r5, [r7, #16]
 80088a6:	f107 020c 	add.w	r2, r7, #12
 80088aa:	2303      	movs	r3, #3
 80088ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	f00b fa05 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
		return NULL;
 80088b6:	e7df      	b.n	8008878 <bt_att_chan_create_pdu+0x34>
		buf = bt_l2cap_create_pdu(NULL, 0);
 80088b8:	f04f 32ff 	mov.w	r2, #4294967295
 80088bc:	f04f 33ff 	mov.w	r3, #4294967295
 80088c0:	e7e7      	b.n	8008892 <bt_att_chan_create_pdu+0x4e>
	return net_buf_simple_add(&buf->b, len);
 80088c2:	2101      	movs	r1, #1
 80088c4:	3008      	adds	r0, #8
 80088c6:	f003 fc59 	bl	800c17c <net_buf_simple_add>
	hdr->code = op;
 80088ca:	7005      	strb	r5, [r0, #0]
	return buf;
 80088cc:	e7d4      	b.n	8008878 <bt_att_chan_create_pdu+0x34>
 80088ce:	bf00      	nop
 80088d0:	08018d56 	.word	0x08018d56
 80088d4:	08015b1c 	.word	0x08015b1c
 80088d8:	000493e0 	.word	0x000493e0
 80088dc:	08018a38 	.word	0x08018a38

080088e0 <bt_att_recv>:
{
 80088e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088e4:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
 80088e6:	898b      	ldrh	r3, [r1, #12]
{
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
 80088ee:	b97b      	cbnz	r3, 8008910 <bt_att_recv+0x30>
		BT_ERR("Too small ATT PDU received");
 80088f0:	4b53      	ldr	r3, [pc, #332]	; (8008a40 <bt_att_recv+0x160>)
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	2302      	movs	r3, #2
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	f107 020c 	add.w	r2, r7, #12
 80088fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
 8008900:	4850      	ldr	r0, [pc, #320]	; (8008a44 <bt_att_recv+0x164>)
 8008902:	f00b f9dd 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
}
 8008906:	2000      	movs	r0, #0
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
 8008910:	2101      	movs	r1, #1
 8008912:	f109 0008 	add.w	r0, r9, #8
 8008916:	f003 fc0f 	bl	800c138 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
 800891a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800891e:	4605      	mov	r5, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0f0      	beq.n	8008906 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
 8008924:	4a48      	ldr	r2, [pc, #288]	; (8008a48 <bt_att_recv+0x168>)
 8008926:	7800      	ldrb	r0, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
 8008928:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 800892c:	2300      	movs	r3, #0
 800892e:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
 8008930:	f812 c033 	ldrb.w	ip, [r2, r3, lsl #3]
 8008934:	4584      	cmp	ip, r0
 8008936:	d120      	bne.n	800897a <bt_att_recv+0x9a>
		if (handler->type == ATT_REQUEST &&
 8008938:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800893c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008940:	f893 8002 	ldrb.w	r8, [r3, #2]
 8008944:	f1b8 0f01 	cmp.w	r8, #1
 8008948:	d136      	bne.n	80089b8 <bt_att_recv+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800894a:	f3bf 8f5b 	dmb	ish
 800894e:	34f0      	adds	r4, #240	; 0xf0
 8008950:	e854 3f00 	ldrex	r3, [r4]
 8008954:	f043 0201 	orr.w	r2, r3, #1
 8008958:	e844 2000 	strex	r0, r2, [r4]
 800895c:	2800      	cmp	r0, #0
 800895e:	d1f7      	bne.n	8008950 <bt_att_recv+0x70>
 8008960:	f3bf 8f5b 	dmb	ish
 8008964:	07da      	lsls	r2, r3, #31
 8008966:	d53b      	bpl.n	80089e0 <bt_att_recv+0x100>
			BT_WARN("Ignoring unexpected request");
 8008968:	4b38      	ldr	r3, [pc, #224]	; (8008a4c <bt_att_recv+0x16c>)
			BT_WARN("Ignoring unexpected indication");
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	2302      	movs	r3, #2
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	f107 020c 	add.w	r2, r7, #12
 8008974:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8008978:	e7c2      	b.n	8008900 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 800897a:	3301      	adds	r3, #1
 800897c:	2b0d      	cmp	r3, #13
 800897e:	d1d7      	bne.n	8008930 <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
 8008980:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <bt_att_recv+0x170>)
 8008982:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8008986:	e9c7 3004 	strd	r3, r0, [r7, #16]
 800898a:	f107 020c 	add.w	r2, r7, #12
 800898e:	482d      	ldr	r0, [pc, #180]	; (8008a44 <bt_att_recv+0x164>)
 8008990:	2303      	movs	r3, #3
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	f00b f994 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
 8008998:	7829      	ldrb	r1, [r5, #0]
 800899a:	4608      	mov	r0, r1
 800899c:	f00b f823 	bl	80139e6 <att_op_get_type>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d0b0      	beq.n	8008906 <bt_att_recv+0x26>
 80089a4:	2805      	cmp	r0, #5
 80089a6:	d0ae      	beq.n	8008906 <bt_att_recv+0x26>
	if (!req) {
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d0ac      	beq.n	8008906 <bt_att_recv+0x26>
 80089ac:	2306      	movs	r3, #6
 80089ae:	2200      	movs	r2, #0
 80089b0:	4630      	mov	r0, r6
 80089b2:	f00b fac1 	bl	8013f38 <send_err_rsp.part.0>
 80089b6:	e7a6      	b.n	8008906 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
 80089b8:	f1b8 0f05 	cmp.w	r8, #5
 80089bc:	d110      	bne.n	80089e0 <bt_att_recv+0x100>
 80089be:	f3bf 8f5b 	dmb	ish
 80089c2:	34f0      	adds	r4, #240	; 0xf0
 80089c4:	e854 3f00 	ldrex	r3, [r4]
 80089c8:	f043 0202 	orr.w	r2, r3, #2
 80089cc:	e844 2000 	strex	r0, r2, [r4]
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d1f7      	bne.n	80089c4 <bt_att_recv+0xe4>
 80089d4:	f3bf 8f5b 	dmb	ish
 80089d8:	079b      	lsls	r3, r3, #30
 80089da:	d501      	bpl.n	80089e0 <bt_att_recv+0x100>
			BT_WARN("Ignoring unexpected indication");
 80089dc:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <bt_att_recv+0x174>)
 80089de:	e7c4      	b.n	800896a <bt_att_recv+0x8a>
	if (buf->len < handler->expect_len) {
 80089e0:	eb01 030c 	add.w	r3, r1, ip
 80089e4:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 80089e8:	785a      	ldrb	r2, [r3, #1]
 80089ea:	4282      	cmp	r2, r0
 80089ec:	d916      	bls.n	8008a1c <bt_att_recv+0x13c>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 80089ee:	46e9      	mov	r9, sp
 80089f0:	b088      	sub	sp, #32
 80089f2:	466a      	mov	r2, sp
 80089f4:	4918      	ldr	r1, [pc, #96]	; (8008a58 <bt_att_recv+0x178>)
 80089f6:	782b      	ldrb	r3, [r5, #0]
 80089f8:	6193      	str	r3, [r2, #24]
 80089fa:	2404      	movs	r4, #4
 80089fc:	e9c2 1004 	strd	r1, r0, [r2, #16]
 8008a00:	f842 4f0c 	str.w	r4, [r2, #12]!
 8008a04:	480f      	ldr	r0, [pc, #60]	; (8008a44 <bt_att_recv+0x164>)
 8008a06:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8008a0a:	f00b f959 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
 8008a0e:	f1b8 0f01 	cmp.w	r8, #1
 8008a12:	46cd      	mov	sp, r9
 8008a14:	f47f af77 	bne.w	8008906 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
 8008a18:	4623      	mov	r3, r4
 8008a1a:	e00b      	b.n	8008a34 <bt_att_recv+0x154>
		err = handler->func(att_chan, buf);
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4630      	mov	r0, r6
 8008a22:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
 8008a24:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
 8008a28:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
 8008a2a:	f47f af6c 	bne.w	8008906 <bt_att_recv+0x26>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	f43f af69 	beq.w	8008906 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
 8008a34:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
 8008a36:	2900      	cmp	r1, #0
 8008a38:	f43f af65 	beq.w	8008906 <bt_att_recv+0x26>
 8008a3c:	e7b7      	b.n	80089ae <bt_att_recv+0xce>
 8008a3e:	bf00      	nop
 8008a40:	08018d7b 	.word	0x08018d7b
 8008a44:	08015b1c 	.word	0x08015b1c
 8008a48:	080162a4 	.word	0x080162a4
 8008a4c:	08018d96 	.word	0x08018d96
 8008a50:	08018df0 	.word	0x08018df0
 8008a54:	08018db2 	.word	0x08018db2
 8008a58:	08018dd1 	.word	0x08018dd1

08008a5c <att_write_req>:
{
 8008a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a60:	4604      	mov	r4, r0
 8008a62:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
 8008a64:	f101 0008 	add.w	r0, r1, #8
 8008a68:	460d      	mov	r5, r1
 8008a6a:	f00c f9fa 	bl	8014e62 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 8008a6e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
 8008a70:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
 8008a74:	89ad      	ldrh	r5, [r5, #12]
 8008a76:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
 8008a78:	2101      	movs	r1, #1
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	f00b fe16 	bl	80146ac <bt_gatt_change_aware>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d03f      	beq.n	8008b04 <att_write_req+0xa8>
	if (!handle) {
 8008a84:	2e00      	cmp	r6, #0
 8008a86:	d03f      	beq.n	8008b08 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
 8008a88:	2218      	movs	r2, #24
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4668      	mov	r0, sp
 8008a8e:	f00a fa08 	bl	8012ea2 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
 8008a92:	2200      	movs	r2, #0
 8008a94:	2113      	movs	r1, #19
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7ff fed4 	bl	8008844 <bt_att_chan_create_pdu>
 8008a9c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
 8008a9e:	b378      	cbz	r0, 8008b00 <att_write_req+0xa4>
	data.conn = chan->att->conn;
 8008aa0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 8008aa2:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
 8008aae:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
 8008ab2:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 8008ab4:	466b      	mov	r3, sp
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4630      	mov	r0, r6
	data.len = len;
 8008aba:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
 8008abe:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
 8008ac2:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
 8008ac6:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 8008aca:	f00a ffd1 	bl	8013a70 <bt_gatt_foreach_attr>
	if (data.err) {
 8008ace:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8008ad2:	b175      	cbz	r5, 8008af2 <att_write_req+0x96>
			net_buf_unref(data.buf);
 8008ad4:	9801      	ldr	r0, [sp, #4]
 8008ad6:	f003 fa21 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008ada:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008ade:	4632      	mov	r2, r6
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f00b fa28 	bl	8013f38 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 8008ae8:	463d      	mov	r5, r7
}
 8008aea:	4628      	mov	r0, r5
 8008aec:	b007      	add	sp, #28
 8008aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
 8008af2:	9901      	ldr	r1, [sp, #4]
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d0f8      	beq.n	8008aea <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7ff fe55 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
 8008afe:	e7f4      	b.n	8008aea <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
 8008b00:	250e      	movs	r5, #14
 8008b02:	e7f2      	b.n	8008aea <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 8008b04:	2512      	movs	r5, #18
 8008b06:	e7f0      	b.n	8008aea <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
 8008b08:	2501      	movs	r5, #1
 8008b0a:	e7ee      	b.n	8008aea <att_write_req+0x8e>
 8008b0c:	08013e07 	.word	0x08013e07

08008b10 <att_read_group_req>:
{
 8008b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
 8008b14:	7b0c      	ldrb	r4, [r1, #12]
 8008b16:	3c04      	subs	r4, #4
 8008b18:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 8008b1a:	2c02      	cmp	r4, #2
{
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	b08c      	sub	sp, #48	; 0x30
 8008b20:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
 8008b22:	d001      	beq.n	8008b28 <att_read_group_req+0x18>
 8008b24:	2c10      	cmp	r4, #16
 8008b26:	d16e      	bne.n	8008c06 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
 8008b28:	2104      	movs	r1, #4
 8008b2a:	3008      	adds	r0, #8
 8008b2c:	f003 fb04 	bl	800c138 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 8008b30:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008b34:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008b36:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 8008b38:	1d01      	adds	r1, r0, #4
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	f00a fa0c 	bl	8012f5a <bt_uuid_create>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d061      	beq.n	8008c0a <att_read_group_req+0xfa>
	if (!start || !end) {
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d03a      	beq.n	8008bc0 <att_read_group_req+0xb0>
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	2f00      	cmp	r7, #0
 8008b4e:	d036      	beq.n	8008bbe <att_read_group_req+0xae>
	if (start > end) {
 8008b50:	42b7      	cmp	r7, r6
 8008b52:	d335      	bcc.n	8008bc0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8008b54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008b58:	a901      	add	r1, sp, #4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f88d 4004 	strb.w	r4, [sp, #4]
 8008b60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008b64:	f00a f9cf 	bl	8012f06 <bt_uuid_cmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d134      	bne.n	8008bd6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
 8008b6c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
 8008b6e:	2214      	movs	r2, #20
 8008b70:	2100      	movs	r1, #0
 8008b72:	a807      	add	r0, sp, #28
 8008b74:	f00a f995 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
 8008b78:	2201      	movs	r2, #1
 8008b7a:	2111      	movs	r1, #17
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f00b f9f8 	bl	8013f72 <bt_att_create_pdu>
 8008b82:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d040      	beq.n	8008c0a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
 8008b88:	2101      	movs	r1, #1
 8008b8a:	3008      	adds	r0, #8
	data.uuid = uuid;
 8008b8c:	e9cd 5807 	strd	r5, r8, [sp, #28]
 8008b90:	f003 faf4 	bl	800c17c <net_buf_simple_add>
	data.rsp->len = 0U;
 8008b94:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8008b98:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8008b9a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
 8008b9c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8008ba0:	4a1b      	ldr	r2, [pc, #108]	; (8008c10 <att_read_group_req+0x100>)
	data.group = NULL;
 8008ba2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f00a ff61 	bl	8013a70 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
 8008bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb0:	781c      	ldrb	r4, [r3, #0]
 8008bb2:	bb1c      	cbnz	r4, 8008bfc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
 8008bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb6:	f003 f9b1 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008bba:	230a      	movs	r3, #10
 8008bbc:	e018      	b.n	8008bf0 <att_read_group_req+0xe0>
			*err = 0U;
 8008bbe:	463e      	mov	r6, r7
	if (!req) {
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4632      	mov	r2, r6
 8008bc4:	2110      	movs	r1, #16
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f00b f9b6 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008bcc:	2400      	movs	r4, #0
}
 8008bce:	4620      	mov	r0, r4
 8008bd0:	b00c      	add	sp, #48	; 0x30
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
 8008bd6:	f642 0301 	movw	r3, #10241	; 0x2801
 8008bda:	a907      	add	r1, sp, #28
 8008bdc:	4640      	mov	r0, r8
 8008bde:	f88d 401c 	strb.w	r4, [sp, #28]
 8008be2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008be6:	f00a f98e 	bl	8012f06 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d0be      	beq.n	8008b6c <att_read_group_req+0x5c>
	if (!req) {
 8008bee:	2310      	movs	r3, #16
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	2110      	movs	r1, #16
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f00b f99f 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008bfa:	e7e8      	b.n	8008bce <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f7ff fdd2 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
 8008c04:	e7e2      	b.n	8008bcc <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
 8008c06:	2404      	movs	r4, #4
 8008c08:	e7e1      	b.n	8008bce <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
 8008c0a:	240e      	movs	r4, #14
 8008c0c:	e7df      	b.n	8008bce <att_read_group_req+0xbe>
 8008c0e:	bf00      	nop
 8008c10:	08008131 	.word	0x08008131

08008c14 <att_read_mult_req>:
{
 8008c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
 8008c18:	6886      	ldr	r6, [r0, #8]
{
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
 8008c20:	4630      	mov	r0, r6
 8008c22:	2101      	movs	r1, #1
 8008c24:	f00b fd42 	bl	80146ac <bt_gatt_change_aware>
 8008c28:	b3b8      	cbz	r0, 8008c9a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
 8008c2a:	2210      	movs	r2, #16
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4668      	mov	r0, sp
 8008c30:	f00a f937 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
 8008c34:	2200      	movs	r2, #0
 8008c36:	210f      	movs	r1, #15
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f00b f99a 	bl	8013f72 <bt_att_create_pdu>
 8008c3e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
 8008c40:	b368      	cbz	r0, 8008c9e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008c42:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8008ca4 <att_read_mult_req+0x90>
	data.chan = chan;
 8008c46:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
 8008c48:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008c4c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
 8008c50:	89ab      	ldrh	r3, [r5, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d804      	bhi.n	8008c60 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008c56:	9902      	ldr	r1, [sp, #8]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f7ff fda5 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
 8008c5e:	e018      	b.n	8008c92 <att_read_mult_req+0x7e>
 8008c60:	4638      	mov	r0, r7
 8008c62:	f00c f8fe 	bl	8014e62 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008c66:	466b      	mov	r3, sp
 8008c68:	464a      	mov	r2, r9
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008c6e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008c72:	f00a fefd 	bl	8013a70 <bt_gatt_foreach_attr>
		if (data.err) {
 8008c76:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0e8      	beq.n	8008c50 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
 8008c7e:	9802      	ldr	r0, [sp, #8]
 8008c80:	f003 f94c 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008c84:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008c88:	4632      	mov	r2, r6
 8008c8a:	210e      	movs	r1, #14
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f00b f953 	bl	8013f38 <send_err_rsp.part.0>
	return 0;
 8008c92:	2000      	movs	r0, #0
}
 8008c94:	b005      	add	sp, #20
 8008c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 8008c9a:	2012      	movs	r0, #18
 8008c9c:	e7fa      	b.n	8008c94 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
 8008c9e:	200e      	movs	r0, #14
 8008ca0:	e7f8      	b.n	8008c94 <att_read_mult_req+0x80>
 8008ca2:	bf00      	nop
 8008ca4:	08013ee5 	.word	0x08013ee5

08008ca8 <att_read_rsp>:
{
 8008ca8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
 8008cac:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	2101      	movs	r1, #1
{
 8008cb8:	4614      	mov	r4, r2
 8008cba:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
 8008cbc:	f00b fcf6 	bl	80146ac <bt_gatt_change_aware>
 8008cc0:	b388      	cbz	r0, 8008d26 <att_read_rsp+0x7e>
	if (!handle) {
 8008cc2:	b396      	cbz	r6, 8008d2a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
 8008cc4:	2210      	movs	r2, #16
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4668      	mov	r0, sp
 8008cca:	f00a f8ea 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
 8008cce:	2200      	movs	r2, #0
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	f00b f94d 	bl	8013f72 <bt_att_create_pdu>
 8008cd8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
 8008cda:	b340      	cbz	r0, 8008d2e <att_read_rsp+0x86>
	data.offset = offset;
 8008cdc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8008ce0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <att_read_rsp+0x8c>)
	data.chan = chan;
 8008cec:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008cee:	466b      	mov	r3, sp
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f00a febc 	bl	8013a70 <bt_gatt_foreach_attr>
	if (data.err) {
 8008cf8:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8008cfc:	b174      	cbz	r4, 8008d1c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
 8008cfe:	9802      	ldr	r0, [sp, #8]
 8008d00:	f003 f90c 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008d04:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008d08:	4632      	mov	r2, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f00b f913 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008d12:	2400      	movs	r4, #0
}
 8008d14:	4620      	mov	r0, r4
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008d1c:	9902      	ldr	r1, [sp, #8]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f7ff fd42 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
 8008d24:	e7f6      	b.n	8008d14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
 8008d26:	2412      	movs	r4, #18
 8008d28:	e7f4      	b.n	8008d14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
 8008d2a:	2401      	movs	r4, #1
 8008d2c:	e7f2      	b.n	8008d14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
 8008d2e:	240e      	movs	r4, #14
 8008d30:	e7f0      	b.n	8008d14 <att_read_rsp+0x6c>
 8008d32:	bf00      	nop
 8008d34:	08013ee5 	.word	0x08013ee5

08008d38 <att_read_type_req>:
{
 8008d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
 8008d3c:	7b0c      	ldrb	r4, [r1, #12]
 8008d3e:	3c04      	subs	r4, #4
 8008d40:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
 8008d42:	2c02      	cmp	r4, #2
{
 8008d44:	4605      	mov	r5, r0
 8008d46:	b08c      	sub	sp, #48	; 0x30
 8008d48:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
 8008d4a:	d001      	beq.n	8008d50 <att_read_type_req+0x18>
 8008d4c:	2c10      	cmp	r4, #16
 8008d4e:	d14f      	bne.n	8008df0 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
 8008d50:	2104      	movs	r1, #4
 8008d52:	3008      	adds	r0, #8
 8008d54:	f003 f9f0 	bl	800c138 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 8008d58:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008d5c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008d5e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
 8008d60:	1d01      	adds	r1, r0, #4
 8008d62:	4622      	mov	r2, r4
 8008d64:	4640      	mov	r0, r8
 8008d66:	f00a f8f8 	bl	8012f5a <bt_uuid_create>
 8008d6a:	b188      	cbz	r0, 8008d90 <att_read_type_req+0x58>
	if (!start || !end) {
 8008d6c:	b19e      	cbz	r6, 8008d96 <att_read_type_req+0x5e>
 8008d6e:	b18f      	cbz	r7, 8008d94 <att_read_type_req+0x5c>
	if (start > end) {
 8008d70:	42be      	cmp	r6, r7
 8008d72:	d810      	bhi.n	8008d96 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
 8008d74:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
 8008d76:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
 8008d78:	2100      	movs	r1, #0
 8008d7a:	eb0d 0002 	add.w	r0, sp, r2
 8008d7e:	f00a f890 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
 8008d82:	2201      	movs	r2, #1
 8008d84:	2109      	movs	r1, #9
 8008d86:	4620      	mov	r0, r4
 8008d88:	f00b f8f3 	bl	8013f72 <bt_att_create_pdu>
 8008d8c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
 8008d8e:	b968      	cbnz	r0, 8008dac <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
 8008d90:	240e      	movs	r4, #14
 8008d92:	e007      	b.n	8008da4 <att_read_type_req+0x6c>
			*err = 0U;
 8008d94:	463e      	mov	r6, r7
	if (!req) {
 8008d96:	2301      	movs	r3, #1
 8008d98:	4632      	mov	r2, r6
 8008d9a:	2108      	movs	r1, #8
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f00b f8cb 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008da2:	2400      	movs	r4, #0
}
 8008da4:	4620      	mov	r0, r4
 8008da6:	b00c      	add	sp, #48	; 0x30
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
 8008dac:	2101      	movs	r1, #1
 8008dae:	3008      	adds	r0, #8
	data.uuid = uuid;
 8008db0:	e9cd 5806 	strd	r5, r8, [sp, #24]
 8008db4:	f003 f9e2 	bl	800c17c <net_buf_simple_add>
	data.rsp->len = 0U;
 8008db8:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008dbc:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8008dbe:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
 8008dc2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 8008dc6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008dc8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 8008dcc:	4630      	mov	r0, r6
 8008dce:	ab06      	add	r3, sp, #24
 8008dd0:	f00a fe4e 	bl	8013a70 <bt_gatt_foreach_attr>
	if (data.err) {
 8008dd4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8008dd8:	b12c      	cbz	r4, 8008de6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
 8008dda:	9808      	ldr	r0, [sp, #32]
 8008ddc:	f003 f89e 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008de0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008de4:	e7d8      	b.n	8008d98 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008de6:	9908      	ldr	r1, [sp, #32]
 8008de8:	4628      	mov	r0, r5
 8008dea:	f7ff fcdd 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
 8008dee:	e7d9      	b.n	8008da4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
 8008df0:	2404      	movs	r4, #4
 8008df2:	e7d7      	b.n	8008da4 <att_read_type_req+0x6c>
 8008df4:	080081dd 	.word	0x080081dd

08008df8 <att_find_type_req>:
{
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	4688      	mov	r8, r1
 8008dfe:	b086      	sub	sp, #24
 8008e00:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
 8008e02:	2106      	movs	r1, #6
 8008e04:	f108 0008 	add.w	r0, r8, #8
 8008e08:	f003 f996 	bl	800c138 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008e0c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
 8008e0e:	b317      	cbz	r7, 8008e56 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008e10:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
 8008e14:	f1b9 0f00 	cmp.w	r9, #0
 8008e18:	d01c      	beq.n	8008e54 <att_find_type_req+0x5c>
	if (start > end) {
 8008e1a:	45b9      	cmp	r9, r7
 8008e1c:	d31b      	bcc.n	8008e56 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
 8008e1e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
 8008e20:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008e24:	2400      	movs	r4, #0
 8008e26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008e2a:	a901      	add	r1, sp, #4
 8008e2c:	4668      	mov	r0, sp
	value = buf->data;
 8008e2e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
 8008e32:	f88d 4000 	strb.w	r4, [sp]
 8008e36:	f88d 4004 	strb.w	r4, [sp, #4]
 8008e3a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008e3e:	f00a f862 	bl	8012f06 <bt_uuid_cmp>
 8008e42:	4606      	mov	r6, r0
 8008e44:	b190      	cbz	r0, 8008e6c <att_find_type_req+0x74>
	if (!req) {
 8008e46:	230a      	movs	r3, #10
 8008e48:	463a      	mov	r2, r7
 8008e4a:	2106      	movs	r1, #6
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f00b f873 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008e52:	e007      	b.n	8008e64 <att_find_type_req+0x6c>
			*err = 0U;
 8008e54:	464f      	mov	r7, r9
	if (!req) {
 8008e56:	2301      	movs	r3, #1
 8008e58:	463a      	mov	r2, r7
 8008e5a:	2106      	movs	r1, #6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f00b f86b 	bl	8013f38 <send_err_rsp.part.0>
		return 0;
 8008e62:	2400      	movs	r4, #0
}
 8008e64:	4620      	mov	r0, r4
 8008e66:	b006      	add	sp, #24
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
 8008e6c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
 8008e70:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
 8008e74:	4601      	mov	r1, r0
 8008e76:	2214      	movs	r2, #20
 8008e78:	a801      	add	r0, sp, #4
 8008e7a:	f00a f812 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
 8008e7e:	4632      	mov	r2, r6
 8008e80:	2107      	movs	r1, #7
 8008e82:	4640      	mov	r0, r8
 8008e84:	f00b f875 	bl	8013f72 <bt_att_create_pdu>
 8008e88:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
 8008e8a:	b1d8      	cbz	r0, 8008ec4 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008e8c:	230a      	movs	r3, #10
 8008e8e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008e92:	4a0d      	ldr	r2, [pc, #52]	; (8008ec8 <att_find_type_req+0xd0>)
	data.value_len = value_len;
 8008e94:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008e98:	ab01      	add	r3, sp, #4
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	4638      	mov	r0, r7
	data.value = value;
 8008e9e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
 8008ea2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008ea4:	f00a fde4 	bl	8013a70 <bt_gatt_foreach_attr>
	if (data.err) {
 8008ea8:	f89d 4015 	ldrb.w	r4, [sp, #21]
 8008eac:	b12c      	cbz	r4, 8008eba <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
 8008eae:	9802      	ldr	r0, [sp, #8]
 8008eb0:	f003 f834 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008eb4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008eb8:	e7ce      	b.n	8008e58 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008eba:	9902      	ldr	r1, [sp, #8]
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7ff fc73 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
 8008ec2:	e7cf      	b.n	8008e64 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
 8008ec4:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
 8008ec6:	e7cd      	b.n	8008e64 <att_find_type_req+0x6c>
 8008ec8:	080082c9 	.word	0x080082c9

08008ecc <att_find_info_req>:
{
 8008ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
 8008ece:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008ed0:	881e      	ldrh	r6, [r3, #0]
{
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	4605      	mov	r5, r0
	if (!start || !end) {
 8008ed6:	b19e      	cbz	r6, 8008f00 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008ed8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
 8008eda:	b184      	cbz	r4, 8008efe <att_find_info_req+0x32>
	if (start > end) {
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d80f      	bhi.n	8008f00 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
 8008ee0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
 8008ee2:	2210      	movs	r2, #16
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4668      	mov	r0, sp
 8008ee8:	f009 ffdb 	bl	8012ea2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
 8008eec:	2200      	movs	r2, #0
 8008eee:	2105      	movs	r1, #5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f00b f83e 	bl	8013f72 <bt_att_create_pdu>
 8008ef6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
 8008ef8:	b958      	cbnz	r0, 8008f12 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
 8008efa:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
 8008efc:	e007      	b.n	8008f0e <att_find_info_req+0x42>
			*err = 0U;
 8008efe:	4626      	mov	r6, r4
	if (!req) {
 8008f00:	2301      	movs	r3, #1
 8008f02:	4632      	mov	r2, r6
 8008f04:	2104      	movs	r1, #4
 8008f06:	4628      	mov	r0, r5
 8008f08:	f00b f816 	bl	8013f38 <send_err_rsp.part.0>
	return 0;
 8008f0c:	2000      	movs	r0, #0
}
 8008f0e:	b005      	add	sp, #20
 8008f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 8008f12:	4621      	mov	r1, r4
 8008f14:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <att_find_info_req+0x6c>)
	data.chan = chan;
 8008f16:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 8008f18:	466b      	mov	r3, sp
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f00a fda8 	bl	8013a70 <bt_gatt_foreach_attr>
	if (!data.rsp) {
 8008f20:	9c02      	ldr	r4, [sp, #8]
 8008f22:	b924      	cbnz	r4, 8008f2e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
 8008f24:	9801      	ldr	r0, [sp, #4]
 8008f26:	f002 fff9 	bl	800bf1c <net_buf_unref>
	if (!req) {
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	e7e9      	b.n	8008f02 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
 8008f2e:	9901      	ldr	r1, [sp, #4]
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7ff fc39 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
 8008f36:	e7e9      	b.n	8008f0c <att_find_info_req+0x40>
 8008f38:	08013b9d 	.word	0x08013b9d

08008f3c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
 8008f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
 8008f3e:	2300      	movs	r3, #0
{
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
 8008f44:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
 8008f46:	f007 fdcd 	bl	8010ae4 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <bt_att_req_alloc+0x3c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
 8008f50:	bf04      	itt	eq
 8008f52:	2500      	moveq	r5, #0
 8008f54:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
 8008f56:	a901      	add	r1, sp, #4
 8008f58:	4808      	ldr	r0, [pc, #32]	; (8008f7c <bt_att_req_alloc+0x40>)
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	f005 fbc9 	bl	800e6f4 <k_mem_slab_alloc>
 8008f62:	4601      	mov	r1, r0
 8008f64:	b930      	cbnz	r0, 8008f74 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
 8008f66:	9801      	ldr	r0, [sp, #4]
 8008f68:	221c      	movs	r2, #28
 8008f6a:	f009 ff9a 	bl	8012ea2 <memset>

	return req;
 8008f6e:	9801      	ldr	r0, [sp, #4]
}
 8008f70:	b003      	add	sp, #12
 8008f72:	bd30      	pop	{r4, r5, pc}
		return NULL;
 8008f74:	2000      	movs	r0, #0
 8008f76:	e7fb      	b.n	8008f70 <bt_att_req_alloc+0x34>
 8008f78:	200015ec 	.word	0x200015ec
 8008f7c:	20000558 	.word	0x20000558

08008f80 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
 8008f80:	b507      	push	{r0, r1, r2, lr}
 8008f82:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
 8008f84:	6880      	ldr	r0, [r0, #8]
 8008f86:	b120      	cbz	r0, 8008f92 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
 8008f88:	f002 ffc8 	bl	800bf1c <net_buf_unref>
		req->buf = NULL;
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
 8008f92:	4803      	ldr	r0, [pc, #12]	; (8008fa0 <bt_att_req_free+0x20>)
 8008f94:	a901      	add	r1, sp, #4
 8008f96:	f005 fc19 	bl	800e7cc <k_mem_slab_free>
}
 8008f9a:	b003      	add	sp, #12
 8008f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fa0:	20000558 	.word	0x20000558

08008fa4 <att_handle_rsp>:
{
 8008fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	b089      	sub	sp, #36	; 0x24
	k_work_cancel_delayable(&chan->timeout_work);
 8008fac:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	4692      	mov	sl, r2
 8008fb4:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
 8008fb6:	f006 fc4b 	bl	800f850 <k_work_cancel_delayable>
	if (!chan->req) {
 8008fba:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
 8008fbe:	b9d5      	cbnz	r5, 8008ff6 <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
 8008fc0:	4b16      	ldr	r3, [pc, #88]	; (800901c <att_handle_rsp+0x78>)
 8008fc2:	9306      	str	r3, [sp, #24]
 8008fc4:	4816      	ldr	r0, [pc, #88]	; (8009020 <att_handle_rsp+0x7c>)
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	aa05      	add	r2, sp, #20
 8008fca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
 8008fce:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
 8008fd0:	9305      	str	r3, [sp, #20]
 8008fd2:	f00a fe75 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
 8008fd6:	6820      	ldr	r0, [r4, #0]
 8008fd8:	f00a fed3 	bl	8013d82 <att_req_send_process>
	if (func) {
 8008fdc:	b13e      	cbz	r6, 8008fee <att_handle_rsp+0x4a>
		func(chan->att->conn, err, pdu, len, params);
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	f8cd b000 	str.w	fp, [sp]
 8008fe4:	6800      	ldr	r0, [r0, #0]
 8008fe6:	4653      	mov	r3, sl
 8008fe8:	464a      	mov	r2, r9
 8008fea:	4641      	mov	r1, r8
 8008fec:	47b0      	blx	r6
}
 8008fee:	2000      	movs	r0, #0
 8008ff0:	b009      	add	sp, #36	; 0x24
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <att_handle_rsp+0x80>)
 8008ff8:	429d      	cmp	r5, r3
 8008ffa:	f04f 0700 	mov.w	r7, #0
 8008ffe:	d103      	bne.n	8009008 <att_handle_rsp+0x64>
		chan->req = NULL;
 8009000:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
 8009004:	463e      	mov	r6, r7
		goto process;
 8009006:	e7e6      	b.n	8008fd6 <att_handle_rsp+0x32>
	func = chan->req->func;
 8009008:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
 800900a:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
 800900c:	4628      	mov	r0, r5
	params = chan->req->user_data;
 800900e:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
 8009012:	f7ff ffb5 	bl	8008f80 <bt_att_req_free>
	chan->req = NULL;
 8009016:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
 800901a:	e7dc      	b.n	8008fd6 <att_handle_rsp+0x32>
 800901c:	08018e0a 	.word	0x08018e0a
 8009020:	08015b1c 	.word	0x08015b1c
 8009024:	20001658 	.word	0x20001658

08009028 <bt_att_disconnected>:
{
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
 800902a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
 800902e:	b085      	sub	sp, #20
 8009030:	4604      	mov	r4, r0
	if (!att_chan->att) {
 8009032:	b385      	cbz	r5, 8009096 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
 8009034:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
 8009038:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800903c:	f00a fc98 	bl	8013970 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
 8009040:	f1a4 0608 	sub.w	r6, r4, #8
 8009044:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4638      	mov	r0, r7
 800904e:	f002 fed3 	bl	800bdf8 <net_buf_get>
 8009052:	4602      	mov	r2, r0
 8009054:	bb08      	cbnz	r0, 800909a <bt_att_disconnected+0x72>
	if (chan->req) {
 8009056:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800905a:	b123      	cbz	r3, 8009066 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
 800905c:	4601      	mov	r1, r0
 800905e:	230e      	movs	r3, #14
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff ff9f 	bl	8008fa4 <att_handle_rsp>
	chan->att = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
 800906c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800906e:	b993      	cbnz	r3, 8009096 <bt_att_disconnected+0x6e>
	att_reset(att);
 8009070:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
 8009072:	9803      	ldr	r0, [sp, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	2300      	movs	r3, #0
 8009078:	300c      	adds	r0, #12
 800907a:	f002 febd 	bl	800bdf8 <net_buf_get>
 800907e:	b978      	cbnz	r0, 80090a0 <bt_att_disconnected+0x78>
	while (!sys_slist_is_empty(&att->reqs)) {
 8009080:	9803      	ldr	r0, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
 8009082:	6845      	ldr	r5, [r0, #4]
 8009084:	b97d      	cbnz	r5, 80090a6 <bt_att_disconnected+0x7e>
	att->conn = NULL;
 8009086:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
 8009088:	a903      	add	r1, sp, #12
 800908a:	4810      	ldr	r0, [pc, #64]	; (80090cc <bt_att_disconnected+0xa4>)
 800908c:	f005 fb9e 	bl	800e7cc <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	f000 ffe5 	bl	800a060 <bt_gatt_disconnected>
}
 8009096:	b005      	add	sp, #20
 8009098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
 800909a:	f002 ff3f 	bl	800bf1c <net_buf_unref>
 800909e:	e7d3      	b.n	8009048 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
 80090a0:	f002 ff3c 	bl	800bf1c <net_buf_unref>
 80090a4:	e7e5      	b.n	8009072 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80090a6:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
 80090a8:	686e      	ldr	r6, [r5, #4]
 80090aa:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 80090ac:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80090ae:	4295      	cmp	r5, r2
	list->tail = node;
 80090b0:	bf08      	it	eq
 80090b2:	6083      	streq	r3, [r0, #8]
 80090b4:	b136      	cbz	r6, 80090c4 <bt_att_disconnected+0x9c>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
 80090b6:	69ab      	ldr	r3, [r5, #24]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	2300      	movs	r3, #0
 80090bc:	6800      	ldr	r0, [r0, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	210e      	movs	r1, #14
 80090c2:	47b0      	blx	r6
		bt_att_req_free(req);
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7ff ff5b 	bl	8008f80 <bt_att_req_free>
 80090ca:	e7d9      	b.n	8009080 <bt_att_disconnected+0x58>
 80090cc:	20000518 	.word	0x20000518

080090d0 <att_timeout>:
{
 80090d0:	b510      	push	{r4, lr}
 80090d2:	b086      	sub	sp, #24
	BT_ERR("ATT Timeout");
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <att_timeout+0x28>)
 80090d6:	9304      	str	r3, [sp, #16]
{
 80090d8:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
 80090da:	2302      	movs	r3, #2
 80090dc:	aa03      	add	r2, sp, #12
 80090de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80090e2:	4806      	ldr	r0, [pc, #24]	; (80090fc <att_timeout+0x2c>)
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	f00a fdeb 	bl	8013cc0 <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
 80090ea:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
 80090ee:	f7ff ff9b 	bl	8009028 <bt_att_disconnected>
}
 80090f2:	b006      	add	sp, #24
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	bf00      	nop
 80090f8:	08018e21 	.word	0x08018e21
 80090fc:	08015b1c 	.word	0x08015b1c

08009100 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
 8009100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	4617      	mov	r7, r2
 8009108:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
 800910a:	4605      	mov	r5, r0
 800910c:	b958      	cbnz	r0, 8009126 <bt_att_send+0x26>
 800910e:	492d      	ldr	r1, [pc, #180]	; (80091c4 <bt_att_send+0xc4>)
 8009110:	482d      	ldr	r0, [pc, #180]	; (80091c8 <bt_att_send+0xc8>)
 8009112:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <bt_att_send+0xcc>)
 8009114:	f640 43d6 	movw	r3, #3286	; 0xcd6
 8009118:	f009 f8c6 	bl	80122a8 <assert_print>
 800911c:	482b      	ldr	r0, [pc, #172]	; (80091cc <bt_att_send+0xcc>)
 800911e:	f640 41d6 	movw	r1, #3286	; 0xcd6
 8009122:	f009 f8ba 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(buf);
 8009126:	b95c      	cbnz	r4, 8009140 <bt_att_send+0x40>
 8009128:	4929      	ldr	r1, [pc, #164]	; (80091d0 <bt_att_send+0xd0>)
 800912a:	4827      	ldr	r0, [pc, #156]	; (80091c8 <bt_att_send+0xc8>)
 800912c:	4a27      	ldr	r2, [pc, #156]	; (80091cc <bt_att_send+0xcc>)
 800912e:	f640 43d7 	movw	r3, #3287	; 0xcd7
 8009132:	f009 f8b9 	bl	80122a8 <assert_print>
 8009136:	4825      	ldr	r0, [pc, #148]	; (80091cc <bt_att_send+0xcc>)
 8009138:	f640 41d7 	movw	r1, #3287	; 0xcd7
 800913c:	f009 f8ad 	bl	801229a <assert_post_action>

	att = att_get(conn);
 8009140:	4628      	mov	r0, r5
 8009142:	f7ff f983 	bl	800844c <att_get>
	if (!att) {
 8009146:	4606      	mov	r6, r0
 8009148:	b938      	cbnz	r0, 800915a <bt_att_send+0x5a>
		net_buf_unref(buf);
 800914a:	4620      	mov	r0, r4
 800914c:	f002 fee6 	bl	800bf1c <net_buf_unref>
		return -ENOTCONN;
 8009150:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
 8009154:	b002      	add	sp, #8
 8009156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
 800915a:	b147      	cbz	r7, 800916e <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
 800915c:	f8cd 8000 	str.w	r8, [sp]
 8009160:	463b      	mov	r3, r7
 8009162:	4622      	mov	r2, r4
 8009164:	2104      	movs	r1, #4
 8009166:	4628      	mov	r0, r5
 8009168:	f00a fbc8 	bl	80138fc <bt_l2cap_send_cb>
 800916c:	e7f2      	b.n	8009154 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
 800916e:	f100 070c 	add.w	r7, r0, #12
 8009172:	4621      	mov	r1, r4
 8009174:	4638      	mov	r0, r7
 8009176:	f002 fe9d 	bl	800beb4 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
 800917a:	2200      	movs	r2, #0
 800917c:	2300      	movs	r3, #0
 800917e:	4638      	mov	r0, r7
 8009180:	f002 fe3a 	bl	800bdf8 <net_buf_get>
	if (!buf) {
 8009184:	4605      	mov	r5, r0
 8009186:	b908      	cbnz	r0, 800918c <bt_att_send+0x8c>
	return 0;
 8009188:	2000      	movs	r0, #0
 800918a:	e7e3      	b.n	8009154 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 800918c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800918e:	b1a3      	cbz	r3, 80091ba <bt_att_send+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8009190:	681c      	ldr	r4, [r3, #0]
 8009192:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8009196:	b10c      	cbz	r4, 800919c <bt_att_send+0x9c>
 8009198:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
 800919c:	2200      	movs	r2, #0
 800919e:	4629      	mov	r1, r5
 80091a0:	f7ff fa3c 	bl	800861c <chan_send>
		if (err >= 0) {
 80091a4:	2800      	cmp	r0, #0
 80091a6:	daef      	bge.n	8009188 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 80091a8:	b13c      	cbz	r4, 80091ba <bt_att_send+0xba>
 80091aa:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80091ae:	b10b      	cbz	r3, 80091b4 <bt_att_send+0xb4>
 80091b0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
 80091b4:	4620      	mov	r0, r4
 80091b6:	461c      	mov	r4, r3
 80091b8:	e7f0      	b.n	800919c <bt_att_send+0x9c>
		k_queue_prepend(&att->tx_queue._queue, buf);
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	f00c f902 	bl	80153c6 <k_queue_prepend>
 80091c2:	e7e1      	b.n	8009188 <bt_att_send+0x88>
 80091c4:	08018a33 	.word	0x08018a33
 80091c8:	08016836 	.word	0x08016836
 80091cc:	08018c89 	.word	0x08018c89
 80091d0:	08017d7b 	.word	0x08017d7b

080091d4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
 80091d8:	4605      	mov	r5, r0
 80091da:	b958      	cbnz	r0, 80091f4 <bt_att_req_send+0x20>
 80091dc:	4916      	ldr	r1, [pc, #88]	; (8009238 <bt_att_req_send+0x64>)
 80091de:	4817      	ldr	r0, [pc, #92]	; (800923c <bt_att_req_send+0x68>)
 80091e0:	4a17      	ldr	r2, [pc, #92]	; (8009240 <bt_att_req_send+0x6c>)
 80091e2:	f640 43f3 	movw	r3, #3315	; 0xcf3
 80091e6:	f009 f85f 	bl	80122a8 <assert_print>
 80091ea:	4815      	ldr	r0, [pc, #84]	; (8009240 <bt_att_req_send+0x6c>)
 80091ec:	f640 41f3 	movw	r1, #3315	; 0xcf3
 80091f0:	f009 f853 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(req);
 80091f4:	b95c      	cbnz	r4, 800920e <bt_att_req_send+0x3a>
 80091f6:	4913      	ldr	r1, [pc, #76]	; (8009244 <bt_att_req_send+0x70>)
 80091f8:	4810      	ldr	r0, [pc, #64]	; (800923c <bt_att_req_send+0x68>)
 80091fa:	4a11      	ldr	r2, [pc, #68]	; (8009240 <bt_att_req_send+0x6c>)
 80091fc:	f640 43f4 	movw	r3, #3316	; 0xcf4
 8009200:	f009 f852 	bl	80122a8 <assert_print>
 8009204:	480e      	ldr	r0, [pc, #56]	; (8009240 <bt_att_req_send+0x6c>)
 8009206:	f640 41f4 	movw	r1, #3316	; 0xcf4
 800920a:	f009 f846 	bl	801229a <assert_post_action>

	att = att_get(conn);
 800920e:	4628      	mov	r0, r5
 8009210:	f7ff f91c 	bl	800844c <att_get>
	if (!att) {
 8009214:	b160      	cbz	r0, 8009230 <bt_att_req_send+0x5c>
	parent->next = child;
 8009216:	2300      	movs	r3, #0
 8009218:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
 800921a:	6883      	ldr	r3, [r0, #8]
 800921c:	b92b      	cbnz	r3, 800922a <bt_att_req_send+0x56>
	list->head = node;
 800921e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
 8009222:	f00a fdae 	bl	8013d82 <att_req_send_process>

	return 0;
 8009226:	2000      	movs	r0, #0
}
 8009228:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
 800922a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800922c:	6084      	str	r4, [r0, #8]
}
 800922e:	e7f8      	b.n	8009222 <bt_att_req_send+0x4e>
		return -ENOTCONN;
 8009230:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8009234:	e7f8      	b.n	8009228 <bt_att_req_send+0x54>
 8009236:	bf00      	nop
 8009238:	08018a33 	.word	0x08018a33
 800923c:	08016836 	.word	0x08016836
 8009240:	08018c89 	.word	0x08018c89
 8009244:	08018d52 	.word	0x08018d52

08009248 <sc_save.part.0>:
	}

	return true;
}

static void sc_save(uint8_t id, bt_addr_le_t *peer, uint16_t start, uint16_t end)
 8009248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	cfg = find_sc_cfg(id, peer);
	if (!cfg) {
		/* Find and initialize a free sc_cfg entry */
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
		if (!cfg) {
			BT_ERR("unable to save SC: no cfg left");
 800924a:	4b06      	ldr	r3, [pc, #24]	; (8009264 <sc_save.part.0+0x1c>)
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	4806      	ldr	r0, [pc, #24]	; (8009268 <sc_save.part.0+0x20>)
 8009250:	2302      	movs	r3, #2
 8009252:	aa03      	add	r2, sp, #12
 8009254:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	f00a ffc1 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
done:
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
		sc_store(cfg);
	}
}
 800925e:	b007      	add	sp, #28
 8009260:	f85d fb04 	ldr.w	pc, [sp], #4
 8009264:	08018e34 	.word	0x08018e34
 8009268:	08015b4c 	.word	0x08015b4c

0800926c <cf_write.part.0>:
	}

	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
 800926c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!cfg) {
		cfg = find_cf_cfg(NULL);
	}

	if (!cfg) {
		BT_WARN("No space to store Client Supported Features");
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <cf_write.part.0+0x20>)
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	4807      	ldr	r0, [pc, #28]	; (8009290 <cf_write.part.0+0x24>)
 8009274:	2302      	movs	r3, #2
 8009276:	aa03      	add	r2, sp, #12
 8009278:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800927c:	9303      	str	r3, [sp, #12]
 800927e:	f00a ffaf 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
	cfg->id = conn->id;
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);

	return len;
}
 8009282:	f06f 0010 	mvn.w	r0, #16
 8009286:	b007      	add	sp, #28
 8009288:	f85d fb04 	ldr.w	pc, [sp], #4
 800928c:	08018e53 	.word	0x08018e53
 8009290:	08015b4c 	.word	0x08015b4c

08009294 <find_sc_cfg>:
{
 8009294:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
 8009296:	4c0e      	ldr	r4, [pc, #56]	; (80092d0 <find_sc_cfg+0x3c>)
 8009298:	7823      	ldrb	r3, [r4, #0]
 800929a:	4283      	cmp	r3, r0
{
 800929c:	4605      	mov	r5, r0
 800929e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
 80092a0:	d00a      	beq.n	80092b8 <find_sc_cfg+0x24>
 80092a2:	7b23      	ldrb	r3, [r4, #12]
 80092a4:	42ab      	cmp	r3, r5
 80092a6:	d111      	bne.n	80092cc <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
 80092a8:	480a      	ldr	r0, [pc, #40]	; (80092d4 <find_sc_cfg+0x40>)
 80092aa:	2207      	movs	r2, #7
 80092ac:	4631      	mov	r1, r6
 80092ae:	f009 fddd 	bl	8012e6c <memcmp>
 80092b2:	b958      	cbnz	r0, 80092cc <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 80092b4:	2001      	movs	r0, #1
 80092b6:	e005      	b.n	80092c4 <find_sc_cfg+0x30>
 80092b8:	2207      	movs	r2, #7
 80092ba:	1c60      	adds	r0, r4, #1
 80092bc:	f009 fdd6 	bl	8012e6c <memcmp>
		if (id == sc_cfg[i].id &&
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1ee      	bne.n	80092a2 <find_sc_cfg+0xe>
			return &sc_cfg[i];
 80092c4:	230c      	movs	r3, #12
 80092c6:	fb03 4000 	mla	r0, r3, r0, r4
 80092ca:	e000      	b.n	80092ce <find_sc_cfg+0x3a>
	return NULL;
 80092cc:	2000      	movs	r0, #0
}
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	20001870 	.word	0x20001870
 80092d4:	2000187d 	.word	0x2000187d

080092d8 <find_cf_cfg>:
{
 80092d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092da:	4c16      	ldr	r4, [pc, #88]	; (8009334 <find_cf_cfg+0x5c>)
		if (!conn) {
 80092dc:	4605      	mov	r5, r0
 80092de:	b140      	cbz	r0, 80092f2 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 80092e0:	4622      	mov	r2, r4
 80092e2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80092e6:	f00a fa40 	bl	801376a <bt_conn_is_peer_addr_le>
 80092ea:	b1c0      	cbz	r0, 800931e <find_cf_cfg+0x46>
}
 80092ec:	4620      	mov	r0, r4
 80092ee:	b003      	add	sp, #12
 80092f0:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 80092f2:	9000      	str	r0, [sp, #0]
 80092f4:	2207      	movs	r2, #7
 80092f6:	f8cd 0003 	str.w	r0, [sp, #3]
 80092fa:	4669      	mov	r1, sp
 80092fc:	1c60      	adds	r0, r4, #1
 80092fe:	f009 fdb5 	bl	8012e6c <memcmp>
 8009302:	2800      	cmp	r0, #0
 8009304:	d0f2      	beq.n	80092ec <find_cf_cfg+0x14>
 8009306:	2207      	movs	r2, #7
 8009308:	4669      	mov	r1, sp
 800930a:	f104 0011 	add.w	r0, r4, #17
 800930e:	9500      	str	r5, [sp, #0]
 8009310:	f8cd 5003 	str.w	r5, [sp, #3]
 8009314:	f009 fdaa 	bl	8012e6c <memcmp>
 8009318:	b948      	cbnz	r0, 800932e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
 800931a:	3410      	adds	r4, #16
 800931c:	e7e6      	b.n	80092ec <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 800931e:	7c21      	ldrb	r1, [r4, #16]
 8009320:	f104 0211 	add.w	r2, r4, #17
 8009324:	4628      	mov	r0, r5
 8009326:	f00a fa20 	bl	801376a <bt_conn_is_peer_addr_le>
 800932a:	2800      	cmp	r0, #0
 800932c:	d1f5      	bne.n	800931a <find_cf_cfg+0x42>
	return NULL;
 800932e:	2400      	movs	r4, #0
 8009330:	e7dc      	b.n	80092ec <find_cf_cfg+0x14>
 8009332:	bf00      	nop
 8009334:	2000167c 	.word	0x2000167c

08009338 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
 8009338:	b510      	push	{r4, lr}
 800933a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800933c:	4814      	ldr	r0, [pc, #80]	; (8009390 <sc_indicate_rsp+0x58>)
 800933e:	f3bf 8f5b 	dmb	ish
 8009342:	f100 0350 	add.w	r3, r0, #80	; 0x50
 8009346:	e853 2f00 	ldrex	r2, [r3]
 800934a:	f022 0202 	bic.w	r2, r2, #2
 800934e:	e843 2100 	strex	r1, r2, [r3]
 8009352:	2900      	cmp	r1, #0
 8009354:	d1f7      	bne.n	8009346 <sc_indicate_rsp+0xe>
 8009356:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800935a:	f3bf 8f5b 	dmb	ish
 800935e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009360:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8009364:	07da      	lsls	r2, r3, #31
 8009366:	d504      	bpl.n	8009372 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	3020      	adds	r0, #32
 800936e:	f006 fa69 	bl	800f844 <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ffb0 	bl	80092d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 8009378:	b140      	cbz	r0, 800938c <sc_indicate_rsp+0x54>
 800937a:	7a03      	ldrb	r3, [r0, #8]
 800937c:	07db      	lsls	r3, r3, #31
 800937e:	d505      	bpl.n	800938c <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
 8009380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 8009384:	2100      	movs	r1, #0
 8009386:	300c      	adds	r0, #12
 8009388:	f00a bf4b 	b.w	8014222 <atomic_set_bit>
}
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop
 8009390:	20001088 	.word	0x20001088

08009394 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
 8009394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009398:	b087      	sub	sp, #28
 800939a:	461f      	mov	r7, r3
 800939c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
 80093a0:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
 80093a4:	4606      	mov	r6, r0
 80093a6:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d153      	bne.n	8009454 <bt_gatt_attr_write_ccc+0xc0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
 80093ac:	1e7b      	subs	r3, r7, #1
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d853      	bhi.n	800945a <bt_gatt_attr_write_ccc+0xc6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
 80093b2:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
 80093b4:	7815      	ldrb	r5, [r2, #0]
 80093b6:	bf18      	it	ne
 80093b8:	7853      	ldrbne	r3, [r2, #1]
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
 80093ba:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
 80093bc:	bf0c      	ite	eq
 80093be:	b2ad      	uxtheq	r5, r5
 80093c0:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
 80093c4:	f00a ff9f 	bl	8014306 <find_ccc_cfg>
	if (!cfg) {
 80093c8:	4604      	mov	r4, r0
 80093ca:	b9f0      	cbnz	r0, 800940a <bt_gatt_attr_write_ccc+0x76>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
 80093cc:	b91d      	cbnz	r5, 80093d6 <bt_gatt_attr_write_ccc+0x42>
			return len;
 80093ce:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
 80093d0:	b007      	add	sp, #28
 80093d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
 80093d6:	4649      	mov	r1, r9
 80093d8:	f00a ff95 	bl	8014306 <find_ccc_cfg>
		if (!cfg) {
 80093dc:	4604      	mov	r4, r0
 80093de:	b960      	cbnz	r0, 80093fa <bt_gatt_attr_write_ccc+0x66>
			BT_WARN("No space to store CCC cfg");
 80093e0:	4b1f      	ldr	r3, [pc, #124]	; (8009460 <bt_gatt_attr_write_ccc+0xcc>)
 80093e2:	4820      	ldr	r0, [pc, #128]	; (8009464 <bt_gatt_attr_write_ccc+0xd0>)
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	aa03      	add	r2, sp, #12
 80093e8:	2302      	movs	r3, #2
 80093ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	f00a fef6 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 80093f4:	f06f 0010 	mvn.w	r0, #16
 80093f8:	e7ea      	b.n	80093d0 <bt_gatt_attr_write_ccc+0x3c>
	memcpy(dst, src, sizeof(*dst));
 80093fa:	2207      	movs	r2, #7
 80093fc:	f106 0190 	add.w	r1, r6, #144	; 0x90
 8009400:	3001      	adds	r0, #1
 8009402:	f009 fd43 	bl	8012e8c <memcpy>
		cfg->id = conn->id;
 8009406:	7a33      	ldrb	r3, [r6, #8]
 8009408:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
 800940a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800940e:	b9ab      	cbnz	r3, 800943c <bt_gatt_attr_write_ccc+0xa8>
	if (cfg->value != ccc->value) {
 8009410:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
 8009414:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
 8009416:	42ab      	cmp	r3, r5
 8009418:	d003      	beq.n	8009422 <bt_gatt_attr_write_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
 800941a:	4649      	mov	r1, r9
 800941c:	4640      	mov	r0, r8
 800941e:	f00a fe65 	bl	80140ec <gatt_ccc_changed>
	if (!value) {
 8009422:	2d00      	cmp	r5, #0
 8009424:	d1d3      	bne.n	80093ce <bt_gatt_attr_write_ccc+0x3a>
 8009426:	2207      	movs	r2, #7
 8009428:	4669      	mov	r1, sp
 800942a:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 800942c:	9500      	str	r5, [sp, #0]
 800942e:	f8cd 5003 	str.w	r5, [sp, #3]
 8009432:	f009 fd2b 	bl	8012e8c <memcpy>
	cfg->id = 0U;
 8009436:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
 8009438:	8125      	strh	r5, [r4, #8]
}
 800943a:	e7c8      	b.n	80093ce <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
 800943c:	462a      	mov	r2, r5
 800943e:	4641      	mov	r1, r8
 8009440:	4630      	mov	r0, r6
 8009442:	4798      	blx	r3
		if (write < 0) {
 8009444:	2800      	cmp	r0, #0
 8009446:	dbc3      	blt.n	80093d0 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
 8009448:	3801      	subs	r0, #1
 800944a:	2801      	cmp	r0, #1
 800944c:	d9e0      	bls.n	8009410 <bt_gatt_attr_write_ccc+0x7c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
 800944e:	f06f 000d 	mvn.w	r0, #13
 8009452:	e7bd      	b.n	80093d0 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8009454:	f06f 0006 	mvn.w	r0, #6
 8009458:	e7ba      	b.n	80093d0 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 800945a:	f06f 000c 	mvn.w	r0, #12
 800945e:	e7b7      	b.n	80093d0 <bt_gatt_attr_write_ccc+0x3c>
 8009460:	08018e7f 	.word	0x08018e7f
 8009464:	08015b4c 	.word	0x08015b4c

08009468 <read_ppcp>:
{
 8009468:	b513      	push	{r0, r1, r4, lr}
 800946a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
 800946e:	4c0b      	ldr	r4, [pc, #44]	; (800949c <read_ppcp+0x34>)
{
 8009470:	4610      	mov	r0, r2
	if (offset > value_len) {
 8009472:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
 8009474:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
 8009478:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
 800947c:	d80b      	bhi.n	8009496 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
 800947e:	f1c1 0408 	rsb	r4, r1, #8
 8009482:	429c      	cmp	r4, r3
 8009484:	bfa8      	it	ge
 8009486:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
 8009488:	4622      	mov	r2, r4
 800948a:	4469      	add	r1, sp
 800948c:	f009 fcfe 	bl	8012e8c <memcpy>
}
 8009490:	4620      	mov	r0, r4
 8009492:	b002      	add	sp, #8
 8009494:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8009496:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
 800949a:	e7f9      	b.n	8009490 <read_ppcp+0x28>
 800949c:	00280018 	.word	0x00280018

080094a0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
 80094a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <disconnected_cb+0xb8>)
{
 80094a6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 80094a8:	6882      	ldr	r2, [r0, #8]
 80094aa:	429a      	cmp	r2, r3
{
 80094ac:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
 80094ae:	d12f      	bne.n	8009510 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
 80094b0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
 80094b2:	8aab      	ldrh	r3, [r5, #20]
 80094b4:	b363      	cbz	r3, 8009510 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
 80094b6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800955c <disconnected_cb+0xbc>
 80094ba:	1c6c      	adds	r4, r5, #1
 80094bc:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
 80094c0:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80094c4:	f106 0990 	add.w	r9, r6, #144	; 0x90
		if (!cfg->value) {
 80094c8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 80094cc:	b19b      	cbz	r3, 80094f6 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 80094ce:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80094d2:	4622      	mov	r2, r4
 80094d4:	4630      	mov	r0, r6
 80094d6:	f00a f948 	bl	801376a <bt_conn_is_peer_addr_le>
 80094da:	b9e8      	cbnz	r0, 8009518 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 80094dc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 80094e0:	4621      	mov	r1, r4
 80094e2:	f7fe fa49 	bl	8007978 <bt_conn_lookup_addr_le>
			if (tmp) {
 80094e6:	b130      	cbz	r0, 80094f6 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
 80094e8:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
 80094ea:	2b07      	cmp	r3, #7
 80094ec:	bf08      	it	eq
 80094ee:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
 80094f2:	f7fd ff47 	bl	8007384 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 80094f6:	340a      	adds	r4, #10
 80094f8:	4554      	cmp	r4, sl
 80094fa:	d1e5      	bne.n	80094c8 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	d106      	bne.n	8009510 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
 8009502:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
 8009504:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
 8009508:	b113      	cbz	r3, 8009510 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
 800950a:	4641      	mov	r1, r8
 800950c:	4638      	mov	r0, r7
 800950e:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
 8009510:	2001      	movs	r0, #1
 8009512:	b003      	add	sp, #12
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 8009518:	7a30      	ldrb	r0, [r6, #8]
 800951a:	4649      	mov	r1, r9
 800951c:	f009 fe89 	bl	8013232 <bt_addr_le_is_bonded>
 8009520:	b998      	cbnz	r0, 800954a <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
 8009522:	455d      	cmp	r5, fp
 8009524:	d102      	bne.n	800952c <disconnected_cb+0x8c>
					sc_clear(conn);
 8009526:	4630      	mov	r0, r6
 8009528:	f00a ffe1 	bl	80144ee <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 800952c:	2300      	movs	r3, #0
 800952e:	2207      	movs	r2, #7
 8009530:	4669      	mov	r1, sp
 8009532:	4620      	mov	r0, r4
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	f8cd 3003 	str.w	r3, [sp, #3]
 800953a:	f009 fca7 	bl	8012e8c <memcpy>
	cfg->id = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
 8009544:	f8a4 3007 	strh.w	r3, [r4, #7]
}
 8009548:	e7d5      	b.n	80094f6 <disconnected_cb+0x56>
 800954a:	2207      	movs	r2, #7
 800954c:	4649      	mov	r1, r9
 800954e:	4620      	mov	r0, r4
 8009550:	f009 fc9c 	bl	8012e8c <memcpy>
}
 8009554:	e7cf      	b.n	80094f6 <disconnected_cb+0x56>
 8009556:	bf00      	nop
 8009558:	08009395 	.word	0x08009395
 800955c:	20000324 	.word	0x20000324

08009560 <bt_gatt_init>:
{
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8009562:	4b28      	ldr	r3, [pc, #160]	; (8009604 <bt_gatt_init+0xa4>)
 8009564:	f3bf 8f5b 	dmb	ish
 8009568:	2201      	movs	r2, #1
 800956a:	e853 1f00 	ldrex	r1, [r3]
 800956e:	2900      	cmp	r1, #0
 8009570:	d103      	bne.n	800957a <bt_gatt_init+0x1a>
 8009572:	e843 2000 	strex	r0, r2, [r3]
 8009576:	2800      	cmp	r0, #0
 8009578:	d1f7      	bne.n	800956a <bt_gatt_init+0xa>
 800957a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
 800957e:	d13f      	bne.n	8009600 <bt_gatt_init+0xa0>
 8009580:	f3bf 8f5b 	dmb	ish
 8009584:	4b20      	ldr	r3, [pc, #128]	; (8009608 <bt_gatt_init+0xa8>)
 8009586:	e853 1f00 	ldrex	r1, [r3]
 800958a:	2900      	cmp	r1, #0
 800958c:	d103      	bne.n	8009596 <bt_gatt_init+0x36>
 800958e:	e843 2000 	strex	r0, r2, [r3]
 8009592:	2800      	cmp	r0, #0
 8009594:	d1f7      	bne.n	8009586 <bt_gatt_init+0x26>
 8009596:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
 800959a:	d02c      	beq.n	80095f6 <bt_gatt_init+0x96>
	list->head = NULL;
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
 800959e:	491c      	ldr	r1, [pc, #112]	; (8009610 <bt_gatt_init+0xb0>)
 80095a0:	481c      	ldr	r0, [pc, #112]	; (8009614 <bt_gatt_init+0xb4>)
 80095a2:	2200      	movs	r2, #0
	list->tail = NULL;
 80095a4:	e9c3 2200 	strd	r2, r2, [r3]
 80095a8:	f006 f828 	bl	800f5fc <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
 80095ac:	2300      	movs	r3, #0
 80095ae:	4819      	ldr	r0, [pc, #100]	; (8009614 <bt_gatt_init+0xb4>)
 80095b0:	2264      	movs	r2, #100	; 0x64
 80095b2:	f006 f8cb 	bl	800f74c <k_work_schedule>
}
 80095b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
 80095ba:	4917      	ldr	r1, [pc, #92]	; (8009618 <bt_gatt_init+0xb8>)
 80095bc:	4817      	ldr	r0, [pc, #92]	; (800961c <bt_gatt_init+0xbc>)
 80095be:	f006 b81d 	b.w	800f5fc <k_work_init_delayable>
		last_static_handle += svc->attr_count;
 80095c2:	4a17      	ldr	r2, [pc, #92]	; (8009620 <bt_gatt_init+0xc0>)
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	8811      	ldrh	r1, [r2, #0]
 80095c8:	440b      	add	r3, r1
 80095ca:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
 80095cc:	3408      	adds	r4, #8
 80095ce:	42ac      	cmp	r4, r5
 80095d0:	d90e      	bls.n	80095f0 <bt_gatt_init+0x90>
 80095d2:	4914      	ldr	r1, [pc, #80]	; (8009624 <bt_gatt_init+0xc4>)
 80095d4:	4814      	ldr	r0, [pc, #80]	; (8009628 <bt_gatt_init+0xc8>)
 80095d6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80095da:	4632      	mov	r2, r6
 80095dc:	f008 fe64 	bl	80122a8 <assert_print>
 80095e0:	4812      	ldr	r0, [pc, #72]	; (800962c <bt_gatt_init+0xcc>)
 80095e2:	f008 fe61 	bl	80122a8 <assert_print>
 80095e6:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80095ea:	4630      	mov	r0, r6
 80095ec:	f008 fe55 	bl	801229a <assert_post_action>
 80095f0:	42bc      	cmp	r4, r7
 80095f2:	d3e6      	bcc.n	80095c2 <bt_gatt_init+0x62>
 80095f4:	e7d2      	b.n	800959c <bt_gatt_init+0x3c>
 80095f6:	4d0e      	ldr	r5, [pc, #56]	; (8009630 <bt_gatt_init+0xd0>)
 80095f8:	4c0e      	ldr	r4, [pc, #56]	; (8009634 <bt_gatt_init+0xd4>)
 80095fa:	4e0f      	ldr	r6, [pc, #60]	; (8009638 <bt_gatt_init+0xd8>)
 80095fc:	462f      	mov	r7, r5
 80095fe:	e7e6      	b.n	80095ce <bt_gatt_init+0x6e>
}
 8009600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009602:	bf00      	nop
 8009604:	2000169c 	.word	0x2000169c
 8009608:	200016b8 	.word	0x200016b8
 800960c:	20001674 	.word	0x20001674
 8009610:	08014615 	.word	0x08014615
 8009614:	20001030 	.word	0x20001030
 8009618:	08009a81 	.word	0x08009a81
 800961c:	200010a8 	.word	0x200010a8
 8009620:	2000186e 	.word	0x2000186e
 8009624:	08018ed0 	.word	0x08018ed0
 8009628:	08016836 	.word	0x08016836
 800962c:	08018699 	.word	0x08018699
 8009630:	08015b0c 	.word	0x08015b0c
 8009634:	08015ae4 	.word	0x08015ae4
 8009638:	08018e99 	.word	0x08018e99

0800963c <bt_gatt_attr_get_handle>:
{
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
 8009640:	4604      	mov	r4, r0
 8009642:	b910      	cbnz	r0, 800964a <bt_gatt_attr_get_handle+0xe>
		return 0;
 8009644:	2000      	movs	r0, #0
}
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
 800964a:	8a00      	ldrh	r0, [r0, #16]
 800964c:	2800      	cmp	r0, #0
 800964e:	d1fa      	bne.n	8009646 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8009650:	4f1a      	ldr	r7, [pc, #104]	; (80096bc <bt_gatt_attr_get_handle+0x80>)
 8009652:	4d1b      	ldr	r5, [pc, #108]	; (80096c0 <bt_gatt_attr_get_handle+0x84>)
 8009654:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80096d0 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
 8009658:	2601      	movs	r6, #1
 800965a:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 800965c:	42bd      	cmp	r5, r7
 800965e:	d90e      	bls.n	800967e <bt_gatt_attr_get_handle+0x42>
 8009660:	4918      	ldr	r1, [pc, #96]	; (80096c4 <bt_gatt_attr_get_handle+0x88>)
 8009662:	4819      	ldr	r0, [pc, #100]	; (80096c8 <bt_gatt_attr_get_handle+0x8c>)
 8009664:	f240 6346 	movw	r3, #1606	; 0x646
 8009668:	464a      	mov	r2, r9
 800966a:	f008 fe1d 	bl	80122a8 <assert_print>
 800966e:	4817      	ldr	r0, [pc, #92]	; (80096cc <bt_gatt_attr_get_handle+0x90>)
 8009670:	f008 fe1a 	bl	80122a8 <assert_print>
 8009674:	f240 6146 	movw	r1, #1606	; 0x646
 8009678:	4648      	mov	r0, r9
 800967a:	f008 fe0e 	bl	801229a <assert_post_action>
 800967e:	4545      	cmp	r5, r8
 8009680:	d2e0      	bcs.n	8009644 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
 8009682:	e9d5 ec00 	ldrd	lr, ip, [r5]
 8009686:	4574      	cmp	r4, lr
 8009688:	d305      	bcc.n	8009696 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
 800968a:	2114      	movs	r1, #20
 800968c:	fb01 e30c 	mla	r3, r1, ip, lr
 8009690:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
 8009692:	429c      	cmp	r4, r3
 8009694:	d90f      	bls.n	80096b6 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
 8009696:	eb06 030c 	add.w	r3, r6, ip
 800969a:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 800969c:	3508      	adds	r5, #8
 800969e:	4606      	mov	r6, r0
 80096a0:	e7dc      	b.n	800965c <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
 80096a2:	fb01 e302 	mla	r3, r1, r2, lr
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d0cd      	beq.n	8009646 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
 80096aa:	3201      	adds	r2, #1
 80096ac:	18b3      	adds	r3, r6, r2
 80096ae:	4562      	cmp	r2, ip
 80096b0:	b298      	uxth	r0, r3
 80096b2:	d1f6      	bne.n	80096a2 <bt_gatt_attr_get_handle+0x66>
 80096b4:	e7f2      	b.n	800969c <bt_gatt_attr_get_handle+0x60>
 80096b6:	2200      	movs	r2, #0
 80096b8:	e7f8      	b.n	80096ac <bt_gatt_attr_get_handle+0x70>
 80096ba:	bf00      	nop
 80096bc:	08015b0c 	.word	0x08015b0c
 80096c0:	08015ae4 	.word	0x08015ae4
 80096c4:	08018ec9 	.word	0x08018ec9
 80096c8:	08016836 	.word	0x08016836
 80096cc:	08018699 	.word	0x08018699
 80096d0:	08018e99 	.word	0x08018e99

080096d4 <bt_gatt_foreach_attr_type>:
{
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	b085      	sub	sp, #20
 80096da:	4607      	mov	r7, r0
 80096dc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80096e0:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
 80096e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	bf08      	it	eq
 80096ea:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
 80096ec:	4b2d      	ldr	r3, [pc, #180]	; (80097a4 <bt_gatt_foreach_attr_type+0xd0>)
{
 80096ee:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	4283      	cmp	r3, r0
{
 80096f4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
 80096f6:	d24e      	bcs.n	8009796 <bt_gatt_foreach_attr_type+0xc2>
}
 80096f8:	b005      	add	sp, #20
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
 80096fe:	6873      	ldr	r3, [r6, #4]
 8009700:	4423      	add	r3, r4
 8009702:	42bb      	cmp	r3, r7
 8009704:	d244      	bcs.n	8009790 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
 8009706:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8009708:	3608      	adds	r6, #8
 800970a:	4556      	cmp	r6, sl
 800970c:	d90e      	bls.n	800972c <bt_gatt_foreach_attr_type+0x58>
 800970e:	4926      	ldr	r1, [pc, #152]	; (80097a8 <bt_gatt_foreach_attr_type+0xd4>)
 8009710:	4826      	ldr	r0, [pc, #152]	; (80097ac <bt_gatt_foreach_attr_type+0xd8>)
 8009712:	f240 730a 	movw	r3, #1802	; 0x70a
 8009716:	465a      	mov	r2, fp
 8009718:	f008 fdc6 	bl	80122a8 <assert_print>
 800971c:	4824      	ldr	r0, [pc, #144]	; (80097b0 <bt_gatt_foreach_attr_type+0xdc>)
 800971e:	f008 fdc3 	bl	80122a8 <assert_print>
 8009722:	f240 710a 	movw	r1, #1802	; 0x70a
 8009726:	4658      	mov	r0, fp
 8009728:	f008 fdb7 	bl	801229a <assert_post_action>
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <bt_gatt_foreach_attr_type+0xe0>)
 800972e:	429e      	cmp	r6, r3
 8009730:	d3e5      	bcc.n	80096fe <bt_gatt_foreach_attr_type+0x2a>
 8009732:	e7e1      	b.n	80096f8 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
 8009734:	5889      	ldr	r1, [r1, r2]
 8009736:	9303      	str	r3, [sp, #12]
 8009738:	4640      	mov	r0, r8
 800973a:	f009 fbe4 	bl	8012f06 <bt_uuid_cmp>
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	b198      	cbz	r0, 800976a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 8009742:	3401      	adds	r4, #1
 8009744:	f109 0901 	add.w	r9, r9, #1
 8009748:	b2a4      	uxth	r4, r4
 800974a:	6873      	ldr	r3, [r6, #4]
 800974c:	454b      	cmp	r3, r9
 800974e:	d9db      	bls.n	8009708 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
 8009750:	9b02      	ldr	r3, [sp, #8]
 8009752:	429c      	cmp	r4, r3
 8009754:	d8d0      	bhi.n	80096f8 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
 8009756:	42bc      	cmp	r4, r7
 8009758:	d3f3      	bcc.n	8009742 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
 800975a:	2314      	movs	r3, #20
 800975c:	6831      	ldr	r1, [r6, #0]
 800975e:	fb03 f209 	mul.w	r2, r3, r9
 8009762:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
 8009764:	f1b8 0f00 	cmp.w	r8, #0
 8009768:	d1e4      	bne.n	8009734 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
 800976a:	9a01      	ldr	r2, [sp, #4]
 800976c:	b95a      	cbnz	r2, 8009786 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
 800976e:	3d01      	subs	r5, #1
 8009770:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
 8009772:	4618      	mov	r0, r3
 8009774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009778:	4621      	mov	r1, r4
 800977a:	4798      	blx	r3
	if (!*num_matches) {
 800977c:	2d00      	cmp	r5, #0
 800977e:	d0bb      	beq.n	80096f8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
 8009780:	2800      	cmp	r0, #0
 8009782:	d1de      	bne.n	8009742 <bt_gatt_foreach_attr_type+0x6e>
 8009784:	e7b8      	b.n	80096f8 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	9901      	ldr	r1, [sp, #4]
 800978a:	4291      	cmp	r1, r2
 800978c:	d1d9      	bne.n	8009742 <bt_gatt_foreach_attr_type+0x6e>
 800978e:	e7ee      	b.n	800976e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
 8009790:	f04f 0900 	mov.w	r9, #0
 8009794:	e7d9      	b.n	800974a <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
 8009796:	4e08      	ldr	r6, [pc, #32]	; (80097b8 <bt_gatt_foreach_attr_type+0xe4>)
 8009798:	f8df a018 	ldr.w	sl, [pc, #24]	; 80097b4 <bt_gatt_foreach_attr_type+0xe0>
 800979c:	f8df b01c 	ldr.w	fp, [pc, #28]	; 80097bc <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
 80097a0:	2401      	movs	r4, #1
 80097a2:	e7b2      	b.n	800970a <bt_gatt_foreach_attr_type+0x36>
 80097a4:	2000186e 	.word	0x2000186e
 80097a8:	08018ec9 	.word	0x08018ec9
 80097ac:	08016836 	.word	0x08016836
 80097b0:	08018699 	.word	0x08018699
 80097b4:	08015b0c 	.word	0x08015b0c
 80097b8:	08015ae4 	.word	0x08015ae4
 80097bc:	08018e99 	.word	0x08018e99

080097c0 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
 80097c0:	b510      	push	{r4, lr}
 80097c2:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
 80097c4:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
 80097c6:	aa22      	add	r2, sp, #136	; 0x88
 80097c8:	4669      	mov	r1, sp
 80097ca:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
 80097cc:	e9cd 4400 	strd	r4, r4, [sp]
 80097d0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
 80097d4:	f009 f825 	bl	8012822 <tc_cmac_setup>
 80097d8:	b958      	cbnz	r0, 80097f2 <db_hash_gen.isra.0+0x32>
		BT_ERR("Unable to setup AES CMAC");
 80097da:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <db_hash_gen.isra.0+0x84>)
		BT_ERR("Unable to calculate hash");
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	481a      	ldr	r0, [pc, #104]	; (8009848 <db_hash_gen.isra.0+0x88>)
 80097e0:	2302      	movs	r3, #2
 80097e2:	aa07      	add	r2, sp, #28
 80097e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80097e8:	9307      	str	r3, [sp, #28]
 80097ea:	f00a fcf9 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
}
 80097ee:	b04e      	add	sp, #312	; 0x138
 80097f0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
 80097f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097f6:	2001      	movs	r0, #1
 80097f8:	4a14      	ldr	r2, [pc, #80]	; (800984c <db_hash_gen.isra.0+0x8c>)
 80097fa:	ab0a      	add	r3, sp, #40	; 0x28
 80097fc:	f00a feff 	bl	80145fe <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
 8009800:	4813      	ldr	r0, [pc, #76]	; (8009850 <db_hash_gen.isra.0+0x90>)
 8009802:	a90a      	add	r1, sp, #40	; 0x28
 8009804:	f009 f8a4 	bl	8012950 <tc_cmac_final>
 8009808:	b908      	cbnz	r0, 800980e <db_hash_gen.isra.0+0x4e>
		BT_ERR("Unable to calculate hash");
 800980a:	4b12      	ldr	r3, [pc, #72]	; (8009854 <db_hash_gen.isra.0+0x94>)
 800980c:	e7e6      	b.n	80097dc <db_hash_gen.isra.0+0x1c>
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <db_hash_gen.isra.0+0x90>)
 8009810:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
 8009814:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
 8009816:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8009818:	7810      	ldrb	r0, [r2, #0]
 800981a:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
 800981e:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8009820:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
 8009824:	d1f6      	bne.n	8009814 <db_hash_gen.isra.0+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8009826:	f3bf 8f5b 	dmb	ish
 800982a:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <db_hash_gen.isra.0+0x98>)
 800982c:	e853 2f00 	ldrex	r2, [r3]
 8009830:	f042 0204 	orr.w	r2, r2, #4
 8009834:	e843 2100 	strex	r1, r2, [r3]
 8009838:	2900      	cmp	r1, #0
 800983a:	d1f7      	bne.n	800982c <db_hash_gen.isra.0+0x6c>
 800983c:	f3bf 8f5b 	dmb	ish
 8009840:	e7d5      	b.n	80097ee <db_hash_gen.isra.0+0x2e>
 8009842:	bf00      	nop
 8009844:	08018ef8 	.word	0x08018ef8
 8009848:	08015b4c 	.word	0x08015b4c
 800984c:	08014137 	.word	0x08014137
 8009850:	20001020 	.word	0x20001020
 8009854:	08018f11 	.word	0x08018f11
 8009858:	200010d8 	.word	0x200010d8

0800985c <gatt_indicate>:
{
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	4615      	mov	r5, r2
 8009862:	b086      	sub	sp, #24
 8009864:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
 8009866:	2214      	movs	r2, #20
 8009868:	6869      	ldr	r1, [r5, #4]
{
 800986a:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
 800986c:	f00a fef3 	bl	8014656 <bt_gatt_check_perm>
 8009870:	4607      	mov	r7, r0
 8009872:	b178      	cbz	r0, 8009894 <gatt_indicate+0x38>
		BT_WARN("Link is not encrypted");
 8009874:	4b29      	ldr	r3, [pc, #164]	; (800991c <gatt_indicate+0xc0>)
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	4829      	ldr	r0, [pc, #164]	; (8009920 <gatt_indicate+0xc4>)
 800987a:	2302      	movs	r3, #2
 800987c:	aa03      	add	r2, sp, #12
 800987e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
 8009882:	f04f 35ff 	mov.w	r5, #4294967295
		BT_WARN("Link is not encrypted");
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	f00a fcaa 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
}
 800988c:	4628      	mov	r0, r5
 800988e:	b006      	add	sp, #24
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
 8009894:	4823      	ldr	r0, [pc, #140]	; (8009924 <gatt_indicate+0xc8>)
	len = sizeof(*ind) + params->len;
 8009896:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
 8009898:	2100      	movs	r1, #0
 800989a:	f7ff fb4f 	bl	8008f3c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
 800989e:	3602      	adds	r6, #2
	if (!req) {
 80098a0:	4604      	mov	r4, r0
 80098a2:	b910      	cbnz	r0, 80098aa <gatt_indicate+0x4e>
		return -ENOMEM;
 80098a4:	f06f 050b 	mvn.w	r5, #11
 80098a8:	e7f0      	b.n	800988c <gatt_indicate+0x30>
	req->func = func;
 80098aa:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <gatt_indicate+0xcc>)
	req->len = len;
 80098ac:	6146      	str	r6, [r0, #20]
	req->att_op = op;
 80098ae:	211d      	movs	r1, #29
 80098b0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
 80098b2:	60c7      	str	r7, [r0, #12]
	req->func = func;
 80098b4:	6043      	str	r3, [r0, #4]
	req->user_data = params;
 80098b6:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
 80098b8:	4632      	mov	r2, r6
 80098ba:	4640      	mov	r0, r8
 80098bc:	f00a fb59 	bl	8013f72 <bt_att_create_pdu>
	if (!buf) {
 80098c0:	4606      	mov	r6, r0
 80098c2:	b968      	cbnz	r0, 80098e0 <gatt_indicate+0x84>
		BT_WARN("No buffer available to send indication");
 80098c4:	4b19      	ldr	r3, [pc, #100]	; (800992c <gatt_indicate+0xd0>)
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	4815      	ldr	r0, [pc, #84]	; (8009920 <gatt_indicate+0xc4>)
 80098ca:	2302      	movs	r3, #2
 80098cc:	aa03      	add	r2, sp, #12
 80098ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	f00a fc84 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fb51 	bl	8008f80 <bt_att_req_free>
 80098de:	e7e1      	b.n	80098a4 <gatt_indicate+0x48>
	return net_buf_simple_add(&buf->b, len);
 80098e0:	f100 0a08 	add.w	sl, r0, #8
 80098e4:	2102      	movs	r1, #2
 80098e6:	4650      	mov	r0, sl
 80098e8:	f002 fc48 	bl	800c17c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
 80098ec:	4607      	mov	r7, r0
 80098ee:	8aa9      	ldrh	r1, [r5, #20]
 80098f0:	f827 9b02 	strh.w	r9, [r7], #2
 80098f4:	4650      	mov	r0, sl
 80098f6:	f002 fc41 	bl	800c17c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
 80098fa:	8aaa      	ldrh	r2, [r5, #20]
 80098fc:	6929      	ldr	r1, [r5, #16]
 80098fe:	4638      	mov	r0, r7
 8009900:	f009 fac4 	bl	8012e8c <memcpy>
	req->buf = buf;
 8009904:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
 8009906:	4621      	mov	r1, r4
 8009908:	4640      	mov	r0, r8
 800990a:	f7ff fc63 	bl	80091d4 <bt_att_req_send>
	if (err) {
 800990e:	4605      	mov	r5, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d0bb      	beq.n	800988c <gatt_indicate+0x30>
		bt_att_req_free(req);
 8009914:	4620      	mov	r0, r4
 8009916:	f7ff fb33 	bl	8008f80 <bt_att_req_free>
 800991a:	e7b7      	b.n	800988c <gatt_indicate+0x30>
 800991c:	08018f2a 	.word	0x08018f2a
 8009920:	08015b4c 	.word	0x08015b4c
 8009924:	000493e0 	.word	0x000493e0
 8009928:	08014109 	.word	0x08014109
 800992c:	08018f40 	.word	0x08018f40

08009930 <bt_gatt_indicate>:
{
 8009930:	b530      	push	{r4, r5, lr}
 8009932:	4605      	mov	r5, r0
 8009934:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
 8009936:	460c      	mov	r4, r1
 8009938:	b971      	cbnz	r1, 8009958 <bt_gatt_indicate+0x28>
 800993a:	4949      	ldr	r1, [pc, #292]	; (8009a60 <bt_gatt_indicate+0x130>)
 800993c:	4a49      	ldr	r2, [pc, #292]	; (8009a64 <bt_gatt_indicate+0x134>)
 800993e:	484a      	ldr	r0, [pc, #296]	; (8009a68 <bt_gatt_indicate+0x138>)
 8009940:	f640 2302 	movw	r3, #2562	; 0xa02
 8009944:	f008 fcb0 	bl	80122a8 <assert_print>
 8009948:	4848      	ldr	r0, [pc, #288]	; (8009a6c <bt_gatt_indicate+0x13c>)
 800994a:	f008 fcad 	bl	80122a8 <assert_print>
 800994e:	4845      	ldr	r0, [pc, #276]	; (8009a64 <bt_gatt_indicate+0x134>)
 8009950:	f640 2102 	movw	r1, #2562	; 0xa02
 8009954:	f008 fca1 	bl	801229a <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	b983      	cbnz	r3, 800997e <bt_gatt_indicate+0x4e>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	b973      	cbnz	r3, 800997e <bt_gatt_indicate+0x4e>
 8009960:	4943      	ldr	r1, [pc, #268]	; (8009a70 <bt_gatt_indicate+0x140>)
 8009962:	4a40      	ldr	r2, [pc, #256]	; (8009a64 <bt_gatt_indicate+0x134>)
 8009964:	4840      	ldr	r0, [pc, #256]	; (8009a68 <bt_gatt_indicate+0x138>)
 8009966:	f640 2303 	movw	r3, #2563	; 0xa03
 800996a:	f008 fc9d 	bl	80122a8 <assert_print>
 800996e:	483f      	ldr	r0, [pc, #252]	; (8009a6c <bt_gatt_indicate+0x13c>)
 8009970:	f008 fc9a 	bl	80122a8 <assert_print>
 8009974:	483b      	ldr	r0, [pc, #236]	; (8009a64 <bt_gatt_indicate+0x134>)
 8009976:	f640 2103 	movw	r1, #2563	; 0xa03
 800997a:	f008 fc8e 	bl	801229a <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800997e:	f3bf 8f5b 	dmb	ish
 8009982:	4b3c      	ldr	r3, [pc, #240]	; (8009a74 <bt_gatt_indicate+0x144>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 800998a:	075a      	lsls	r2, r3, #29
 800998c:	d561      	bpl.n	8009a52 <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
 800998e:	b115      	cbz	r5, 8009996 <bt_gatt_indicate+0x66>
 8009990:	7b6b      	ldrb	r3, [r5, #13]
 8009992:	2b07      	cmp	r3, #7
 8009994:	d160      	bne.n	8009a58 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
 8009996:	6860      	ldr	r0, [r4, #4]
 8009998:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
 800999a:	f7ff fe4f 	bl	800963c <bt_gatt_attr_get_handle>
	if (params->uuid) {
 800999e:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
 80099a0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
 80099a4:	b33a      	cbz	r2, 80099f6 <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 80099a6:	a905      	add	r1, sp, #20
 80099a8:	9102      	str	r1, [sp, #8]
 80099aa:	4933      	ldr	r1, [pc, #204]	; (8009a78 <bt_gatt_indicate+0x148>)
 80099ac:	9101      	str	r1, [sp, #4]
 80099ae:	2101      	movs	r1, #1
	found->attr = NULL;
 80099b0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 80099b2:	9100      	str	r1, [sp, #0]
 80099b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
 80099b8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 80099ba:	f7ff fe8b 	bl	80096d4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
 80099be:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 80099c0:	b91b      	cbnz	r3, 80099ca <bt_gatt_indicate+0x9a>
			return -ENOENT;
 80099c2:	f06f 0001 	mvn.w	r0, #1
}
 80099c6:	b00b      	add	sp, #44	; 0x2c
 80099c8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
 80099ca:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	6818      	ldr	r0, [r3, #0]
 80099d0:	2300      	movs	r3, #0
 80099d2:	f88d 3010 	strb.w	r3, [sp, #16]
 80099d6:	a904      	add	r1, sp, #16
 80099d8:	f642 0303 	movw	r3, #10243	; 0x2803
 80099dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80099e0:	f009 fa91 	bl	8012f06 <bt_uuid_cmp>
 80099e4:	b970      	cbnz	r0, 8009a04 <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 80099e6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
 80099e8:	68c3      	ldr	r3, [r0, #12]
 80099ea:	799b      	ldrb	r3, [r3, #6]
 80099ec:	069b      	lsls	r3, r3, #26
 80099ee:	d405      	bmi.n	80099fc <bt_gatt_indicate+0xcc>
			return -EINVAL;
 80099f0:	f06f 0015 	mvn.w	r0, #21
 80099f4:	e7e7      	b.n	80099c6 <bt_gatt_indicate+0x96>
		if (!data.handle) {
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d1e8      	bne.n	80099cc <bt_gatt_indicate+0x9c>
 80099fa:	e7e2      	b.n	80099c2 <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 80099fc:	f00a fdb1 	bl	8014562 <bt_gatt_attr_value_handle>
 8009a00:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 8009a04:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009a08:	b13d      	cbz	r5, 8009a1a <bt_gatt_indicate+0xea>
		params->_ref = 1;
 8009a0a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
 8009a0c:	4601      	mov	r1, r0
		params->_ref = 1;
 8009a0e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
 8009a10:	4622      	mov	r2, r4
 8009a12:	4628      	mov	r0, r5
 8009a14:	f7ff ff22 	bl	800985c <gatt_indicate>
 8009a18:	e7d5      	b.n	80099c6 <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
 8009a1a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009a1e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
 8009a20:	2302      	movs	r3, #2
 8009a22:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009a26:	f642 1302 	movw	r3, #10498	; 0x2902
 8009a2a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009a2e:	ab05      	add	r3, sp, #20
	params->_ref = 0;
 8009a30:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <bt_gatt_indicate+0x14c>)
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	2301      	movs	r3, #1
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	aa04      	add	r2, sp, #16
 8009a3e:	462b      	mov	r3, r5
 8009a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
 8009a44:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009a46:	f88d 5010 	strb.w	r5, [sp, #16]
 8009a4a:	f7ff fe43 	bl	80096d4 <bt_gatt_foreach_attr_type>
	return data.err;
 8009a4e:	9807      	ldr	r0, [sp, #28]
 8009a50:	e7b9      	b.n	80099c6 <bt_gatt_indicate+0x96>
		return -EAGAIN;
 8009a52:	f06f 000a 	mvn.w	r0, #10
 8009a56:	e7b6      	b.n	80099c6 <bt_gatt_indicate+0x96>
		return -ENOTCONN;
 8009a58:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8009a5c:	e7b3      	b.n	80099c6 <bt_gatt_indicate+0x96>
 8009a5e:	bf00      	nop
 8009a60:	08018f67 	.word	0x08018f67
 8009a64:	08018e99 	.word	0x08018e99
 8009a68:	08016836 	.word	0x08016836
 8009a6c:	08018f6e 	.word	0x08018f6e
 8009a70:	08018f84 	.word	0x08018f84
 8009a74:	200000c8 	.word	0x200000c8
 8009a78:	0801412f 	.word	0x0801412f
 8009a7c:	08009e25 	.word	0x08009e25

08009a80 <sc_process>:
{
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	f3bf 8f5b 	dmb	ish
 8009a86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009a88:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
 8009a8c:	079b      	lsls	r3, r3, #30
{
 8009a8e:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
 8009a90:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8009a94:	d50e      	bpl.n	8009ab4 <sc_process+0x34>
 8009a96:	491d      	ldr	r1, [pc, #116]	; (8009b0c <sc_process+0x8c>)
 8009a98:	4a1d      	ldr	r2, [pc, #116]	; (8009b10 <sc_process+0x90>)
 8009a9a:	481e      	ldr	r0, [pc, #120]	; (8009b14 <sc_process+0x94>)
 8009a9c:	f240 4394 	movw	r3, #1172	; 0x494
 8009aa0:	f008 fc02 	bl	80122a8 <assert_print>
 8009aa4:	481c      	ldr	r0, [pc, #112]	; (8009b18 <sc_process+0x98>)
 8009aa6:	f008 fbff 	bl	80122a8 <assert_print>
 8009aaa:	4819      	ldr	r0, [pc, #100]	; (8009b10 <sc_process+0x90>)
 8009aac:	f240 4194 	movw	r1, #1172	; 0x494
 8009ab0:	f008 fbf3 	bl	801229a <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
 8009ab4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009ab8:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8009aba:	f3bf 8f5b 	dmb	ish
 8009abe:	e855 3f00 	ldrex	r3, [r5]
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	e845 3200 	strex	r2, r3, [r5]
 8009aca:	2a00      	cmp	r2, #0
 8009acc:	d1f7      	bne.n	8009abe <sc_process+0x3e>
 8009ace:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <sc_process+0x9c>)
 8009ad4:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
 8009ad8:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <sc_process+0xa0>)
 8009ada:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
 8009ade:	ab01      	add	r3, sp, #4
	sc->start = 0U;
 8009ae0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
 8009ae2:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
 8009ae6:	2304      	movs	r3, #4
	sc->start = 0U;
 8009ae8:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
 8009aec:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
 8009af0:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
 8009af4:	f1a4 0120 	sub.w	r1, r4, #32
 8009af8:	f7ff ff1a 	bl	8009930 <bt_gatt_indicate>
 8009afc:	b918      	cbnz	r0, 8009b06 <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
 8009afe:	2101      	movs	r1, #1
 8009b00:	4628      	mov	r0, r5
 8009b02:	f00a fb8e 	bl	8014222 <atomic_set_bit>
}
 8009b06:	b003      	add	sp, #12
 8009b08:	bd30      	pop	{r4, r5, pc}
 8009b0a:	bf00      	nop
 8009b0c:	08018fa1 	.word	0x08018fa1
 8009b10:	08018e99 	.word	0x08018e99
 8009b14:	08016836 	.word	0x08016836
 8009b18:	08018fd2 	.word	0x08018fd2
 8009b1c:	08016334 	.word	0x08016334
 8009b20:	08009339 	.word	0x08009339

08009b24 <gatt_notify>:
{
 8009b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b28:	4614      	mov	r4, r2
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
 8009b2e:	2214      	movs	r2, #20
 8009b30:	6861      	ldr	r1, [r4, #4]
{
 8009b32:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
 8009b34:	f00a fd8f 	bl	8014656 <bt_gatt_check_perm>
 8009b38:	b170      	cbz	r0, 8009b58 <gatt_notify+0x34>
		BT_WARN("Link is not encrypted");
 8009b3a:	4b1e      	ldr	r3, [pc, #120]	; (8009bb4 <gatt_notify+0x90>)
 8009b3c:	481e      	ldr	r0, [pc, #120]	; (8009bb8 <gatt_notify+0x94>)
 8009b3e:	9304      	str	r3, [sp, #16]
 8009b40:	aa03      	add	r2, sp, #12
 8009b42:	2302      	movs	r3, #2
 8009b44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	f00a fb49 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
		return -EPERM;
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009b52:	b007      	add	sp, #28
 8009b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
 8009b58:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
 8009b5a:	211b      	movs	r1, #27
 8009b5c:	3202      	adds	r2, #2
 8009b5e:	4638      	mov	r0, r7
 8009b60:	f00a fa07 	bl	8013f72 <bt_att_create_pdu>
	if (!buf) {
 8009b64:	4605      	mov	r5, r0
 8009b66:	b960      	cbnz	r0, 8009b82 <gatt_notify+0x5e>
		BT_WARN("No buffer available to send notification");
 8009b68:	4b14      	ldr	r3, [pc, #80]	; (8009bbc <gatt_notify+0x98>)
 8009b6a:	4813      	ldr	r0, [pc, #76]	; (8009bb8 <gatt_notify+0x94>)
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	aa03      	add	r2, sp, #12
 8009b70:	2302      	movs	r3, #2
 8009b72:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	f00a fb32 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
 8009b7c:	f06f 000b 	mvn.w	r0, #11
 8009b80:	e7e7      	b.n	8009b52 <gatt_notify+0x2e>
 8009b82:	f100 0908 	add.w	r9, r0, #8
 8009b86:	2102      	movs	r1, #2
 8009b88:	4648      	mov	r0, r9
 8009b8a:	f002 faf7 	bl	800c17c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
 8009b8e:	4606      	mov	r6, r0
 8009b90:	89a1      	ldrh	r1, [r4, #12]
 8009b92:	f826 8b02 	strh.w	r8, [r6], #2
 8009b96:	4648      	mov	r0, r9
 8009b98:	f002 faf0 	bl	800c17c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
 8009b9c:	89a2      	ldrh	r2, [r4, #12]
 8009b9e:	68a1      	ldr	r1, [r4, #8]
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f009 f973 	bl	8012e8c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
 8009ba6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8009baa:	4629      	mov	r1, r5
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff faa7 	bl	8009100 <bt_att_send>
 8009bb2:	e7ce      	b.n	8009b52 <gatt_notify+0x2e>
 8009bb4:	08018f2a 	.word	0x08018f2a
 8009bb8:	08015b4c 	.word	0x08015b4c
 8009bbc:	08018fed 	.word	0x08018fed

08009bc0 <bt_gatt_notify_cb>:
{
 8009bc0:	b530      	push	{r4, r5, lr}
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b971      	cbnz	r1, 8009be8 <bt_gatt_notify_cb+0x28>
 8009bca:	4947      	ldr	r1, [pc, #284]	; (8009ce8 <bt_gatt_notify_cb+0x128>)
 8009bcc:	4a47      	ldr	r2, [pc, #284]	; (8009cec <bt_gatt_notify_cb+0x12c>)
 8009bce:	4848      	ldr	r0, [pc, #288]	; (8009cf0 <bt_gatt_notify_cb+0x130>)
 8009bd0:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8009bd4:	f008 fb68 	bl	80122a8 <assert_print>
 8009bd8:	4846      	ldr	r0, [pc, #280]	; (8009cf4 <bt_gatt_notify_cb+0x134>)
 8009bda:	f008 fb65 	bl	80122a8 <assert_print>
 8009bde:	4843      	ldr	r0, [pc, #268]	; (8009cec <bt_gatt_notify_cb+0x12c>)
 8009be0:	f640 11b4 	movw	r1, #2484	; 0x9b4
 8009be4:	f008 fb59 	bl	801229a <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	b983      	cbnz	r3, 8009c0e <bt_gatt_notify_cb+0x4e>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	b973      	cbnz	r3, 8009c0e <bt_gatt_notify_cb+0x4e>
 8009bf0:	4941      	ldr	r1, [pc, #260]	; (8009cf8 <bt_gatt_notify_cb+0x138>)
 8009bf2:	4a3e      	ldr	r2, [pc, #248]	; (8009cec <bt_gatt_notify_cb+0x12c>)
 8009bf4:	483e      	ldr	r0, [pc, #248]	; (8009cf0 <bt_gatt_notify_cb+0x130>)
 8009bf6:	f640 13b5 	movw	r3, #2485	; 0x9b5
 8009bfa:	f008 fb55 	bl	80122a8 <assert_print>
 8009bfe:	483d      	ldr	r0, [pc, #244]	; (8009cf4 <bt_gatt_notify_cb+0x134>)
 8009c00:	f008 fb52 	bl	80122a8 <assert_print>
 8009c04:	4839      	ldr	r0, [pc, #228]	; (8009cec <bt_gatt_notify_cb+0x12c>)
 8009c06:	f640 11b5 	movw	r1, #2485	; 0x9b5
 8009c0a:	f008 fb46 	bl	801229a <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8009c0e:	f3bf 8f5b 	dmb	ish
 8009c12:	4b3a      	ldr	r3, [pc, #232]	; (8009cfc <bt_gatt_notify_cb+0x13c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
 8009c1a:	075a      	lsls	r2, r3, #29
 8009c1c:	d55d      	bpl.n	8009cda <bt_gatt_notify_cb+0x11a>
	if (conn && conn->state != BT_CONN_CONNECTED) {
 8009c1e:	b115      	cbz	r5, 8009c26 <bt_gatt_notify_cb+0x66>
 8009c20:	7b6b      	ldrb	r3, [r5, #13]
 8009c22:	2b07      	cmp	r3, #7
 8009c24:	d15c      	bne.n	8009ce0 <bt_gatt_notify_cb+0x120>
	data.attr = params->attr;
 8009c26:	6860      	ldr	r0, [r4, #4]
 8009c28:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
 8009c2a:	f7ff fd07 	bl	800963c <bt_gatt_attr_get_handle>
	if (params->uuid) {
 8009c2e:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
 8009c30:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
 8009c34:	b33a      	cbz	r2, 8009c86 <bt_gatt_notify_cb+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 8009c36:	a905      	add	r1, sp, #20
 8009c38:	9102      	str	r1, [sp, #8]
 8009c3a:	4931      	ldr	r1, [pc, #196]	; (8009d00 <bt_gatt_notify_cb+0x140>)
 8009c3c:	9101      	str	r1, [sp, #4]
 8009c3e:	2101      	movs	r1, #1
	found->attr = NULL;
 8009c40:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 8009c42:	9100      	str	r1, [sp, #0]
 8009c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
 8009c48:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
 8009c4a:	f7ff fd43 	bl	80096d4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
 8009c4e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
 8009c50:	b91b      	cbnz	r3, 8009c5a <bt_gatt_notify_cb+0x9a>
			return -ENOENT;
 8009c52:	f06f 0001 	mvn.w	r0, #1
}
 8009c56:	b00b      	add	sp, #44	; 0x2c
 8009c58:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
 8009c5a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
 8009c5c:	9b05      	ldr	r3, [sp, #20]
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	f88d 3010 	strb.w	r3, [sp, #16]
 8009c66:	a904      	add	r1, sp, #16
 8009c68:	f642 0303 	movw	r3, #10243	; 0x2803
 8009c6c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8009c70:	f009 f949 	bl	8012f06 <bt_uuid_cmp>
 8009c74:	b970      	cbnz	r0, 8009c94 <bt_gatt_notify_cb+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
 8009c76:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
 8009c78:	68c3      	ldr	r3, [r0, #12]
 8009c7a:	799b      	ldrb	r3, [r3, #6]
 8009c7c:	06db      	lsls	r3, r3, #27
 8009c7e:	d405      	bmi.n	8009c8c <bt_gatt_notify_cb+0xcc>
			return -EINVAL;
 8009c80:	f06f 0015 	mvn.w	r0, #21
 8009c84:	e7e7      	b.n	8009c56 <bt_gatt_notify_cb+0x96>
		if (!data.handle) {
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d1e8      	bne.n	8009c5c <bt_gatt_notify_cb+0x9c>
 8009c8a:	e7e2      	b.n	8009c52 <bt_gatt_notify_cb+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
 8009c8c:	f00a fc69 	bl	8014562 <bt_gatt_attr_value_handle>
 8009c90:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
 8009c94:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009c98:	b12d      	cbz	r5, 8009ca6 <bt_gatt_notify_cb+0xe6>
		return gatt_notify(conn, data.handle, params);
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7ff ff40 	bl	8009b24 <gatt_notify>
 8009ca4:	e7d7      	b.n	8009c56 <bt_gatt_notify_cb+0x96>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009ca6:	f642 1202 	movw	r2, #10498	; 0x2902
 8009caa:	f8ad 2012 	strh.w	r2, [sp, #18]
 8009cae:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
 8009cb0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009cb4:	9202      	str	r2, [sp, #8]
 8009cb6:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <bt_gatt_notify_cb+0x144>)
	data.err = -ENOTCONN;
 8009cb8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
 8009cba:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009cbc:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
 8009cc0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009cc4:	aa04      	add	r2, sp, #16
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
 8009ccc:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
 8009cce:	f88d 5010 	strb.w	r5, [sp, #16]
 8009cd2:	f7ff fcff 	bl	80096d4 <bt_gatt_foreach_attr_type>
	return data.err;
 8009cd6:	9807      	ldr	r0, [sp, #28]
 8009cd8:	e7bd      	b.n	8009c56 <bt_gatt_notify_cb+0x96>
		return -EAGAIN;
 8009cda:	f06f 000a 	mvn.w	r0, #10
 8009cde:	e7ba      	b.n	8009c56 <bt_gatt_notify_cb+0x96>
		return -ENOTCONN;
 8009ce0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8009ce4:	e7b7      	b.n	8009c56 <bt_gatt_notify_cb+0x96>
 8009ce6:	bf00      	nop
 8009ce8:	08018f67 	.word	0x08018f67
 8009cec:	08018e99 	.word	0x08018e99
 8009cf0:	08016836 	.word	0x08016836
 8009cf4:	08018f6e 	.word	0x08018f6e
 8009cf8:	08018f84 	.word	0x08018f84
 8009cfc:	200000c8 	.word	0x200000c8
 8009d00:	0801412f 	.word	0x0801412f
 8009d04:	08009e25 	.word	0x08009e25

08009d08 <notify_cb.part.0>:
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
 8009d0c:	4b41      	ldr	r3, [pc, #260]	; (8009e14 <notify_cb.part.0+0x10c>)
	ccc = attr->user_data;
 8009d0e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
 8009d12:	4598      	cmp	r8, r3
static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
 8009d14:	b089      	sub	sp, #36	; 0x24
 8009d16:	4607      	mov	r7, r0
 8009d18:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
 8009d1a:	d020      	beq.n	8009d5e <notify_cb.part.0+0x56>
 8009d1c:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
 8009d20:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8009e20 <notify_cb.part.0+0x118>
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
 8009d2a:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d10b      	bne.n	8009d4c <notify_cb.part.0+0x44>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
 8009d34:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7fd fe1d 	bl	8007978 <bt_conn_lookup_addr_le>
		if (!conn) {
 8009d3e:	4681      	mov	r9, r0
 8009d40:	b120      	cbz	r0, 8009d4c <notify_cb.part.0+0x44>
		if (conn->state != BT_CONN_CONNECTED) {
 8009d42:	7b42      	ldrb	r2, [r0, #13]
 8009d44:	2a07      	cmp	r2, #7
 8009d46:	d02f      	beq.n	8009da8 <notify_cb.part.0+0xa0>
			bt_conn_unref(conn);
 8009d48:	f7fd fb1c 	bl	8007384 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	350a      	adds	r5, #10
 8009d50:	429d      	cmp	r5, r3
 8009d52:	d1ea      	bne.n	8009d2a <notify_cb.part.0+0x22>
	return BT_GATT_ITER_CONTINUE;
 8009d54:	2601      	movs	r6, #1
}
 8009d56:	4630      	mov	r0, r6
 8009d58:	b009      	add	sp, #36	; 0x24
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 8009d5e:	2600      	movs	r6, #0
 8009d60:	4d2d      	ldr	r5, [pc, #180]	; (8009e18 <notify_cb.part.0+0x110>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 8009d62:	46b1      	mov	r9, r6
	return memcmp(a, b, sizeof(*a));
 8009d64:	2207      	movs	r2, #7
 8009d66:	a902      	add	r1, sp, #8
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d6e:	f8cd 900b 	str.w	r9, [sp, #11]
 8009d72:	f009 f87b 	bl	8012e6c <memcmp>
 8009d76:	b178      	cbz	r0, 8009d98 <notify_cb.part.0+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
 8009d78:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8009d7c:	2207      	movs	r2, #7
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7fd fe46 	bl	8007a10 <bt_conn_lookup_state_le>
			if (!conn) {
 8009d84:	b968      	cbnz	r0, 8009da2 <notify_cb.part.0+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
 8009d86:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
 8009d88:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
 8009d8c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
 8009d8e:	4629      	mov	r1, r5
 8009d90:	8853      	ldrh	r3, [r2, #2]
 8009d92:	8812      	ldrh	r2, [r2, #0]
 8009d94:	f00a fb80 	bl	8014498 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
 8009d98:	350c      	adds	r5, #12
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d1be      	bne.n	8009d1c <notify_cb.part.0+0x14>
 8009d9e:	2601      	movs	r6, #1
 8009da0:	e7e0      	b.n	8009d64 <notify_cb.part.0+0x5c>
			bt_conn_unref(conn);
 8009da2:	f7fd faef 	bl	8007384 <bt_conn_unref>
 8009da6:	e7f7      	b.n	8009d98 <notify_cb.part.0+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
 8009da8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8009dac:	b122      	cbz	r2, 8009db8 <notify_cb.part.0+0xb0>
 8009dae:	4639      	mov	r1, r7
 8009db0:	4790      	blx	r2
 8009db2:	b908      	cbnz	r0, 8009db8 <notify_cb.part.0+0xb0>
			bt_conn_unref(conn);
 8009db4:	4648      	mov	r0, r9
 8009db6:	e7c7      	b.n	8009d48 <notify_cb.part.0+0x40>
		if (bt_gatt_check_perm(conn, attr,
 8009db8:	2214      	movs	r2, #20
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4648      	mov	r0, r9
 8009dbe:	f00a fc4a 	bl	8014656 <bt_gatt_check_perm>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	b150      	cbz	r0, 8009ddc <notify_cb.part.0+0xd4>
			BT_WARN("Link is not encrypted");
 8009dc6:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <notify_cb.part.0+0x114>)
 8009dc8:	9306      	str	r3, [sp, #24]
 8009dca:	aa05      	add	r2, sp, #20
 8009dcc:	2302      	movs	r3, #2
 8009dce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8009dd2:	4658      	mov	r0, fp
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	f00a fa03 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
			continue;
 8009dda:	e7b7      	b.n	8009d4c <notify_cb.part.0+0x44>
		if (data->type == BT_GATT_CCC_INDICATE) {
 8009ddc:	89a0      	ldrh	r0, [r4, #12]
 8009dde:	88a1      	ldrh	r1, [r4, #4]
 8009de0:	6922      	ldr	r2, [r4, #16]
 8009de2:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
 8009de4:	4648      	mov	r0, r9
		if (data->type == BT_GATT_CCC_INDICATE) {
 8009de6:	d110      	bne.n	8009e0a <notify_cb.part.0+0x102>
			err = gatt_indicate(conn, data->handle,
 8009de8:	f7ff fd38 	bl	800985c <gatt_indicate>
			if (err == 0) {
 8009dec:	4682      	mov	sl, r0
 8009dee:	b918      	cbnz	r0, 8009df8 <notify_cb.part.0+0xf0>
				data->ind_params->_ref++;
 8009df0:	6920      	ldr	r0, [r4, #16]
 8009df2:	7d81      	ldrb	r1, [r0, #22]
 8009df4:	3101      	adds	r1, #1
 8009df6:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
 8009df8:	4648      	mov	r0, r9
 8009dfa:	f7fd fac3 	bl	8007384 <bt_conn_unref>
		if (err < 0) {
 8009dfe:	f1ba 0f00 	cmp.w	sl, #0
 8009e02:	dba8      	blt.n	8009d56 <notify_cb.part.0+0x4e>
		data->err = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60a3      	str	r3, [r4, #8]
 8009e08:	e7a0      	b.n	8009d4c <notify_cb.part.0+0x44>
			err = gatt_notify(conn, data->handle, data->nfy_params);
 8009e0a:	f7ff fe8b 	bl	8009b24 <gatt_notify>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	e7f2      	b.n	8009df8 <notify_cb.part.0+0xf0>
 8009e12:	bf00      	nop
 8009e14:	20000324 	.word	0x20000324
 8009e18:	20001871 	.word	0x20001871
 8009e1c:	08018f2a 	.word	0x08018f2a
 8009e20:	08015b4c 	.word	0x08015b4c

08009e24 <notify_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
 8009e24:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <notify_cb+0x14>)
{
 8009e26:	4611      	mov	r1, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 8009e28:	6882      	ldr	r2, [r0, #8]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d101      	bne.n	8009e32 <notify_cb+0xe>
 8009e2e:	f7ff bf6b 	b.w	8009d08 <notify_cb.part.0>
}
 8009e32:	2001      	movs	r0, #1
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	08009395 	.word	0x08009395

08009e3c <update_ccc>:
{
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
 8009e40:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <update_ccc+0x100>)
{
 8009e42:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
 8009e44:	6882      	ldr	r2, [r0, #8]
 8009e46:	429a      	cmp	r2, r3
{
 8009e48:	b089      	sub	sp, #36	; 0x24
 8009e4a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
 8009e4c:	d171      	bne.n	8009f32 <update_ccc+0xf6>
	ccc = attr->user_data;
 8009e4e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
 8009e52:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
 8009e54:	f8df b100 	ldr.w	fp, [pc, #256]	; 8009f58 <update_ccc+0x11c>
 8009e58:	f108 0601 	add.w	r6, r8, #1
 8009e5c:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
 8009e60:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8009e64:	b1c3      	cbz	r3, 8009e98 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
 8009e66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f009 fc7c 	bl	801376a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
 8009e72:	b188      	cbz	r0, 8009e98 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
 8009e74:	222a      	movs	r2, #42	; 0x2a
 8009e76:	4629      	mov	r1, r5
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f00a fbec 	bl	8014656 <bt_gatt_check_perm>
		if (err) {
 8009e7e:	b300      	cbz	r0, 8009ec2 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
 8009e80:	2803      	cmp	r0, #3
 8009e82:	d10d      	bne.n	8009ea0 <update_ccc+0x64>
				BT_WARN("CCC %p not writable", attr);
 8009e84:	4b2e      	ldr	r3, [pc, #184]	; (8009f40 <update_ccc+0x104>)
 8009e86:	9005      	str	r0, [sp, #20]
 8009e88:	aa05      	add	r2, sp, #20
 8009e8a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8009e8e:	4658      	mov	r0, fp
 8009e90:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8009e94:	f00a f9a4 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 8009e98:	360a      	adds	r6, #10
 8009e9a:	454e      	cmp	r6, r9
 8009e9c:	d049      	beq.n	8009f32 <update_ccc+0xf6>
 8009e9e:	e7df      	b.n	8009e60 <update_ccc+0x24>
				sec = BT_SECURITY_L3;
 8009ea0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
 8009ea2:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
 8009ea4:	bf14      	ite	ne
 8009ea6:	f04f 0a02 	movne.w	sl, #2
 8009eaa:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
 8009eae:	f009 fc5a 	bl	8013766 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
 8009eb2:	4582      	cmp	sl, r0
 8009eb4:	d905      	bls.n	8009ec2 <update_ccc+0x86>
				if (data->sec < sec) {
 8009eb6:	793a      	ldrb	r2, [r7, #4]
 8009eb8:	4552      	cmp	r2, sl
 8009eba:	d2ed      	bcs.n	8009e98 <update_ccc+0x5c>
					data->sec = sec;
 8009ebc:	f887 a004 	strb.w	sl, [r7, #4]
 8009ec0:	e7ea      	b.n	8009e98 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f00a f911 	bl	80140ec <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
 8009eca:	4b1e      	ldr	r3, [pc, #120]	; (8009f44 <update_ccc+0x108>)
 8009ecc:	4598      	cmp	r8, r3
 8009ece:	d130      	bne.n	8009f32 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
 8009ed0:	7a20      	ldrb	r0, [r4, #8]
 8009ed2:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8009ed6:	f7ff f9dd 	bl	8009294 <find_sc_cfg>
	if (!cfg) {
 8009eda:	b350      	cbz	r0, 8009f32 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
 8009edc:	8902      	ldrh	r2, [r0, #8]
 8009ede:	8943      	ldrh	r3, [r0, #10]
 8009ee0:	ea52 0103 	orrs.w	r1, r2, r3
 8009ee4:	d025      	beq.n	8009f32 <update_ccc+0xf6>
	index = bt_conn_index(conn);
 8009ee6:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
 8009ee8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
 8009eec:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
 8009ef0:	f7fd fb82 	bl	80075f8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
 8009ef4:	4914      	ldr	r1, [pc, #80]	; (8009f48 <update_ccc+0x10c>)
 8009ef6:	4a15      	ldr	r2, [pc, #84]	; (8009f4c <update_ccc+0x110>)
 8009ef8:	2318      	movs	r3, #24
 8009efa:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8009efe:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
 8009f00:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
 8009f02:	4a13      	ldr	r2, [pc, #76]	; (8009f50 <update_ccc+0x114>)
 8009f04:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
 8009f06:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8009f08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
 8009f0c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
 8009f0e:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8009f10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
 8009f14:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7ff fd0a 	bl	8009930 <bt_gatt_indicate>
 8009f1c:	b148      	cbz	r0, 8009f32 <update_ccc+0xf6>
		BT_ERR("SC restore indication failed");
 8009f1e:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <update_ccc+0x118>)
 8009f20:	9306      	str	r3, [sp, #24]
 8009f22:	480d      	ldr	r0, [pc, #52]	; (8009f58 <update_ccc+0x11c>)
 8009f24:	2302      	movs	r3, #2
 8009f26:	aa05      	add	r2, sp, #20
 8009f28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8009f2c:	9305      	str	r3, [sp, #20]
 8009f2e:	f00a f957 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
}
 8009f32:	2001      	movs	r0, #1
 8009f34:	b009      	add	sp, #36	; 0x24
 8009f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3a:	bf00      	nop
 8009f3c:	08009395 	.word	0x08009395
 8009f40:	08019016 	.word	0x08019016
 8009f44:	20000324 	.word	0x20000324
 8009f48:	200016a0 	.word	0x200016a0
 8009f4c:	08016334 	.word	0x08016334
 8009f50:	080142cf 	.word	0x080142cf
 8009f54:	0801902a 	.word	0x0801902a
 8009f58:	08015b4c 	.word	0x08015b4c

08009f5c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	b088      	sub	sp, #32
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f64:	4a10      	ldr	r2, [pc, #64]	; (8009fa8 <bt_gatt_connected+0x4c>)
	data.conn = conn;
 8009f66:	9000      	str	r0, [sp, #0]
{
 8009f68:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009f6a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009f72:	f00a fb44 	bl	80145fe <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
 8009f76:	4620      	mov	r0, r4
 8009f78:	f009 fbf5 	bl	8013766 <bt_conn_get_security>
 8009f7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
 8009f80:	4288      	cmp	r0, r1
 8009f82:	d20e      	bcs.n	8009fa2 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
 8009f84:	4620      	mov	r0, r4
 8009f86:	f009 fbbb 	bl	8013700 <bt_conn_set_security>

		if (err) {
 8009f8a:	b150      	cbz	r0, 8009fa2 <bt_gatt_connected+0x46>
			BT_WARN("Failed to set security for bonded peer (%d)",
 8009f8c:	4b07      	ldr	r3, [pc, #28]	; (8009fac <bt_gatt_connected+0x50>)
 8009f8e:	aa05      	add	r2, sp, #20
 8009f90:	e9cd 3006 	strd	r3, r0, [sp, #24]
 8009f94:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8009f98:	2303      	movs	r3, #3
 8009f9a:	4805      	ldr	r0, [pc, #20]	; (8009fb0 <bt_gatt_connected+0x54>)
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	f00a f91f 	bl	80141e0 <z_log_msg2_static_create.constprop.0>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
 8009fa2:	b008      	add	sp, #32
 8009fa4:	bd10      	pop	{r4, pc}
 8009fa6:	bf00      	nop
 8009fa8:	08009e3d 	.word	0x08009e3d
 8009fac:	08019047 	.word	0x08019047
 8009fb0:	08015b4c 	.word	0x08015b4c

08009fb4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
 8009fb6:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <bt_gatt_att_max_mtu_changed+0x24>)
 8009fb8:	681c      	ldr	r4, [r3, #0]
{
 8009fba:	4605      	mov	r5, r0
 8009fbc:	460e      	mov	r6, r1
 8009fbe:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
 8009fc0:	b14c      	cbz	r4, 8009fd6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
 8009fc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
 8009fc6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
 8009fc8:	b11b      	cbz	r3, 8009fd2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4628      	mov	r0, r5
 8009fd0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8009fd2:	6864      	ldr	r4, [r4, #4]
	return node->next;
 8009fd4:	e7f4      	b.n	8009fc0 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
 8009fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd8:	20001674 	.word	0x20001674

08009fdc <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
 8009fdc:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009fde:	4a06      	ldr	r2, [pc, #24]	; (8009ff8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
 8009fe0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009fe2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
 8009fe4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
 8009fea:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
 8009fee:	f00a fb06 	bl	80145fe <bt_gatt_foreach_attr>
}
 8009ff2:	b003      	add	sp, #12
 8009ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ff8:	08009e3d 	.word	0x08009e3d

08009ffc <db_hash_read>:
{
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
 8009ffe:	4915      	ldr	r1, [pc, #84]	; (800a054 <db_hash_read+0x58>)
{
 800a000:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 800a004:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
 800a006:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
 800a00a:	461f      	mov	r7, r3
 800a00c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
 800a00e:	f005 fc7d 	bl	800f90c <k_work_cancel_delayable_sync>
 800a012:	f3bf 8f5b 	dmb	ish
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <db_hash_read+0x5c>)
 800a018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
 800a01e:	075b      	lsls	r3, r3, #29
 800a020:	d401      	bmi.n	800a026 <db_hash_read+0x2a>
		db_hash_gen(true);
 800a022:	f7ff fbcd 	bl	80097c0 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
 800a026:	2101      	movs	r1, #1
 800a028:	4620      	mov	r0, r4
 800a02a:	f00a fb3f 	bl	80146ac <bt_gatt_change_aware>
	if (offset > value_len) {
 800a02e:	2e10      	cmp	r6, #16
 800a030:	d80c      	bhi.n	800a04c <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
 800a032:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
 800a036:	4909      	ldr	r1, [pc, #36]	; (800a05c <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
 800a038:	42bc      	cmp	r4, r7
 800a03a:	bfa8      	it	ge
 800a03c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
 800a03e:	4622      	mov	r2, r4
 800a040:	4431      	add	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	f008 ff22 	bl	8012e8c <memcpy>
}
 800a048:	4620      	mov	r0, r4
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800a04c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
 800a050:	e7fa      	b.n	800a048 <db_hash_read+0x4c>
 800a052:	bf00      	nop
 800a054:	20001060 	.word	0x20001060
 800a058:	20001088 	.word	0x20001088
 800a05c:	20001020 	.word	0x20001020

0800a060 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
 800a060:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
 800a062:	4603      	mov	r3, r0
 800a064:	4a15      	ldr	r2, [pc, #84]	; (800a0bc <bt_gatt_disconnected+0x5c>)
{
 800a066:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
 800a068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a06c:	2001      	movs	r0, #1
 800a06e:	f00a fac6 	bl	80145fe <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
 800a072:	4628      	mov	r0, r5
 800a074:	f7ff f930 	bl	80092d8 <find_cf_cfg>
	if (!cfg) {
 800a078:	4604      	mov	r4, r0
 800a07a:	b1e8      	cbz	r0, 800a0b8 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 800a07c:	f105 0690 	add.w	r6, r5, #144	; 0x90
 800a080:	7a28      	ldrb	r0, [r5, #8]
 800a082:	4631      	mov	r1, r6
 800a084:	f009 f8d5 	bl	8013232 <bt_addr_le_is_bonded>
 800a088:	b920      	cbnz	r0, 800a094 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
 800a08a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
 800a08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
 800a090:	f00a b8a9 	b.w	80141e6 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
 800a094:	1c60      	adds	r0, r4, #1
 800a096:	2207      	movs	r2, #7
 800a098:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a09a:	340c      	adds	r4, #12
 800a09c:	f008 fef6 	bl	8012e8c <memcpy>
 800a0a0:	f3bf 8f5b 	dmb	ish
 800a0a4:	e854 3f00 	ldrex	r3, [r4]
 800a0a8:	f023 0302 	bic.w	r3, r3, #2
 800a0ac:	e844 3200 	strex	r2, r3, [r4]
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d1f7      	bne.n	800a0a4 <bt_gatt_disconnected+0x44>
 800a0b4:	f3bf 8f5b 	dmb	ish
}
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	bf00      	nop
 800a0bc:	080094a1 	.word	0x080094a1

0800a0c0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
 800a0c0:	4b10      	ldr	r3, [pc, #64]	; (800a104 <get_io_capa+0x44>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	b1bb      	cbz	r3, 800a0f6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	b142      	cbz	r2, 800a0dc <get_io_capa+0x1c>
 800a0ca:	6859      	ldr	r1, [r3, #4]
 800a0cc:	b131      	cbz	r1, 800a0dc <get_io_capa+0x1c>
 800a0ce:	6899      	ldr	r1, [r3, #8]
 800a0d0:	b911      	cbnz	r1, 800a0d8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
 800a0d2:	490d      	ldr	r1, [pc, #52]	; (800a108 <get_io_capa+0x48>)
 800a0d4:	7809      	ldrb	r1, [r1, #0]
 800a0d6:	b939      	cbnz	r1, 800a0e8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
 800a0d8:	2004      	movs	r0, #4
 800a0da:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
 800a0dc:	490a      	ldr	r1, [pc, #40]	; (800a108 <get_io_capa+0x48>)
 800a0de:	7809      	ldrb	r1, [r1, #0]
 800a0e0:	b111      	cbz	r1, 800a0e8 <get_io_capa+0x28>
 800a0e2:	b10a      	cbz	r2, 800a0e8 <get_io_capa+0x28>
 800a0e4:	6899      	ldr	r1, [r3, #8]
 800a0e6:	b941      	cbnz	r1, 800a0fa <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b943      	cbnz	r3, 800a0fe <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2003      	moveq	r0, #3
 800a0f2:	2000      	movne	r0, #0
 800a0f4:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
 800a0f6:	2003      	movs	r0, #3
 800a0f8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
 800a0fe:	2002      	movs	r0, #2
	}
}
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20001618 	.word	0x20001618
 800a108:	20001982 	.word	0x20001982

0800a10c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 800a10c:	4288      	cmp	r0, r1
{
 800a10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	4616      	mov	r6, r2
 800a116:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 800a11a:	d91a      	bls.n	800a152 <sys_memcpy_swap+0x46>
 800a11c:	188b      	adds	r3, r1, r2
 800a11e:	4298      	cmp	r0, r3
 800a120:	d20e      	bcs.n	800a140 <sys_memcpy_swap+0x34>
 800a122:	490d      	ldr	r1, [pc, #52]	; (800a158 <sys_memcpy_swap+0x4c>)
 800a124:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <sys_memcpy_swap+0x50>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <sys_memcpy_swap+0x54>)
 800a128:	f240 2317 	movw	r3, #535	; 0x217
 800a12c:	f008 f8bc 	bl	80122a8 <assert_print>
 800a130:	480c      	ldr	r0, [pc, #48]	; (800a164 <sys_memcpy_swap+0x58>)
 800a132:	f008 f8b9 	bl	80122a8 <assert_print>
 800a136:	4809      	ldr	r0, [pc, #36]	; (800a15c <sys_memcpy_swap+0x50>)
 800a138:	f240 2117 	movw	r1, #535	; 0x217
 800a13c:	f008 f8ad 	bl	801229a <assert_post_action>
	psrc += length - 1;
 800a140:	3e01      	subs	r6, #1
 800a142:	4435      	add	r5, r6
		*pdst++ = *psrc--;
 800a144:	f815 3901 	ldrb.w	r3, [r5], #-1
 800a148:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
 800a14c:	42bc      	cmp	r4, r7
 800a14e:	d1f9      	bne.n	800a144 <sys_memcpy_swap+0x38>
}
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
 800a152:	d0e6      	beq.n	800a122 <sys_memcpy_swap+0x16>
 800a154:	42b9      	cmp	r1, r7
 800a156:	e7e3      	b.n	800a120 <sys_memcpy_swap+0x14>
 800a158:	080184bc 	.word	0x080184bc
 800a15c:	08018491 	.word	0x08018491
 800a160:	08016836 	.word	0x08016836
 800a164:	08018513 	.word	0x08018513

0800a168 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
 800a168:	4601      	mov	r1, r0
 800a16a:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
 800a16c:	4803      	ldr	r0, [pc, #12]	; (800a17c <smp_find+0x14>)
 800a16e:	f00a fae5 	bl	801473c <atomic_test_bit>
 800a172:	2800      	cmp	r0, #0
			return &bt_smp_pool[i];
		}
	}

	return NULL;
}
 800a174:	4802      	ldr	r0, [pc, #8]	; (800a180 <smp_find+0x18>)
 800a176:	bf08      	it	eq
 800a178:	2000      	moveq	r0, #0
 800a17a:	bd08      	pop	{r3, pc}
 800a17c:	200010e4 	.word	0x200010e4
 800a180:	200010e0 	.word	0x200010e0

0800a184 <get_auth.isra.0>:
	if (sc_supported) {
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <get_auth.isra.0+0x34>)
 800a186:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
 800a188:	b510      	push	{r4, lr}
	if (sc_supported) {
 800a18a:	b17b      	cbz	r3, 800a1ac <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
 800a18c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
 800a190:	f7ff ff96 	bl	800a0c0 <get_io_capa>
	if (bondable) {
 800a194:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <get_auth.isra.0+0x38>)
 800a196:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
 800a198:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
 800a19a:	bf0c      	ite	eq
 800a19c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
 800a1a0:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
 800a1a4:	b12b      	cbz	r3, 800a1b2 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
 800a1a6:	f044 0001 	orr.w	r0, r4, #1
}
 800a1aa:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
 800a1ac:	f000 0407 	and.w	r4, r0, #7
 800a1b0:	e7ee      	b.n	800a190 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
 800a1b2:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
 800a1b6:	e7f8      	b.n	800a1aa <get_auth.isra.0+0x26>
 800a1b8:	20001982 	.word	0x20001982
 800a1bc:	200004e8 	.word	0x200004e8

0800a1c0 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
 800a1c0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 800a1c2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
 800a1c4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	f00a fab7 	bl	801473c <atomic_test_bit>
 800a1ce:	b968      	cbnz	r0, 800a1ec <smp_create_pdu.isra.0+0x2c>
		timeout = SMP_TIMEOUT;
 800a1d0:	4a0a      	ldr	r2, [pc, #40]	; (800a1fc <smp_create_pdu.isra.0+0x3c>)
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
 800a1d2:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
 800a1d4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	f009 fb8d 	bl	80138f6 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
 800a1dc:	4604      	mov	r4, r0
 800a1de:	b938      	cbnz	r0, 800a1f0 <smp_create_pdu.isra.0+0x30>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
 800a1e0:	2104      	movs	r1, #4
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f00a fa96 	bl	8014714 <atomic_set_bit>
}
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	e7f0      	b.n	800a1d2 <smp_create_pdu.isra.0+0x12>
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	3008      	adds	r0, #8
 800a1f4:	f001 ffc2 	bl	800c17c <net_buf_simple_add>
	hdr->code = op;
 800a1f8:	7006      	strb	r6, [r0, #0]
	return buf;
 800a1fa:	e7f5      	b.n	800a1e8 <smp_create_pdu.isra.0+0x28>
 800a1fc:	000493e0 	.word	0x000493e0

0800a200 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
 800a200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a202:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
 800a204:	2200      	movs	r2, #0
 800a206:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
 800a20c:	460a      	mov	r2, r1
 800a20e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800a212:	2106      	movs	r1, #6
 800a214:	f009 fb72 	bl	80138fc <bt_l2cap_send_cb>
 800a218:	b128      	cbz	r0, 800a226 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
 800a21a:	4628      	mov	r0, r5
}
 800a21c:	b003      	add	sp, #12
 800a21e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
 800a222:	f001 be7b 	b.w	800bf1c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
 800a226:	4a04      	ldr	r2, [pc, #16]	; (800a238 <smp_send.isra.0+0x38>)
 800a228:	2300      	movs	r3, #0
 800a22a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
 800a22e:	b003      	add	sp, #12
 800a230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
 800a234:	f005 bb06 	b.w	800f844 <k_work_reschedule>
 800a238:	000493e0 	.word	0x000493e0

0800a23c <smp_init>:
{
 800a23c:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
 800a23e:	22f0      	movs	r2, #240	; 0xf0
{
 800a240:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
 800a242:	2100      	movs	r1, #0
 800a244:	f008 fe2d 	bl	8012ea2 <memset>
	if (bt_rand(smp->prnd, 16)) {
 800a248:	2110      	movs	r1, #16
 800a24a:	f105 0027 	add.w	r0, r5, #39	; 0x27
 800a24e:	f7fc fc6b 	bl	8006b28 <bt_rand>
 800a252:	4604      	mov	r4, r0
 800a254:	b948      	cbnz	r0, 800a26a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
 800a256:	2105      	movs	r1, #5
 800a258:	4628      	mov	r0, r5
 800a25a:	f00a fa5b 	bl	8014714 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
 800a25e:	f7fc fd1d 	bl	8006c9c <bt_pub_key_get>
 800a262:	4b03      	ldr	r3, [pc, #12]	; (800a270 <smp_init+0x34>)
 800a264:	6018      	str	r0, [r3, #0]
}
 800a266:	4620      	mov	r0, r4
 800a268:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 800a26a:	2408      	movs	r4, #8
 800a26c:	e7fb      	b.n	800a266 <smp_init+0x2a>
 800a26e:	bf00      	nop
 800a270:	200016bc 	.word	0x200016bc

0800a274 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
 800a274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		BT_WARN("Public key not available");
 800a276:	4b06      	ldr	r3, [pc, #24]	; (800a290 <bt_smp_pkey_ready.part.0+0x1c>)
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	4806      	ldr	r0, [pc, #24]	; (800a294 <bt_smp_pkey_ready.part.0+0x20>)
 800a27c:	2302      	movs	r3, #2
 800a27e:	aa03      	add	r2, sp, #12
 800a280:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800a284:	9303      	str	r3, [sp, #12]
 800a286:	f00a fae2 	bl	801484e <z_log_msg2_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
 800a28a:	b007      	add	sp, #28
 800a28c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a290:	08019082 	.word	0x08019082
 800a294:	08015b7c 	.word	0x08015b7c

0800a298 <smp_encrypt_info>:
{
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	4604      	mov	r4, r0
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800a2a0:	3004      	adds	r0, #4
 800a2a2:	210d      	movs	r1, #13
 800a2a4:	f00a fa4a 	bl	801473c <atomic_test_bit>
 800a2a8:	b330      	cbz	r0, 800a2f8 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
 800a2aa:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
 800a2ac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
 800a2b0:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800a2b4:	7a19      	ldrb	r1, [r3, #8]
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	2004      	movs	r0, #4
 800a2ba:	f00a fda3 	bl	8014e04 <bt_keys_get_type>
		if (!keys) {
 800a2be:	b9b0      	cbnz	r0, 800a2ee <smp_encrypt_info+0x56>
			BT_ERR("Unable to get keys for %s",
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7fa fa5b 	bl	800477c <bt_addr_le_str_real>
 800a2c6:	466c      	mov	r4, sp
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	; (800a304 <smp_encrypt_info+0x6c>)
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	466a      	mov	r2, sp
 800a2ce:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	7613      	strb	r3, [r2, #24]
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <smp_encrypt_info+0x70>)
 800a2d8:	480c      	ldr	r0, [pc, #48]	; (800a30c <smp_encrypt_info+0x74>)
 800a2da:	f842 3f0c 	str.w	r3, [r2, #12]!
 800a2de:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800a2e2:	f00a fab4 	bl	801484e <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
 800a2e6:	2008      	movs	r0, #8
 800a2e8:	46a5      	mov	sp, r4
}
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
 800a2ee:	2210      	movs	r2, #16
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	301a      	adds	r0, #26
 800a2f4:	f008 fdca 	bl	8012e8c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	2107      	movs	r1, #7
 800a2fc:	f00a fa0a 	bl	8014714 <atomic_set_bit>
	return 0;
 800a300:	2000      	movs	r0, #0
 800a302:	e7f2      	b.n	800a2ea <smp_encrypt_info+0x52>
 800a304:	0801909b 	.word	0x0801909b
 800a308:	01000003 	.word	0x01000003
 800a30c:	08015b7c 	.word	0x08015b7c

0800a310 <smp_ident_info>:
{
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	af00      	add	r7, sp, #0
 800a316:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800a318:	3004      	adds	r0, #4
 800a31a:	210d      	movs	r1, #13
 800a31c:	f00a fa0e 	bl	801473c <atomic_test_bit>
 800a320:	b330      	cbz	r0, 800a370 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
 800a322:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
 800a324:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 800a328:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800a32c:	7a19      	ldrb	r1, [r3, #8]
 800a32e:	462a      	mov	r2, r5
 800a330:	2002      	movs	r0, #2
 800a332:	f00a fd67 	bl	8014e04 <bt_keys_get_type>
		if (!keys) {
 800a336:	b9b0      	cbnz	r0, 800a366 <smp_ident_info+0x56>
			BT_ERR("Unable to get keys for %s",
 800a338:	4628      	mov	r0, r5
 800a33a:	f7fa fa1f 	bl	800477c <bt_addr_le_str_real>
 800a33e:	466c      	mov	r4, sp
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <smp_ident_info+0x6c>)
 800a342:	b088      	sub	sp, #32
 800a344:	466a      	mov	r2, sp
 800a346:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800a34a:	2302      	movs	r3, #2
 800a34c:	7613      	strb	r3, [r2, #24]
 800a34e:	4b0c      	ldr	r3, [pc, #48]	; (800a380 <smp_ident_info+0x70>)
 800a350:	480c      	ldr	r0, [pc, #48]	; (800a384 <smp_ident_info+0x74>)
 800a352:	f842 3f0c 	str.w	r3, [r2, #12]!
 800a356:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800a35a:	f00a fa78 	bl	801484e <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
 800a35e:	2008      	movs	r0, #8
 800a360:	46a5      	mov	sp, r4
}
 800a362:	46bd      	mov	sp, r7
 800a364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
 800a366:	2210      	movs	r2, #16
 800a368:	4631      	mov	r1, r6
 800a36a:	302a      	adds	r0, #42	; 0x2a
 800a36c:	f008 fd8e 	bl	8012e8c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
 800a370:	4620      	mov	r0, r4
 800a372:	2109      	movs	r1, #9
 800a374:	f00a f9ce 	bl	8014714 <atomic_set_bit>
	return 0;
 800a378:	2000      	movs	r0, #0
 800a37a:	e7f2      	b.n	800a362 <smp_ident_info+0x52>
 800a37c:	0801909b 	.word	0x0801909b
 800a380:	01000003 	.word	0x01000003
 800a384:	08015b7c 	.word	0x08015b7c

0800a388 <smp_pairing_req>:
{
 800a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
 800a38c:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
 800a38e:	78eb      	ldrb	r3, [r5, #3]
 800a390:	3b07      	subs	r3, #7
 800a392:	2b09      	cmp	r3, #9
{
 800a394:	b086      	sub	sp, #24
 800a396:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
 800a398:	d904      	bls.n	800a3a4 <smp_pairing_req+0x1c>
		return BT_SMP_ERR_ENC_KEY_SIZE;
 800a39a:	2506      	movs	r5, #6
}
 800a39c:	4628      	mov	r0, r5
 800a39e:	b006      	add	sp, #24
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
 800a3a4:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
 800a3a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3ac:	b15b      	cbz	r3, 800a3c6 <smp_pairing_req+0x3e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 800a3ae:	1d26      	adds	r6, r4, #4
 800a3b0:	210f      	movs	r1, #15
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f00a f9c2 	bl	801473c <atomic_test_bit>
 800a3b8:	b980      	cbnz	r0, 800a3dc <smp_pairing_req+0x54>
		int ret = smp_init(smp);
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7ff ff3e 	bl	800a23c <smp_init>
		if (ret) {
 800a3c0:	b160      	cbz	r0, 800a3dc <smp_pairing_req+0x54>
			return ret;
 800a3c2:	b2c5      	uxtb	r5, r0
 800a3c4:	e7ea      	b.n	800a39c <smp_pairing_req+0x14>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 800a3c6:	7a38      	ldrb	r0, [r7, #8]
 800a3c8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a3cc:	f001 fb0e 	bl	800b9ec <bt_keys_get_addr>
 800a3d0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		if (!conn->le.keys) {
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d1ea      	bne.n	800a3ae <smp_pairing_req+0x26>
	switch (sec) {
 800a3d8:	2508      	movs	r5, #8
 800a3da:	e7df      	b.n	800a39c <smp_pairing_req+0x14>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
 800a3dc:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
 800a3de:	2206      	movs	r2, #6
 800a3e0:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
 800a3e2:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
 800a3e4:	f104 000a 	add.w	r0, r4, #10
 800a3e8:	f008 fd50 	bl	8012e8c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
 800a3f0:	78a8      	ldrb	r0, [r5, #2]
 800a3f2:	f7ff fec7 	bl	800a184 <get_auth.isra.0>
 800a3f6:	74e0      	strb	r0, [r4, #19]
 800a3f8:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
 800a3fa:	f7ff fe61 	bl	800a0c0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
 800a3fe:	4ba3      	ldr	r3, [pc, #652]	; (800a68c <smp_pairing_req+0x304>)
	rsp->io_capability = get_io_capa();
 800a400:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
 800a406:	2310      	movs	r3, #16
 800a408:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
 800a40a:	792b      	ldrb	r3, [r5, #4]
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
 800a412:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 800a414:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
 800a41e:	d00c      	beq.n	800a43a <smp_pairing_req+0xb2>
 800a420:	78ab      	ldrb	r3, [r5, #2]
 800a422:	0719      	lsls	r1, r3, #28
 800a424:	d509      	bpl.n	800a43a <smp_pairing_req+0xb2>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
 800a426:	2105      	movs	r1, #5
 800a428:	4630      	mov	r0, r6
 800a42a:	f00a f973 	bl	8014714 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
 800a42e:	7d63      	ldrb	r3, [r4, #21]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
 800a436:	2300      	movs	r3, #0
 800a438:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
 800a43a:	7ce3      	ldrb	r3, [r4, #19]
 800a43c:	069a      	lsls	r2, r3, #26
 800a43e:	d506      	bpl.n	800a44e <smp_pairing_req+0xc6>
 800a440:	78ab      	ldrb	r3, [r5, #2]
 800a442:	069b      	lsls	r3, r3, #26
 800a444:	d503      	bpl.n	800a44e <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
 800a446:	2114      	movs	r1, #20
 800a448:	4630      	mov	r0, r6
 800a44a:	f00a f963 	bl	8014714 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
 800a44e:	7da3      	ldrb	r3, [r4, #22]
 800a450:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
 800a454:	7d63      	ldrb	r3, [r4, #21]
 800a456:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
 800a45a:	7ce3      	ldrb	r3, [r4, #19]
 800a45c:	07d8      	lsls	r0, r3, #31
 800a45e:	d506      	bpl.n	800a46e <smp_pairing_req+0xe6>
 800a460:	78ab      	ldrb	r3, [r5, #2]
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	d503      	bpl.n	800a46e <smp_pairing_req+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
 800a466:	210d      	movs	r1, #13
 800a468:	4630      	mov	r0, r6
 800a46a:	f00a f953 	bl	8014714 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
 800a46e:	2103      	movs	r1, #3
 800a470:	4630      	mov	r0, r6
 800a472:	f00a f94f 	bl	8014714 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800a476:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
 800a478:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800a47a:	f00a f95f 	bl	801473c <atomic_test_bit>
 800a47e:	bb28      	cbnz	r0, 800a4cc <smp_pairing_req+0x144>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
 800a480:	2d04      	cmp	r5, #4
 800a482:	d81a      	bhi.n	800a4ba <smp_pairing_req+0x132>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
 800a484:	7ca2      	ldrb	r2, [r4, #18]
 800a486:	7ae3      	ldrb	r3, [r4, #11]
 800a488:	4013      	ands	r3, r2
 800a48a:	07da      	lsls	r2, r3, #31
 800a48c:	d437      	bmi.n	800a4fe <smp_pairing_req+0x176>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
 800a48e:	7b20      	ldrb	r0, [r4, #12]
 800a490:	7ce3      	ldrb	r3, [r4, #19]
 800a492:	4318      	orrs	r0, r3
 800a494:	f010 0004 	ands.w	r0, r0, #4
 800a498:	d00f      	beq.n	800a4ba <smp_pairing_req+0x132>
	method = gen_method_legacy[remote_io][get_io_capa()];
 800a49a:	f7ff fe11 	bl	800a0c0 <get_io_capa>
 800a49e:	4b7c      	ldr	r3, [pc, #496]	; (800a690 <smp_pairing_req+0x308>)
 800a4a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a4a4:	441d      	add	r5, r3
 800a4a6:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
 800a4a8:	2804      	cmp	r0, #4
 800a4aa:	d106      	bne.n	800a4ba <smp_pairing_req+0x132>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
 800a4ac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800a4b0:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	bf0c      	ite	eq
 800a4b6:	2002      	moveq	r0, #2
 800a4b8:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
 800a4ba:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
 800a4bc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f00a f96f 	bl	80147a4 <update_keys_check>
 800a4c6:	bb00      	cbnz	r0, 800a50a <smp_pairing_req+0x182>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
 800a4c8:	2503      	movs	r5, #3
 800a4ca:	e767      	b.n	800a39c <smp_pairing_req+0x14>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
 800a4cc:	7b20      	ldrb	r0, [r4, #12]
 800a4ce:	7ce2      	ldrb	r2, [r4, #19]
 800a4d0:	ea00 0302 	and.w	r3, r0, r2
 800a4d4:	071b      	lsls	r3, r3, #28
 800a4d6:	d504      	bpl.n	800a4e2 <smp_pairing_req+0x15a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
 800a4d8:	7ca1      	ldrb	r1, [r4, #18]
 800a4da:	7ae3      	ldrb	r3, [r4, #11]
 800a4dc:	430b      	orrs	r3, r1
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d40f      	bmi.n	800a502 <smp_pairing_req+0x17a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
 800a4e2:	2d04      	cmp	r5, #4
 800a4e4:	d80f      	bhi.n	800a506 <smp_pairing_req+0x17e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
 800a4e6:	4310      	orrs	r0, r2
 800a4e8:	f010 0004 	ands.w	r0, r0, #4
 800a4ec:	d0e5      	beq.n	800a4ba <smp_pairing_req+0x132>
	return gen_method_sc[remote_io][get_io_capa()];
 800a4ee:	f7ff fde7 	bl	800a0c0 <get_io_capa>
 800a4f2:	4b68      	ldr	r3, [pc, #416]	; (800a694 <smp_pairing_req+0x30c>)
 800a4f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a4f8:	441d      	add	r5, r3
 800a4fa:	5c28      	ldrb	r0, [r5, r0]
 800a4fc:	e7dd      	b.n	800a4ba <smp_pairing_req+0x132>
		return LEGACY_OOB;
 800a4fe:	2006      	movs	r0, #6
 800a500:	e7db      	b.n	800a4ba <smp_pairing_req+0x132>
			return LE_SC_OOB;
 800a502:	2005      	movs	r0, #5
 800a504:	e7d9      	b.n	800a4ba <smp_pairing_req+0x132>
		return JUST_WORKS;
 800a506:	2000      	movs	r0, #0
 800a508:	e7d7      	b.n	800a4ba <smp_pairing_req+0x132>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
 800a50a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800a50e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
 800a510:	2b03      	cmp	r3, #3
 800a512:	d034      	beq.n	800a57e <smp_pairing_req+0x1f6>
 800a514:	d822      	bhi.n	800a55c <smp_pairing_req+0x1d4>
 800a516:	3b01      	subs	r3, #1
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f63f af5d 	bhi.w	800a3d8 <smp_pairing_req+0x50>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800a51e:	2105      	movs	r1, #5
 800a520:	4630      	mov	r0, r6
 800a522:	f00a f90b 	bl	801473c <atomic_test_bit>
 800a526:	2800      	cmp	r0, #0
 800a528:	f040 80c0 	bne.w	800a6ac <smp_pairing_req+0x324>
	struct bt_conn *conn = smp->chan.chan.conn;
 800a52c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
 800a530:	7a28      	ldrb	r0, [r5, #8]
 800a532:	f105 0190 	add.w	r1, r5, #144	; 0x90
 800a536:	f001 fadf 	bl	800baf8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
 800a53a:	7a23      	ldrb	r3, [r4, #8]
 800a53c:	b318      	cbz	r0, 800a586 <smp_pairing_req+0x1fe>
 800a53e:	7b42      	ldrb	r2, [r0, #13]
 800a540:	07d2      	lsls	r2, r2, #31
 800a542:	d520      	bpl.n	800a586 <smp_pairing_req+0x1fe>
 800a544:	b9fb      	cbnz	r3, 800a586 <smp_pairing_req+0x1fe>
		BT_ERR("JustWorks failed, authenticated keys present");
 800a546:	4b54      	ldr	r3, [pc, #336]	; (800a698 <smp_pairing_req+0x310>)
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	2302      	movs	r3, #2
 800a54c:	9303      	str	r3, [sp, #12]
 800a54e:	aa03      	add	r2, sp, #12
 800a550:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800a554:	4851      	ldr	r0, [pc, #324]	; (800a69c <smp_pairing_req+0x314>)
 800a556:	f00a f97a 	bl	801484e <z_log_msg2_static_create.constprop.0>
	if (ret) {
 800a55a:	e73d      	b.n	800a3d8 <smp_pairing_req+0x50>
	switch (sec) {
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	f47f af3b 	bne.w	800a3d8 <smp_pairing_req+0x50>
	return MIN(req->max_key_size, rsp->max_key_size);
 800a562:	7d23      	ldrb	r3, [r4, #20]
 800a564:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
 800a566:	4293      	cmp	r3, r2
 800a568:	bf28      	it	cs
 800a56a:	4613      	movcs	r3, r2
 800a56c:	2b10      	cmp	r3, #16
 800a56e:	f47f af14 	bne.w	800a39a <smp_pairing_req+0x12>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800a572:	2105      	movs	r1, #5
 800a574:	4630      	mov	r0, r6
 800a576:	f00a f8e1 	bl	801473c <atomic_test_bit>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d0a4      	beq.n	800a4c8 <smp_pairing_req+0x140>
		if (smp->method == JUST_WORKS) {
 800a57e:	7a23      	ldrb	r3, [r4, #8]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1cc      	bne.n	800a51e <smp_pairing_req+0x196>
 800a584:	e7a0      	b.n	800a4c8 <smp_pairing_req+0x140>
	switch (smp->method) {
 800a586:	2b06      	cmp	r3, #6
 800a588:	d868      	bhi.n	800a65c <smp_pairing_req+0x2d4>
 800a58a:	e8df f003 	tbb	[pc, r3]
 800a58e:	5d1b      	.short	0x5d1b
 800a590:	67676733 	.word	0x67676733
 800a594:	04          	.byte	0x04
 800a595:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
 800a596:	4d42      	ldr	r5, [pc, #264]	; (800a6a0 <smp_pairing_req+0x318>)
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d067      	beq.n	800a66e <smp_pairing_req+0x2e6>
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d064      	beq.n	800a66e <smp_pairing_req+0x2e6>
			struct bt_conn_oob_info info = {
 800a5a4:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800a5a6:	210a      	movs	r1, #10
 800a5a8:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
 800a5aa:	f8ad 3000 	strh.w	r3, [sp]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800a5ae:	f00a f8b1 	bl	8014714 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	4669      	mov	r1, sp
 800a5bc:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 800a5be:	7a23      	ldrb	r3, [r4, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d156      	bne.n	800a672 <smp_pairing_req+0x2ea>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 800a5c4:	210f      	movs	r1, #15
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f00a f8b8 	bl	801473c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d14f      	bne.n	800a672 <smp_pairing_req+0x2ea>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 800a5d2:	4f33      	ldr	r7, [pc, #204]	; (800a6a0 <smp_pairing_req+0x318>)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d04b      	beq.n	800a672 <smp_pairing_req+0x2ea>
	    bt_auth && bt_auth->pairing_confirm) {
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d048      	beq.n	800a672 <smp_pairing_req+0x2ea>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	210a      	movs	r1, #10
 800a5e4:	f00a f896 	bl	8014714 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800a5ee:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
 800a5f0:	4798      	blx	r3
		return 0;
 800a5f2:	e6d3      	b.n	800a39c <smp_pairing_req+0x14>
			if (bt_rand(&passkey, sizeof(passkey))) {
 800a5f4:	2104      	movs	r1, #4
 800a5f6:	4668      	mov	r0, sp
 800a5f8:	f7fc fa96 	bl	8006b28 <bt_rand>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	f47f aeeb 	bne.w	800a3d8 <smp_pairing_req+0x50>
			passkey %= 1000000;
 800a602:	9900      	ldr	r1, [sp, #0]
 800a604:	4a27      	ldr	r2, [pc, #156]	; (800a6a4 <smp_pairing_req+0x31c>)
		if (bt_auth && bt_auth->passkey_display) {
 800a606:	4f26      	ldr	r7, [pc, #152]	; (800a6a0 <smp_pairing_req+0x318>)
			passkey %= 1000000;
 800a608:	fbb1 f3f2 	udiv	r3, r1, r2
 800a60c:	fb02 1313 	mls	r3, r2, r3, r1
 800a610:	9300      	str	r3, [sp, #0]
		if (bt_auth && bt_auth->passkey_display) {
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	b153      	cbz	r3, 800a62c <smp_pairing_req+0x2a4>
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	b143      	cbz	r3, 800a62c <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
 800a61a:	210b      	movs	r1, #11
 800a61c:	4630      	mov	r0, r6
 800a61e:	f00a f879 	bl	8014714 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	9900      	ldr	r1, [sp, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4628      	mov	r0, r5
 800a62a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
 800a62c:	9b00      	ldr	r3, [sp, #0]
	dst[0] = val;
 800a62e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
 800a632:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
 800a636:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
 800a638:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 800a642:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
 800a646:	e7ba      	b.n	800a5be <smp_pairing_req+0x236>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800a648:	4630      	mov	r0, r6
 800a64a:	210a      	movs	r1, #10
 800a64c:	f00a f862 	bl	8014714 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
 800a650:	4b13      	ldr	r3, [pc, #76]	; (800a6a0 <smp_pairing_req+0x318>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4628      	mov	r0, r5
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	4798      	blx	r3
	if (ret) {
 800a65a:	e7b0      	b.n	800a5be <smp_pairing_req+0x236>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800a65c:	4a12      	ldr	r2, [pc, #72]	; (800a6a8 <smp_pairing_req+0x320>)
	switch (smp->method) {
 800a65e:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800a662:	2303      	movs	r3, #3
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	aa03      	add	r2, sp, #12
 800a668:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800a66c:	e772      	b.n	800a554 <smp_pairing_req+0x1cc>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
 800a66e:	2502      	movs	r5, #2
 800a670:	e694      	b.n	800a39c <smp_pairing_req+0x14>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 800a672:	2103      	movs	r1, #3
 800a674:	4620      	mov	r0, r4
 800a676:	f00a f84d 	bl	8014714 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
 800a67a:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
 800a67c:	4620      	mov	r0, r4
 800a67e:	f00a f849 	bl	8014714 <atomic_set_bit>
	return send_pairing_rsp(smp);
 800a682:	f00a f8c9 	bl	8014818 <send_pairing_rsp>
 800a686:	4605      	mov	r5, r0
 800a688:	e688      	b.n	800a39c <smp_pairing_req+0x14>
 800a68a:	bf00      	nop
 800a68c:	20001981 	.word	0x20001981
 800a690:	080193d8 	.word	0x080193d8
 800a694:	080193f1 	.word	0x080193f1
 800a698:	080190b5 	.word	0x080190b5
 800a69c:	08015b7c 	.word	0x08015b7c
 800a6a0:	20001618 	.word	0x20001618
 800a6a4:	000f4240 	.word	0x000f4240
 800a6a8:	080190e2 	.word	0x080190e2
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 800a6ac:	7a25      	ldrb	r5, [r4, #8]
 800a6ae:	b9a5      	cbnz	r5, 800a6da <smp_pairing_req+0x352>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 800a6b0:	210f      	movs	r1, #15
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f00a f842 	bl	801473c <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
 800a6b8:	b978      	cbnz	r0, 800a6da <smp_pairing_req+0x352>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
 800a6ba:	f8df 8024 	ldr.w	r8, [pc, #36]	; 800a6e0 <smp_pairing_req+0x358>
 800a6be:	f8d8 3000 	ldr.w	r3, [r8]
 800a6c2:	b153      	cbz	r3, 800a6da <smp_pairing_req+0x352>
	    bt_auth && bt_auth->pairing_confirm) {
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	b143      	cbz	r3, 800a6da <smp_pairing_req+0x352>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	210a      	movs	r1, #10
 800a6cc:	f00a f822 	bl	8014714 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
 800a6d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	e78a      	b.n	800a5f0 <smp_pairing_req+0x268>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
 800a6da:	210c      	movs	r1, #12
 800a6dc:	e7ce      	b.n	800a67c <smp_pairing_req+0x2f4>
 800a6de:	bf00      	nop
 800a6e0:	20001618 	.word	0x20001618

0800a6e4 <smp_dhkey_generate>:
{
 800a6e4:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
 800a6e6:	1d05      	adds	r5, r0, #4
{
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
 800a6ec:	2108      	movs	r1, #8
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f00a f810 	bl	8014714 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
 800a6f4:	490b      	ldr	r1, [pc, #44]	; (800a724 <smp_dhkey_generate+0x40>)
 800a6f6:	f104 0057 	add.w	r0, r4, #87	; 0x57
 800a6fa:	f7fc fadf 	bl	8006cbc <bt_dh_key_gen>
	if (err) {
 800a6fe:	b170      	cbz	r0, 800a71e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
 800a700:	2108      	movs	r1, #8
 800a702:	4628      	mov	r0, r5
 800a704:	f00a f823 	bl	801474e <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
 800a708:	4b07      	ldr	r3, [pc, #28]	; (800a728 <smp_dhkey_generate+0x44>)
 800a70a:	4808      	ldr	r0, [pc, #32]	; (800a72c <smp_dhkey_generate+0x48>)
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	aa03      	add	r2, sp, #12
 800a710:	2302      	movs	r3, #2
 800a712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a716:	9303      	str	r3, [sp, #12]
 800a718:	f00a f899 	bl	801484e <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
 800a71c:	2008      	movs	r0, #8
}
 800a71e:	b007      	add	sp, #28
 800a720:	bd30      	pop	{r4, r5, pc}
 800a722:	bf00      	nop
 800a724:	08014d1f 	.word	0x08014d1f
 800a728:	080190fe 	.word	0x080190fe
 800a72c:	08015b7c 	.word	0x08015b7c

0800a730 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
 800a730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		*chan = &smp->chan.chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
 800a732:	4b08      	ldr	r3, [pc, #32]	; (800a754 <bt_smp_accept.part.0+0x24>)
 800a734:	aa03      	add	r2, sp, #12
 800a736:	e9cd 3004 	strd	r3, r0, [sp, #16]
 800a73a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800a73e:	2303      	movs	r3, #3
 800a740:	4805      	ldr	r0, [pc, #20]	; (800a758 <bt_smp_accept.part.0+0x28>)
 800a742:	9303      	str	r3, [sp, #12]
 800a744:	f00a f883 	bl	801484e <z_log_msg2_static_create.constprop.0>

	return -ENOMEM;
}
 800a748:	f06f 000b 	mvn.w	r0, #11
 800a74c:	b007      	add	sp, #28
 800a74e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a752:	bf00      	nop
 800a754:	08019117 	.word	0x08019117
 800a758:	08015b7c 	.word	0x08015b7c

0800a75c <bt_smp_accept>:
		if (smp->chan.chan.conn) {
 800a75c:	4b06      	ldr	r3, [pc, #24]	; (800a778 <bt_smp_accept+0x1c>)
 800a75e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a762:	b10a      	cbz	r2, 800a768 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
 800a764:	f7ff bfe4 	b.w	800a730 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
 800a768:	4804      	ldr	r0, [pc, #16]	; (800a77c <bt_smp_accept+0x20>)
 800a76a:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
		*chan = &smp->chan.chan;
 800a76e:	33f0      	adds	r3, #240	; 0xf0
 800a770:	600b      	str	r3, [r1, #0]
}
 800a772:	4610      	mov	r0, r2
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	200010e0 	.word	0x200010e0
 800a77c:	080164b0 	.word	0x080164b0

0800a780 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
 800a780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_ERR("Unable to find SMP channel");
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <smp_chan_get.part.0+0x20>)
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	4807      	ldr	r0, [pc, #28]	; (800a7a4 <smp_chan_get.part.0+0x24>)
 800a788:	2302      	movs	r3, #2
 800a78a:	aa03      	add	r2, sp, #12
 800a78c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	f00a f85c 	bl	801484e <z_log_msg2_static_create.constprop.0>
}
 800a796:	2000      	movs	r0, #0
 800a798:	b007      	add	sp, #28
 800a79a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a79e:	bf00      	nop
 800a7a0:	0801913c 	.word	0x0801913c
 800a7a4:	08015b7c 	.word	0x08015b7c

0800a7a8 <compute_and_check_and_send_periph_dhcheck>:
{
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(r, 0, sizeof(r));
 800a7ac:	2210      	movs	r2, #16
{
 800a7ae:	b0a2      	sub	sp, #136	; 0x88
 800a7b0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	eb0d 0002 	add.w	r0, sp, r2
 800a7b8:	f008 fb73 	bl	8012ea2 <memset>
	switch (smp->method) {
 800a7bc:	7a23      	ldrb	r3, [r4, #8]
 800a7be:	2b05      	cmp	r3, #5
 800a7c0:	f200 8095 	bhi.w	800a8ee <compute_and_check_and_send_periph_dhcheck+0x146>
 800a7c4:	e8df f003 	tbb	[pc, r3]
 800a7c8:	09030309 	.word	0x09030309
 800a7cc:	8a93      	.short	0x8a93
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 800a7d4:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
 800a7d6:	f008 fb59 	bl	8012e8c <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
 800a7da:	4b71      	ldr	r3, [pc, #452]	; (800a9a0 <compute_and_check_and_send_periph_dhcheck+0x1f8>)
		   &smp->chan.chan.conn->le.init_addr,
 800a7dc:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
 800a7e0:	aa14      	add	r2, sp, #80	; 0x50
 800a7e2:	f103 0730 	add.w	r7, r3, #48	; 0x30
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	6859      	ldr	r1, [r3, #4]
 800a7ec:	4615      	mov	r5, r2
 800a7ee:	c503      	stmia	r5!, {r0, r1}
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	42bb      	cmp	r3, r7
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	d1f7      	bne.n	800a7e8 <compute_and_check_and_send_periph_dhcheck+0x40>
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	791b      	ldrb	r3, [r3, #4]
 800a7fc:	6028      	str	r0, [r5, #0]
	sys_memcpy_swap(ws, w, 32);
 800a7fe:	af0c      	add	r7, sp, #48	; 0x30
	uint8_t m[53] = { 0x00, /* counter */
 800a800:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
 800a802:	2220      	movs	r2, #32
 800a804:	f104 0197 	add.w	r1, r4, #151	; 0x97
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff fc7f 	bl	800a10c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
 800a80e:	4865      	ldr	r0, [pc, #404]	; (800a9a4 <compute_and_check_and_send_periph_dhcheck+0x1fc>)
 800a810:	ab08      	add	r3, sp, #32
 800a812:	2220      	movs	r2, #32
 800a814:	4639      	mov	r1, r7
 800a816:	f009 ffa9 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f040 80bd 	bne.w	800a99a <compute_and_check_and_send_periph_dhcheck+0x1f2>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 800a820:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
 800a824:	2210      	movs	r2, #16
 800a826:	4641      	mov	r1, r8
 800a828:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
 800a82c:	f104 0a27 	add.w	sl, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
 800a830:	f7ff fc6c 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
 800a834:	2210      	movs	r2, #16
 800a836:	4651      	mov	r1, sl
 800a838:	f10d 0065 	add.w	r0, sp, #101	; 0x65
 800a83c:	f7ff fc66 	bl	800a10c <sys_memcpy_swap>
	m[37] = a1->type;
 800a840:	f896 3097 	ldrb.w	r3, [r6, #151]	; 0x97
 800a844:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
 800a848:	2206      	movs	r2, #6
 800a84a:	f106 0198 	add.w	r1, r6, #152	; 0x98
 800a84e:	f10d 0076 	add.w	r0, sp, #118	; 0x76
 800a852:	f7ff fc5b 	bl	800a10c <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
 800a856:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	m[44] = a2->type;
 800a85a:	f896 309e 	ldrb.w	r3, [r6, #158]	; 0x9e
 800a85e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
 800a862:	2206      	movs	r2, #6
 800a864:	f106 019f 	add.w	r1, r6, #159	; 0x9f
 800a868:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
 800a86c:	f7ff fc4e 	bl	800a10c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
 800a870:	462b      	mov	r3, r5
 800a872:	2235      	movs	r2, #53	; 0x35
 800a874:	4649      	mov	r1, r9
 800a876:	a808      	add	r0, sp, #32
 800a878:	f009 ff78 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f040 808c 	bne.w	800a99a <compute_and_check_and_send_periph_dhcheck+0x1f2>
	sys_mem_swap(mackey, 16);
 800a882:	4628      	mov	r0, r5
 800a884:	f009 fff1 	bl	801486a <sys_mem_swap.constprop.0>
		   smp->tk)) {
 800a888:	f104 0647 	add.w	r6, r4, #71	; 0x47
	m[0] = 0x01;
 800a88c:	2301      	movs	r3, #1
 800a88e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
 800a892:	2235      	movs	r2, #53	; 0x35
 800a894:	4633      	mov	r3, r6
 800a896:	4649      	mov	r1, r9
 800a898:	a808      	add	r0, sp, #32
 800a89a:	f009 ff67 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d17b      	bne.n	800a99a <compute_and_check_and_send_periph_dhcheck+0x1f2>
	sys_mem_swap(ltk, 16);
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f009 ffe1 	bl	801486a <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
 800a8a8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 800a8ac:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
 800a8ae:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
 800a8b2:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	f104 0311 	add.w	r3, r4, #17
 800a8ba:	9202      	str	r2, [sp, #8]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	4642      	mov	r2, r8
 800a8c0:	ab04      	add	r3, sp, #16
 800a8c2:	4651      	mov	r1, sl
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f009 ffde 	bl	8014886 <smp_f6>
 800a8ca:	b1e8      	cbz	r0, 800a908 <compute_and_check_and_send_periph_dhcheck+0x160>
		BT_ERR("Calculate local DHKey check failed");
 800a8cc:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <compute_and_check_and_send_periph_dhcheck+0x200>)
		BT_ERR("Calculate LTK failed");
 800a8ce:	9318      	str	r3, [sp, #96]	; 0x60
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8d4:	aa17      	add	r2, sp, #92	; 0x5c
 800a8d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a8da:	e010      	b.n	800a8fe <compute_and_check_and_send_periph_dhcheck+0x156>
		if (smp->oobd_remote) {
 800a8dc:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	f43f af7a 	beq.w	800a7da <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
 800a8e6:	2210      	movs	r2, #16
 800a8e8:	eb0d 0002 	add.w	r0, sp, r2
 800a8ec:	e773      	b.n	800a7d6 <compute_and_check_and_send_periph_dhcheck+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800a8ee:	4a2f      	ldr	r2, [pc, #188]	; (800a9ac <compute_and_check_and_send_periph_dhcheck+0x204>)
	switch (smp->method) {
 800a8f0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8f8:	aa17      	add	r2, sp, #92	; 0x5c
 800a8fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate LTK failed");
 800a8fe:	482c      	ldr	r0, [pc, #176]	; (800a9b0 <compute_and_check_and_send_periph_dhcheck+0x208>)
 800a900:	f009 ffa5 	bl	801484e <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
 800a904:	2008      	movs	r0, #8
 800a906:	e043      	b.n	800a990 <compute_and_check_and_send_periph_dhcheck+0x1e8>
	if (smp->method == LE_SC_OOB) {
 800a908:	7a23      	ldrb	r3, [r4, #8]
 800a90a:	2b05      	cmp	r3, #5
 800a90c:	d107      	bne.n	800a91e <compute_and_check_and_send_periph_dhcheck+0x176>
		if (smp->oobd_local) {
 800a90e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
 800a912:	2210      	movs	r2, #16
 800a914:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
 800a918:	b1b1      	cbz	r1, 800a948 <compute_and_check_and_send_periph_dhcheck+0x1a0>
			memcpy(r, smp->oobd_local->r, sizeof(r));
 800a91a:	f008 fab7 	bl	8012e8c <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
 800a91e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
 800a922:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
 800a926:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
 800a928:	ae08      	add	r6, sp, #32
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	f104 030a 	add.w	r3, r4, #10
 800a930:	9202      	str	r2, [sp, #8]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	9603      	str	r6, [sp, #12]
 800a936:	ab04      	add	r3, sp, #16
 800a938:	4652      	mov	r2, sl
 800a93a:	4641      	mov	r1, r8
 800a93c:	4628      	mov	r0, r5
 800a93e:	f009 ffa2 	bl	8014886 <smp_f6>
 800a942:	b120      	cbz	r0, 800a94e <compute_and_check_and_send_periph_dhcheck+0x1a6>
		BT_ERR("Calculate remote DHKey check failed");
 800a944:	4b1b      	ldr	r3, [pc, #108]	; (800a9b4 <compute_and_check_and_send_periph_dhcheck+0x20c>)
 800a946:	e7c2      	b.n	800a8ce <compute_and_check_and_send_periph_dhcheck+0x126>
			memset(r, 0, sizeof(r));
 800a948:	f008 faab 	bl	8012ea2 <memset>
 800a94c:	e7e7      	b.n	800a91e <compute_and_check_and_send_periph_dhcheck+0x176>
	if (memcmp(smp->e, re, 16)) {
 800a94e:	2210      	movs	r2, #16
 800a950:	4631      	mov	r1, r6
 800a952:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
 800a956:	f008 fa89 	bl	8012e6c <memcmp>
 800a95a:	4605      	mov	r5, r0
 800a95c:	b9d8      	cbnz	r0, 800a996 <compute_and_check_and_send_periph_dhcheck+0x1ee>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
 800a95e:	210d      	movs	r1, #13
 800a960:	4620      	mov	r0, r4
 800a962:	f7ff fc2d 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!buf) {
 800a966:	4606      	mov	r6, r0
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0cb      	beq.n	800a904 <compute_and_check_and_send_periph_dhcheck+0x15c>
 800a96c:	2110      	movs	r1, #16
 800a96e:	3008      	adds	r0, #8
 800a970:	f001 fc04 	bl	800c17c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
 800a974:	2210      	movs	r2, #16
 800a976:	4639      	mov	r1, r7
 800a978:	f008 fa88 	bl	8012e8c <memcpy>
	smp_send(smp, buf, NULL, NULL);
 800a97c:	462a      	mov	r2, r5
 800a97e:	4631      	mov	r1, r6
 800a980:	4620      	mov	r0, r4
 800a982:	f7ff fc3d 	bl	800a200 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 800a986:	1d20      	adds	r0, r4, #4
 800a988:	2101      	movs	r1, #1
 800a98a:	f009 fec3 	bl	8014714 <atomic_set_bit>
	return 0;
 800a98e:	4628      	mov	r0, r5
}
 800a990:	b022      	add	sp, #136	; 0x88
 800a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
 800a996:	200b      	movs	r0, #11
 800a998:	e7fa      	b.n	800a990 <compute_and_check_and_send_periph_dhcheck+0x1e8>
		BT_ERR("Calculate LTK failed");
 800a99a:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <compute_and_check_and_send_periph_dhcheck+0x210>)
 800a99c:	e797      	b.n	800a8ce <compute_and_check_and_send_periph_dhcheck+0x126>
 800a99e:	bf00      	nop
 800a9a0:	08015cda 	.word	0x08015cda
 800a9a4:	0801940a 	.word	0x0801940a
 800a9a8:	08019157 	.word	0x08019157
 800a9ac:	080190e2 	.word	0x080190e2
 800a9b0:	08015b7c 	.word	0x08015b7c
 800a9b4:	0801917a 	.word	0x0801917a
 800a9b8:	0801919e 	.word	0x0801919e

0800a9bc <smp_send_pairing_confirm>:
{
 800a9bc:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
 800a9be:	7a04      	ldrb	r4, [r0, #8]
 800a9c0:	2c02      	cmp	r4, #2
{
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	4605      	mov	r5, r0
	switch (smp->method) {
 800a9c6:	d824      	bhi.n	800aa12 <smp_send_pairing_confirm+0x56>
 800a9c8:	b14c      	cbz	r4, 800a9de <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 800a9ca:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 800a9ce:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 800a9d2:	40dc      	lsrs	r4, r3
 800a9d4:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
 800a9d8:	f064 047f 	orn	r4, r4, #127	; 0x7f
 800a9dc:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
 800a9de:	2103      	movs	r1, #3
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7ff fbed 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!buf) {
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	b300      	cbz	r0, 800aa2c <smp_send_pairing_confirm+0x70>
 800a9ea:	2110      	movs	r1, #16
 800a9ec:	3008      	adds	r0, #8
 800a9ee:	f001 fbc5 	bl	800c17c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
 800a9f2:	9000      	str	r0, [sp, #0]
 800a9f4:	4815      	ldr	r0, [pc, #84]	; (800aa4c <smp_send_pairing_confirm+0x90>)
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	6800      	ldr	r0, [r0, #0]
 800a9fa:	f105 0227 	add.w	r2, r5, #39	; 0x27
 800a9fe:	f105 0157 	add.w	r1, r5, #87	; 0x57
 800aa02:	f009 ffb5 	bl	8014970 <smp_f4>
 800aa06:	4604      	mov	r4, r0
 800aa08:	b1a0      	cbz	r0, 800aa34 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f001 fa86 	bl	800bf1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
 800aa10:	e00c      	b.n	800aa2c <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
 800aa12:	2c03      	cmp	r4, #3
 800aa14:	d00c      	beq.n	800aa30 <smp_send_pairing_confirm+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800aa16:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <smp_send_pairing_confirm+0x94>)
 800aa18:	480e      	ldr	r0, [pc, #56]	; (800aa54 <smp_send_pairing_confirm+0x98>)
	switch (smp->method) {
 800aa1a:	e9cd 3406 	strd	r3, r4, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800aa1e:	aa05      	add	r2, sp, #20
 800aa20:	2303      	movs	r3, #3
 800aa22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800aa26:	9305      	str	r3, [sp, #20]
 800aa28:	f009 ff11 	bl	801484e <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
 800aa2c:	2008      	movs	r0, #8
 800aa2e:	e00b      	b.n	800aa48 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
 800aa30:	2400      	movs	r4, #0
 800aa32:	e7d4      	b.n	800a9de <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
 800aa34:	4602      	mov	r2, r0
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f7ff fbe1 	bl	800a200 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 800aa3e:	1d28      	adds	r0, r5, #4
 800aa40:	4621      	mov	r1, r4
 800aa42:	f009 fe84 	bl	801474e <atomic_clear_bit>
	return 0;
 800aa46:	4620      	mov	r0, r4
}
 800aa48:	b008      	add	sp, #32
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	200016bc 	.word	0x200016bc
 800aa50:	080190e2 	.word	0x080190e2
 800aa54:	08015b7c 	.word	0x08015b7c

0800aa58 <smp_public_key_periph>:
{
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
 800aa5c:	1d06      	adds	r6, r0, #4
{
 800aa5e:	b086      	sub	sp, #24
 800aa60:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
 800aa62:	210e      	movs	r1, #14
 800aa64:	4630      	mov	r0, r6
 800aa66:	f009 fe69 	bl	801473c <atomic_test_bit>
 800aa6a:	b990      	cbnz	r0, 800aa92 <smp_public_key_periph+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
 800aa6c:	4b4d      	ldr	r3, [pc, #308]	; (800aba4 <smp_public_key_periph+0x14c>)
 800aa6e:	2220      	movs	r2, #32
 800aa70:	6819      	ldr	r1, [r3, #0]
 800aa72:	f104 0057 	add.w	r0, r4, #87	; 0x57
 800aa76:	f008 f9f9 	bl	8012e6c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
 800aa7a:	b950      	cbnz	r0, 800aa92 <smp_public_key_periph+0x3a>
		BT_WARN("Remote public key rejected");
 800aa7c:	4b4a      	ldr	r3, [pc, #296]	; (800aba8 <smp_public_key_periph+0x150>)
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	2302      	movs	r3, #2
 800aa82:	9303      	str	r3, [sp, #12]
 800aa84:	aa03      	add	r2, sp, #12
 800aa86:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800aa8a:	4848      	ldr	r0, [pc, #288]	; (800abac <smp_public_key_periph+0x154>)
 800aa8c:	f009 fedf 	bl	801484e <z_log_msg2_static_create.constprop.0>
 800aa90:	e005      	b.n	800aa9e <smp_public_key_periph+0x46>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
 800aa92:	210c      	movs	r1, #12
 800aa94:	4620      	mov	r0, r4
 800aa96:	f7ff fb93 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!req_buf) {
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b908      	cbnz	r0, 800aaa2 <smp_public_key_periph+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
 800aa9e:	2008      	movs	r0, #8
 800aaa0:	e027      	b.n	800aaf2 <smp_public_key_periph+0x9a>
 800aaa2:	2140      	movs	r1, #64	; 0x40
 800aaa4:	3008      	adds	r0, #8
 800aaa6:	f001 fb69 	bl	800c17c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
 800aaaa:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800aba4 <smp_public_key_periph+0x14c>
 800aaae:	2220      	movs	r2, #32
 800aab0:	f8d8 1000 	ldr.w	r1, [r8]
 800aab4:	4607      	mov	r7, r0
 800aab6:	f008 f9e9 	bl	8012e8c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
 800aaba:	f8d8 1000 	ldr.w	r1, [r8]
 800aabe:	2220      	movs	r2, #32
 800aac0:	4411      	add	r1, r2
 800aac2:	18b8      	adds	r0, r7, r2
 800aac4:	f008 f9e2 	bl	8012e8c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
 800aac8:	2200      	movs	r2, #0
 800aaca:	4629      	mov	r1, r5
 800aacc:	4620      	mov	r0, r4
 800aace:	f7ff fb97 	bl	800a200 <smp_send.isra.0>
	switch (smp->method) {
 800aad2:	7a23      	ldrb	r3, [r4, #8]
 800aad4:	2b05      	cmp	r3, #5
 800aad6:	d859      	bhi.n	800ab8c <smp_public_key_periph+0x134>
 800aad8:	e8df f003 	tbb	[pc, r3]
 800aadc:	030e3903 	.word	0x030e3903
 800aae0:	5658      	.short	0x5658
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 800aae2:	2104      	movs	r1, #4
 800aae4:	4620      	mov	r0, r4
 800aae6:	f009 fe15 	bl	8014714 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
 800aaea:	f7ff ff67 	bl	800a9bc <smp_send_pairing_confirm>
		if (err) {
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d03e      	beq.n	800ab70 <smp_public_key_periph+0x118>
}
 800aaf2:	b006      	add	sp, #24
 800aaf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
 800aaf8:	2104      	movs	r1, #4
 800aafa:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800aafe:	f7fc f813 	bl	8006b28 <bt_rand>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1cb      	bne.n	800aa9e <smp_public_key_periph+0x46>
		smp->passkey %= 1000000;
 800ab06:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800ab0a:	4a29      	ldr	r2, [pc, #164]	; (800abb0 <smp_public_key_periph+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
 800ab0c:	4d29      	ldr	r5, [pc, #164]	; (800abb4 <smp_public_key_periph+0x15c>)
		smp->passkey %= 1000000;
 800ab0e:	fbb1 f3f2 	udiv	r3, r1, r2
 800ab12:	fb02 1313 	mls	r3, r2, r3, r1
 800ab16:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
 800ab1a:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
 800ab1c:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
 800ab20:	b163      	cbz	r3, 800ab3c <smp_public_key_periph+0xe4>
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	b153      	cbz	r3, 800ab3c <smp_public_key_periph+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
 800ab26:	210b      	movs	r1, #11
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f009 fdf3 	bl	8014714 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800ab3a:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 800ab3c:	2103      	movs	r1, #3
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f009 fde8 	bl	8014714 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
 800ab44:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 800ab46:	4620      	mov	r0, r4
 800ab48:	f009 fde4 	bl	8014714 <atomic_set_bit>
		break;
 800ab4c:	e010      	b.n	800ab70 <smp_public_key_periph+0x118>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
 800ab4e:	4620      	mov	r0, r4
 800ab50:	2103      	movs	r1, #3
 800ab52:	f009 fddf 	bl	8014714 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
 800ab56:	210e      	movs	r1, #14
 800ab58:	f009 fddc 	bl	8014714 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	210a      	movs	r1, #10
 800ab60:	f009 fdd8 	bl	8014714 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <smp_public_key_periph+0x15c>)
 800ab66:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
 800ab70:	4630      	mov	r0, r6
 800ab72:	2107      	movs	r1, #7
 800ab74:	f009 fdce 	bl	8014714 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
 800ab78:	2008      	movs	r0, #8
 800ab7a:	f7ff faf5 	bl	800a168 <smp_find>
 800ab7e:	b970      	cbnz	r0, 800ab9e <smp_public_key_periph+0x146>
		return smp_dhkey_generate(smp);
 800ab80:	4620      	mov	r0, r4
 800ab82:	f7ff fdaf 	bl	800a6e4 <smp_dhkey_generate>
 800ab86:	e7b4      	b.n	800aaf2 <smp_public_key_periph+0x9a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 800ab88:	2104      	movs	r1, #4
 800ab8a:	e7dc      	b.n	800ab46 <smp_public_key_periph+0xee>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800ab8c:	4a0a      	ldr	r2, [pc, #40]	; (800abb8 <smp_public_key_periph+0x160>)
	switch (smp->method) {
 800ab8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800ab92:	2303      	movs	r3, #3
 800ab94:	9303      	str	r3, [sp, #12]
 800ab96:	aa03      	add	r2, sp, #12
 800ab98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ab9c:	e775      	b.n	800aa8a <smp_public_key_periph+0x32>
	return 0;
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e7a7      	b.n	800aaf2 <smp_public_key_periph+0x9a>
 800aba2:	bf00      	nop
 800aba4:	200016bc 	.word	0x200016bc
 800aba8:	080191b3 	.word	0x080191b3
 800abac:	08015b7c 	.word	0x08015b7c
 800abb0:	000f4240 	.word	0x000f4240
 800abb4:	20001618 	.word	0x20001618
 800abb8:	080190e2 	.word	0x080190e2

0800abbc <smp_public_key>:
{
 800abbc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
 800abbe:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
 800abc0:	f100 0457 	add.w	r4, r0, #87	; 0x57
{
 800abc4:	b086      	sub	sp, #24
 800abc6:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
 800abc8:	2220      	movs	r2, #32
 800abca:	4631      	mov	r1, r6
 800abcc:	4620      	mov	r0, r4
 800abce:	f008 f95d 	bl	8012e8c <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
 800abd2:	2220      	movs	r2, #32
 800abd4:	18b1      	adds	r1, r6, r2
 800abd6:	f105 0077 	add.w	r0, r5, #119	; 0x77
 800abda:	f008 f957 	bl	8012e8c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
 800abde:	4620      	mov	r0, r4
 800abe0:	f7fb ffba 	bl	8006b58 <bt_pub_key_is_debug>
 800abe4:	b940      	cbnz	r0, 800abf8 <smp_public_key+0x3c>
	if (!sc_public_key) {
 800abe6:	4b1b      	ldr	r3, [pc, #108]	; (800ac54 <smp_public_key+0x98>)
 800abe8:	681c      	ldr	r4, [r3, #0]
 800abea:	bb74      	cbnz	r4, 800ac4a <smp_public_key+0x8e>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
 800abec:	1d28      	adds	r0, r5, #4
 800abee:	2106      	movs	r1, #6
 800abf0:	f009 fd90 	bl	8014714 <atomic_set_bit>
		return 0;
 800abf4:	4620      	mov	r0, r4
 800abf6:	e026      	b.n	800ac46 <smp_public_key+0x8a>
		BT_INFO("Remote is using Debug Public key");
 800abf8:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <smp_public_key+0x9c>)
 800abfa:	4818      	ldr	r0, [pc, #96]	; (800ac5c <smp_public_key+0xa0>)
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	aa03      	add	r2, sp, #12
 800ac00:	2302      	movs	r3, #2
 800ac02:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	f009 fe21 	bl	801484e <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
 800ac0c:	210e      	movs	r1, #14
 800ac0e:	1d28      	adds	r0, r5, #4
 800ac10:	f009 fd80 	bl	8014714 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
 800ac14:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	if (!conn->le.keys) {
 800ac18:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800ac1c:	b933      	cbnz	r3, 800ac2c <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 800ac1e:	7a20      	ldrb	r0, [r4, #8]
 800ac20:	f104 0190 	add.w	r1, r4, #144	; 0x90
 800ac24:	f000 fee2 	bl	800b9ec <bt_keys_get_addr>
 800ac28:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
 800ac2c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0d8      	beq.n	800abe6 <smp_public_key+0x2a>
 800ac34:	89da      	ldrh	r2, [r3, #14]
 800ac36:	f002 0224 	and.w	r2, r2, #36	; 0x24
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d0d3      	beq.n	800abe6 <smp_public_key+0x2a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
 800ac3e:	7b5b      	ldrb	r3, [r3, #13]
 800ac40:	079b      	lsls	r3, r3, #30
 800ac42:	d4d0      	bmi.n	800abe6 <smp_public_key+0x2a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
 800ac44:	2003      	movs	r0, #3
}
 800ac46:	b006      	add	sp, #24
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7ff ff04 	bl	800aa58 <smp_public_key_periph>
	if (err) {
 800ac50:	e7f9      	b.n	800ac46 <smp_public_key+0x8a>
 800ac52:	bf00      	nop
 800ac54:	200016bc 	.word	0x200016bc
 800ac58:	080191ce 	.word	0x080191ce
 800ac5c:	08015b7c 	.word	0x08015b7c

0800ac60 <bt_smp_connected>:
{
 800ac60:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
 800ac62:	4905      	ldr	r1, [pc, #20]	; (800ac78 <bt_smp_connected+0x18>)
 800ac64:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
 800ac68:	30f0      	adds	r0, #240	; 0xf0
 800ac6a:	f004 fcc7 	bl	800f5fc <k_work_init_delayable>
	smp_reset(smp);
 800ac6e:	4620      	mov	r0, r4
}
 800ac70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
 800ac74:	f009 bebb 	b.w	80149ee <smp_reset>
 800ac78:	0800b805 	.word	0x0800b805

0800ac7c <smp_pairing_confirm>:
{
 800ac7c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
 800ac7e:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
 800ac80:	1d05      	adds	r5, r0, #4
{
 800ac82:	b086      	sub	sp, #24
 800ac84:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
 800ac86:	210b      	movs	r1, #11
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f009 fd60 	bl	801474e <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
 800ac8e:	4631      	mov	r1, r6
 800ac90:	2210      	movs	r2, #16
 800ac92:	f104 0017 	add.w	r0, r4, #23
 800ac96:	f008 f8f9 	bl	8012e8c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800ac9a:	2105      	movs	r1, #5
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f009 fd4d 	bl	801473c <atomic_test_bit>
 800aca2:	b920      	cbnz	r0, 800acae <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
 800aca4:	4620      	mov	r0, r4
 800aca6:	f009 ff20 	bl	8014aea <legacy_pairing_confirm>
}
 800acaa:	b006      	add	sp, #24
 800acac:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
 800acae:	7a23      	ldrb	r3, [r4, #8]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d008      	beq.n	800acc6 <smp_pairing_confirm+0x4a>
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d112      	bne.n	800acde <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
 800acb8:	2104      	movs	r1, #4
 800acba:	4620      	mov	r0, r4
 800acbc:	f009 fd2a 	bl	8014714 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
 800acc0:	f7ff fe7c 	bl	800a9bc <smp_send_pairing_confirm>
 800acc4:	e7f1      	b.n	800acaa <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 800acc6:	210a      	movs	r1, #10
 800acc8:	4628      	mov	r0, r5
 800acca:	f009 fd37 	bl	801473c <atomic_test_bit>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0f2      	beq.n	800acb8 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 800acd2:	4628      	mov	r0, r5
 800acd4:	2100      	movs	r1, #0
 800acd6:	f009 fd1d 	bl	8014714 <atomic_set_bit>
			return 0;
 800acda:	2000      	movs	r0, #0
 800acdc:	e7e5      	b.n	800acaa <smp_pairing_confirm+0x2e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800acde:	4a06      	ldr	r2, [pc, #24]	; (800acf8 <smp_pairing_confirm+0x7c>)
 800ace0:	4806      	ldr	r0, [pc, #24]	; (800acfc <smp_pairing_confirm+0x80>)
	switch (smp->method) {
 800ace2:	e9cd 2304 	strd	r2, r3, [sp, #16]
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800ace6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800acea:	2303      	movs	r3, #3
 800acec:	aa03      	add	r2, sp, #12
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	f009 fdad 	bl	801484e <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
 800acf4:	2008      	movs	r0, #8
 800acf6:	e7d8      	b.n	800acaa <smp_pairing_confirm+0x2e>
 800acf8:	080190e2 	.word	0x080190e2
 800acfc:	08015b7c 	.word	0x08015b7c

0800ad00 <smp_pairing_random>:
{
 800ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad04:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
 800ad06:	f100 0737 	add.w	r7, r0, #55	; 0x37
 800ad0a:	6889      	ldr	r1, [r1, #8]
{
 800ad0c:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
 800ad0e:	2210      	movs	r2, #16
 800ad10:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800ad12:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
 800ad14:	f008 f8ba 	bl	8012e8c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800ad18:	2105      	movs	r1, #5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f009 fd0e 	bl	801473c <atomic_test_bit>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d148      	bne.n	800adb6 <smp_pairing_random+0xb6>
	struct bt_conn *conn = smp->chan.chan.conn;
 800ad24:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
 800ad28:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
 800ad2c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
 800ad30:	ad06      	add	r5, sp, #24
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
 800ad32:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
 800ad34:	9201      	str	r2, [sp, #4]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	9502      	str	r5, [sp, #8]
 800ad3a:	f104 0310 	add.w	r3, r4, #16
 800ad3e:	f104 0209 	add.w	r2, r4, #9
 800ad42:	4639      	mov	r1, r7
 800ad44:	4640      	mov	r0, r8
 800ad46:	f009 fe75 	bl	8014a34 <smp_c1>
	if (err) {
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f040 80bc 	bne.w	800aec8 <smp_pairing_random+0x1c8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
 800ad50:	2210      	movs	r2, #16
 800ad52:	4629      	mov	r1, r5
 800ad54:	f104 0017 	add.w	r0, r4, #23
 800ad58:	f008 f888 	bl	8012e6c <memcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f040 808d 	bne.w	800ae7c <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
 800ad62:	2208      	movs	r2, #8
 800ad64:	4639      	mov	r1, r7
 800ad66:	4628      	mov	r0, r5
 800ad68:	f008 f890 	bl	8012e8c <memcpy>
	memcpy(out + 8, r1, 8);
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	f104 0127 	add.w	r1, r4, #39	; 0x27
 800ad72:	a808      	add	r0, sp, #32
 800ad74:	f008 f88a 	bl	8012e8c <memcpy>
	return bt_encrypt_le(k, out, out);
 800ad78:	462a      	mov	r2, r5
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	f008 fbfa 	bl	8013576 <bt_encrypt_le>
		if (err) {
 800ad82:	b150      	cbz	r0, 800ad9a <smp_pairing_random+0x9a>
			BT_ERR("Calculate STK failed");
 800ad84:	4b6e      	ldr	r3, [pc, #440]	; (800af40 <smp_pairing_random+0x240>)
		BT_ERR("Calculate confirm failed");
 800ad86:	930e      	str	r3, [sp, #56]	; 0x38
 800ad88:	2302      	movs	r3, #2
 800ad8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad8c:	aa0d      	add	r2, sp, #52	; 0x34
 800ad8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800ad92:	486c      	ldr	r0, [pc, #432]	; (800af44 <smp_pairing_random+0x244>)
 800ad94:	f009 fd5b 	bl	801484e <z_log_msg2_static_create.constprop.0>
 800ad98:	e096      	b.n	800aec8 <smp_pairing_random+0x1c8>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	2210      	movs	r2, #16
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f008 f874 	bl	8012e8c <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 800ada4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 800ada6:	4630      	mov	r0, r6
 800ada8:	f009 fcb4 	bl	8014714 <atomic_set_bit>
	return smp_send_pairing_random(smp);
 800adac:	4620      	mov	r0, r4
 800adae:	f009 fd1a 	bl	80147e6 <smp_send_pairing_random>
 800adb2:	4605      	mov	r5, r0
 800adb4:	e063      	b.n	800ae7e <smp_pairing_random+0x17e>
	switch (smp->method) {
 800adb6:	7a23      	ldrb	r3, [r4, #8]
 800adb8:	2b05      	cmp	r3, #5
 800adba:	f200 80a2 	bhi.w	800af02 <smp_pairing_random+0x202>
 800adbe:	e8df f003 	tbb	[pc, r3]
 800adc2:	413b      	.short	0x413b
 800adc4:	85a00341 	.word	0x85a00341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
 800adc8:	4b5f      	ldr	r3, [pc, #380]	; (800af48 <smp_pairing_random+0x248>)
 800adca:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
 800adcc:	2220      	movs	r2, #32
 800adce:	f104 0157 	add.w	r1, r4, #87	; 0x57
 800add2:	a80a      	add	r0, sp, #40	; 0x28
 800add4:	f7ff f99a 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
 800add8:	2220      	movs	r2, #32
 800adda:	4629      	mov	r1, r5
 800addc:	a812      	add	r0, sp, #72	; 0x48
 800adde:	f7ff f995 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
 800ade2:	2210      	movs	r2, #16
 800ade4:	f104 0127 	add.w	r1, r4, #39	; 0x27
 800ade8:	a81a      	add	r0, sp, #104	; 0x68
 800adea:	f7ff f98f 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
 800adee:	2210      	movs	r2, #16
 800adf0:	4639      	mov	r1, r7
 800adf2:	a806      	add	r0, sp, #24
 800adf4:	f7ff f98a 	bl	800a10c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
 800adf8:	ab06      	add	r3, sp, #24
 800adfa:	2250      	movs	r2, #80	; 0x50
 800adfc:	a90a      	add	r1, sp, #40	; 0x28
 800adfe:	4618      	mov	r0, r3
 800ae00:	f009 fcb4 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d15f      	bne.n	800aec8 <smp_pairing_random+0x1c8>
	memcpy(passkey, xs + 12, 4);
 800ae08:	2204      	movs	r2, #4
 800ae0a:	a909      	add	r1, sp, #36	; 0x24
 800ae0c:	a805      	add	r0, sp, #20
 800ae0e:	f008 f83d 	bl	8012e8c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
 800ae12:	9b05      	ldr	r3, [sp, #20]
 800ae14:	494d      	ldr	r1, [pc, #308]	; (800af4c <smp_pairing_random+0x24c>)
 800ae16:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800ae18:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
 800ae1a:	fbb3 f2f1 	udiv	r2, r3, r1
 800ae1e:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800ae22:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
 800ae24:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
 800ae26:	f009 fc75 	bl	8014714 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
 800ae2a:	4b49      	ldr	r3, [pc, #292]	; (800af50 <smp_pairing_random+0x250>)
 800ae2c:	9905      	ldr	r1, [sp, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
 800ae38:	210d      	movs	r1, #13
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f009 fc6a 	bl	8014714 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 800ae40:	2110      	movs	r1, #16
 800ae42:	e7b0      	b.n	800ada6 <smp_pairing_random+0xa6>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 800ae44:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
 800ae48:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
 800ae4c:	493e      	ldr	r1, [pc, #248]	; (800af48 <smp_pairing_random+0x248>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 800ae4e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
 800ae50:	ad06      	add	r5, sp, #24
		r = (smp->passkey >> smp->passkey_round) & 0x01;
 800ae52:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
 800ae56:	9500      	str	r5, [sp, #0]
 800ae58:	6809      	ldr	r1, [r1, #0]
 800ae5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5e:	463a      	mov	r2, r7
 800ae60:	f104 0057 	add.w	r0, r4, #87	; 0x57
 800ae64:	f009 fd84 	bl	8014970 <smp_f4>
 800ae68:	b108      	cbz	r0, 800ae6e <smp_pairing_random+0x16e>
		BT_ERR("Calculate confirm failed");
 800ae6a:	4b3a      	ldr	r3, [pc, #232]	; (800af54 <smp_pairing_random+0x254>)
 800ae6c:	e78b      	b.n	800ad86 <smp_pairing_random+0x86>
	if (memcmp(smp->pcnf, cfm, 16)) {
 800ae6e:	2210      	movs	r2, #16
 800ae70:	4629      	mov	r1, r5
 800ae72:	f104 0017 	add.w	r0, r4, #23
 800ae76:	f007 fff9 	bl	8012e6c <memcmp>
 800ae7a:	b120      	cbz	r0, 800ae86 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
 800ae7c:	2504      	movs	r5, #4
}
 800ae7e:	4628      	mov	r0, r5
 800ae80:	b01e      	add	sp, #120	; 0x78
 800ae82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
 800ae86:	2103      	movs	r1, #3
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f009 fc43 	bl	8014714 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
 800ae8e:	f009 fcaa 	bl	80147e6 <smp_send_pairing_random>
		if (err) {
 800ae92:	4605      	mov	r5, r0
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d1f2      	bne.n	800ae7e <smp_pairing_random+0x17e>
		smp->passkey_round++;
 800ae98:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
 800aea0:	2b14      	cmp	r3, #20
		smp->passkey_round++;
 800aea2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
 800aea6:	d108      	bne.n	800aeba <smp_pairing_random+0x1ba>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
 800aea8:	4620      	mov	r0, r4
 800aeaa:	210d      	movs	r1, #13
 800aeac:	f009 fc32 	bl	8014714 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 800aeb0:	2110      	movs	r1, #16
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f009 fc2e 	bl	8014714 <atomic_set_bit>
			return 0;
 800aeb8:	e7e1      	b.n	800ae7e <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
 800aeba:	2110      	movs	r1, #16
 800aebc:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800aec0:	f7fb fe32 	bl	8006b28 <bt_rand>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0da      	beq.n	800ae7e <smp_pairing_random+0x17e>
		return BT_SMP_ERR_UNSPECIFIED;
 800aec8:	2508      	movs	r5, #8
 800aeca:	e7d8      	b.n	800ae7e <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
 800aecc:	2110      	movs	r1, #16
 800aece:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800aed2:	f7fb fe29 	bl	8006b28 <bt_rand>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1f6      	bne.n	800aec8 <smp_pairing_random+0x1c8>
		if (bt_auth && bt_auth->oob_data_request) {
 800aeda:	4f1d      	ldr	r7, [pc, #116]	; (800af50 <smp_pairing_random+0x250>)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	b1cb      	cbz	r3, 800af14 <smp_pairing_random+0x214>
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	b1bb      	cbz	r3, 800af14 <smp_pairing_random+0x214>
			struct bt_conn_oob_info info = {
 800aee4:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <smp_pairing_random+0x258>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 800aee6:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 800aeee:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 800aef0:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
 800aef2:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
 800aef6:	d40f      	bmi.n	800af18 <smp_pairing_random+0x218>
				     BT_CONN_OOB_BOTH_PEERS :
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bf0c      	ite	eq
 800aefc:	2003      	moveq	r0, #3
 800aefe:	2001      	movne	r0, #1
 800af00:	e00d      	b.n	800af1e <smp_pairing_random+0x21e>
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800af02:	4a16      	ldr	r2, [pc, #88]	; (800af5c <smp_pairing_random+0x25c>)
	switch (smp->method) {
 800af04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		BT_ERR("Unknown pairing method (%u)", smp->method);
 800af08:	2303      	movs	r3, #3
 800af0a:	930d      	str	r3, [sp, #52]	; 0x34
 800af0c:	aa0d      	add	r2, sp, #52	; 0x34
 800af0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800af12:	e73e      	b.n	800ad92 <smp_pairing_random+0x92>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
 800af14:	2502      	movs	r5, #2
 800af16:	e7b2      	b.n	800ae7e <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf18      	it	ne
 800af1c:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
 800af1e:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
 800af20:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
 800af24:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
 800af28:	4630      	mov	r0, r6
 800af2a:	210c      	movs	r1, #12
 800af2c:	f009 fbf2 	bl	8014714 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	a90a      	add	r1, sp, #40	; 0x28
 800af3a:	4798      	blx	r3
			return 0;
 800af3c:	e79f      	b.n	800ae7e <smp_pairing_random+0x17e>
 800af3e:	bf00      	nop
 800af40:	080191ef 	.word	0x080191ef
 800af44:	08015b7c 	.word	0x08015b7c
 800af48:	200016bc 	.word	0x200016bc
 800af4c:	000f4240 	.word	0x000f4240
 800af50:	20001618 	.word	0x20001618
 800af54:	08019204 	.word	0x08019204
 800af58:	08015d0f 	.word	0x08015d0f
 800af5c:	080190e2 	.word	0x080190e2

0800af60 <bt_smp_start_security>:
{
 800af60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
 800af64:	78c4      	ldrb	r4, [r0, #3]
 800af66:	2c01      	cmp	r4, #1
{
 800af68:	4605      	mov	r5, r0
	switch (conn->role) {
 800af6a:	d005      	beq.n	800af78 <bt_smp_start_security+0x18>
		return -EINVAL;
 800af6c:	f06f 0415 	mvn.w	r4, #21
}
 800af70:	4620      	mov	r0, r4
 800af72:	b003      	add	sp, #12
 800af74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
 800af78:	f009 fc6c 	bl	8014854 <smp_chan_get>
	if (!smp) {
 800af7c:	4606      	mov	r6, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	f000 80a5 	beq.w	800b0ce <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 800af84:	1d07      	adds	r7, r0, #4
 800af86:	2104      	movs	r1, #4
 800af88:	4638      	mov	r0, r7
 800af8a:	f009 fbd7 	bl	801473c <atomic_test_bit>
 800af8e:	2800      	cmp	r0, #0
 800af90:	f040 80a0 	bne.w	800b0d4 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 800af94:	2103      	movs	r1, #3
 800af96:	4638      	mov	r0, r7
 800af98:	f009 fbd0 	bl	801473c <atomic_test_bit>
 800af9c:	b110      	cbz	r0, 800afa4 <bt_smp_start_security+0x44>
		return -EBUSY;
 800af9e:	f06f 040f 	mvn.w	r4, #15
 800afa2:	e7e5      	b.n	800af70 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 800afa4:	4621      	mov	r1, r4
 800afa6:	4638      	mov	r0, r7
 800afa8:	f009 fbc8 	bl	801473c <atomic_test_bit>
 800afac:	2800      	cmp	r0, #0
 800afae:	d1f6      	bne.n	800af9e <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 800afb0:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d03d      	beq.n	800b032 <bt_smp_start_security+0xd2>
 800afb6:	d82c      	bhi.n	800b012 <bt_smp_start_security+0xb2>
 800afb8:	3b01      	subs	r3, #1
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d947      	bls.n	800b04e <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
 800afbe:	210a      	movs	r1, #10
 800afc0:	1d28      	adds	r0, r5, #4
 800afc2:	f009 fbbb 	bl	801473c <atomic_test_bit>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d1d0      	bne.n	800af6c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
 800afca:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 800afce:	b983      	cbnz	r3, 800aff2 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
 800afd0:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
 800afd4:	7a29      	ldrb	r1, [r5, #8]
 800afd6:	4622      	mov	r2, r4
 800afd8:	2020      	movs	r0, #32
 800afda:	f000 fd3d 	bl	800ba58 <bt_keys_find>
 800afde:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
 800afe2:	b930      	cbnz	r0, 800aff2 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
 800afe4:	7a29      	ldrb	r1, [r5, #8]
 800afe6:	4622      	mov	r2, r4
 800afe8:	2004      	movs	r0, #4
 800afea:	f000 fd35 	bl	800ba58 <bt_keys_find>
 800afee:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
 800aff2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0b8      	beq.n	800af6c <bt_smp_start_security+0xc>
 800affa:	89da      	ldrh	r2, [r3, #14]
 800affc:	f002 0224 	and.w	r2, r2, #36	; 0x24
 800b000:	2a00      	cmp	r2, #0
 800b002:	d0b3      	beq.n	800af6c <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
 800b004:	7aaa      	ldrb	r2, [r5, #10]
 800b006:	2a02      	cmp	r2, #2
 800b008:	d921      	bls.n	800b04e <bt_smp_start_security+0xee>
 800b00a:	7b5b      	ldrb	r3, [r3, #13]
 800b00c:	07db      	lsls	r3, r3, #31
 800b00e:	d5ad      	bpl.n	800af6c <bt_smp_start_security+0xc>
 800b010:	e01d      	b.n	800b04e <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
 800b012:	2b04      	cmp	r3, #4
 800b014:	d1d3      	bne.n	800afbe <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 800b016:	f7ff f853 	bl	800a0c0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 800b01a:	2803      	cmp	r0, #3
 800b01c:	d104      	bne.n	800b028 <bt_smp_start_security+0xc8>
 800b01e:	4b2f      	ldr	r3, [pc, #188]	; (800b0dc <bt_smp_start_security+0x17c>)
 800b020:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 800b022:	b1fb      	cbz	r3, 800b064 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 800b024:	68dc      	ldr	r4, [r3, #12]
 800b026:	b10c      	cbz	r4, 800b02c <bt_smp_start_security+0xcc>
 800b028:	4b2d      	ldr	r3, [pc, #180]	; (800b0e0 <bt_smp_start_security+0x180>)
 800b02a:	781c      	ldrb	r4, [r3, #0]
 800b02c:	f004 0401 	and.w	r4, r4, #1
 800b030:	e00b      	b.n	800b04a <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 800b032:	f7ff f845 	bl	800a0c0 <get_io_capa>
 800b036:	2803      	cmp	r0, #3
 800b038:	d107      	bne.n	800b04a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
 800b03a:	4b28      	ldr	r3, [pc, #160]	; (800b0dc <bt_smp_start_security+0x17c>)
 800b03c:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
 800b03e:	2c00      	cmp	r4, #0
 800b040:	d0bd      	beq.n	800afbe <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
 800b042:	68e4      	ldr	r4, [r4, #12]
 800b044:	3c00      	subs	r4, #0
 800b046:	bf18      	it	ne
 800b048:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d0b7      	beq.n	800afbe <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
 800b04e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
 800b052:	b14b      	cbz	r3, 800b068 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff f8f1 	bl	800a23c <smp_init>
 800b05a:	4604      	mov	r4, r0
 800b05c:	b180      	cbz	r0, 800b080 <bt_smp_start_security+0x120>
		return -ENOBUFS;
 800b05e:	f06f 0468 	mvn.w	r4, #104	; 0x68
 800b062:	e785      	b.n	800af70 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
 800b064:	2400      	movs	r4, #0
 800b066:	e7e1      	b.n	800b02c <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 800b068:	7a28      	ldrb	r0, [r5, #8]
 800b06a:	f105 0190 	add.w	r1, r5, #144	; 0x90
 800b06e:	f000 fcbd 	bl	800b9ec <bt_keys_get_addr>
 800b072:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
 800b076:	2800      	cmp	r0, #0
 800b078:	d1ec      	bne.n	800b054 <bt_smp_start_security+0xf4>
			return -ENOMEM;
 800b07a:	f06f 040b 	mvn.w	r4, #11
 800b07e:	e777      	b.n	800af70 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
 800b080:	210b      	movs	r1, #11
 800b082:	4630      	mov	r0, r6
 800b084:	f7ff f89c 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!req_buf) {
 800b088:	4680      	mov	r8, r0
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0e7      	beq.n	800b05e <bt_smp_start_security+0xfe>
 800b08e:	2101      	movs	r1, #1
 800b090:	3008      	adds	r0, #8
 800b092:	f001 f873 	bl	800c17c <net_buf_simple_add>
 800b096:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
 800b098:	2009      	movs	r0, #9
 800b09a:	f7ff f873 	bl	800a184 <get_auth.isra.0>
 800b09e:	4623      	mov	r3, r4
 800b0a0:	f889 0000 	strb.w	r0, [r9]
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	9400      	str	r4, [sp, #0]
 800b0a8:	2106      	movs	r1, #6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f008 fc26 	bl	80138fc <bt_l2cap_send_cb>
	if (err) {
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	b118      	cbz	r0, 800b0bc <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	f000 ff31 	bl	800bf1c <net_buf_unref>
		return err;
 800b0ba:	e759      	b.n	800af70 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
 800b0bc:	4638      	mov	r0, r7
 800b0be:	210f      	movs	r1, #15
 800b0c0:	f009 fb28 	bl	8014714 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f009 fb24 	bl	8014714 <atomic_set_bit>
	return 0;
 800b0cc:	e750      	b.n	800af70 <bt_smp_start_security+0x10>
		return -ENOTCONN;
 800b0ce:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 800b0d2:	e74d      	b.n	800af70 <bt_smp_start_security+0x10>
		return -EIO;
 800b0d4:	f06f 0404 	mvn.w	r4, #4
 800b0d8:	e74a      	b.n	800af70 <bt_smp_start_security+0x10>
 800b0da:	bf00      	nop
 800b0dc:	20001618 	.word	0x20001618
 800b0e0:	20001982 	.word	0x20001982

0800b0e4 <smp_pairing_complete>:
{
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
 800b0e6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	1d05      	adds	r5, r0, #4
	if (!status) {
 800b0ee:	b9c9      	cbnz	r1, 800b124 <smp_pairing_complete+0x40>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
 800b0f0:	210d      	movs	r1, #13
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f009 fb22 	bl	801473c <atomic_test_bit>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
 800b0f8:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <smp_pairing_complete+0xdc>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
 800b0fc:	4607      	mov	r7, r0
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d051      	beq.n	800b1a6 <smp_pairing_complete+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800b102:	f853 590c 	ldr.w	r5, [r3], #-12
 800b106:	b105      	cbz	r5, 800b10a <smp_pairing_complete+0x26>
 800b108:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	b113      	cbz	r3, 800b114 <smp_pairing_complete+0x30>
				listener->pairing_complete(conn, bond_flag);
 800b10e:	4639      	mov	r1, r7
 800b110:	4620      	mov	r0, r4
 800b112:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
 800b114:	2d00      	cmp	r5, #0
 800b116:	d046      	beq.n	800b1a6 <smp_pairing_complete+0xc2>
 800b118:	68ea      	ldr	r2, [r5, #12]
 800b11a:	b102      	cbz	r2, 800b11e <smp_pairing_complete+0x3a>
 800b11c:	3a0c      	subs	r2, #12
{
 800b11e:	462b      	mov	r3, r5
 800b120:	4615      	mov	r5, r2
 800b122:	e7f2      	b.n	800b10a <smp_pairing_complete+0x26>
	switch (smp_err) {
 800b124:	3901      	subs	r1, #1
 800b126:	b2c9      	uxtb	r1, r1
 800b128:	290e      	cmp	r1, #14
 800b12a:	bf9c      	itt	ls
 800b12c:	4b25      	ldrls	r3, [pc, #148]	; (800b1c4 <smp_pairing_complete+0xe0>)
 800b12e:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
 800b130:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
 800b134:	bf88      	it	hi
 800b136:	2709      	movhi	r7, #9
		if (conn->le.keys &&
 800b138:	b143      	cbz	r3, 800b14c <smp_pairing_complete+0x68>
 800b13a:	7b1b      	ldrb	r3, [r3, #12]
 800b13c:	bb63      	cbnz	r3, 800b198 <smp_pairing_complete+0xb4>
			bt_keys_clear(conn->le.keys);
 800b13e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b142:	f009 fe73 	bl	8014e2c <bt_keys_clear>
			conn->le.keys = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
 800b14c:	2102      	movs	r1, #2
 800b14e:	4628      	mov	r0, r5
 800b150:	f009 faf4 	bl	801473c <atomic_test_bit>
 800b154:	b940      	cbnz	r0, 800b168 <smp_pairing_complete+0x84>
	switch (err) {
 800b156:	2f07      	cmp	r7, #7
 800b158:	bf96      	itet	ls
 800b15a:	4b1b      	ldrls	r3, [pc, #108]	; (800b1c8 <smp_pairing_complete+0xe4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
 800b15c:	211f      	movhi	r1, #31
 800b15e:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
 800b160:	463a      	mov	r2, r7
 800b162:	4620      	mov	r0, r4
 800b164:	f7fc fba8 	bl	80078b8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 800b168:	2103      	movs	r1, #3
 800b16a:	4628      	mov	r0, r5
 800b16c:	f009 fae6 	bl	801473c <atomic_test_bit>
 800b170:	b1c8      	cbz	r0, 800b1a6 <smp_pairing_complete+0xc2>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <smp_pairing_complete+0xdc>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	b1b3      	cbz	r3, 800b1a6 <smp_pairing_complete+0xc2>
 800b178:	f853 590c 	ldr.w	r5, [r3], #-12
 800b17c:	b105      	cbz	r5, 800b180 <smp_pairing_complete+0x9c>
 800b17e:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	b113      	cbz	r3, 800b18a <smp_pairing_complete+0xa6>
					listener->pairing_failed(conn, security_err);
 800b184:	4639      	mov	r1, r7
 800b186:	4620      	mov	r0, r4
 800b188:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
 800b18a:	b165      	cbz	r5, 800b1a6 <smp_pairing_complete+0xc2>
 800b18c:	68ea      	ldr	r2, [r5, #12]
 800b18e:	b102      	cbz	r2, 800b192 <smp_pairing_complete+0xae>
 800b190:	3a0c      	subs	r2, #12
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
 800b192:	462b      	mov	r3, r5
 800b194:	4615      	mov	r5, r2
 800b196:	e7f3      	b.n	800b180 <smp_pairing_complete+0x9c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
 800b198:	2102      	movs	r1, #2
 800b19a:	4628      	mov	r0, r5
 800b19c:	f009 face 	bl	801473c <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1cc      	bne.n	800b13e <smp_pairing_complete+0x5a>
 800b1a4:	e7d2      	b.n	800b14c <smp_pairing_complete+0x68>
	smp_reset(smp);
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f009 fc21 	bl	80149ee <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
 800b1ac:	7a62      	ldrb	r2, [r4, #9]
 800b1ae:	7aa3      	ldrb	r3, [r4, #10]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d004      	beq.n	800b1be <smp_pairing_complete+0xda>
		bt_smp_start_security(conn);
 800b1b4:	4620      	mov	r0, r4
}
 800b1b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
 800b1ba:	f7ff bed1 	b.w	800af60 <bt_smp_start_security>
}
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c0:	2000161c 	.word	0x2000161c
 800b1c4:	080193b8 	.word	0x080193b8
 800b1c8:	080193d0 	.word	0x080193d0

0800b1cc <bt_smp_recv>:
{
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
 800b1d2:	898b      	ldrh	r3, [r1, #12]
{
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
 800b1da:	b97b      	cbnz	r3, 800b1fc <bt_smp_recv+0x30>
		BT_ERR("Too small SMP PDU received");
 800b1dc:	4b3c      	ldr	r3, [pc, #240]	; (800b2d0 <bt_smp_recv+0x104>)
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	f107 020c 	add.w	r2, r7, #12
 800b1e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("SMP command (code 0x%02x) received after timeout",
 800b1ec:	4839      	ldr	r0, [pc, #228]	; (800b2d4 <bt_smp_recv+0x108>)
 800b1ee:	f009 fb2e 	bl	801484e <z_log_msg2_static_create.constprop.0>
}
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	f105 0008 	add.w	r0, r5, #8
 800b202:	f000 ff99 	bl	800c138 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
 800b206:	2104      	movs	r1, #4
 800b208:	4606      	mov	r6, r0
 800b20a:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
 800b20e:	f009 fa95 	bl	801473c <atomic_test_bit>
 800b212:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
 800b216:	7831      	ldrb	r1, [r6, #0]
 800b218:	b148      	cbz	r0, 800b22e <bt_smp_recv+0x62>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
 800b21a:	4b2f      	ldr	r3, [pc, #188]	; (800b2d8 <bt_smp_recv+0x10c>)
 800b21c:	e9c7 3104 	strd	r3, r1, [r7, #16]
 800b220:	2303      	movs	r3, #3
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	f107 020c 	add.w	r2, r7, #12
 800b228:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800b22c:	e7de      	b.n	800b1ec <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
 800b22e:	290e      	cmp	r1, #14
 800b230:	d901      	bls.n	800b236 <bt_smp_recv+0x6a>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
 800b232:	4b2a      	ldr	r3, [pc, #168]	; (800b2dc <bt_smp_recv+0x110>)
 800b234:	e7f2      	b.n	800b21c <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
 800b236:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800b2ec <bt_smp_recv+0x120>
 800b23a:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
 800b23e:	b983      	cbnz	r3, 800b262 <bt_smp_recv+0x96>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
 800b240:	4b27      	ldr	r3, [pc, #156]	; (800b2e0 <bt_smp_recv+0x114>)
 800b242:	4824      	ldr	r0, [pc, #144]	; (800b2d4 <bt_smp_recv+0x108>)
 800b244:	e9c7 3104 	strd	r3, r1, [r7, #16]
 800b248:	f107 020c 	add.w	r2, r7, #12
 800b24c:	2303      	movs	r3, #3
 800b24e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	f009 fafb 	bl	801484e <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
 800b258:	2107      	movs	r1, #7
		smp_error(smp, err);
 800b25a:	4620      	mov	r0, r4
 800b25c:	f009 fd27 	bl	8014cae <smp_error>
 800b260:	e7c7      	b.n	800b1f2 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
 800b262:	4620      	mov	r0, r4
 800b264:	f009 fbab 	bl	80149be <atomic_test_and_clear_bit>
 800b268:	7833      	ldrb	r3, [r6, #0]
 800b26a:	b980      	cbnz	r0, 800b28e <bt_smp_recv+0xc2>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <bt_smp_recv+0x118>)
 800b26e:	4819      	ldr	r0, [pc, #100]	; (800b2d4 <bt_smp_recv+0x108>)
 800b270:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b274:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800b278:	2303      	movs	r3, #3
 800b27a:	f107 020c 	add.w	r2, r7, #12
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	f009 fae5 	bl	801484e <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
 800b284:	7833      	ldrb	r3, [r6, #0]
 800b286:	2b05      	cmp	r3, #5
 800b288:	d0b3      	beq.n	800b1f2 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 800b28a:	2108      	movs	r1, #8
 800b28c:	e7e5      	b.n	800b25a <bt_smp_recv+0x8e>
	if (buf->len != handlers[hdr->code].expect_len) {
 800b28e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800b292:	89a9      	ldrh	r1, [r5, #12]
 800b294:	7912      	ldrb	r2, [r2, #4]
 800b296:	428a      	cmp	r2, r1
 800b298:	d011      	beq.n	800b2be <bt_smp_recv+0xf2>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
 800b29a:	466d      	mov	r5, sp
 800b29c:	b088      	sub	sp, #32
 800b29e:	466a      	mov	r2, sp
 800b2a0:	4811      	ldr	r0, [pc, #68]	; (800b2e8 <bt_smp_recv+0x11c>)
 800b2a2:	6193      	str	r3, [r2, #24]
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b2aa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800b2ae:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b2b2:	4808      	ldr	r0, [pc, #32]	; (800b2d4 <bt_smp_recv+0x108>)
 800b2b4:	f009 facb 	bl	801484e <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
 800b2b8:	210a      	movs	r1, #10
 800b2ba:	46ad      	mov	sp, r5
 800b2bc:	e7cd      	b.n	800b25a <bt_smp_recv+0x8e>
	err = handlers[hdr->code].func(smp, buf);
 800b2be:	4629      	mov	r1, r5
 800b2c0:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4798      	blx	r3
	if (err) {
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d091      	beq.n	800b1f2 <bt_smp_recv+0x26>
 800b2ce:	e7c4      	b.n	800b25a <bt_smp_recv+0x8e>
 800b2d0:	0801921d 	.word	0x0801921d
 800b2d4:	08015b7c 	.word	0x08015b7c
 800b2d8:	08019238 	.word	0x08019238
 800b2dc:	08019269 	.word	0x08019269
 800b2e0:	0801928b 	.word	0x0801928b
 800b2e4:	080192a5 	.word	0x080192a5
 800b2e8:	08018dd1 	.word	0x08018dd1
 800b2ec:	08016438 	.word	0x08016438

0800b2f0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
 800b2f0:	4b0e      	ldr	r3, [pc, #56]	; (800b32c <bt_smp_pkey_ready+0x3c>)
{
 800b2f2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
 800b2f4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
 800b2f6:	b918      	cbnz	r0, 800b300 <bt_smp_pkey_ready+0x10>
}
 800b2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2fc:	f7fe bfba 	b.w	800a274 <bt_smp_pkey_ready.part.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800b300:	4c0b      	ldr	r4, [pc, #44]	; (800b330 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
 800b302:	480c      	ldr	r0, [pc, #48]	; (800b334 <bt_smp_pkey_ready+0x44>)
 800b304:	f003 fda2 	bl	800ee4c <z_impl_k_sem_give>
 800b308:	f3bf 8f5b 	dmb	ish
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
 800b312:	065b      	lsls	r3, r3, #25
 800b314:	d509      	bpl.n	800b32a <bt_smp_pkey_ready+0x3a>
		err = smp_public_key_periph(smp);
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff fb9e 	bl	800aa58 <smp_public_key_periph>
		if (err) {
 800b31c:	4601      	mov	r1, r0
 800b31e:	b120      	cbz	r0, 800b32a <bt_smp_pkey_ready+0x3a>
			smp_error(smp, err);
 800b320:	4620      	mov	r0, r4
}
 800b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
 800b326:	f009 bcc2 	b.w	8014cae <smp_error>
}
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	200016bc 	.word	0x200016bc
 800b330:	200010e0 	.word	0x200010e0
 800b334:	200005f0 	.word	0x200005f0

0800b338 <smp_ident_addr_info>:
{
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
 800b33c:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
 800b33e:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 800b342:	7833      	ldrb	r3, [r6, #0]
{
 800b344:	af00      	add	r7, sp, #0
 800b346:	4604      	mov	r4, r0
 800b348:	f105 0990 	add.w	r9, r5, #144	; 0x90
 800b34c:	b36b      	cbz	r3, 800b3aa <smp_ident_addr_info+0x72>
	if (!bt_addr_le_is_identity(&req->addr)) {
 800b34e:	79b3      	ldrb	r3, [r6, #6]
 800b350:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b354:	2bc0      	cmp	r3, #192	; 0xc0
 800b356:	d028      	beq.n	800b3aa <smp_ident_addr_info+0x72>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
 800b358:	4630      	mov	r0, r6
 800b35a:	f7f9 fa0f 	bl	800477c <bt_addr_le_str_real>
 800b35e:	466c      	mov	r4, sp
 800b360:	b088      	sub	sp, #32
 800b362:	466a      	mov	r2, sp
 800b364:	4b4f      	ldr	r3, [pc, #316]	; (800b4a4 <smp_ident_addr_info+0x16c>)
 800b366:	4d50      	ldr	r5, [pc, #320]	; (800b4a8 <smp_ident_addr_info+0x170>)
 800b368:	2602      	movs	r6, #2
 800b36a:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b36e:	7616      	strb	r6, [r2, #24]
 800b370:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b374:	f842 5f0c 	str.w	r5, [r2, #12]!
 800b378:	484c      	ldr	r0, [pc, #304]	; (800b4ac <smp_ident_addr_info+0x174>)
 800b37a:	f009 fa68 	bl	801484e <z_log_msg2_static_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
 800b37e:	4648      	mov	r0, r9
 800b380:	46a5      	mov	sp, r4
 800b382:	f7f9 f9fb 	bl	800477c <bt_addr_le_str_real>
 800b386:	b088      	sub	sp, #32
 800b388:	466a      	mov	r2, sp
 800b38a:	4b49      	ldr	r3, [pc, #292]	; (800b4b0 <smp_ident_addr_info+0x178>)
 800b38c:	7616      	strb	r6, [r2, #24]
 800b38e:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b392:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b396:	4845      	ldr	r0, [pc, #276]	; (800b4ac <smp_ident_addr_info+0x174>)
 800b398:	f842 5f0c 	str.w	r5, [r2, #12]!
 800b39c:	f009 fa57 	bl	801484e <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
 800b3a0:	200a      	movs	r0, #10
 800b3a2:	46a5      	mov	sp, r4
}
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return memcmp(a, b, sizeof(*a));
 800b3aa:	2207      	movs	r2, #7
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4648      	mov	r0, r9
 800b3b0:	f007 fd5c 	bl	8012e6c <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
 800b3b4:	b168      	cbz	r0, 800b3d2 <smp_ident_addr_info+0x9a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
 800b3b6:	7a28      	ldrb	r0, [r5, #8]
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	f000 fb9d 	bl	800baf8 <bt_keys_find_addr>
		if (keys) {
 800b3be:	4680      	mov	r8, r0
 800b3c0:	b138      	cbz	r0, 800b3d2 <smp_ident_addr_info+0x9a>
			if (!update_keys_check(smp, keys)) {
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f009 f9ed 	bl	80147a4 <update_keys_check>
 800b3ca:	b318      	cbz	r0, 800b414 <smp_ident_addr_info+0xdc>
			bt_keys_clear(keys);
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	f009 fd2d 	bl	8014e2c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800b3d2:	210d      	movs	r1, #13
 800b3d4:	1d20      	adds	r0, r4, #4
 800b3d6:	f009 f9b1 	bl	801473c <atomic_test_bit>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d049      	beq.n	800b472 <smp_ident_addr_info+0x13a>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
 800b3de:	7a29      	ldrb	r1, [r5, #8]
 800b3e0:	464a      	mov	r2, r9
 800b3e2:	2002      	movs	r0, #2
 800b3e4:	f009 fd0e 	bl	8014e04 <bt_keys_get_type>
		if (!keys) {
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	b9a8      	cbnz	r0, 800b418 <smp_ident_addr_info+0xe0>
			BT_ERR("Unable to get keys for %s",
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f7f9 f9c5 	bl	800477c <bt_addr_le_str_real>
 800b3f2:	466c      	mov	r4, sp
 800b3f4:	4b2f      	ldr	r3, [pc, #188]	; (800b4b4 <smp_ident_addr_info+0x17c>)
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	466a      	mov	r2, sp
 800b3fa:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b3fe:	2302      	movs	r3, #2
 800b400:	7613      	strb	r3, [r2, #24]
 800b402:	4b29      	ldr	r3, [pc, #164]	; (800b4a8 <smp_ident_addr_info+0x170>)
 800b404:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b408:	4828      	ldr	r0, [pc, #160]	; (800b4ac <smp_ident_addr_info+0x174>)
 800b40a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b40e:	f009 fa1e 	bl	801484e <z_log_msg2_static_create.constprop.0>
 800b412:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
 800b414:	2008      	movs	r0, #8
 800b416:	e7c5      	b.n	800b3a4 <smp_ident_addr_info+0x6c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
 800b418:	78eb      	ldrb	r3, [r5, #3]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d13e      	bne.n	800b49c <smp_ident_addr_info+0x164>
			dst = &conn->le.resp_addr;
 800b41e:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
 800b422:	780b      	ldrb	r3, [r1, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d121      	bne.n	800b46c <smp_ident_addr_info+0x134>
		if (bt_addr_le_is_rpa(dst)) {
 800b428:	798b      	ldrb	r3, [r1, #6]
 800b42a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d11c      	bne.n	800b46c <smp_ident_addr_info+0x134>
	memcpy(dst, src, sizeof(*dst));
 800b432:	2206      	movs	r2, #6
 800b434:	3101      	adds	r1, #1
 800b436:	f108 003a 	add.w	r0, r8, #58	; 0x3a
 800b43a:	f007 fd27 	bl	8012e8c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
 800b43e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 800b442:	b19b      	cbz	r3, 800b46c <smp_ident_addr_info+0x134>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
 800b444:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
 800b448:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b44c:	2bc0      	cmp	r3, #192	; 0xc0
 800b44e:	d00d      	beq.n	800b46c <smp_ident_addr_info+0x134>
	memcpy(dst, src, sizeof(*dst));
 800b450:	2207      	movs	r2, #7
 800b452:	4631      	mov	r1, r6
 800b454:	f108 0001 	add.w	r0, r8, #1
 800b458:	f007 fd18 	bl	8012e8c <memcpy>
 800b45c:	2207      	movs	r2, #7
 800b45e:	4631      	mov	r1, r6
 800b460:	4648      	mov	r0, r9
 800b462:	f007 fd13 	bl	8012e8c <memcpy>
				bt_conn_identity_resolved(conn);
 800b466:	4628      	mov	r0, r5
 800b468:	f7fc f9de 	bl	8007828 <bt_conn_identity_resolved>
		bt_id_add(keys);
 800b46c:	4640      	mov	r0, r8
 800b46e:	f7fa fdff 	bl	8006070 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
 800b472:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 800b476:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 800b47a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
 800b47c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 800b480:	d503      	bpl.n	800b48a <smp_ident_addr_info+0x152>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 800b482:	210a      	movs	r1, #10
 800b484:	4620      	mov	r0, r4
 800b486:	f009 f945 	bl	8014714 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
 800b48a:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
 800b48e:	b91d      	cbnz	r5, 800b498 <smp_ident_addr_info+0x160>
		smp_pairing_complete(smp, 0);
 800b490:	4629      	mov	r1, r5
 800b492:	4620      	mov	r0, r4
 800b494:	f7ff fe26 	bl	800b0e4 <smp_pairing_complete>
	return 0;
 800b498:	2000      	movs	r0, #0
 800b49a:	e783      	b.n	800b3a4 <smp_ident_addr_info+0x6c>
			dst = &conn->le.init_addr;
 800b49c:	f105 0197 	add.w	r1, r5, #151	; 0x97
 800b4a0:	e7bf      	b.n	800b422 <smp_ident_addr_info+0xea>
 800b4a2:	bf00      	nop
 800b4a4:	080192c0 	.word	0x080192c0
 800b4a8:	01000003 	.word	0x01000003
 800b4ac:	08015b7c 	.word	0x08015b7c
 800b4b0:	080192ed 	.word	0x080192ed
 800b4b4:	0801909b 	.word	0x0801909b

0800b4b8 <smp_central_ident>:
{
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
 800b4be:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800b4c6:	210d      	movs	r1, #13
 800b4c8:	3004      	adds	r0, #4
 800b4ca:	f009 f937 	bl	801473c <atomic_test_bit>
 800b4ce:	b360      	cbz	r0, 800b52a <smp_central_ident+0x72>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
 800b4d0:	f105 0890 	add.w	r8, r5, #144	; 0x90
 800b4d4:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
 800b4d6:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
 800b4d8:	4642      	mov	r2, r8
 800b4da:	2004      	movs	r0, #4
 800b4dc:	f009 fc92 	bl	8014e04 <bt_keys_get_type>
		if (!keys) {
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	b9b8      	cbnz	r0, 800b514 <smp_central_ident+0x5c>
			BT_ERR("Unable to get keys for %s",
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	f7f9 f949 	bl	800477c <bt_addr_le_str_real>
 800b4ea:	466c      	mov	r4, sp
 800b4ec:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <smp_central_ident+0xa4>)
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	466a      	mov	r2, sp
 800b4f2:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	7613      	strb	r3, [r2, #24]
 800b4fa:	4b19      	ldr	r3, [pc, #100]	; (800b560 <smp_central_ident+0xa8>)
 800b4fc:	4819      	ldr	r0, [pc, #100]	; (800b564 <smp_central_ident+0xac>)
 800b4fe:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b502:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b506:	f009 f9a2 	bl	801484e <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
 800b50a:	2008      	movs	r0, #8
 800b50c:	46a5      	mov	sp, r4
}
 800b50e:	46bd      	mov	sp, r7
 800b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
 800b514:	2202      	movs	r2, #2
 800b516:	4631      	mov	r1, r6
 800b518:	3018      	adds	r0, #24
 800b51a:	f007 fcb7 	bl	8012e8c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
 800b51e:	2208      	movs	r2, #8
 800b520:	1cb1      	adds	r1, r6, #2
 800b522:	f105 0010 	add.w	r0, r5, #16
 800b526:	f007 fcb1 	bl	8012e8c <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
 800b52a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 800b52e:	f023 0201 	bic.w	r2, r3, #1
 800b532:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
 800b536:	079a      	lsls	r2, r3, #30
 800b538:	d50c      	bpl.n	800b554 <smp_central_ident+0x9c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
 800b53a:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 800b53c:	4620      	mov	r0, r4
 800b53e:	f009 f8e9 	bl	8014714 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
 800b542:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
 800b546:	b91d      	cbnz	r5, 800b550 <smp_central_ident+0x98>
		smp_pairing_complete(smp, 0);
 800b548:	4629      	mov	r1, r5
 800b54a:	4620      	mov	r0, r4
 800b54c:	f7ff fdca 	bl	800b0e4 <smp_pairing_complete>
	return 0;
 800b550:	2000      	movs	r0, #0
 800b552:	e7dc      	b.n	800b50e <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 800b554:	075b      	lsls	r3, r3, #29
 800b556:	d5f4      	bpl.n	800b542 <smp_central_ident+0x8a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 800b558:	210a      	movs	r1, #10
 800b55a:	e7ef      	b.n	800b53c <smp_central_ident+0x84>
 800b55c:	0801909b 	.word	0x0801909b
 800b560:	01000003 	.word	0x01000003
 800b564:	08015b7c 	.word	0x08015b7c

0800b568 <smp_pairing_failed>:
{
 800b568:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
 800b56a:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
 800b56c:	4a16      	ldr	r2, [pc, #88]	; (800b5c8 <smp_pairing_failed+0x60>)
 800b56e:	782b      	ldrb	r3, [r5, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
 800b570:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
{
 800b574:	b087      	sub	sp, #28
 800b576:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
 800b578:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b57c:	4813      	ldr	r0, [pc, #76]	; (800b5cc <smp_pairing_failed+0x64>)
 800b57e:	2303      	movs	r3, #3
 800b580:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b584:	aa03      	add	r2, sp, #12
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 800b586:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	f009 f960 	bl	801484e <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 800b58e:	210a      	movs	r1, #10
 800b590:	4630      	mov	r0, r6
 800b592:	f009 fa14 	bl	80149be <atomic_test_and_clear_bit>
 800b596:	b148      	cbz	r0, 800b5ac <smp_pairing_failed+0x44>
		if (bt_auth && bt_auth->cancel) {
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <smp_pairing_failed+0x68>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	b96b      	cbnz	r3, 800b5ba <smp_pairing_failed+0x52>
	smp_pairing_complete(smp, req->reason);
 800b59e:	4620      	mov	r0, r4
 800b5a0:	7829      	ldrb	r1, [r5, #0]
 800b5a2:	f7ff fd9f 	bl	800b0e4 <smp_pairing_complete>
}
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	b007      	add	sp, #28
 800b5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
 800b5ac:	210b      	movs	r1, #11
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f009 fa05 	bl	80149be <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d1ef      	bne.n	800b598 <smp_pairing_failed+0x30>
 800b5b8:	e7f1      	b.n	800b59e <smp_pairing_failed+0x36>
		if (bt_auth && bt_auth->cancel) {
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0ee      	beq.n	800b59e <smp_pairing_failed+0x36>
			bt_auth->cancel(conn);
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	4798      	blx	r3
 800b5c4:	e7eb      	b.n	800b59e <smp_pairing_failed+0x36>
 800b5c6:	bf00      	nop
 800b5c8:	080192d4 	.word	0x080192d4
 800b5cc:	08015b7c 	.word	0x08015b7c
 800b5d0:	20001618 	.word	0x20001618

0800b5d4 <bt_smp_encrypt_change>:
{
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
 800b5d8:	4605      	mov	r5, r0
{
 800b5da:	b08f      	sub	sp, #60	; 0x3c
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 800b5dc:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
 800b5ea:	f855 99f0 	ldr.w	r9, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 800b5ee:	f009 f9e6 	bl	80149be <atomic_test_and_clear_bit>
 800b5f2:	b328      	cbz	r0, 800b640 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
 800b5f4:	f1b8 0f00 	cmp.w	r8, #0
 800b5f8:	d017      	beq.n	800b62a <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 800b5fa:	2103      	movs	r1, #3
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f009 f89d 	bl	801473c <atomic_test_bit>
 800b602:	b1e8      	cbz	r0, 800b640 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
 800b604:	4640      	mov	r0, r8
 800b606:	f7fa f86d 	bl	80056e4 <bt_security_err_get>
	switch (auth_err) {
 800b60a:	3801      	subs	r0, #1
 800b60c:	b2c0      	uxtb	r0, r0
 800b60e:	2808      	cmp	r0, #8
 800b610:	bf9a      	itte	ls
 800b612:	4b74      	ldrls	r3, [pc, #464]	; (800b7e4 <bt_smp_encrypt_change+0x210>)
 800b614:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
 800b616:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
 800b618:	2102      	movs	r1, #2
 800b61a:	4630      	mov	r0, r6
 800b61c:	f009 f87a 	bl	8014714 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
 800b620:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
 800b622:	4628      	mov	r0, r5
 800b624:	f7ff fd5e 	bl	800b0e4 <smp_pairing_complete>
 800b628:	e00a      	b.n	800b640 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
 800b62a:	f899 300b 	ldrb.w	r3, [r9, #11]
 800b62e:	b13b      	cbz	r3, 800b640 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 800b630:	2103      	movs	r1, #3
 800b632:	4630      	mov	r0, r6
 800b634:	f009 f882 	bl	801473c <atomic_test_bit>
 800b638:	b930      	cbnz	r0, 800b648 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
 800b63a:	4628      	mov	r0, r5
 800b63c:	f009 f9d7 	bl	80149ee <smp_reset>
}
 800b640:	373c      	adds	r7, #60	; 0x3c
 800b642:	46bd      	mov	sp, r7
 800b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800b648:	2105      	movs	r1, #5
 800b64a:	4630      	mov	r0, r6
 800b64c:	f009 f876 	bl	801473c <atomic_test_bit>
 800b650:	b1b8      	cbz	r0, 800b682 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
 800b652:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b656:	071a      	lsls	r2, r3, #28
 800b658:	d507      	bpl.n	800b66a <bt_smp_encrypt_change+0x96>
 800b65a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
 800b65e:	071b      	lsls	r3, r3, #28
 800b660:	d503      	bpl.n	800b66a <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
 800b662:	2111      	movs	r1, #17
 800b664:	4630      	mov	r0, r6
 800b666:	f009 f855 	bl	8014714 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
 800b66a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b66e:	f023 0308 	bic.w	r3, r3, #8
 800b672:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
 800b676:	f814 3c07 	ldrb.w	r3, [r4, #-7]
 800b67a:	f023 0308 	bic.w	r3, r3, #8
 800b67e:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
 800b682:	f814 3c07 	ldrb.w	r3, [r4, #-7]
 800b686:	07d8      	lsls	r0, r3, #31
 800b688:	d520      	bpl.n	800b6cc <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
 800b68a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 800b68c:	4628      	mov	r0, r5
 800b68e:	f009 f841 	bl	8014714 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
 800b692:	4630      	mov	r0, r6
 800b694:	2102      	movs	r1, #2
 800b696:	f009 f83d 	bl	8014714 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
 800b69a:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
 800b69c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 800b6a0:	b9e3      	cbnz	r3, 800b6dc <bt_smp_encrypt_change+0x108>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
 800b6a2:	3090      	adds	r0, #144	; 0x90
 800b6a4:	f7f9 f86a 	bl	800477c <bt_addr_le_str_real>
 800b6a8:	466c      	mov	r4, sp
 800b6aa:	4b4f      	ldr	r3, [pc, #316]	; (800b7e8 <bt_smp_encrypt_change+0x214>)
 800b6ac:	b088      	sub	sp, #32
 800b6ae:	466a      	mov	r2, sp
 800b6b0:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	7613      	strb	r3, [r2, #24]
 800b6b8:	4b4c      	ldr	r3, [pc, #304]	; (800b7ec <bt_smp_encrypt_change+0x218>)
 800b6ba:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b6be:	484c      	ldr	r0, [pc, #304]	; (800b7f0 <bt_smp_encrypt_change+0x21c>)
 800b6c0:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b6c4:	f009 f8c3 	bl	801484e <z_log_msg2_static_create.constprop.0>
 800b6c8:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
 800b6ca:	e7b9      	b.n	800b640 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
 800b6cc:	0799      	lsls	r1, r3, #30
 800b6ce:	d501      	bpl.n	800b6d4 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
 800b6d0:	2108      	movs	r1, #8
 800b6d2:	e7db      	b.n	800b68c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
 800b6d4:	075a      	lsls	r2, r3, #29
 800b6d6:	d5dc      	bpl.n	800b692 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
 800b6d8:	210a      	movs	r1, #10
 800b6da:	e7d7      	b.n	800b68c <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800b6dc:	2105      	movs	r1, #5
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f009 f82c 	bl	801473c <atomic_test_bit>
 800b6e4:	b9c0      	cbnz	r0, 800b718 <bt_smp_encrypt_change+0x144>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
 800b6e6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b6ea:	07db      	lsls	r3, r3, #31
 800b6ec:	d514      	bpl.n	800b718 <bt_smp_encrypt_change+0x144>
	struct bt_keys *keys = conn->le.keys;
 800b6ee:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
 800b6f0:	211a      	movs	r1, #26
 800b6f2:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
 800b6f6:	f8d3 80bc 	ldr.w	r8, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
 800b6fa:	f7fb fa15 	bl	8006b28 <bt_rand>
 800b6fe:	4682      	mov	sl, r0
 800b700:	b178      	cbz	r0, 800b722 <bt_smp_encrypt_change+0x14e>
			BT_ERR("Unable to get random bytes");
 800b702:	4b3c      	ldr	r3, [pc, #240]	; (800b7f4 <bt_smp_encrypt_change+0x220>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
 800b704:	613b      	str	r3, [r7, #16]
 800b706:	483a      	ldr	r0, [pc, #232]	; (800b7f0 <bt_smp_encrypt_change+0x21c>)
 800b708:	2302      	movs	r3, #2
 800b70a:	f107 020c 	add.w	r2, r7, #12
 800b70e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	f009 f89b 	bl	801484e <z_log_msg2_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
 800b718:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800b71c:	2900      	cmp	r1, #0
 800b71e:	d18f      	bne.n	800b640 <bt_smp_encrypt_change+0x6c>
 800b720:	e77f      	b.n	800b622 <bt_smp_encrypt_change+0x4e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
 800b722:	2106      	movs	r1, #6
 800b724:	4628      	mov	r0, r5
 800b726:	f7fe fd4b 	bl	800a1c0 <smp_create_pdu.isra.0>
		if (!buf) {
 800b72a:	4681      	mov	r9, r0
 800b72c:	b908      	cbnz	r0, 800b732 <bt_smp_encrypt_change+0x15e>
			BT_ERR("Unable to allocate Encrypt Info buffer");
 800b72e:	4b32      	ldr	r3, [pc, #200]	; (800b7f8 <bt_smp_encrypt_change+0x224>)
 800b730:	e7e8      	b.n	800b704 <bt_smp_encrypt_change+0x130>
	return net_buf_simple_add(&buf->b, len);
 800b732:	2110      	movs	r1, #16
 800b734:	3008      	adds	r0, #8
 800b736:	f000 fd21 	bl	800c17c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
 800b73a:	f898 200c 	ldrb.w	r2, [r8, #12]
 800b73e:	f107 011c 	add.w	r1, r7, #28
 800b742:	4683      	mov	fp, r0
 800b744:	f007 fba2 	bl	8012e8c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
 800b748:	f898 000c 	ldrb.w	r0, [r8, #12]
 800b74c:	280f      	cmp	r0, #15
 800b74e:	d805      	bhi.n	800b75c <bt_smp_encrypt_change+0x188>
			(void)memset(info->ltk + keys->enc_size, 0,
 800b750:	f1c0 0210 	rsb	r2, r0, #16
 800b754:	4651      	mov	r1, sl
 800b756:	4458      	add	r0, fp
 800b758:	f007 fba3 	bl	8012ea2 <memset>
		smp_send(smp, buf, NULL, NULL);
 800b75c:	4649      	mov	r1, r9
 800b75e:	2200      	movs	r2, #0
 800b760:	4628      	mov	r0, r5
 800b762:	f7fe fd4d 	bl	800a200 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
 800b766:	2107      	movs	r1, #7
 800b768:	4628      	mov	r0, r5
 800b76a:	f7fe fd29 	bl	800a1c0 <smp_create_pdu.isra.0>
		if (!buf) {
 800b76e:	4681      	mov	r9, r0
 800b770:	b908      	cbnz	r0, 800b776 <bt_smp_encrypt_change+0x1a2>
			BT_ERR("Unable to allocate Central Ident buffer");
 800b772:	4b22      	ldr	r3, [pc, #136]	; (800b7fc <bt_smp_encrypt_change+0x228>)
 800b774:	e7c6      	b.n	800b704 <bt_smp_encrypt_change+0x130>
 800b776:	210a      	movs	r1, #10
 800b778:	3008      	adds	r0, #8
 800b77a:	f000 fcff 	bl	800c17c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
 800b77e:	2208      	movs	r2, #8
 800b780:	4682      	mov	sl, r0
 800b782:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800b786:	3002      	adds	r0, #2
 800b788:	f007 fb80 	bl	8012e8c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
 800b78c:	2202      	movs	r2, #2
 800b78e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b792:	4650      	mov	r0, sl
 800b794:	f007 fb7a 	bl	8012e8c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
 800b798:	4649      	mov	r1, r9
 800b79a:	4628      	mov	r0, r5
 800b79c:	4a18      	ldr	r2, [pc, #96]	; (800b800 <bt_smp_encrypt_change+0x22c>)
 800b79e:	f7fe fd2f 	bl	800a200 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800b7a2:	210d      	movs	r1, #13
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f008 ffc9 	bl	801473c <atomic_test_bit>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0b4      	beq.n	800b718 <bt_smp_encrypt_change+0x144>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	2101      	movs	r1, #1
 800b7b2:	f009 fb37 	bl	8014e24 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
 800b7b6:	f107 011c 	add.w	r1, r7, #28
 800b7ba:	2210      	movs	r2, #16
 800b7bc:	f108 004a 	add.w	r0, r8, #74	; 0x4a
 800b7c0:	f007 fb64 	bl	8012e8c <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
 800b7c4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	f108 0040 	add.w	r0, r8, #64	; 0x40
 800b7ce:	f007 fb5d 	bl	8012e8c <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b7d8:	f108 0048 	add.w	r0, r8, #72	; 0x48
 800b7dc:	f007 fb56 	bl	8012e8c <memcpy>
 800b7e0:	e79a      	b.n	800b718 <bt_smp_encrypt_change+0x144>
 800b7e2:	bf00      	nop
 800b7e4:	080193c7 	.word	0x080193c7
 800b7e8:	080192e0 	.word	0x080192e0
 800b7ec:	01000003 	.word	0x01000003
 800b7f0:	08015b7c 	.word	0x08015b7c
 800b7f4:	080192f5 	.word	0x080192f5
 800b7f8:	08019310 	.word	0x08019310
 800b7fc:	08019337 	.word	0x08019337
 800b800:	0800b841 	.word	0x0800b841

0800b804 <smp_timeout>:
{
 800b804:	b510      	push	{r4, lr}
 800b806:	b086      	sub	sp, #24
	BT_ERR("SMP Timeout");
 800b808:	4b0b      	ldr	r3, [pc, #44]	; (800b838 <smp_timeout+0x34>)
 800b80a:	9304      	str	r3, [sp, #16]
{
 800b80c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
 800b80e:	2302      	movs	r3, #2
 800b810:	aa03      	add	r2, sp, #12
 800b812:	480a      	ldr	r0, [pc, #40]	; (800b83c <smp_timeout+0x38>)
 800b814:	9303      	str	r3, [sp, #12]
 800b816:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b81a:	f009 f818 	bl	801484e <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
 800b81e:	f5a4 70f0 	sub.w	r0, r4, #480	; 0x1e0
 800b822:	2108      	movs	r1, #8
 800b824:	f7ff fc5e 	bl	800b0e4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
 800b828:	2104      	movs	r1, #4
 800b82a:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
 800b82e:	f008 ff71 	bl	8014714 <atomic_set_bit>
}
 800b832:	b006      	add	sp, #24
 800b834:	bd10      	pop	{r4, pc}
 800b836:	bf00      	nop
 800b838:	0801935f 	.word	0x0801935f
 800b83c:	08015b7c 	.word	0x08015b7c

0800b840 <smp_ident_sent>:
{
 800b840:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
 800b842:	7883      	ldrb	r3, [r0, #2]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d122      	bne.n	800b88e <smp_ident_sent+0x4e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
 800b848:	2106      	movs	r1, #6
 800b84a:	f008 f870 	bl	801392e <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
 800b84e:	4604      	mov	r4, r0
 800b850:	b970      	cbnz	r0, 800b870 <smp_ident_sent+0x30>
 800b852:	490f      	ldr	r1, [pc, #60]	; (800b890 <smp_ident_sent+0x50>)
 800b854:	4a0f      	ldr	r2, [pc, #60]	; (800b894 <smp_ident_sent+0x54>)
 800b856:	4810      	ldr	r0, [pc, #64]	; (800b898 <smp_ident_sent+0x58>)
 800b858:	f240 332f 	movw	r3, #815	; 0x32f
 800b85c:	f006 fd24 	bl	80122a8 <assert_print>
 800b860:	480e      	ldr	r0, [pc, #56]	; (800b89c <smp_ident_sent+0x5c>)
 800b862:	f006 fd21 	bl	80122a8 <assert_print>
 800b866:	480b      	ldr	r0, [pc, #44]	; (800b894 <smp_ident_sent+0x54>)
 800b868:	f240 312f 	movw	r1, #815	; 0x32f
 800b86c:	f006 fd15 	bl	801229a <assert_post_action>
		smp->local_dist &= ~dist_complete;
 800b870:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b874:	f023 0301 	bic.w	r3, r3, #1
 800b878:	f804 3c08 	strb.w	r3, [r4, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
 800b87c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800b880:	b929      	cbnz	r1, 800b88e <smp_ident_sent+0x4e>
			smp_pairing_complete(smp, 0);
 800b882:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
}
 800b886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
 800b88a:	f7ff bc2b 	b.w	800b0e4 <smp_pairing_complete>
}
 800b88e:	bd10      	pop	{r4, pc}
 800b890:	08018d3c 	.word	0x08018d3c
 800b894:	0801936b 	.word	0x0801936b
 800b898:	08016836 	.word	0x08016836
 800b89c:	0801939a 	.word	0x0801939a

0800b8a0 <bt_smp_update_keys>:
{
 800b8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
 800b8a8:	f008 ffd4 	bl	8014854 <smp_chan_get>
	if (!smp) {
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	b358      	cbz	r0, 800b908 <bt_smp_update_keys+0x68>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
 800b8b0:	1d06      	adds	r6, r0, #4
 800b8b2:	2103      	movs	r1, #3
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f008 ff41 	bl	801473c <atomic_test_bit>
 800b8ba:	b328      	cbz	r0, 800b908 <bt_smp_update_keys+0x68>
	if (conn->le.keys) {
 800b8bc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b8c0:	b108      	cbz	r0, 800b8c6 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
 800b8c2:	f009 fab3 	bl	8014e2c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
 800b8c6:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800b8ca:	7a20      	ldrb	r0, [r4, #8]
 800b8cc:	4641      	mov	r1, r8
 800b8ce:	f000 f88d 	bl	800b9ec <bt_keys_get_addr>
 800b8d2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
 800b8d6:	b9d0      	cbnz	r0, 800b90e <bt_smp_update_keys+0x6e>
		BT_ERR("Unable to get keys for %s",
 800b8d8:	4640      	mov	r0, r8
 800b8da:	f7f8 ff4f 	bl	800477c <bt_addr_le_str_real>
 800b8de:	466c      	mov	r4, sp
 800b8e0:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <bt_smp_update_keys+0x114>)
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	466a      	mov	r2, sp
 800b8e6:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	7613      	strb	r3, [r2, #24]
 800b8ee:	4b32      	ldr	r3, [pc, #200]	; (800b9b8 <bt_smp_update_keys+0x118>)
 800b8f0:	4832      	ldr	r0, [pc, #200]	; (800b9bc <bt_smp_update_keys+0x11c>)
 800b8f2:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b8f6:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
 800b8fa:	f008 ffa8 	bl	801484e <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
 800b8fe:	2108      	movs	r1, #8
 800b900:	46a5      	mov	sp, r4
 800b902:	4628      	mov	r0, r5
 800b904:	f009 f9d3 	bl	8014cae <smp_error>
}
 800b908:	46bd      	mov	sp, r7
 800b90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
 800b90e:	210e      	movs	r1, #14
 800b910:	4630      	mov	r0, r6
 800b912:	f008 ff13 	bl	801473c <atomic_test_bit>
 800b916:	b128      	cbz	r0, 800b924 <bt_smp_update_keys+0x84>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
 800b918:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 800b91c:	7b53      	ldrb	r3, [r2, #13]
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
 800b924:	7a2a      	ldrb	r2, [r5, #8]
 800b926:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800b92a:	2a03      	cmp	r2, #3
 800b92c:	7b4b      	ldrb	r3, [r1, #13]
 800b92e:	d836      	bhi.n	800b99e <bt_smp_update_keys+0xfe>
 800b930:	b3c2      	cbz	r2, 800b9a4 <bt_smp_update_keys+0x104>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
 800b932:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
 800b936:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
 800b938:	7d2b      	ldrb	r3, [r5, #20]
 800b93a:	7b6a      	ldrb	r2, [r5, #13]
 800b93c:	4293      	cmp	r3, r2
 800b93e:	bf28      	it	cs
 800b940:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
 800b942:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800b944:	4630      	mov	r0, r6
 800b946:	2105      	movs	r1, #5
 800b948:	f008 fef8 	bl	801473c <atomic_test_bit>
 800b94c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
 800b950:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 800b952:	b350      	cbz	r0, 800b9aa <bt_smp_update_keys+0x10a>
		conn->le.keys->flags |= BT_KEYS_SC;
 800b954:	f042 0210 	orr.w	r2, r2, #16
 800b958:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
 800b95a:	210d      	movs	r1, #13
 800b95c:	4630      	mov	r0, r6
 800b95e:	f008 feed 	bl	801473c <atomic_test_bit>
 800b962:	2800      	cmp	r0, #0
 800b964:	d0d0      	beq.n	800b908 <bt_smp_update_keys+0x68>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
 800b966:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b96a:	2120      	movs	r1, #32
 800b96c:	f009 fa5a 	bl	8014e24 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
 800b970:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b974:	f105 0147 	add.w	r1, r5, #71	; 0x47
 800b978:	2210      	movs	r2, #16
 800b97a:	301a      	adds	r0, #26
 800b97c:	f007 fa86 	bl	8012e8c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
 800b980:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b984:	2208      	movs	r2, #8
 800b986:	2100      	movs	r1, #0
 800b988:	3010      	adds	r0, #16
 800b98a:	f007 fa8a 	bl	8012ea2 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
 800b98e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 800b992:	2202      	movs	r2, #2
 800b994:	2100      	movs	r1, #0
 800b996:	3018      	adds	r0, #24
 800b998:	f007 fa83 	bl	8012ea2 <memset>
 800b99c:	e7b4      	b.n	800b908 <bt_smp_update_keys+0x68>
	switch (smp->method) {
 800b99e:	3a05      	subs	r2, #5
 800b9a0:	2a01      	cmp	r2, #1
 800b9a2:	d9c6      	bls.n	800b932 <bt_smp_update_keys+0x92>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
 800b9a4:	f023 0301 	bic.w	r3, r3, #1
 800b9a8:	e7c5      	b.n	800b936 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
 800b9aa:	f022 0210 	bic.w	r2, r2, #16
 800b9ae:	735a      	strb	r2, [r3, #13]
 800b9b0:	e7aa      	b.n	800b908 <bt_smp_update_keys+0x68>
 800b9b2:	bf00      	nop
 800b9b4:	0801909b 	.word	0x0801909b
 800b9b8:	01000003 	.word	0x01000003
 800b9bc:	08015b7c 	.word	0x08015b7c

0800b9c0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
 800b9c0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
 800b9c4:	4807      	ldr	r0, [pc, #28]	; (800b9e4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
 800b9c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b9ca:	f003 0306 	and.w	r3, r3, #6
 800b9ce:	1f9a      	subs	r2, r3, #6
 800b9d0:	4253      	negs	r3, r2
 800b9d2:	4153      	adcs	r3, r2
 800b9d4:	4a04      	ldr	r2, [pc, #16]	; (800b9e8 <bt_smp_init+0x28>)
 800b9d6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
 800b9d8:	f7fb f8ca 	bl	8006b70 <bt_pub_key_gen>
	}

	return smp_self_test();
}
 800b9dc:	2000      	movs	r0, #0
 800b9de:	bd08      	pop	{r3, pc}
 800b9e0:	20000000 	.word	0x20000000
 800b9e4:	20000348 	.word	0x20000348
 800b9e8:	20001982 	.word	0x20001982

0800b9ec <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
 800b9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 800b9ee:	4c11      	ldr	r4, [pc, #68]	; (800ba34 <bt_keys_get_addr+0x48>)
 800b9f0:	7823      	ldrb	r3, [r4, #0]
 800b9f2:	4283      	cmp	r3, r0
{
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460e      	mov	r6, r1
 800b9f8:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 800b9fa:	d00b      	beq.n	800ba14 <bt_keys_get_addr+0x28>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
 800b9fc:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
 800b9fe:	480e      	ldr	r0, [pc, #56]	; (800ba38 <bt_keys_get_addr+0x4c>)
 800ba00:	9400      	str	r4, [sp, #0]
 800ba02:	2207      	movs	r2, #7
 800ba04:	4669      	mov	r1, sp
 800ba06:	f8cd 4003 	str.w	r4, [sp, #3]
 800ba0a:	f007 fa2f 	bl	8012e6c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
 800ba0e:	b140      	cbz	r0, 800ba22 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
 800ba10:	4620      	mov	r0, r4
 800ba12:	e00d      	b.n	800ba30 <bt_keys_get_addr+0x44>
 800ba14:	2207      	movs	r2, #7
 800ba16:	1c60      	adds	r0, r4, #1
 800ba18:	f007 fa28 	bl	8012e6c <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1ed      	bne.n	800b9fc <bt_keys_get_addr+0x10>
 800ba20:	e7f6      	b.n	800ba10 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
 800ba22:	4805      	ldr	r0, [pc, #20]	; (800ba38 <bt_keys_get_addr+0x4c>)
		keys->id = id;
 800ba24:	703d      	strb	r5, [r7, #0]
 800ba26:	2207      	movs	r2, #7
 800ba28:	4631      	mov	r1, r6
 800ba2a:	f007 fa2f 	bl	8012e8c <memcpy>
		return keys;
 800ba2e:	4801      	ldr	r0, [pc, #4]	; (800ba34 <bt_keys_get_addr+0x48>)
}
 800ba30:	b003      	add	sp, #12
 800ba32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba34:	200016c0 	.word	0x200016c0
 800ba38:	200016c1 	.word	0x200016c1

0800ba3c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
 800ba40:	4a04      	ldr	r2, [pc, #16]	; (800ba54 <bt_keys_foreach+0x18>)
{
 800ba42:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
 800ba44:	89d4      	ldrh	r4, [r2, #14]
 800ba46:	4204      	tst	r4, r0
 800ba48:	d002      	beq.n	800ba50 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
 800ba4a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4718      	bx	r3
}
 800ba50:	bc10      	pop	{r4}
 800ba52:	4770      	bx	lr
 800ba54:	200016c0 	.word	0x200016c0

0800ba58 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
 800ba58:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 800ba5a:	4c09      	ldr	r4, [pc, #36]	; (800ba80 <bt_keys_find+0x28>)
{
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
 800ba60:	89e2      	ldrh	r2, [r4, #14]
 800ba62:	4202      	tst	r2, r0
 800ba64:	d007      	beq.n	800ba76 <bt_keys_find+0x1e>
 800ba66:	7822      	ldrb	r2, [r4, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d104      	bne.n	800ba76 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
 800ba6c:	2207      	movs	r2, #7
 800ba6e:	1c60      	adds	r0, r4, #1
 800ba70:	f007 f9fc 	bl	8012e6c <memcmp>
 800ba74:	b108      	cbz	r0, 800ba7a <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
 800ba76:	2000      	movs	r0, #0
}
 800ba78:	bd10      	pop	{r4, pc}
			return &key_pool[i];
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	e7fc      	b.n	800ba78 <bt_keys_find+0x20>
 800ba7e:	bf00      	nop
 800ba80:	200016c0 	.word	0x200016c0

0800ba84 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
 800ba86:	780b      	ldrb	r3, [r1, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	4607      	mov	r7, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	d001      	beq.n	800ba94 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
 800ba90:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
 800ba92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
 800ba94:	798b      	ldrb	r3, [r1, #6]
 800ba96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	d1f8      	bne.n	800ba90 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 800ba9e:	4d13      	ldr	r5, [pc, #76]	; (800baec <bt_keys_find_irk+0x68>)
 800baa0:	89eb      	ldrh	r3, [r5, #14]
 800baa2:	f013 0f02 	tst.w	r3, #2
 800baa6:	462e      	mov	r6, r5
 800baa8:	d0f2      	beq.n	800ba90 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
 800baaa:	7833      	ldrb	r3, [r6, #0]
 800baac:	42bb      	cmp	r3, r7
 800baae:	d10b      	bne.n	800bac8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
 800bab0:	2206      	movs	r2, #6
 800bab2:	f106 013a 	add.w	r1, r6, #58	; 0x3a
 800bab6:	1c60      	adds	r0, r4, #1
 800bab8:	f007 f9d8 	bl	8012e6c <memcmp>
 800babc:	b908      	cbnz	r0, 800bac2 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
 800babe:	4628      	mov	r0, r5
 800bac0:	e7e7      	b.n	800ba92 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
 800bac2:	89f3      	ldrh	r3, [r6, #14]
 800bac4:	079b      	lsls	r3, r3, #30
 800bac6:	d5e3      	bpl.n	800ba90 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
 800bac8:	7833      	ldrb	r3, [r6, #0]
 800baca:	42bb      	cmp	r3, r7
 800bacc:	d1e0      	bne.n	800ba90 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
 800bace:	3401      	adds	r4, #1
 800bad0:	4807      	ldr	r0, [pc, #28]	; (800baf0 <bt_keys_find_irk+0x6c>)
 800bad2:	4621      	mov	r1, r4
 800bad4:	f007 f9f1 	bl	8012eba <bt_rpa_irk_matches>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d0d9      	beq.n	800ba90 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
 800badc:	4805      	ldr	r0, [pc, #20]	; (800baf4 <bt_keys_find_irk+0x70>)
 800bade:	2206      	movs	r2, #6
 800bae0:	4621      	mov	r1, r4
 800bae2:	f007 f9d3 	bl	8012e8c <memcpy>
			return &key_pool[i];
 800bae6:	4801      	ldr	r0, [pc, #4]	; (800baec <bt_keys_find_irk+0x68>)
}
 800bae8:	e7d3      	b.n	800ba92 <bt_keys_find_irk+0xe>
 800baea:	bf00      	nop
 800baec:	200016c0 	.word	0x200016c0
 800baf0:	200016ea 	.word	0x200016ea
 800baf4:	200016fa 	.word	0x200016fa

0800baf8 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
 800baf8:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
 800bafa:	4c06      	ldr	r4, [pc, #24]	; (800bb14 <bt_keys_find_addr+0x1c>)
 800bafc:	7823      	ldrb	r3, [r4, #0]
 800bafe:	4283      	cmp	r3, r0
 800bb00:	d104      	bne.n	800bb0c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
 800bb02:	2207      	movs	r2, #7
 800bb04:	1c60      	adds	r0, r4, #1
 800bb06:	f007 f9b1 	bl	8012e6c <memcmp>
 800bb0a:	b108      	cbz	r0, 800bb10 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
 800bb0c:	2000      	movs	r0, #0
}
 800bb0e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
 800bb10:	4620      	mov	r0, r4
 800bb12:	e7fc      	b.n	800bb0e <bt_keys_find_addr+0x16>
 800bb14:	200016c0 	.word	0x200016c0

0800bb18 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <net_buf_pool_get+0xc>)
 800bb1a:	2234      	movs	r2, #52	; 0x34
 800bb1c:	fb02 3000 	mla	r0, r2, r0, r3
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20000640 	.word	0x20000640

0800bb28 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800bb28:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 800bb2a:	4a07      	ldr	r2, [pc, #28]	; (800bb48 <net_buf_id+0x20>)
 800bb2c:	2134      	movs	r1, #52	; 0x34
 800bb2e:	fb01 2303 	mla	r3, r1, r3, r2
 800bb32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800bb34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb38:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 800bb3a:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800bb3c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
 800bb40:	fbb0 f0f3 	udiv	r0, r0, r3
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20000640 	.word	0x20000640

0800bb4c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
 800bb4c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800bb4e:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800bb50:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800bb52:	2434      	movs	r4, #52	; 0x34
 800bb54:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
 800bb58:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	bf94      	ite	ls
 800bb64:	600a      	strls	r2, [r1, #0]
 800bb66:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 800bb68:	f7ff ffde 	bl	800bb28 <net_buf_id>
 800bb6c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
 800bb70:	fb02 3000 	mla	r0, r2, r0, r3
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	20000640 	.word	0x20000640

0800bb7c <net_buf_reset>:
{
 800bb7c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
 800bb7e:	7943      	ldrb	r3, [r0, #5]
{
 800bb80:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
 800bb82:	b14b      	cbz	r3, 800bb98 <net_buf_reset+0x1c>
 800bb84:	490d      	ldr	r1, [pc, #52]	; (800bbbc <net_buf_reset+0x40>)
 800bb86:	480e      	ldr	r0, [pc, #56]	; (800bbc0 <net_buf_reset+0x44>)
 800bb88:	4a0e      	ldr	r2, [pc, #56]	; (800bbc4 <net_buf_reset+0x48>)
 800bb8a:	2356      	movs	r3, #86	; 0x56
 800bb8c:	f006 fb8c 	bl	80122a8 <assert_print>
 800bb90:	480c      	ldr	r0, [pc, #48]	; (800bbc4 <net_buf_reset+0x48>)
 800bb92:	2156      	movs	r1, #86	; 0x56
 800bb94:	f006 fb81 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	b14b      	cbz	r3, 800bbb0 <net_buf_reset+0x34>
 800bb9c:	490a      	ldr	r1, [pc, #40]	; (800bbc8 <net_buf_reset+0x4c>)
 800bb9e:	4808      	ldr	r0, [pc, #32]	; (800bbc0 <net_buf_reset+0x44>)
 800bba0:	4a08      	ldr	r2, [pc, #32]	; (800bbc4 <net_buf_reset+0x48>)
 800bba2:	2357      	movs	r3, #87	; 0x57
 800bba4:	f006 fb80 	bl	80122a8 <assert_print>
 800bba8:	4806      	ldr	r0, [pc, #24]	; (800bbc4 <net_buf_reset+0x48>)
 800bbaa:	2157      	movs	r1, #87	; 0x57
 800bbac:	f006 fb75 	bl	801229a <assert_post_action>
	buf->len  = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	60a3      	str	r3, [r4, #8]
}
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	08019446 	.word	0x08019446
 800bbc0:	08016836 	.word	0x08016836
 800bbc4:	08019422 	.word	0x08019422
 800bbc8:	08019457 	.word	0x08019457

0800bbcc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 800bbcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	4619      	mov	r1, r3
{
 800bbd8:	4616      	mov	r6, r2
 800bbda:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 800bbdc:	f009 fc94 	bl	8015508 <sys_clock_timeout_end_calc>
 800bbe0:	4681      	mov	r9, r0
 800bbe2:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
 800bbe4:	b94d      	cbnz	r5, 800bbfa <net_buf_alloc_len+0x2e>
 800bbe6:	4978      	ldr	r1, [pc, #480]	; (800bdc8 <net_buf_alloc_len+0x1fc>)
 800bbe8:	4878      	ldr	r0, [pc, #480]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bbea:	4a79      	ldr	r2, [pc, #484]	; (800bdd0 <net_buf_alloc_len+0x204>)
 800bbec:	23f4      	movs	r3, #244	; 0xf4
 800bbee:	f006 fb5b 	bl	80122a8 <assert_print>
 800bbf2:	4877      	ldr	r0, [pc, #476]	; (800bdd0 <net_buf_alloc_len+0x204>)
 800bbf4:	21f4      	movs	r1, #244	; 0xf4
 800bbf6:	f006 fb50 	bl	801229a <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
 800bbfa:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
 800bbfe:	f04f 0310 	mov.w	r3, #16
 800bc02:	f3ef 8b11 	mrs	fp, BASEPRI
 800bc06:	f383 8812 	msr	BASEPRI_MAX, r3
 800bc0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f002 ff6e 	bl	800eaf0 <z_spin_lock_valid>
 800bc14:	b968      	cbnz	r0, 800bc32 <net_buf_alloc_len+0x66>
 800bc16:	4a6f      	ldr	r2, [pc, #444]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bc18:	496f      	ldr	r1, [pc, #444]	; (800bdd8 <net_buf_alloc_len+0x20c>)
 800bc1a:	486c      	ldr	r0, [pc, #432]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bc1c:	238e      	movs	r3, #142	; 0x8e
 800bc1e:	f006 fb43 	bl	80122a8 <assert_print>
 800bc22:	486e      	ldr	r0, [pc, #440]	; (800bddc <net_buf_alloc_len+0x210>)
 800bc24:	4641      	mov	r1, r8
 800bc26:	f006 fb3f 	bl	80122a8 <assert_print>
 800bc2a:	486a      	ldr	r0, [pc, #424]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bc2c:	218e      	movs	r1, #142	; 0x8e
 800bc2e:	f006 fb34 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800bc32:	4640      	mov	r0, r8
 800bc34:	f002 ff7a 	bl	800eb2c <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 800bc38:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 8082 	beq.w	800bd44 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 800bc40:	8c2a      	ldrh	r2, [r5, #32]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d952      	bls.n	800bcec <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
 800bc46:	2200      	movs	r2, #0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	f003 f892 	bl	800ed74 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
 800bc50:	4604      	mov	r4, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d04a      	beq.n	800bcec <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800bc56:	4640      	mov	r0, r8
 800bc58:	f002 ff58 	bl	800eb0c <z_spin_unlock_valid>
 800bc5c:	b968      	cbnz	r0, 800bc7a <net_buf_alloc_len+0xae>
 800bc5e:	4a5d      	ldr	r2, [pc, #372]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bc60:	495f      	ldr	r1, [pc, #380]	; (800bde0 <net_buf_alloc_len+0x214>)
 800bc62:	485a      	ldr	r0, [pc, #360]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bc64:	23b9      	movs	r3, #185	; 0xb9
 800bc66:	f006 fb1f 	bl	80122a8 <assert_print>
 800bc6a:	485e      	ldr	r0, [pc, #376]	; (800bde4 <net_buf_alloc_len+0x218>)
 800bc6c:	4641      	mov	r1, r8
 800bc6e:	f006 fb1b 	bl	80122a8 <assert_print>
 800bc72:	4858      	ldr	r0, [pc, #352]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bc74:	21b9      	movs	r1, #185	; 0xb9
 800bc76:	f006 fb10 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800bc7a:	f38b 8811 	msr	BASEPRI, fp
 800bc7e:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 800bc82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc86:	f1b8 0f00 	cmp.w	r8, #0
 800bc8a:	f000 8099 	beq.w	800bdc0 <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800bc8e:	ea56 0307 	orrs.w	r3, r6, r7
 800bc92:	d010      	beq.n	800bcb6 <net_buf_alloc_len+0xea>
 800bc94:	1c7b      	adds	r3, r7, #1
 800bc96:	bf08      	it	eq
 800bc98:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 800bc9c:	d00b      	beq.n	800bcb6 <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
 800bc9e:	f005 faf9 	bl	8011294 <sys_clock_tick_get>
 800bca2:	ebb9 0600 	subs.w	r6, r9, r0
 800bca6:	eb6a 0701 	sbc.w	r7, sl, r1
 800bcaa:	2e00      	cmp	r6, #0
 800bcac:	f177 0300 	sbcs.w	r3, r7, #0
 800bcb0:	bfbc      	itt	lt
 800bcb2:	2600      	movlt	r6, #0
 800bcb4:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800bcb6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
 800bcb8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800bde8 <net_buf_alloc_len+0x21c>
 800bcbc:	f04f 0a34 	mov.w	sl, #52	; 0x34
 800bcc0:	fb0a 9303 	mla	r3, sl, r3, r9
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	a901      	add	r1, sp, #4
 800bccc:	681d      	ldr	r5, [r3, #0]
 800bcce:	4620      	mov	r0, r4
 800bcd0:	463b      	mov	r3, r7
 800bcd2:	47a8      	blx	r5
 800bcd4:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 800bcd6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d155      	bne.n	800bd88 <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
 800bcdc:	79a0      	ldrb	r0, [r4, #6]
 800bcde:	4621      	mov	r1, r4
 800bce0:	fb00 900a 	mla	r0, r0, sl, r9
 800bce4:	f009 fb6f 	bl	80153c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 800bce8:	462c      	mov	r4, r5
}
 800bcea:	e049      	b.n	800bd80 <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
 800bcec:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
 800bcee:	1e63      	subs	r3, r4, #1
 800bcf0:	846b      	strh	r3, [r5, #34]	; 0x22
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	f002 ff0a 	bl	800eb0c <z_spin_unlock_valid>
 800bcf8:	b968      	cbnz	r0, 800bd16 <net_buf_alloc_len+0x14a>
 800bcfa:	4a36      	ldr	r2, [pc, #216]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bcfc:	4938      	ldr	r1, [pc, #224]	; (800bde0 <net_buf_alloc_len+0x214>)
 800bcfe:	4833      	ldr	r0, [pc, #204]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bd00:	23b9      	movs	r3, #185	; 0xb9
 800bd02:	f006 fad1 	bl	80122a8 <assert_print>
 800bd06:	4837      	ldr	r0, [pc, #220]	; (800bde4 <net_buf_alloc_len+0x218>)
 800bd08:	4641      	mov	r1, r8
 800bd0a:	f006 facd 	bl	80122a8 <assert_print>
 800bd0e:	4831      	ldr	r0, [pc, #196]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bd10:	21b9      	movs	r1, #185	; 0xb9
 800bd12:	f006 fac2 	bl	801229a <assert_post_action>
 800bd16:	f38b 8811 	msr	BASEPRI, fp
 800bd1a:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
 800bd1e:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800bd20:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
 800bd24:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800bd26:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
 800bd2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800bd2c:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
 800bd30:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
 800bd34:	482c      	ldr	r0, [pc, #176]	; (800bde8 <net_buf_alloc_len+0x21c>)
 800bd36:	4b2d      	ldr	r3, [pc, #180]	; (800bdec <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
 800bd38:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
 800bd3a:	1a2d      	subs	r5, r5, r0
 800bd3c:	10ad      	asrs	r5, r5, #2
 800bd3e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
 800bd40:	71a5      	strb	r5, [r4, #6]
		goto success;
 800bd42:	e79e      	b.n	800bc82 <net_buf_alloc_len+0xb6>
 800bd44:	4640      	mov	r0, r8
 800bd46:	f002 fee1 	bl	800eb0c <z_spin_unlock_valid>
 800bd4a:	b968      	cbnz	r0, 800bd68 <net_buf_alloc_len+0x19c>
 800bd4c:	4a21      	ldr	r2, [pc, #132]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bd4e:	4924      	ldr	r1, [pc, #144]	; (800bde0 <net_buf_alloc_len+0x214>)
 800bd50:	481e      	ldr	r0, [pc, #120]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bd52:	23b9      	movs	r3, #185	; 0xb9
 800bd54:	f006 faa8 	bl	80122a8 <assert_print>
 800bd58:	4822      	ldr	r0, [pc, #136]	; (800bde4 <net_buf_alloc_len+0x218>)
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	f006 faa4 	bl	80122a8 <assert_print>
 800bd60:	481c      	ldr	r0, [pc, #112]	; (800bdd4 <net_buf_alloc_len+0x208>)
 800bd62:	21b9      	movs	r1, #185	; 0xb9
 800bd64:	f006 fa99 	bl	801229a <assert_post_action>
 800bd68:	f38b 8811 	msr	BASEPRI, fp
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	4632      	mov	r2, r6
 800bd72:	463b      	mov	r3, r7
 800bd74:	4628      	mov	r0, r5
 800bd76:	f002 fffd 	bl	800ed74 <z_impl_k_queue_get>
	if (!buf) {
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d180      	bne.n	800bc82 <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
 800bd80:	4620      	mov	r0, r4
 800bd82:	b003      	add	sp, #12
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
 800bd88:	9b01      	ldr	r3, [sp, #4]
 800bd8a:	4598      	cmp	r8, r3
 800bd8c:	d90e      	bls.n	800bdac <net_buf_alloc_len+0x1e0>
 800bd8e:	4918      	ldr	r1, [pc, #96]	; (800bdf0 <net_buf_alloc_len+0x224>)
 800bd90:	4a0f      	ldr	r2, [pc, #60]	; (800bdd0 <net_buf_alloc_len+0x204>)
 800bd92:	480e      	ldr	r0, [pc, #56]	; (800bdcc <net_buf_alloc_len+0x200>)
 800bd94:	f240 1355 	movw	r3, #341	; 0x155
 800bd98:	f006 fa86 	bl	80122a8 <assert_print>
 800bd9c:	4815      	ldr	r0, [pc, #84]	; (800bdf4 <net_buf_alloc_len+0x228>)
 800bd9e:	f006 fa83 	bl	80122a8 <assert_print>
 800bda2:	480b      	ldr	r0, [pc, #44]	; (800bdd0 <net_buf_alloc_len+0x204>)
 800bda4:	f240 1155 	movw	r1, #341	; 0x155
 800bda8:	f006 fa77 	bl	801229a <assert_post_action>
	buf->frags = NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
 800bdb4:	9b01      	ldr	r3, [sp, #4]
 800bdb6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff fedf 	bl	800bb7c <net_buf_reset>
	return buf;
 800bdbe:	e7df      	b.n	800bd80 <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
 800bdc0:	f8c4 8010 	str.w	r8, [r4, #16]
 800bdc4:	e7f2      	b.n	800bdac <net_buf_alloc_len+0x1e0>
 800bdc6:	bf00      	nop
 800bdc8:	08019471 	.word	0x08019471
 800bdcc:	08016836 	.word	0x08016836
 800bdd0:	08019422 	.word	0x08019422
 800bdd4:	080170fb 	.word	0x080170fb
 800bdd8:	08017121 	.word	0x08017121
 800bddc:	08017136 	.word	0x08017136
 800bde0:	0801714e 	.word	0x0801714e
 800bde4:	08017165 	.word	0x08017165
 800bde8:	20000640 	.word	0x20000640
 800bdec:	c4ec4ec5 	.word	0xc4ec4ec5
 800bdf0:	08019476 	.word	0x08019476
 800bdf4:	08019487 	.word	0x08019487

0800bdf8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
 800bdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	f002 ffb9 	bl	800ed74 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
 800be02:	4605      	mov	r5, r0
 800be04:	b150      	cbz	r0, 800be1c <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
 800be06:	4f13      	ldr	r7, [pc, #76]	; (800be54 <net_buf_get+0x5c>)
 800be08:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800be58 <net_buf_get+0x60>
 800be0c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800be5c <net_buf_get+0x64>
 800be10:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 800be12:	7963      	ldrb	r3, [r4, #5]
 800be14:	f013 0301 	ands.w	r3, r3, #1
 800be18:	d103      	bne.n	800be22 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 800be1a:	6023      	str	r3, [r4, #0]

	return buf;
}
 800be1c:	4628      	mov	r0, r5
 800be1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be22:	2200      	movs	r2, #0
 800be24:	2300      	movs	r3, #0
 800be26:	4630      	mov	r0, r6
 800be28:	f002 ffa4 	bl	800ed74 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 800be2c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
 800be2e:	b958      	cbnz	r0, 800be48 <net_buf_get+0x50>
 800be30:	4641      	mov	r1, r8
 800be32:	4648      	mov	r0, r9
 800be34:	f240 13ad 	movw	r3, #429	; 0x1ad
 800be38:	463a      	mov	r2, r7
 800be3a:	f006 fa35 	bl	80122a8 <assert_print>
 800be3e:	f240 11ad 	movw	r1, #429	; 0x1ad
 800be42:	4638      	mov	r0, r7
 800be44:	f006 fa29 	bl	801229a <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
 800be48:	7963      	ldrb	r3, [r4, #5]
 800be4a:	f023 0301 	bic.w	r3, r3, #1
 800be4e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 800be50:	6824      	ldr	r4, [r4, #0]
 800be52:	e7de      	b.n	800be12 <net_buf_get+0x1a>
 800be54:	08019422 	.word	0x08019422
 800be58:	0801948a 	.word	0x0801948a
 800be5c:	08016836 	.word	0x08016836

0800be60 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
 800be64:	4604      	mov	r4, r0
 800be66:	b958      	cbnz	r0, 800be80 <net_buf_simple_reserve+0x20>
 800be68:	490e      	ldr	r1, [pc, #56]	; (800bea4 <net_buf_simple_reserve+0x44>)
 800be6a:	480f      	ldr	r0, [pc, #60]	; (800bea8 <net_buf_simple_reserve+0x48>)
 800be6c:	4a0f      	ldr	r2, [pc, #60]	; (800beac <net_buf_simple_reserve+0x4c>)
 800be6e:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 800be72:	f006 fa19 	bl	80122a8 <assert_print>
 800be76:	480d      	ldr	r0, [pc, #52]	; (800beac <net_buf_simple_reserve+0x4c>)
 800be78:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800be7c:	f006 fa0d 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
 800be80:	88a3      	ldrh	r3, [r4, #4]
 800be82:	b15b      	cbz	r3, 800be9c <net_buf_simple_reserve+0x3c>
 800be84:	490a      	ldr	r1, [pc, #40]	; (800beb0 <net_buf_simple_reserve+0x50>)
 800be86:	4808      	ldr	r0, [pc, #32]	; (800bea8 <net_buf_simple_reserve+0x48>)
 800be88:	4a08      	ldr	r2, [pc, #32]	; (800beac <net_buf_simple_reserve+0x4c>)
 800be8a:	f240 13c5 	movw	r3, #453	; 0x1c5
 800be8e:	f006 fa0b 	bl	80122a8 <assert_print>
 800be92:	4806      	ldr	r0, [pc, #24]	; (800beac <net_buf_simple_reserve+0x4c>)
 800be94:	f240 11c5 	movw	r1, #453	; 0x1c5
 800be98:	f006 f9ff 	bl	801229a <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
 800be9c:	68a3      	ldr	r3, [r4, #8]
 800be9e:	442b      	add	r3, r5
 800bea0:	6023      	str	r3, [r4, #0]
}
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	08017d7b 	.word	0x08017d7b
 800bea8:	08016836 	.word	0x08016836
 800beac:	08019422 	.word	0x08019422
 800beb0:	08019496 	.word	0x08019496

0800beb4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
 800beb8:	4605      	mov	r5, r0
 800beba:	b958      	cbnz	r0, 800bed4 <net_buf_put+0x20>
 800bebc:	4913      	ldr	r1, [pc, #76]	; (800bf0c <net_buf_put+0x58>)
 800bebe:	4814      	ldr	r0, [pc, #80]	; (800bf10 <net_buf_put+0x5c>)
 800bec0:	4a14      	ldr	r2, [pc, #80]	; (800bf14 <net_buf_put+0x60>)
 800bec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec6:	f006 f9ef 	bl	80122a8 <assert_print>
 800beca:	4812      	ldr	r0, [pc, #72]	; (800bf14 <net_buf_put+0x60>)
 800becc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bed0:	f006 f9e3 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(buf);
 800bed4:	b95c      	cbnz	r4, 800beee <net_buf_put+0x3a>
 800bed6:	4910      	ldr	r1, [pc, #64]	; (800bf18 <net_buf_put+0x64>)
 800bed8:	480d      	ldr	r0, [pc, #52]	; (800bf10 <net_buf_put+0x5c>)
 800beda:	4a0e      	ldr	r2, [pc, #56]	; (800bf14 <net_buf_put+0x60>)
 800bedc:	f240 2301 	movw	r3, #513	; 0x201
 800bee0:	f006 f9e2 	bl	80122a8 <assert_print>
 800bee4:	480b      	ldr	r0, [pc, #44]	; (800bf14 <net_buf_put+0x60>)
 800bee6:	f240 2101 	movw	r1, #513	; 0x201
 800beea:	f006 f9d6 	bl	801229a <assert_post_action>
{
 800beee:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
 800bef0:	6811      	ldr	r1, [r2, #0]
 800bef2:	b929      	cbnz	r1, 800bf00 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
}
 800bef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
 800befc:	f002 bedc 	b.w	800ecb8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
 800bf00:	7953      	ldrb	r3, [r2, #5]
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	7153      	strb	r3, [r2, #5]
 800bf08:	460a      	mov	r2, r1
 800bf0a:	e7f1      	b.n	800bef0 <net_buf_put+0x3c>
 800bf0c:	080194a5 	.word	0x080194a5
 800bf10:	08016836 	.word	0x08016836
 800bf14:	08019422 	.word	0x08019422
 800bf18:	08017d7b 	.word	0x08017d7b

0800bf1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 800bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
 800bf20:	4605      	mov	r5, r0
 800bf22:	b328      	cbz	r0, 800bf70 <net_buf_unref+0x54>
 800bf24:	4e1c      	ldr	r6, [pc, #112]	; (800bf98 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
 800bf26:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
 800bf28:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
 800bf2c:	462c      	mov	r4, r5
 800bf2e:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
 800bf30:	7923      	ldrb	r3, [r4, #4]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	7123      	strb	r3, [r4, #4]
 800bf38:	b9c3      	cbnz	r3, 800bf6c <net_buf_unref+0x50>
		if (buf->__buf) {
 800bf3a:	6921      	ldr	r1, [r4, #16]
 800bf3c:	b159      	cbz	r1, 800bf56 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 800bf3e:	7963      	ldrb	r3, [r4, #5]
 800bf40:	079b      	lsls	r3, r3, #30
 800bf42:	d407      	bmi.n	800bf54 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
 800bf44:	79a3      	ldrb	r3, [r4, #6]
 800bf46:	fb08 6303 	mla	r3, r8, r3, r6
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	4798      	blx	r3
			buf->__buf = NULL;
 800bf54:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
 800bf56:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
 800bf58:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
 800bf5a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
 800bf5e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	b19b      	cbz	r3, 800bf8c <net_buf_unref+0x70>
			pool->destroy(buf);
 800bf64:	4620      	mov	r0, r4
 800bf66:	4798      	blx	r3
	while (buf) {
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	d1df      	bne.n	800bf2c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 800bf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
 800bf70:	490a      	ldr	r1, [pc, #40]	; (800bf9c <net_buf_unref+0x80>)
 800bf72:	480b      	ldr	r0, [pc, #44]	; (800bfa0 <net_buf_unref+0x84>)
 800bf74:	4a0b      	ldr	r2, [pc, #44]	; (800bfa4 <net_buf_unref+0x88>)
 800bf76:	f44f 7304 	mov.w	r3, #528	; 0x210
 800bf7a:	f006 f995 	bl	80122a8 <assert_print>
}
 800bf7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
 800bf82:	4808      	ldr	r0, [pc, #32]	; (800bfa4 <net_buf_unref+0x88>)
 800bf84:	f44f 7104 	mov.w	r1, #528	; 0x210
 800bf88:	f006 b987 	b.w	801229a <assert_post_action>
	k_lifo_put(&pool->free, buf);
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	fb00 6008 	mla	r0, r0, r8, r6
 800bf92:	f009 fa18 	bl	80153c6 <k_queue_prepend>
}
 800bf96:	e7e7      	b.n	800bf68 <net_buf_unref+0x4c>
 800bf98:	20000640 	.word	0x20000640
 800bf9c:	08017d7b 	.word	0x08017d7b
 800bfa0:	08016836 	.word	0x08016836
 800bfa4:	08019422 	.word	0x08019422

0800bfa8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
 800bfa8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
 800bfaa:	4604      	mov	r4, r0
 800bfac:	b958      	cbnz	r0, 800bfc6 <net_buf_ref+0x1e>
 800bfae:	4908      	ldr	r1, [pc, #32]	; (800bfd0 <net_buf_ref+0x28>)
 800bfb0:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <net_buf_ref+0x2c>)
 800bfb2:	4a09      	ldr	r2, [pc, #36]	; (800bfd8 <net_buf_ref+0x30>)
 800bfb4:	f240 233f 	movw	r3, #575	; 0x23f
 800bfb8:	f006 f976 	bl	80122a8 <assert_print>
 800bfbc:	4806      	ldr	r0, [pc, #24]	; (800bfd8 <net_buf_ref+0x30>)
 800bfbe:	f240 213f 	movw	r1, #575	; 0x23f
 800bfc2:	f006 f96a 	bl	801229a <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
 800bfc6:	7923      	ldrb	r3, [r4, #4]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	7123      	strb	r3, [r4, #4]
	return buf;
}
 800bfcc:	4620      	mov	r0, r4
 800bfce:	bd10      	pop	{r4, pc}
 800bfd0:	08017d7b 	.word	0x08017d7b
 800bfd4:	08016836 	.word	0x08016836
 800bfd8:	08019422 	.word	0x08019422

0800bfdc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 800bfdc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
 800bfde:	4604      	mov	r4, r0
 800bfe0:	b958      	cbnz	r0, 800bffa <net_buf_frag_last+0x1e>
 800bfe2:	4908      	ldr	r1, [pc, #32]	; (800c004 <net_buf_frag_last+0x28>)
 800bfe4:	4808      	ldr	r0, [pc, #32]	; (800c008 <net_buf_frag_last+0x2c>)
 800bfe6:	4a09      	ldr	r2, [pc, #36]	; (800c00c <net_buf_frag_last+0x30>)
 800bfe8:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800bfec:	f006 f95c 	bl	80122a8 <assert_print>
 800bff0:	4806      	ldr	r0, [pc, #24]	; (800c00c <net_buf_frag_last+0x30>)
 800bff2:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800bff6:	f006 f950 	bl	801229a <assert_post_action>

	while (buf->frags) {
 800bffa:	4620      	mov	r0, r4
 800bffc:	6824      	ldr	r4, [r4, #0]
 800bffe:	2c00      	cmp	r4, #0
 800c000:	d1fb      	bne.n	800bffa <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
 800c002:	bd10      	pop	{r4, pc}
 800c004:	08017d7b 	.word	0x08017d7b
 800c008:	08016836 	.word	0x08016836
 800c00c:	08019422 	.word	0x08019422

0800c010 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
 800c014:	4604      	mov	r4, r0
 800c016:	b958      	cbnz	r0, 800c030 <net_buf_frag_insert+0x20>
 800c018:	4910      	ldr	r1, [pc, #64]	; (800c05c <net_buf_frag_insert+0x4c>)
 800c01a:	4811      	ldr	r0, [pc, #68]	; (800c060 <net_buf_frag_insert+0x50>)
 800c01c:	4a11      	ldr	r2, [pc, #68]	; (800c064 <net_buf_frag_insert+0x54>)
 800c01e:	f240 2387 	movw	r3, #647	; 0x287
 800c022:	f006 f941 	bl	80122a8 <assert_print>
 800c026:	480f      	ldr	r0, [pc, #60]	; (800c064 <net_buf_frag_insert+0x54>)
 800c028:	f240 2187 	movw	r1, #647	; 0x287
 800c02c:	f006 f935 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(frag);
 800c030:	b95d      	cbnz	r5, 800c04a <net_buf_frag_insert+0x3a>
 800c032:	490d      	ldr	r1, [pc, #52]	; (800c068 <net_buf_frag_insert+0x58>)
 800c034:	480a      	ldr	r0, [pc, #40]	; (800c060 <net_buf_frag_insert+0x50>)
 800c036:	4a0b      	ldr	r2, [pc, #44]	; (800c064 <net_buf_frag_insert+0x54>)
 800c038:	f44f 7322 	mov.w	r3, #648	; 0x288
 800c03c:	f006 f934 	bl	80122a8 <assert_print>
 800c040:	4808      	ldr	r0, [pc, #32]	; (800c064 <net_buf_frag_insert+0x54>)
 800c042:	f44f 7122 	mov.w	r1, #648	; 0x288
 800c046:	f006 f928 	bl	801229a <assert_post_action>

	if (parent->frags) {
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	b123      	cbz	r3, 800c058 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
 800c04e:	4628      	mov	r0, r5
 800c050:	f7ff ffc4 	bl	800bfdc <net_buf_frag_last>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 800c058:	6025      	str	r5, [r4, #0]
}
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	080194aa 	.word	0x080194aa
 800c060:	08016836 	.word	0x08016836
 800c064:	08019422 	.word	0x08019422
 800c068:	080194b1 	.word	0x080194b1

0800c06c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
 800c070:	460d      	mov	r5, r1
 800c072:	b959      	cbnz	r1, 800c08c <net_buf_frag_add+0x20>
 800c074:	490c      	ldr	r1, [pc, #48]	; (800c0a8 <net_buf_frag_add+0x3c>)
 800c076:	480d      	ldr	r0, [pc, #52]	; (800c0ac <net_buf_frag_add+0x40>)
 800c078:	4a0d      	ldr	r2, [pc, #52]	; (800c0b0 <net_buf_frag_add+0x44>)
 800c07a:	f240 2393 	movw	r3, #659	; 0x293
 800c07e:	f006 f913 	bl	80122a8 <assert_print>
 800c082:	480b      	ldr	r0, [pc, #44]	; (800c0b0 <net_buf_frag_add+0x44>)
 800c084:	f240 2193 	movw	r1, #659	; 0x293
 800c088:	f006 f907 	bl	801229a <assert_post_action>

	if (!head) {
 800c08c:	b924      	cbnz	r4, 800c098 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
 800c08e:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
 800c090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
 800c094:	f7ff bf88 	b.w	800bfa8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff ff9f 	bl	800bfdc <net_buf_frag_last>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7ff ffb6 	bl	800c010 <net_buf_frag_insert>
}
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	080194b1 	.word	0x080194b1
 800c0ac:	08016836 	.word	0x08016836
 800c0b0:	08019422 	.word	0x08019422

0800c0b4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
 800c0b4:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 800c0b6:	6882      	ldr	r2, [r0, #8]
 800c0b8:	6803      	ldr	r3, [r0, #0]
 800c0ba:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
 800c0bc:	4299      	cmp	r1, r3
{
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
 800c0c2:	d90b      	bls.n	800c0dc <net_buf_simple_push+0x28>
 800c0c4:	4909      	ldr	r1, [pc, #36]	; (800c0ec <net_buf_simple_push+0x38>)
 800c0c6:	480a      	ldr	r0, [pc, #40]	; (800c0f0 <net_buf_simple_push+0x3c>)
 800c0c8:	4a0a      	ldr	r2, [pc, #40]	; (800c0f4 <net_buf_simple_push+0x40>)
 800c0ca:	f240 4317 	movw	r3, #1047	; 0x417
 800c0ce:	f006 f8eb 	bl	80122a8 <assert_print>
 800c0d2:	4808      	ldr	r0, [pc, #32]	; (800c0f4 <net_buf_simple_push+0x40>)
 800c0d4:	f240 4117 	movw	r1, #1047	; 0x417
 800c0d8:	f006 f8df 	bl	801229a <assert_post_action>
	buf->data -= len;
 800c0dc:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
 800c0de:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
 800c0e0:	1b40      	subs	r0, r0, r5
	buf->len += len;
 800c0e2:	440d      	add	r5, r1
	buf->data -= len;
 800c0e4:	6020      	str	r0, [r4, #0]
	buf->len += len;
 800c0e6:	80a5      	strh	r5, [r4, #4]
}
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	080194c6 	.word	0x080194c6
 800c0f0:	08016836 	.word	0x08016836
 800c0f4:	08019422 	.word	0x08019422

0800c0f8 <net_buf_simple_pull>:
{
 800c0f8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
 800c0fa:	8883      	ldrh	r3, [r0, #4]
 800c0fc:	428b      	cmp	r3, r1
{
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
 800c102:	d20b      	bcs.n	800c11c <net_buf_simple_pull+0x24>
 800c104:	4909      	ldr	r1, [pc, #36]	; (800c12c <net_buf_simple_pull+0x34>)
 800c106:	480a      	ldr	r0, [pc, #40]	; (800c130 <net_buf_simple_pull+0x38>)
 800c108:	4a0a      	ldr	r2, [pc, #40]	; (800c134 <net_buf_simple_pull+0x3c>)
 800c10a:	f240 4377 	movw	r3, #1143	; 0x477
 800c10e:	f006 f8cb 	bl	80122a8 <assert_print>
 800c112:	4808      	ldr	r0, [pc, #32]	; (800c134 <net_buf_simple_pull+0x3c>)
 800c114:	f240 4177 	movw	r1, #1143	; 0x477
 800c118:	f006 f8bf 	bl	801229a <assert_post_action>
	buf->len -= len;
 800c11c:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
 800c11e:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
 800c120:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
 800c122:	4428      	add	r0, r5
	buf->len -= len;
 800c124:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
 800c126:	6020      	str	r0, [r4, #0]
}
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop
 800c12c:	080194b6 	.word	0x080194b6
 800c130:	08016836 	.word	0x08016836
 800c134:	08019422 	.word	0x08019422

0800c138 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
 800c138:	8883      	ldrh	r3, [r0, #4]
 800c13a:	428b      	cmp	r3, r1
{
 800c13c:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
 800c13e:	6806      	ldr	r6, [r0, #0]
{
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
 800c144:	d20b      	bcs.n	800c15e <net_buf_simple_pull_mem+0x26>
 800c146:	490a      	ldr	r1, [pc, #40]	; (800c170 <net_buf_simple_pull_mem+0x38>)
 800c148:	480a      	ldr	r0, [pc, #40]	; (800c174 <net_buf_simple_pull_mem+0x3c>)
 800c14a:	4a0b      	ldr	r2, [pc, #44]	; (800c178 <net_buf_simple_pull_mem+0x40>)
 800c14c:	f240 4383 	movw	r3, #1155	; 0x483
 800c150:	f006 f8aa 	bl	80122a8 <assert_print>
 800c154:	4808      	ldr	r0, [pc, #32]	; (800c178 <net_buf_simple_pull_mem+0x40>)
 800c156:	f240 4183 	movw	r1, #1155	; 0x483
 800c15a:	f006 f89e 	bl	801229a <assert_post_action>
	buf->len -= len;
 800c15e:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
 800c160:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
 800c162:	1b5b      	subs	r3, r3, r5
	buf->data += len;
 800c164:	4429      	add	r1, r5
	buf->len -= len;
 800c166:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
 800c168:	6021      	str	r1, [r4, #0]
}
 800c16a:	4630      	mov	r0, r6
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
 800c16e:	bf00      	nop
 800c170:	080194b6 	.word	0x080194b6
 800c174:	08016836 	.word	0x08016836
 800c178:	08019422 	.word	0x08019422

0800c17c <net_buf_simple_add>:
{
 800c17c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
 800c17e:	6803      	ldr	r3, [r0, #0]
 800c180:	8886      	ldrh	r6, [r0, #4]
 800c182:	4604      	mov	r4, r0
 800c184:	460d      	mov	r5, r1
 800c186:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
 800c188:	f008 fe77 	bl	8014e7a <net_buf_simple_tailroom>
 800c18c:	4288      	cmp	r0, r1
 800c18e:	d20b      	bcs.n	800c1a8 <net_buf_simple_add+0x2c>
 800c190:	4908      	ldr	r1, [pc, #32]	; (800c1b4 <net_buf_simple_add+0x38>)
 800c192:	4809      	ldr	r0, [pc, #36]	; (800c1b8 <net_buf_simple_add+0x3c>)
 800c194:	4a09      	ldr	r2, [pc, #36]	; (800c1bc <net_buf_simple_add+0x40>)
 800c196:	f44f 734a 	mov.w	r3, #808	; 0x328
 800c19a:	f006 f885 	bl	80122a8 <assert_print>
 800c19e:	4807      	ldr	r0, [pc, #28]	; (800c1bc <net_buf_simple_add+0x40>)
 800c1a0:	f44f 714a 	mov.w	r1, #808	; 0x328
 800c1a4:	f006 f879 	bl	801229a <assert_post_action>
	buf->len += len;
 800c1a8:	88a1      	ldrh	r1, [r4, #4]
 800c1aa:	440d      	add	r5, r1
 800c1ac:	80a5      	strh	r5, [r4, #4]
}
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	bd70      	pop	{r4, r5, r6, pc}
 800c1b2:	bf00      	nop
 800c1b4:	080194ea 	.word	0x080194ea
 800c1b8:	08016836 	.word	0x08016836
 800c1bc:	08019422 	.word	0x08019422

0800c1c0 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800c1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800c1c4:	4f0d      	ldr	r7, [pc, #52]	; (800c1fc <__stm32_exti_isr.isra.0+0x3c>)
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800c1cc:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800c1d0:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800c1d4:	42b4      	cmp	r4, r6
 800c1d6:	db01      	blt.n	800c1dc <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800c1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1dc:	68fa      	ldr	r2, [r7, #12]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800c1de:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800c1e2:	ea33 0202 	bics.w	r2, r3, r2
 800c1e6:	d107      	bne.n	800c1f8 <__stm32_exti_isr.isra.0+0x38>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800c1e8:	60fb      	str	r3, [r7, #12]
			if (!data->cb[line].cb) {
 800c1ea:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800c1ee:	b11b      	cbz	r3, 800c1f8 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800c1f0:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800c1f8:	3401      	adds	r4, #1
 800c1fa:	e7eb      	b.n	800c1d4 <__stm32_exti_isr.isra.0+0x14>
 800c1fc:	58000800 	.word	0x58000800

0800c200 <z_stm32_hsem_lock.constprop.0>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800c200:	4a09      	ldr	r2, [pc, #36]	; (800c228 <z_stm32_hsem_lock.constprop.0+0x28>)
 800c202:	490a      	ldr	r1, [pc, #40]	; (800c22c <z_stm32_hsem_lock.constprop.0+0x2c>)
#define HSEM_LOCK_DEFAULT_RETRY       0xFFFFU

/**
 * @brief Lock Hardware Semaphore
 */
static inline void z_stm32_hsem_lock(uint32_t  hsem, uint32_t retry)
 800c204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c208:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 800c20c:	4288      	cmp	r0, r1
 800c20e:	d00a      	beq.n	800c226 <z_stm32_hsem_lock.constprop.0+0x26>
{
#if defined(CONFIG_SOC_SERIES_STM32WBX) || defined(CONFIG_STM32H7_DUAL_CORE) \
	|| defined(CONFIG_SOC_SERIES_STM32MP1X)

	while (LL_HSEM_1StepLock(HSEM, hsem)) {
		if (retry != HSEM_LOCK_WAIT_FOREVER) {
 800c210:	1c58      	adds	r0, r3, #1
 800c212:	d0f9      	beq.n	800c208 <z_stm32_hsem_lock.constprop.0+0x8>
			retry--;
			if (retry == 0) {
 800c214:	3b01      	subs	r3, #1
 800c216:	d1f7      	bne.n	800c208 <z_stm32_hsem_lock.constprop.0+0x8>
				k_panic();
 800c218:	4040      	eors	r0, r0
 800c21a:	f380 8811 	msr	BASEPRI, r0
 800c21e:	f04f 0004 	mov.w	r0, #4
 800c222:	df02      	svc	2
 800c224:	e7f0      	b.n	800c208 <z_stm32_hsem_lock.constprop.0+0x8>
			}
		}
	}
#endif /* CONFIG_SOC_SERIES_STM32WBX || CONFIG_STM32H7_DUAL_CORE || ... */
}
 800c226:	4770      	bx	lr
 800c228:	58001400 	.word	0x58001400
 800c22c:	80000400 	.word	0x80000400

0800c230 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c230:	4a05      	ldr	r2, [pc, #20]	; (800c248 <stm32_exti_enable+0x18>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800c232:	2301      	movs	r3, #1
 800c234:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 800c238:	4083      	lsls	r3, r0
 800c23a:	430b      	orrs	r3, r1
 800c23c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	irq_enable(irqnum);
 800c240:	4b02      	ldr	r3, [pc, #8]	; (800c24c <stm32_exti_enable+0x1c>)
 800c242:	5618      	ldrsb	r0, [r3, r0]
 800c244:	f7f7 bcba 	b.w	8003bbc <arch_irq_enable>
 800c248:	58000800 	.word	0x58000800
 800c24c:	08019534 	.word	0x08019534

0800c250 <stm32_exti_disable>:
{
 800c250:	b510      	push	{r4, lr}
 800c252:	4604      	mov	r4, r0
	z_stm32_hsem_lock(CFG_HW_EXTI_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c254:	f7ff ffd4 	bl	800c200 <z_stm32_hsem_lock.constprop.0>
	if (line < 32) {
 800c258:	2c1f      	cmp	r4, #31
 800c25a:	dc09      	bgt.n	800c270 <stm32_exti_disable+0x20>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c25c:	4a07      	ldr	r2, [pc, #28]	; (800c27c <stm32_exti_disable+0x2c>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800c25e:	2001      	movs	r0, #1
 800c260:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800c264:	fa00 f404 	lsl.w	r4, r0, r4
 800c268:	ea23 0404 	bic.w	r4, r3, r4
 800c26c:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800c270:	4b03      	ldr	r3, [pc, #12]	; (800c280 <stm32_exti_disable+0x30>)
 800c272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c276:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	bf00      	nop
 800c27c:	58000800 	.word	0x58000800
 800c280:	58001400 	.word	0x58001400

0800c284 <stm32_exti_trigger>:
{
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	460d      	mov	r5, r1
 800c288:	4604      	mov	r4, r0
	z_stm32_hsem_lock(CFG_HW_EXTI_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c28a:	f7ff ffb9 	bl	800c200 <z_stm32_hsem_lock.constprop.0>
	switch (trigger) {
 800c28e:	2d03      	cmp	r5, #3
 800c290:	d81f      	bhi.n	800c2d2 <stm32_exti_trigger+0x4e>
 800c292:	e8df f005 	tbb	[pc, r5]
 800c296:	0e02      	.short	0x0e02
 800c298:	2314      	.short	0x2314
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c29a:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <stm32_exti_trigger+0x6c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800c29c:	2001      	movs	r0, #1
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	40a0      	lsls	r0, r4
 800c2a2:	ea22 0200 	bic.w	r2, r2, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c2a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c2a8:	685c      	ldr	r4, [r3, #4]
 800c2aa:	ea24 0000 	bic.w	r0, r4, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c2ae:	6058      	str	r0, [r3, #4]
}
 800c2b0:	e00f      	b.n	800c2d2 <stm32_exti_trigger+0x4e>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	40a0      	lsls	r0, r4
 800c2ba:	4302      	orrs	r2, r0
 800c2bc:	e7f3      	b.n	800c2a6 <stm32_exti_trigger+0x22>
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	685a      	ldr	r2, [r3, #4]
 800c2c4:	40a0      	lsls	r0, r4
 800c2c6:	4302      	orrs	r2, r0
 800c2c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c2ca:	681c      	ldr	r4, [r3, #0]
 800c2cc:	ea24 0000 	bic.w	r0, r4, r0
 800c2d0:	6018      	str	r0, [r3, #0]
 800c2d2:	4b08      	ldr	r3, [pc, #32]	; (800c2f4 <stm32_exti_trigger+0x70>)
 800c2d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c2d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c2dc:	2301      	movs	r3, #1
 800c2de:	fa03 f004 	lsl.w	r0, r3, r4
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c2e2:	4b03      	ldr	r3, [pc, #12]	; (800c2f0 <stm32_exti_trigger+0x6c>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4302      	orrs	r2, r0
 800c2e8:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	4310      	orrs	r0, r2
 800c2ee:	e7de      	b.n	800c2ae <stm32_exti_trigger+0x2a>
 800c2f0:	58000800 	.word	0x58000800
 800c2f4:	58001400 	.word	0x58001400

0800c2f8 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800c2f8:	4b07      	ldr	r3, [pc, #28]	; (800c318 <stm32_exti_set_callback+0x20>)
{
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800c2fe:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800c302:	b928      	cbnz	r0, 800c310 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800c304:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800c308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c30c:	605a      	str	r2, [r3, #4]

	return 0;
}
 800c30e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800c310:	f06f 000f 	mvn.w	r0, #15
 800c314:	e7fb      	b.n	800c30e <stm32_exti_set_callback+0x16>
 800c316:	bf00      	nop
 800c318:	2000171c 	.word	0x2000171c

0800c31c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800c31c:	4b03      	ldr	r3, [pc, #12]	; (800c32c <stm32_exti_unset_callback+0x10>)
 800c31e:	2200      	movs	r2, #0
 800c320:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800c324:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800c328:	605a      	str	r2, [r3, #4]
}
 800c32a:	4770      	bx	lr
 800c32c:	2000171c 	.word	0x2000171c

0800c330 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800c330:	680b      	ldr	r3, [r1, #0]
 800c332:	2b04      	cmp	r3, #4
 800c334:	d901      	bls.n	800c33a <stm32_clock_control_get_subsys_rate+0xa>
 800c336:	2b06      	cmp	r3, #6
 800c338:	d104      	bne.n	800c344 <stm32_clock_control_get_subsys_rate+0x14>
	uint32_t ahb_clock = SystemCoreClock;
 800c33a:	4b04      	ldr	r3, [pc, #16]	; (800c34c <stm32_clock_control_get_subsys_rate+0x1c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 800c33e:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800c340:	2000      	movs	r0, #0
		break;
 800c342:	4770      	bx	lr
	switch (pclken->bus) {
 800c344:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	200003dc 	.word	0x200003dc

0800c350 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800c350:	b570      	push	{r4, r5, r6, lr}
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800c352:	f000 f87f 	bl	800c454 <config_enable_default_clocks>

#endif /* STM32_PLL_SRC_* */

#elif STM32_SYSCLK_SRC_HSE

	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800c356:	f001 fddd 	bl	800df14 <HAL_RCC_GetSysClockFreq>
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c35a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c35e:	4a37      	ldr	r2, [pc, #220]	; (800c43c <stm32_clock_control_init+0xec>)
 800c360:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
	if (IS_ENABLED(STM32_HSE_DIV2)) {
		hse_freq = CONFIG_CLOCK_STM32_HSE_CLOCK / 2;
	} else {
		hse_freq = CONFIG_CLOCK_STM32_HSE_CLOCK;
	}
	new_hclk_freq = __LL_RCC_CALC_HCLK_FREQ(hse_freq, hclk_prescaler);
 800c364:	4c36      	ldr	r4, [pc, #216]	; (800c440 <stm32_clock_control_init+0xf0>)
 800c366:	6815      	ldr	r5, [r2, #0]
 800c368:	fbb4 f5f5 	udiv	r5, r4, r5
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800c36c:	f003 030f 	and.w	r3, r3, #15
#else
	new_flash_freq = new_hclk_freq;
#endif

#if defined(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC)
	__ASSERT(new_hclk_freq == CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
 800c370:	42a5      	cmp	r5, r4
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 800c372:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800c376:	fbb0 f6f6 	udiv	r6, r0, r6
	__ASSERT(new_hclk_freq == CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
 800c37a:	d010      	beq.n	800c39e <stm32_clock_control_init+0x4e>
 800c37c:	4a31      	ldr	r2, [pc, #196]	; (800c444 <stm32_clock_control_init+0xf4>)
 800c37e:	4932      	ldr	r1, [pc, #200]	; (800c448 <stm32_clock_control_init+0xf8>)
 800c380:	4832      	ldr	r0, [pc, #200]	; (800c44c <stm32_clock_control_init+0xfc>)
 800c382:	f240 2317 	movw	r3, #535	; 0x217
 800c386:	f005 ff8f 	bl	80122a8 <assert_print>
 800c38a:	4831      	ldr	r0, [pc, #196]	; (800c450 <stm32_clock_control_init+0x100>)
 800c38c:	4621      	mov	r1, r4
 800c38e:	462a      	mov	r2, r5
 800c390:	f005 ff8a 	bl	80122a8 <assert_print>
 800c394:	482b      	ldr	r0, [pc, #172]	; (800c444 <stm32_clock_control_init+0xf4>)
 800c396:	f240 2117 	movw	r1, #535	; 0x217
 800c39a:	f005 ff7e 	bl	801229a <assert_post_action>
			 "Config mismatch HCLK frequency %u %u",
			 CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC, new_hclk_freq);
#endif

	/* If freq increases, set flash latency before any clock setting */
	if (new_flash_freq > old_flash_freq) {
 800c39e:	42ae      	cmp	r6, r5
 800c3a0:	d202      	bcs.n	800c3a8 <stm32_clock_control_init+0x58>
		LL_SetFlashLatency(new_flash_freq);
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f001 fe1c 	bl	800dfe0 <LL_SetFlashLatency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c3a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	0391      	lsls	r1, r2, #14
 800c3b0:	d406      	bmi.n	800c3c0 <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c3b8:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	0392      	lsls	r2, r2, #14
 800c3be:	d5fc      	bpl.n	800c3ba <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c3c0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800c3c4:	68a3      	ldr	r3, [r4, #8]
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	f043 0302 	orr.w	r3, r3, #2
 800c3ce:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c3d0:	68a3      	ldr	r3, [r4, #8]
 800c3d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d6:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSE as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
	LL_RCC_SetAHBPrescaler(hclk_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE) {
 800c3de:	2b08      	cmp	r3, #8
 800c3e0:	d1fa      	bne.n	800c3d8 <stm32_clock_control_init+0x88>
	}

	/* Update SystemCoreClock variable */
	LL_SetSystemCoreClock(new_hclk_freq);
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f001 fdf6 	bl	800dfd4 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c3ee:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c3f0:	68a3      	ldr	r3, [r4, #8]
 800c3f2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800c3f6:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c3f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800c3fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c400:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c404:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
#ifdef CONFIG_SOC_SERIES_STM32WLX
	LL_RCC_SetAHB3Prescaler(s_ClkInitStruct.AHB3CLKDivider);
#endif /* CONFIG_SOC_SERIES_STM32WLX */

	/* If freq not increased, set flash latency after all clock setting */
	if (new_flash_freq <= old_flash_freq) {
 800c408:	42ae      	cmp	r6, r5
 800c40a:	f023 030f 	bic.w	r3, r3, #15
 800c40e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 800c412:	d302      	bcc.n	800c41a <stm32_clock_control_init+0xca>
		LL_SetFlashLatency(new_flash_freq);
 800c414:	4628      	mov	r0, r5
 800c416:	f001 fde3 	bl	800dfe0 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c41a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 800c41e:	2000      	movs	r0, #0
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c426:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	f022 0201 	bic.w	r2, r2, #1
 800c42e:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	bd70      	pop	{r4, r5, r6, pc}
 800c43a:	bf00      	nop
 800c43c:	0801669c 	.word	0x0801669c
 800c440:	01e84800 	.word	0x01e84800
 800c444:	08019544 	.word	0x08019544
 800c448:	08019585 	.word	0x08019585
 800c44c:	08016836 	.word	0x08016836
 800c450:	0801959f 	.word	0x0801959f

0800c454 <config_enable_default_clocks>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 800c458:	b082      	sub	sp, #8
 800c45a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800c45c:	491c      	ldr	r1, [pc, #112]	; (800c4d0 <config_enable_default_clocks+0x7c>)
 800c45e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800c462:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c466:	4a1b      	ldr	r2, [pc, #108]	; (800c4d4 <config_enable_default_clocks+0x80>)
 800c468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c46c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800c46e:	9b01      	ldr	r3, [sp, #4]
}
 800c470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c474:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800c478:	4288      	cmp	r0, r1
 800c47a:	d00a      	beq.n	800c492 <config_enable_default_clocks+0x3e>
		if (retry != HSEM_LOCK_WAIT_FOREVER) {
 800c47c:	1c58      	adds	r0, r3, #1
 800c47e:	d0f9      	beq.n	800c474 <config_enable_default_clocks+0x20>
			if (retry == 0) {
 800c480:	3b01      	subs	r3, #1
 800c482:	d1f7      	bne.n	800c474 <config_enable_default_clocks+0x20>
				k_panic();
 800c484:	4040      	eors	r0, r0
 800c486:	f380 8811 	msr	BASEPRI, r0
 800c48a:	f04f 0004 	mov.w	r0, #4
 800c48e:	df02      	svc	2
 800c490:	e7f0      	b.n	800c474 <config_enable_default_clocks+0x20>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <config_enable_default_clocks+0x84>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c49a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	05d1      	lsls	r1, r2, #23
 800c4a0:	d5fc      	bpl.n	800c49c <config_enable_default_clocks+0x48>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c4a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c4aa:	f042 0201 	orr.w	r2, r2, #1
 800c4ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c4b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c4b6:	0792      	lsls	r2, r2, #30
 800c4b8:	d5fb      	bpl.n	800c4b2 <config_enable_default_clocks+0x5e>
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4ba:	4a07      	ldr	r2, [pc, #28]	; (800c4d8 <config_enable_default_clocks+0x84>)
 800c4bc:	6813      	ldr	r3, [r2, #0]
 800c4be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c2:	6013      	str	r3, [r2, #0]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800c4c4:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <config_enable_default_clocks+0x80>)
 800c4c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4ca:	60da      	str	r2, [r3, #12]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 800c4cc:	b002      	add	sp, #8
 800c4ce:	4770      	bx	lr
 800c4d0:	80000400 	.word	0x80000400
 800c4d4:	58001400 	.word	0x58001400
 800c4d8:	58000400 	.word	0x58000400

0800c4dc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800c4dc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800c4de:	4b08      	ldr	r3, [pc, #32]	; (800c500 <uart_console_init+0x24>)
 800c4e0:	4808      	ldr	r0, [pc, #32]	; (800c504 <uart_console_init+0x28>)
 800c4e2:	6018      	str	r0, [r3, #0]
 800c4e4:	f008 ff1f 	bl	8015326 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800c4e8:	b138      	cbz	r0, 800c4fa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 800c4ea:	4807      	ldr	r0, [pc, #28]	; (800c508 <uart_console_init+0x2c>)
 800c4ec:	f7f8 f91e 	bl	800472c <__stdout_hook_install>
	__printk_hook_install(console_out);
 800c4f0:	4805      	ldr	r0, [pc, #20]	; (800c508 <uart_console_init+0x2c>)
 800c4f2:	f7f5 f8fb 	bl	80016ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800c4f6:	2000      	movs	r0, #0
}
 800c4f8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800c4fa:	f06f 0012 	mvn.w	r0, #18
 800c4fe:	e7fb      	b.n	800c4f8 <uart_console_init+0x1c>
 800c500:	2000179c 	.word	0x2000179c
 800c504:	0801587c 	.word	0x0801587c
 800c508:	0800c50d 	.word	0x0800c50d

0800c50c <console_out>:
	if ('\n' == c) {
 800c50c:	280a      	cmp	r0, #10
{
 800c50e:	b538      	push	{r3, r4, r5, lr}
 800c510:	4d07      	ldr	r5, [pc, #28]	; (800c530 <console_out+0x24>)
 800c512:	4604      	mov	r4, r0
	if ('\n' == c) {
 800c514:	d104      	bne.n	800c520 <console_out+0x14>
 800c516:	6828      	ldr	r0, [r5, #0]
 800c518:	6883      	ldr	r3, [r0, #8]
 800c51a:	210d      	movs	r1, #13
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800c520:	6828      	ldr	r0, [r5, #0]
 800c522:	6883      	ldr	r3, [r0, #8]
 800c524:	b2e1      	uxtb	r1, r4
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4798      	blx	r3
}
 800c52a:	4620      	mov	r0, r4
 800c52c:	bd38      	pop	{r3, r4, r5, pc}
 800c52e:	bf00      	nop
 800c530:	2000179c 	.word	0x2000179c

0800c534 <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800c534:	b570      	push	{r4, r5, r6, lr}
	struct gpio_stm32_data *data = dev->data;
 800c536:	6905      	ldr	r5, [r0, #16]
{
 800c538:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
 800c53a:	460c      	mov	r4, r1
 800c53c:	b961      	cbnz	r1, 800c558 <gpio_stm32_manage_callback+0x24>
 800c53e:	4922      	ldr	r1, [pc, #136]	; (800c5c8 <gpio_stm32_manage_callback+0x94>)
 800c540:	4a22      	ldr	r2, [pc, #136]	; (800c5cc <gpio_stm32_manage_callback+0x98>)
 800c542:	4823      	ldr	r0, [pc, #140]	; (800c5d0 <gpio_stm32_manage_callback+0x9c>)
 800c544:	2324      	movs	r3, #36	; 0x24
 800c546:	f005 feaf 	bl	80122a8 <assert_print>
 800c54a:	4822      	ldr	r0, [pc, #136]	; (800c5d4 <gpio_stm32_manage_callback+0xa0>)
 800c54c:	f005 feac 	bl	80122a8 <assert_print>
 800c550:	481e      	ldr	r0, [pc, #120]	; (800c5cc <gpio_stm32_manage_callback+0x98>)
 800c552:	2124      	movs	r1, #36	; 0x24
 800c554:	f005 fea1 	bl	801229a <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
 800c558:	6863      	ldr	r3, [r4, #4]
 800c55a:	b963      	cbnz	r3, 800c576 <gpio_stm32_manage_callback+0x42>
 800c55c:	491e      	ldr	r1, [pc, #120]	; (800c5d8 <gpio_stm32_manage_callback+0xa4>)
 800c55e:	4a1b      	ldr	r2, [pc, #108]	; (800c5cc <gpio_stm32_manage_callback+0x98>)
 800c560:	481b      	ldr	r0, [pc, #108]	; (800c5d0 <gpio_stm32_manage_callback+0x9c>)
 800c562:	2325      	movs	r3, #37	; 0x25
 800c564:	f005 fea0 	bl	80122a8 <assert_print>
 800c568:	481c      	ldr	r0, [pc, #112]	; (800c5dc <gpio_stm32_manage_callback+0xa8>)
 800c56a:	f005 fe9d 	bl	80122a8 <assert_print>
 800c56e:	4817      	ldr	r0, [pc, #92]	; (800c5cc <gpio_stm32_manage_callback+0x98>)
 800c570:	2125      	movs	r1, #37	; 0x25
 800c572:	f005 fe92 	bl	801229a <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
 800c576:	68ab      	ldr	r3, [r5, #8]

	if (!sys_slist_is_empty(callbacks)) {
 800c578:	b15b      	cbz	r3, 800c592 <gpio_stm32_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c57a:	2200      	movs	r2, #0
 800c57c:	429c      	cmp	r4, r3
 800c57e:	d113      	bne.n	800c5a8 <gpio_stm32_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	b95a      	cbnz	r2, 800c59c <gpio_stm32_manage_callback+0x68>
 800c584:	68ea      	ldr	r2, [r5, #12]
	list->head = node;
 800c586:	60ab      	str	r3, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
 800c588:	4294      	cmp	r4, r2
 800c58a:	d100      	bne.n	800c58e <gpio_stm32_manage_callback+0x5a>
	list->tail = node;
 800c58c:	60eb      	str	r3, [r5, #12]
	parent->next = child;
 800c58e:	2300      	movs	r3, #0
 800c590:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 800c592:	b976      	cbnz	r6, 800c5b2 <gpio_stm32_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 800c594:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	460b      	mov	r3, r1
 800c59a:	e7ef      	b.n	800c57c <gpio_stm32_manage_callback+0x48>
 800c59c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c59e:	68eb      	ldr	r3, [r5, #12]
 800c5a0:	429c      	cmp	r4, r3
	list->tail = node;
 800c5a2:	bf08      	it	eq
 800c5a4:	60ea      	streq	r2, [r5, #12]
}
 800c5a6:	e7f2      	b.n	800c58e <gpio_stm32_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800c5a8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	d1f3      	bne.n	800c598 <gpio_stm32_manage_callback+0x64>
			if (!set) {
 800c5b0:	b13e      	cbz	r6, 800c5c2 <gpio_stm32_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
 800c5b2:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
 800c5b4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800c5b6:	68e8      	ldr	r0, [r5, #12]
	list->head = node;
 800c5b8:	60ac      	str	r4, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d1ea      	bne.n	800c594 <gpio_stm32_manage_callback+0x60>
	list->tail = node;
 800c5be:	60ec      	str	r4, [r5, #12]
}
 800c5c0:	e7e9      	b.n	800c596 <gpio_stm32_manage_callback+0x62>
				return -EINVAL;
 800c5c2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 800c5c6:	e7e6      	b.n	800c596 <gpio_stm32_manage_callback+0x62>
 800c5c8:	08019600 	.word	0x08019600
 800c5cc:	080195d3 	.word	0x080195d3
 800c5d0:	08016836 	.word	0x08016836
 800c5d4:	08019609 	.word	0x08019609
 800c5d8:	08019618 	.word	0x08019618
 800c5dc:	0801962a 	.word	0x0801962a

0800c5e0 <gpio_stm32_isr>:
{
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c5e4:	688c      	ldr	r4, [r1, #8]
 800c5e6:	b36c      	cbz	r4, 800c644 <gpio_stm32_isr+0x64>
 800c5e8:	6825      	ldr	r5, [r4, #0]
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800c5ea:	f8d1 8004 	ldr.w	r8, [r1, #4]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
 800c5ee:	4f16      	ldr	r7, [pc, #88]	; (800c648 <gpio_stm32_isr+0x68>)
 800c5f0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800c650 <gpio_stm32_isr+0x70>
 800c5f4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800c654 <gpio_stm32_isr+0x74>
 800c5f8:	2601      	movs	r6, #1
 800c5fa:	2d00      	cmp	r5, #0
 800c5fc:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
 800c600:	bf38      	it	cc
 800c602:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	421e      	tst	r6, r3
 800c608:	d014      	beq.n	800c634 <gpio_stm32_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
 800c60a:	6863      	ldr	r3, [r4, #4]
 800c60c:	b963      	cbnz	r3, 800c628 <gpio_stm32_isr+0x48>
 800c60e:	4649      	mov	r1, r9
 800c610:	2345      	movs	r3, #69	; 0x45
 800c612:	463a      	mov	r2, r7
 800c614:	4650      	mov	r0, sl
 800c616:	f005 fe47 	bl	80122a8 <assert_print>
 800c61a:	480c      	ldr	r0, [pc, #48]	; (800c64c <gpio_stm32_isr+0x6c>)
 800c61c:	f005 fe44 	bl	80122a8 <assert_print>
 800c620:	2145      	movs	r1, #69	; 0x45
 800c622:	4638      	mov	r0, r7
 800c624:	f005 fe39 	bl	801229a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
 800c628:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800c62c:	4621      	mov	r1, r4
 800c62e:	4032      	ands	r2, r6
 800c630:	4640      	mov	r0, r8
 800c632:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c634:	b135      	cbz	r5, 800c644 <gpio_stm32_isr+0x64>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	bf38      	it	cc
 800c63c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800c63e:	462c      	mov	r4, r5
 800c640:	461d      	mov	r5, r3
 800c642:	e7df      	b.n	800c604 <gpio_stm32_isr+0x24>
}
 800c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c648:	080195d3 	.word	0x080195d3
 800c64c:	0801962a 	.word	0x0801962a
 800c650:	08019641 	.word	0x08019641
 800c654:	08016836 	.word	0x08016836

0800c658 <z_stm32_hsem_lock.constprop.0>:
static inline void z_stm32_hsem_lock(uint32_t  hsem, uint32_t retry)
 800c658:	b510      	push	{r4, lr}
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800c65a:	4a0a      	ldr	r2, [pc, #40]	; (800c684 <z_stm32_hsem_lock.constprop.0+0x2c>)
 800c65c:	490a      	ldr	r1, [pc, #40]	; (800c688 <z_stm32_hsem_lock.constprop.0+0x30>)
 800c65e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c662:	3020      	adds	r0, #32
 800c664:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 800c668:	428c      	cmp	r4, r1
 800c66a:	d00a      	beq.n	800c682 <z_stm32_hsem_lock.constprop.0+0x2a>
		if (retry != HSEM_LOCK_WAIT_FOREVER) {
 800c66c:	1c5c      	adds	r4, r3, #1
 800c66e:	d0f9      	beq.n	800c664 <z_stm32_hsem_lock.constprop.0+0xc>
			if (retry == 0) {
 800c670:	3b01      	subs	r3, #1
 800c672:	d1f7      	bne.n	800c664 <z_stm32_hsem_lock.constprop.0+0xc>
				k_panic();
 800c674:	4040      	eors	r0, r0
 800c676:	f380 8811 	msr	BASEPRI, r0
 800c67a:	f04f 0004 	mov.w	r0, #4
 800c67e:	df02      	svc	2
 800c680:	e7f0      	b.n	800c664 <z_stm32_hsem_lock.constprop.0+0xc>
}
 800c682:	bd10      	pop	{r4, pc}
 800c684:	58001400 	.word	0x58001400
 800c688:	80000400 	.word	0x80000400

0800c68c <gpio_stm32_port_toggle_bits>:
{
 800c68c:	b538      	push	{r3, r4, r5, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c68e:	6843      	ldr	r3, [r0, #4]
 800c690:	685d      	ldr	r5, [r3, #4]
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c692:	2008      	movs	r0, #8
{
 800c694:	460c      	mov	r4, r1
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c696:	f7ff ffdf 	bl	800c658 <z_stm32_hsem_lock.constprop.0>
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800c69a:	696b      	ldr	r3, [r5, #20]
 800c69c:	4063      	eors	r3, r4
 800c69e:	616b      	str	r3, [r5, #20]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800c6a0:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <gpio_stm32_port_toggle_bits+0x20>)
 800c6a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6a6:	621a      	str	r2, [r3, #32]
}
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	58001400 	.word	0x58001400

0800c6b0 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c6b0:	6843      	ldr	r3, [r0, #4]
{
 800c6b2:	b570      	push	{r4, r5, r6, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c6b4:	685e      	ldr	r6, [r3, #4]
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c6b6:	2008      	movs	r0, #8
{
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	4614      	mov	r4, r2
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c6bc:	f7ff ffcc 	bl	800c658 <z_stm32_hsem_lock.constprop.0>
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800c6c0:	6971      	ldr	r1, [r6, #20]
 800c6c2:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <gpio_stm32_port_set_masked_raw+0x28>)
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800c6c4:	404c      	eors	r4, r1
 800c6c6:	402c      	ands	r4, r5
 800c6c8:	404c      	eors	r4, r1
 800c6ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  WRITE_REG(GPIOx->ODR, PortValue);
 800c6ce:	6174      	str	r4, [r6, #20]
}
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	621a      	str	r2, [r3, #32]
 800c6d4:	bd70      	pop	{r4, r5, r6, pc}
 800c6d6:	bf00      	nop
 800c6d8:	58001400 	.word	0x58001400

0800c6dc <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800c6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c6e0:	6845      	ldr	r5, [r0, #4]
	pinval = 1 << pin;
 800c6e2:	2401      	movs	r4, #1
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c6e4:	2008      	movs	r0, #8
	pinval = 1 << pin;
 800c6e6:	408c      	lsls	r4, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	4689      	mov	r9, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800c6ec:	f002 0730 	and.w	r7, r2, #48	; 0x30
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800c6f0:	4698      	mov	r8, r3
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c6f2:	f7ff ffb1 	bl	800c658 <z_stm32_hsem_lock.constprop.0>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c6f6:	686a      	ldr	r2, [r5, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800c6f8:	f3c6 1380 	ubfx	r3, r6, #6, #1
 800c6fc:	ea22 0204 	bic.w	r2, r2, r4
 800c700:	fa03 f309 	lsl.w	r3, r3, r9
 800c704:	4313      	orrs	r3, r2
 800c706:	606b      	str	r3, [r5, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c708:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 800c70c:	fab2 f282 	clz	r2, r2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c710:	68a9      	ldr	r1, [r5, #8]
 800c712:	2003      	movs	r0, #3
 800c714:	0052      	lsls	r2, r2, #1
 800c716:	fa00 f202 	lsl.w	r2, r0, r2
 800c71a:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c71e:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 800c722:	fab2 f282 	clz	r2, r2
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800c726:	f3c6 13c1 	ubfx	r3, r6, #7, #2
 800c72a:	0052      	lsls	r2, r2, #1
 800c72c:	4093      	lsls	r3, r2
 800c72e:	430b      	orrs	r3, r1
 800c730:	60ab      	str	r3, [r5, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c732:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 800c736:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c73a:	68ea      	ldr	r2, [r5, #12]
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	fa00 f303 	lsl.w	r3, r0, r3
 800c742:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c746:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 800c74a:	fab2 f282 	clz	r2, r2
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800c74e:	f3c6 2641 	ubfx	r6, r6, #9, #2
 800c752:	0052      	lsls	r2, r2, #1
 800c754:	4096      	lsls	r6, r2
 800c756:	431e      	orrs	r6, r3
	if (mode == STM32_MODER_ALT_MODE) {
 800c758:	2f20      	cmp	r7, #32
 800c75a:	60ee      	str	r6, [r5, #12]
 800c75c:	d117      	bne.n	800c78e <gpio_stm32_configure_raw.isra.0+0xb2>
		if (pin < 8) {
 800c75e:	f1b9 0f07 	cmp.w	r9, #7
 800c762:	dc31      	bgt.n	800c7c8 <gpio_stm32_configure_raw.isra.0+0xec>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c764:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c768:	6a2b      	ldr	r3, [r5, #32]
  if (value == 0U)
 800c76a:	b35a      	cbz	r2, 800c7c4 <gpio_stm32_configure_raw.isra.0+0xe8>
  return __builtin_clz(value);
 800c76c:	fab2 f282 	clz	r2, r2
 800c770:	210f      	movs	r1, #15
 800c772:	0092      	lsls	r2, r2, #2
 800c774:	fa01 f202 	lsl.w	r2, r1, r2
 800c778:	ea23 0102 	bic.w	r1, r3, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c77c:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 800c780:	fab2 f282 	clz	r2, r2
 800c784:	0092      	lsls	r2, r2, #2
 800c786:	fa08 f302 	lsl.w	r3, r8, r2
 800c78a:	430b      	orrs	r3, r1
 800c78c:	622b      	str	r3, [r5, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c78e:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 800c792:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c796:	682a      	ldr	r2, [r5, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c798:	fa94 f4a4 	rbit	r4, r4
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	2103      	movs	r1, #3
  return __builtin_clz(value);
 800c7a0:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800c7a4:	093f      	lsrs	r7, r7, #4
 800c7a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c7aa:	0064      	lsls	r4, r4, #1
 800c7ac:	ea22 0303 	bic.w	r3, r2, r3
 800c7b0:	fa07 f404 	lsl.w	r4, r7, r4
 800c7b4:	431c      	orrs	r4, r3
 800c7b6:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <gpio_stm32_configure_raw.isra.0+0x120>)
 800c7b8:	602c      	str	r4, [r5, #0]
 800c7ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c7be:	621a      	str	r2, [r3, #32]
}
 800c7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 32U;
 800c7c4:	463a      	mov	r2, r7
 800c7c6:	e7d3      	b.n	800c770 <gpio_stm32_configure_raw.isra.0+0x94>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c7c8:	0a22      	lsrs	r2, r4, #8
 800c7ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7cc:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800c7d0:	b189      	cbz	r1, 800c7f6 <gpio_stm32_configure_raw.isra.0+0x11a>
  return __builtin_clz(value);
 800c7d2:	fab1 f181 	clz	r1, r1
 800c7d6:	0089      	lsls	r1, r1, #2
 800c7d8:	200f      	movs	r0, #15
 800c7da:	fa00 f101 	lsl.w	r1, r0, r1
 800c7de:	ea23 0101 	bic.w	r1, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7e2:	fa92 f3a2 	rbit	r3, r2
  return __builtin_clz(value);
 800c7e6:	fab3 f383 	clz	r3, r3
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	fa08 f303 	lsl.w	r3, r8, r3
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	626b      	str	r3, [r5, #36]	; 0x24
}
 800c7f4:	e7cb      	b.n	800c78e <gpio_stm32_configure_raw.isra.0+0xb2>
    return 32U;
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	e7ed      	b.n	800c7d6 <gpio_stm32_configure_raw.isra.0+0xfa>
 800c7fa:	bf00      	nop
 800c7fc:	58001400 	.word	0x58001400

0800c800 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800c800:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 800c802:	6903      	ldr	r3, [r0, #16]
 800c804:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800c806:	6845      	ldr	r5, [r0, #4]
 800c808:	350c      	adds	r5, #12
 800c80a:	4c08      	ldr	r4, [pc, #32]	; (800c82c <gpio_stm32_init+0x2c>)
 800c80c:	4620      	mov	r0, r4
 800c80e:	f008 fd8a 	bl	8015326 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800c812:	b138      	cbz	r0, 800c824 <gpio_stm32_init+0x24>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800c814:	68a3      	ldr	r3, [r4, #8]
 800c816:	4629      	mov	r1, r5
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4620      	mov	r0, r4
 800c81c:	4798      	blx	r3

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800c81e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 800c822:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800c824:	f06f 0012 	mvn.w	r0, #18
 800c828:	e7f9      	b.n	800c81e <gpio_stm32_init+0x1e>
 800c82a:	bf00      	nop
 800c82c:	080157a4 	.word	0x080157a4

0800c830 <gpio_stm32_pin_interrupt_configure>:
{
 800c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c834:	460c      	mov	r4, r1
 800c836:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800c838:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800c83c:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800c83e:	6902      	ldr	r2, [r0, #16]
{
 800c840:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800c842:	d127      	bne.n	800c894 <gpio_stm32_pin_interrupt_configure+0x64>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800c844:	f004 0203 	and.w	r2, r4, #3
 800c848:	3204      	adds	r2, #4
 800c84a:	0093      	lsls	r3, r2, #2
 800c84c:	220f      	movs	r2, #15
 800c84e:	409a      	lsls	r2, r3
 800c850:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTE
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 0x0000000FUL) );
 800c854:	f002 0303 	and.w	r3, r2, #3
 800c858:	3302      	adds	r3, #2
 800c85a:	4938      	ldr	r1, [pc, #224]	; (800c93c <gpio_stm32_pin_interrupt_configure+0x10c>)
 800c85c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c860:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c862:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800c866:	fab3 f383 	clz	r3, r3
 800c86a:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 800c86e:	f003 030f 	and.w	r3, r3, #15
 800c872:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d109      	bne.n	800c890 <gpio_stm32_pin_interrupt_configure+0x60>
			stm32_exti_disable(pin);
 800c87c:	4620      	mov	r0, r4
 800c87e:	f7ff fce7 	bl	800c250 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800c882:	4620      	mov	r0, r4
 800c884:	f7ff fd4a 	bl	800c31c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800c888:	2100      	movs	r1, #0
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7ff fcfa 	bl	800c284 <stm32_exti_trigger>
	int err = 0;
 800c890:	2500      	movs	r5, #0
 800c892:	e045      	b.n	800c920 <gpio_stm32_pin_interrupt_configure+0xf0>
	if (mode == GPIO_INT_MODE_LEVEL) {
 800c894:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800c898:	d049      	beq.n	800c92e <gpio_stm32_pin_interrupt_configure+0xfe>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800c89a:	4929      	ldr	r1, [pc, #164]	; (800c940 <gpio_stm32_pin_interrupt_configure+0x110>)
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7ff fd2b 	bl	800c2f8 <stm32_exti_set_callback>
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d145      	bne.n	800c934 <gpio_stm32_pin_interrupt_configure+0x104>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800c8a8:	f004 0803 	and.w	r8, r4, #3
 800c8ac:	f108 0804 	add.w	r8, r8, #4
 800c8b0:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800c8b4:	f04f 080f 	mov.w	r8, #15
 800c8b8:	fa08 f803 	lsl.w	r8, r8, r3
 800c8bc:	ea48 0894 	orr.w	r8, r8, r4, lsr #2
	z_stm32_hsem_lock(CFG_HW_EXTI_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c8c0:	2009      	movs	r0, #9
	gpio_stm32_enable_int(cfg->port, pin);
 800c8c2:	68bf      	ldr	r7, [r7, #8]
	z_stm32_hsem_lock(CFG_HW_EXTI_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800c8c4:	f7ff fec8 	bl	800c658 <z_stm32_hsem_lock.constprop.0>
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U), (Port << ((POSITION_VAL((Line >> 16U))) & 0x0000000FUL)));
 800c8c8:	f008 0203 	and.w	r2, r8, #3
 800c8cc:	0092      	lsls	r2, r2, #2
 800c8ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c8d2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c8d6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800c8da:	6893      	ldr	r3, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8dc:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800c8e0:	fab1 f181 	clz	r1, r1
 800c8e4:	f001 010f 	and.w	r1, r1, #15
 800c8e8:	ea23 4818 	bic.w	r8, r3, r8, lsr #16
 800c8ec:	fa07 f101 	lsl.w	r1, r7, r1
 800c8f0:	4b14      	ldr	r3, [pc, #80]	; (800c944 <gpio_stm32_pin_interrupt_configure+0x114>)
 800c8f2:	ea41 0108 	orr.w	r1, r1, r8
 800c8f6:	6091      	str	r1, [r2, #8]
	switch (trig) {
 800c8f8:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 800c8fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c900:	625a      	str	r2, [r3, #36]	; 0x24
 800c902:	d010      	beq.n	800c926 <gpio_stm32_pin_interrupt_configure+0xf6>
 800c904:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800c908:	d00f      	beq.n	800c92a <gpio_stm32_pin_interrupt_configure+0xfa>
 800c90a:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800c90e:	bf14      	ite	ne
 800c910:	2100      	movne	r1, #0
 800c912:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800c914:	4620      	mov	r0, r4
 800c916:	f7ff fcb5 	bl	800c284 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800c91a:	4620      	mov	r0, r4
 800c91c:	f7ff fc88 	bl	800c230 <stm32_exti_enable>
}
 800c920:	4628      	mov	r0, r5
 800c922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800c926:	2101      	movs	r1, #1
 800c928:	e7f4      	b.n	800c914 <gpio_stm32_pin_interrupt_configure+0xe4>
		edge = STM32_EXTI_TRIG_BOTH;
 800c92a:	2103      	movs	r1, #3
 800c92c:	e7f2      	b.n	800c914 <gpio_stm32_pin_interrupt_configure+0xe4>
		err = -ENOTSUP;
 800c92e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800c932:	e7f5      	b.n	800c920 <gpio_stm32_pin_interrupt_configure+0xf0>
		err = -EBUSY;
 800c934:	f06f 050f 	mvn.w	r5, #15
	return err;
 800c938:	e7f2      	b.n	800c920 <gpio_stm32_pin_interrupt_configure+0xf0>
 800c93a:	bf00      	nop
 800c93c:	40010000 	.word	0x40010000
 800c940:	0800c5e1 	.word	0x0800c5e1
 800c944:	58001400 	.word	0x58001400

0800c948 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
 800c94c:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800c94e:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
 800c950:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800c952:	2501      	movs	r5, #1
 800c954:	409d      	lsls	r5, r3
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	421d      	tst	r5, r3
{
 800c95c:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800c95e:	d10e      	bne.n	800c97e <gpio_pin_set_dt+0x36>
 800c960:	4918      	ldr	r1, [pc, #96]	; (800c9c4 <gpio_pin_set_dt+0x7c>)
 800c962:	4a19      	ldr	r2, [pc, #100]	; (800c9c8 <gpio_pin_set_dt+0x80>)
 800c964:	4819      	ldr	r0, [pc, #100]	; (800c9cc <gpio_pin_set_dt+0x84>)
 800c966:	f240 4392 	movw	r3, #1170	; 0x492
 800c96a:	f005 fc9d 	bl	80122a8 <assert_print>
 800c96e:	4818      	ldr	r0, [pc, #96]	; (800c9d0 <gpio_pin_set_dt+0x88>)
 800c970:	f005 fc9a 	bl	80122a8 <assert_print>
 800c974:	4814      	ldr	r0, [pc, #80]	; (800c9c8 <gpio_pin_set_dt+0x80>)
 800c976:	f240 4192 	movw	r1, #1170	; 0x492
 800c97a:	f005 fc8e 	bl	801229a <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800c982:	6863      	ldr	r3, [r4, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	bf18      	it	ne
 800c988:	f086 0601 	eorne.w	r6, r6, #1
 800c98c:	421d      	tst	r5, r3
 800c98e:	d10e      	bne.n	800c9ae <gpio_pin_set_dt+0x66>
 800c990:	490c      	ldr	r1, [pc, #48]	; (800c9c4 <gpio_pin_set_dt+0x7c>)
 800c992:	4a0d      	ldr	r2, [pc, #52]	; (800c9c8 <gpio_pin_set_dt+0x80>)
 800c994:	480d      	ldr	r0, [pc, #52]	; (800c9cc <gpio_pin_set_dt+0x84>)
 800c996:	f44f 638d 	mov.w	r3, #1128	; 0x468
 800c99a:	f005 fc85 	bl	80122a8 <assert_print>
 800c99e:	480c      	ldr	r0, [pc, #48]	; (800c9d0 <gpio_pin_set_dt+0x88>)
 800c9a0:	f005 fc82 	bl	80122a8 <assert_print>
 800c9a4:	4808      	ldr	r0, [pc, #32]	; (800c9c8 <gpio_pin_set_dt+0x80>)
 800c9a6:	f44f 618d 	mov.w	r1, #1128	; 0x468
 800c9aa:	f005 fc76 	bl	801229a <assert_post_action>
	if (value != 0)	{
 800c9ae:	b136      	cbz	r6, 800c9be <gpio_pin_set_dt+0x76>
	return api->port_set_bits_raw(port, pins);
 800c9b0:	68a3      	ldr	r3, [r4, #8]
 800c9b2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4620      	mov	r0, r4
}
 800c9b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
 800c9bc:	4718      	bx	r3
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	e7f7      	b.n	800c9b4 <gpio_pin_set_dt+0x6c>
 800c9c4:	08016a95 	.word	0x08016a95
 800c9c8:	080167af 	.word	0x080167af
 800c9cc:	08016836 	.word	0x08016836
 800c9d0:	08016ad3 	.word	0x08016ad3

0800c9d4 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 800c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d8:	b08d      	sub	sp, #52	; 0x34
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800c9da:	f8d0 9010 	ldr.w	r9, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800c9de:	6845      	ldr	r5, [r0, #4]
{
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4c69      	ldr	r4, [pc, #420]	; (800cb88 <spi_stm32_init+0x1b4>)
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f008 fc9e 	bl	8015326 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800c9ea:	b990      	cbnz	r0, 800ca12 <spi_stm32_init+0x3e>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 800c9ec:	4b67      	ldr	r3, [pc, #412]	; (800cb8c <spi_stm32_init+0x1b8>)
 800c9ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f4:	4866      	ldr	r0, [pc, #408]	; (800cb90 <spi_stm32_init+0x1bc>)
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c9fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800ca00:	f06f 0504 	mvn.w	r5, #4
 800ca04:	f7f6 faaa 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 800ca08:	4628      	mov	r0, r5
 800ca0a:	3734      	adds	r7, #52	; 0x34
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->on(dev, sys);
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	4620      	mov	r0, r4
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d1e4      	bne.n	800c9ec <spi_stm32_init+0x18>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800ca22:	4601      	mov	r1, r0
 800ca24:	f107 0218 	add.w	r2, r7, #24
 800ca28:	68e8      	ldr	r0, [r5, #12]
 800ca2a:	f008 fc63 	bl	80152f4 <pinctrl_lookup_state>
	if (ret < 0) {
 800ca2e:	1e05      	subs	r5, r0, #0
 800ca30:	db07      	blt.n	800ca42 <spi_stm32_init+0x6e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800ca32:	69bb      	ldr	r3, [r7, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800ca34:	4622      	mov	r2, r4
 800ca36:	7919      	ldrb	r1, [r3, #4]
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f001 fa05 	bl	800de48 <pinctrl_configure_pins>
		if (err < 0) {
 800ca3e:	1e05      	subs	r5, r0, #0
 800ca40:	da0d      	bge.n	800ca5e <spi_stm32_init+0x8a>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800ca42:	4b54      	ldr	r3, [pc, #336]	; (800cb94 <spi_stm32_init+0x1c0>)
 800ca44:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
 800ca48:	2303      	movs	r3, #3
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4c:	4850      	ldr	r0, [pc, #320]	; (800cb90 <spi_stm32_init+0x1bc>)
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ca54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ca58:	f7f6 fa80 	bl	8002f5c <z_impl_z_log_msg2_static_create>
			return err;
 800ca5c:	e7d4      	b.n	800ca08 <spi_stm32_init+0x34>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800ca5e:	f8d9 4008 	ldr.w	r4, [r9, #8]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 800ca62:	4e4d      	ldr	r6, [pc, #308]	; (800cb98 <spi_stm32_init+0x1c4>)
 800ca64:	f8df b150 	ldr.w	fp, [pc, #336]	; 800cbb8 <spi_stm32_init+0x1e4>
 800ca68:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 800ca6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca70:	429c      	cmp	r4, r3
 800ca72:	d304      	bcc.n	800ca7e <spi_stm32_init+0xaa>
	spi_context_unlock_unconditionally(&data->ctx);
 800ca74:	4648      	mov	r0, r9
 800ca76:	f008 fb88 	bl	801518a <spi_context_unlock_unconditionally>
	return 0;
 800ca7a:	2500      	movs	r5, #0
 800ca7c:	e7c4      	b.n	800ca08 <spi_stm32_init+0x34>
		if (!device_is_ready(cs_gpio->port)) {
 800ca7e:	6820      	ldr	r0, [r4, #0]
 800ca80:	f008 fc51 	bl	8015326 <z_device_is_ready>
 800ca84:	4603      	mov	r3, r0
 800ca86:	b9b8      	cbnz	r0, 800cab8 <spi_stm32_init+0xe4>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800ca88:	6822      	ldr	r2, [r4, #0]
 800ca8a:	7921      	ldrb	r1, [r4, #4]
 800ca8c:	6810      	ldr	r0, [r2, #0]
 800ca8e:	4d43      	ldr	r5, [pc, #268]	; (800cb9c <spi_stm32_init+0x1c8>)
 800ca90:	466c      	mov	r4, sp
 800ca92:	b088      	sub	sp, #32
 800ca94:	466a      	mov	r2, sp
 800ca96:	e9c2 5004 	strd	r5, r0, [r2, #16]
 800ca9a:	6191      	str	r1, [r2, #24]
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	7711      	strb	r1, [r2, #28]
 800caa0:	493f      	ldr	r1, [pc, #252]	; (800cba0 <spi_stm32_init+0x1cc>)
 800caa2:	f842 1f0c 	str.w	r1, [r2, #12]!
 800caa6:	483a      	ldr	r0, [pc, #232]	; (800cb90 <spi_stm32_init+0x1bc>)
 800caa8:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800caac:	f7f6 fa56 	bl	8002f5c <z_impl_z_log_msg2_static_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 800cab0:	f06f 0512 	mvn.w	r5, #18
 800cab4:	46a5      	mov	sp, r4
	if (err < 0) {
 800cab6:	e7a7      	b.n	800ca08 <spi_stm32_init+0x34>
	return gpio_pin_configure(spec->port,
 800cab8:	7923      	ldrb	r3, [r4, #4]
 800caba:	f8d4 a000 	ldr.w	sl, [r4]
				  spec->dt_flags | extra_flags);
 800cabe:	88e5      	ldrh	r5, [r4, #6]
	return gpio_pin_configure(spec->port,
 800cac0:	617b      	str	r3, [r7, #20]
	const struct gpio_driver_api *api =
 800cac2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cac6:	60fb      	str	r3, [r7, #12]
	const struct gpio_driver_config *const cfg =
 800cac8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cacc:	60bb      	str	r3, [r7, #8]
	struct gpio_driver_data *data =
 800cace:	f8da 3010 	ldr.w	r3, [sl, #16]
 800cad2:	613b      	str	r3, [r7, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
 800cad4:	f005 0330 	and.w	r3, r5, #48	; 0x30
 800cad8:	2b30      	cmp	r3, #48	; 0x30
 800cada:	d10e      	bne.n	800cafa <spi_stm32_init+0x126>
 800cadc:	4931      	ldr	r1, [pc, #196]	; (800cba4 <spi_stm32_init+0x1d0>)
 800cade:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 800cae2:	4632      	mov	r2, r6
 800cae4:	4658      	mov	r0, fp
 800cae6:	f005 fbdf 	bl	80122a8 <assert_print>
 800caea:	482f      	ldr	r0, [pc, #188]	; (800cba8 <spi_stm32_init+0x1d4>)
 800caec:	f005 fbdc 	bl	80122a8 <assert_print>
 800caf0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800caf4:	4630      	mov	r0, r6
 800caf6:	f005 fbd0 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
 800cafa:	f005 0306 	and.w	r3, r5, #6
 800cafe:	2b04      	cmp	r3, #4
 800cb00:	d10b      	bne.n	800cb1a <spi_stm32_init+0x146>
 800cb02:	492a      	ldr	r1, [pc, #168]	; (800cbac <spi_stm32_init+0x1d8>)
 800cb04:	4658      	mov	r0, fp
 800cb06:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800cb0a:	4632      	mov	r2, r6
 800cb0c:	f005 fbcc 	bl	80122a8 <assert_print>
 800cb10:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800cb14:	4630      	mov	r0, r6
 800cb16:	f005 fbc0 	bl	801229a <assert_post_action>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800cb1a:	07e9      	lsls	r1, r5, #31
	return gpio_pin_configure(spec->port,
 800cb1c:	bf54      	ite	pl
 800cb1e:	f445 15b0 	orrpl.w	r5, r5, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800cb22:	f485 15d0 	eormi.w	r5, r5, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800cb26:	f425 1380 	bic.w	r3, r5, #1048576	; 0x100000
 800cb2a:	607b      	str	r3, [r7, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f04f 0801 	mov.w	r8, #1
 800cb32:	fa08 f803 	lsl.w	r8, r8, r3
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	ea18 0f03 	tst.w	r8, r3
 800cb3e:	d10e      	bne.n	800cb5e <spi_stm32_init+0x18a>
 800cb40:	491b      	ldr	r1, [pc, #108]	; (800cbb0 <spi_stm32_init+0x1dc>)
 800cb42:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 800cb46:	4632      	mov	r2, r6
 800cb48:	4658      	mov	r0, fp
 800cb4a:	f005 fbad 	bl	80122a8 <assert_print>
 800cb4e:	4819      	ldr	r0, [pc, #100]	; (800cbb4 <spi_stm32_init+0x1e0>)
 800cb50:	f005 fbaa 	bl	80122a8 <assert_print>
 800cb54:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f005 fb9e 	bl	801229a <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800cb5e:	693b      	ldr	r3, [r7, #16]
	return api->pin_configure(port, pin, flags);
 800cb60:	6979      	ldr	r1, [r7, #20]
 800cb62:	681b      	ldr	r3, [r3, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800cb64:	07ea      	lsls	r2, r5, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	bf4c      	ite	mi
 800cb6a:	ea48 0303 	orrmi.w	r3, r8, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800cb6e:	ea23 0308 	bicpl.w	r3, r3, r8
 800cb72:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 800cb7e:	1e05      	subs	r5, r0, #0
 800cb80:	f6ff af42 	blt.w	800ca08 <spi_stm32_init+0x34>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800cb84:	3408      	adds	r4, #8
 800cb86:	e76f      	b.n	800ca68 <spi_stm32_init+0x94>
 800cb88:	080157a4 	.word	0x080157a4
 800cb8c:	0801966b 	.word	0x0801966b
 800cb90:	08015bbc 	.word	0x08015bbc
 800cb94:	08019686 	.word	0x08019686
 800cb98:	080167af 	.word	0x080167af
 800cb9c:	080196a4 	.word	0x080196a4
 800cba0:	01000004 	.word	0x01000004
 800cba4:	08016877 	.word	0x08016877
 800cba8:	080168b0 	.word	0x080168b0
 800cbac:	08016974 	.word	0x08016974
 800cbb0:	08016a95 	.word	0x08016a95
 800cbb4:	08016ad3 	.word	0x08016ad3
 800cbb8:	08016836 	.word	0x08016836

0800cbbc <spi_stm32_transceive>:
{
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	b095      	sub	sp, #84	; 0x54
 800cbc2:	461e      	mov	r6, r3
 800cbc4:	af00      	add	r7, sp, #0
	SPI_TypeDef *spi = cfg->spi;
 800cbc6:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800cbc8:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800cbca:	f8d3 b008 	ldr.w	fp, [r3, #8]
{
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	b90a      	cbnz	r2, 800cbda <spi_stm32_transceive+0x1e>
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d055      	beq.n	800cc86 <spi_stm32_transceive+0xca>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800cbda:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800cbde:	049d      	lsls	r5, r3, #18
 800cbe0:	d456      	bmi.n	800cc90 <spi_stm32_transceive+0xd4>
	return z_impl_k_sem_take(sem, timeout);
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbea:	f104 0010 	add.w	r0, r4, #16
 800cbee:	f002 f971 	bl	800eed4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800cbf2:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_stm32_config *cfg = dev->config;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
	const uint32_t scaler[] = {
 800cbf8:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 800cea8 <spi_stm32_transceive+0x2ec>
	const struct spi_stm32_config *cfg = dev->config;
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	60bb      	str	r3, [r7, #8]
	struct spi_stm32_data *data = dev->data;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	607b      	str	r3, [r7, #4]
	const uint32_t scaler[] = {
 800cc06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc0a:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800cc0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc10:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800cc14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4598      	cmp	r8, r3
 800cc1e:	f000 80b2 	beq.w	800cd86 <spi_stm32_transceive+0x1ca>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800cc22:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800cc26:	f3c3 1245 	ubfx	r2, r3, #5, #6
 800cc2a:	2a08      	cmp	r2, #8
 800cc2c:	d002      	beq.n	800cc34 <spi_stm32_transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800cc2e:	2a10      	cmp	r2, #16
 800cc30:	f040 811e 	bne.w	800ce70 <spi_stm32_transceive+0x2b4>
	SPI_TypeDef *spi = cfg->spi;
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	6895      	ldr	r5, [r2, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800cc38:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800cc3c:	686b      	ldr	r3, [r5, #4]
 800cc3e:	bf14      	ite	ne
 800cc40:	f043 0310 	orrne.w	r3, r3, #16
 800cc44:	f023 0310 	biceq.w	r3, r3, #16
 800cc48:	606b      	str	r3, [r5, #4]
 800cc4a:	f8df a260 	ldr.w	sl, [pc, #608]	; 800ceac <spi_stm32_transceive+0x2f0>
 800cc4e:	4650      	mov	r0, sl
 800cc50:	f008 fb69 	bl	8015326 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800cc54:	bb18      	cbnz	r0, 800cc9e <spi_stm32_transceive+0xe2>
		LOG_ERR("Failed call clock_control_get_rate");
 800cc56:	4b91      	ldr	r3, [pc, #580]	; (800ce9c <spi_stm32_transceive+0x2e0>)
 800cc58:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc5e:	4890      	ldr	r0, [pc, #576]	; (800cea0 <spi_stm32_transceive+0x2e4>)
 800cc60:	2300      	movs	r3, #0
 800cc62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cc66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800cc6a:	f06f 0604 	mvn.w	r6, #4
 800cc6e:	f7f6 f975 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	889b      	ldrh	r3, [r3, #4]
 800cc76:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800cc7a:	d104      	bne.n	800cc86 <spi_stm32_transceive+0xca>
		ctx->owner = NULL;
 800cc7c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800cc7e:	f104 0010 	add.w	r0, r4, #16
 800cc82:	f002 f8e3 	bl	800ee4c <z_impl_k_sem_give>
}
 800cc86:	4630      	mov	r0, r6
 800cc88:	3754      	adds	r7, #84	; 0x54
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800cc90:	69a3      	ldr	r3, [r4, #24]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1a5      	bne.n	800cbe2 <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 800cc96:	6863      	ldr	r3, [r4, #4]
 800cc98:	4598      	cmp	r8, r3
 800cc9a:	d1a2      	bne.n	800cbe2 <spi_stm32_transceive+0x26>
 800cc9c:	e7ab      	b.n	800cbf6 <spi_stm32_transceive+0x3a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800cc9e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0d6      	beq.n	800cc56 <spi_stm32_transceive+0x9a>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800cca8:	68b9      	ldr	r1, [r7, #8]
 800ccaa:	f107 0214 	add.w	r2, r7, #20
 800ccae:	4650      	mov	r0, sl
 800ccb0:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	dbcf      	blt.n	800cc56 <spi_stm32_transceive+0x9a>
		uint32_t clk = clock >> br;
 800ccb6:	6979      	ldr	r1, [r7, #20]
		if (clk <= config->frequency) {
 800ccb8:	f8d8 0000 	ldr.w	r0, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800ccbc:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800ccbe:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 800ccc2:	4282      	cmp	r2, r0
 800ccc4:	f240 8205 	bls.w	800d0d2 <spi_stm32_transceive+0x516>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800ccc8:	3301      	adds	r3, #1
 800ccca:	2b09      	cmp	r3, #9
 800cccc:	d1f7      	bne.n	800ccbe <spi_stm32_transceive+0x102>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800ccce:	4b75      	ldr	r3, [pc, #468]	; (800cea4 <spi_stm32_transceive+0x2e8>)
 800ccd0:	466d      	mov	r5, sp
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	466a      	mov	r2, sp
 800ccd6:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800ccda:	084b      	lsrs	r3, r1, #1
 800ccdc:	6193      	str	r3, [r2, #24]
 800ccde:	0a09      	lsrs	r1, r1, #8
 800cce0:	2305      	movs	r3, #5
 800cce2:	61d1      	str	r1, [r2, #28]
 800cce4:	f842 3f0c 	str.w	r3, [r2, #12]!
 800cce8:	486d      	ldr	r0, [pc, #436]	; (800cea0 <spi_stm32_transceive+0x2e4>)
 800ccea:	2300      	movs	r3, #0
 800ccec:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800ccf0:	f7f6 f934 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800ccf4:	f06f 0615 	mvn.w	r6, #21
 800ccf8:	46ad      	mov	sp, r5
	if (ret) {
 800ccfa:	e7ba      	b.n	800cc72 <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800ccfc:	682a      	ldr	r2, [r5, #0]
 800ccfe:	f042 0202 	orr.w	r2, r2, #2
 800cd02:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800cd04:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800cd06:	0758      	lsls	r0, r3, #29
 800cd08:	bf4c      	ite	mi
 800cd0a:	f042 0201 	orrmi.w	r2, r2, #1
 800cd0e:	f022 0201 	bicpl.w	r2, r2, #1
 800cd12:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800cd14:	682a      	ldr	r2, [r5, #0]
 800cd16:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800cd1a:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800cd1c:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800cd1e:	06d9      	lsls	r1, r3, #27
 800cd20:	bf4c      	ite	mi
 800cd22:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800cd26:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800cd2a:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800cd2c:	682a      	ldr	r2, [r5, #0]
 800cd2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd32:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800cd34:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800cd38:	f003 0101 	and.w	r1, r3, #1
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	f000 8086 	beq.w	800ce4e <spi_stm32_transceive+0x292>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800cd42:	682a      	ldr	r2, [r5, #0]
 800cd44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd48:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800cd4a:	686a      	ldr	r2, [r5, #4]
 800cd4c:	f022 0204 	bic.w	r2, r2, #4
 800cd50:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800cd52:	2900      	cmp	r1, #0
 800cd54:	f000 8088 	beq.w	800ce68 <spi_stm32_transceive+0x2ac>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800cd58:	682a      	ldr	r2, [r5, #0]
 800cd5a:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 800cd5e:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800cd60:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800cd64:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800cd66:	686b      	ldr	r3, [r5, #4]
 800cd68:	bf06      	itte	eq
 800cd6a:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 800cd6e:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 800cd72:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 800cd76:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800cd78:	686b      	ldr	r3, [r5, #4]
 800cd7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd7e:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8c3 8000 	str.w	r8, [r3]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800cd86:	f1b9 0f00 	cmp.w	r9, #0
 800cd8a:	d174      	bne.n	800ce76 <spi_stm32_transceive+0x2ba>
 800cd8c:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800cd90:	464a      	mov	r2, r9
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800cd92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd96:	60bb      	str	r3, [r7, #8]
 800cd98:	f104 0548 	add.w	r5, r4, #72	; 0x48
 800cd9c:	f104 0858 	add.w	r8, r4, #88	; 0x58
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800cda0:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800cda2:	68b8      	ldr	r0, [r7, #8]
 800cda4:	2301      	movs	r3, #1
 800cda6:	4642      	mov	r2, r8
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f008 f9b8 	bl	801511e <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800cdae:	6560      	str	r0, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	d168      	bne.n	800ce86 <spi_stm32_transceive+0x2ca>
 800cdb4:	64e6      	str	r6, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800cdb6:	6526      	str	r6, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800cdb8:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 800cdbc:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 800cdc0:	f104 0660 	add.w	r6, r4, #96	; 0x60
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	4651      	mov	r1, sl
 800cdca:	4648      	mov	r0, r9
 800cdcc:	f008 f9a7 	bl	801511e <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800cdd0:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 800cdd2:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 800cdd4:	6423      	str	r3, [r4, #64]	; 0x40
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800cdd6:	f8db 2008 	ldr.w	r2, [fp, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800cdda:	f012 0201 	ands.w	r2, r2, #1
 800cdde:	d159      	bne.n	800ce94 <spi_stm32_transceive+0x2d8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800cde0:	f8db 3000 	ldr.w	r3, [fp]
 800cde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde8:	f8cb 3000 	str.w	r3, [fp]
	_spi_context_cs_control(ctx, on, false);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2101      	movs	r1, #1
 800cdf0:	6918      	ldr	r0, [r3, #16]
 800cdf2:	f008 f9a8 	bl	8015146 <_spi_context_cs_control.isra.0>
	uint16_t operation = data->ctx.config->operation;
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800cdfa:	f013 0101 	ands.w	r1, r3, #1
 800cdfe:	f040 80d6 	bne.w	800cfae <spi_stm32_transceive+0x3f2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800ce02:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ce06:	0792      	lsls	r2, r2, #30
 800ce08:	d5fb      	bpl.n	800ce02 <spi_stm32_transceive+0x246>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ce0a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ce0e:	2b08      	cmp	r3, #8
 800ce10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ce12:	f040 80a0 	bne.w	800cf56 <spi_stm32_transceive+0x39a>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800ce16:	b112      	cbz	r2, 800ce1e <spi_stm32_transceive+0x262>
 800ce18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce1a:	b103      	cbz	r3, 800ce1e <spi_stm32_transceive+0x262>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ce1c:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800ce1e:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800ce20:	f88b 100c 	strb.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800ce24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d046      	beq.n	800ceb8 <spi_stm32_transceive+0x2fc>
	ctx->tx_len -= len;
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d13e      	bne.n	800ceb0 <spi_stm32_transceive+0x2f4>
		++ctx->current_tx;
 800ce32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce34:	3308      	adds	r3, #8
 800ce36:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800ce38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ce3e:	2301      	movs	r3, #1
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	4642      	mov	r2, r8
 800ce44:	4629      	mov	r1, r5
 800ce46:	f008 f96a 	bl	801511e <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800ce4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce4c:	e034      	b.n	800ceb8 <spi_stm32_transceive+0x2fc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800ce4e:	682a      	ldr	r2, [r5, #0]
 800ce50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800ce54:	2900      	cmp	r1, #0
 800ce56:	f47f af77 	bne.w	800cd48 <spi_stm32_transceive+0x18c>
 800ce5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ce5e:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800ce60:	686a      	ldr	r2, [r5, #4]
 800ce62:	f042 0204 	orr.w	r2, r2, #4
 800ce66:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800ce68:	682a      	ldr	r2, [r5, #0]
 800ce6a:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800ce6e:	e776      	b.n	800cd5e <spi_stm32_transceive+0x1a2>
		return -ENOTSUP;
 800ce70:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800ce74:	e6fd      	b.n	800cc72 <spi_stm32_transceive+0xb6>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800ce76:	f8d9 2000 	ldr.w	r2, [r9]
 800ce7a:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	d088      	beq.n	800cd92 <spi_stm32_transceive+0x1d6>
 800ce80:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ce84:	e785      	b.n	800cd92 <spi_stm32_transceive+0x1d6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800ce86:	6833      	ldr	r3, [r6, #0]
 800ce88:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800ce8a:	b10b      	cbz	r3, 800ce90 <spi_stm32_transceive+0x2d4>
 800ce8c:	6876      	ldr	r6, [r6, #4]
 800ce8e:	e792      	b.n	800cdb6 <spi_stm32_transceive+0x1fa>
 800ce90:	461e      	mov	r6, r3
 800ce92:	e790      	b.n	800cdb6 <spi_stm32_transceive+0x1fa>
  return (*((__IO uint8_t *)&SPIx->DR));
 800ce94:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800ce98:	e79d      	b.n	800cdd6 <spi_stm32_transceive+0x21a>
 800ce9a:	bf00      	nop
 800ce9c:	080196c8 	.word	0x080196c8
 800cea0:	08015bbc 	.word	0x08015bbc
 800cea4:	080196f6 	.word	0x080196f6
 800cea8:	08015c84 	.word	0x08015c84
 800ceac:	080157a4 	.word	0x080157a4
	} else if (ctx->tx_buf) {
 800ceb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ceb2:	b10b      	cbz	r3, 800ceb8 <spi_stm32_transceive+0x2fc>
		ctx->tx_buf += dfs * len;
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ceb8:	f8db 3008 	ldr.w	r3, [fp, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800cebc:	07db      	lsls	r3, r3, #31
 800cebe:	d5fb      	bpl.n	800ceb8 <spi_stm32_transceive+0x2fc>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800cec0:	6822      	ldr	r2, [r4, #0]
 800cec2:	8892      	ldrh	r2, [r2, #4]
 800cec4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800cec8:	2a08      	cmp	r2, #8
 800ceca:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 800cece:	d15a      	bne.n	800cf86 <spi_stm32_transceive+0x3ca>
  return (*((__IO uint8_t *)&SPIx->DR));
 800ced0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800ced4:	b2d2      	uxtb	r2, r2
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800ced6:	b10b      	cbz	r3, 800cedc <spi_stm32_transceive+0x320>
 800ced8:	b101      	cbz	r1, 800cedc <spi_stm32_transceive+0x320>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800ceda:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800cedc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800cede:	b18b      	cbz	r3, 800cf04 <spi_stm32_transceive+0x348>
	ctx->rx_len -= len;
 800cee0:	3b01      	subs	r3, #1
 800cee2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f040 80b5 	bne.w	800d054 <spi_stm32_transceive+0x498>
		++ctx->current_rx;
 800ceea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ceec:	3308      	adds	r3, #8
 800ceee:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800cef0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cef2:	3b01      	subs	r3, #1
 800cef4:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800cef6:	2301      	movs	r3, #1
 800cef8:	4632      	mov	r2, r6
 800cefa:	4651      	mov	r1, sl
 800cefc:	4648      	mov	r0, r9
 800cefe:	f008 f90e 	bl	801511e <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800cf02:	65e0      	str	r0, [r4, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800cf04:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800cf08:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 800cf0c:	f000 80b2 	beq.w	800d074 <spi_stm32_transceive+0x4b8>
		LOG_ERR("%s: err=%d", __func__,
 800cf10:	466d      	mov	r5, sp
 800cf12:	b088      	sub	sp, #32
 800cf14:	466a      	mov	r2, sp
 800cf16:	497b      	ldr	r1, [pc, #492]	; (800d104 <spi_stm32_transceive+0x548>)
 800cf18:	6111      	str	r1, [r2, #16]
 800cf1a:	497b      	ldr	r1, [pc, #492]	; (800d108 <spi_stm32_transceive+0x54c>)
 800cf1c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800cf20:	2302      	movs	r3, #2
 800cf22:	7713      	strb	r3, [r2, #28]
 800cf24:	4b79      	ldr	r3, [pc, #484]	; (800d10c <spi_stm32_transceive+0x550>)
 800cf26:	f842 3f0c 	str.w	r3, [r2, #12]!
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	4878      	ldr	r0, [pc, #480]	; (800d110 <spi_stm32_transceive+0x554>)
 800cf2e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800cf32:	f7f6 f813 	bl	8002f5c <z_impl_z_log_msg2_static_create>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800cf36:	f8db 3008 	ldr.w	r3, [fp, #8]
 800cf3a:	065a      	lsls	r2, r3, #25
 800cf3c:	46ad      	mov	sp, r5
 800cf3e:	d507      	bpl.n	800cf50 <spi_stm32_transceive+0x394>
  tmpreg = SPIx->DR;
 800cf40:	f8db 300c 	ldr.w	r3, [fp, #12]
 800cf44:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800cf46:	69bb      	ldr	r3, [r7, #24]
  tmpreg = SPIx->SR;
 800cf48:	f8db 3008 	ldr.w	r3, [fp, #8]
 800cf4c:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
		return -EIO;
 800cf50:	f06f 0604 	mvn.w	r6, #4
 800cf54:	e097      	b.n	800d086 <spi_stm32_transceive+0x4ca>
	return !!(ctx->tx_buf && ctx->tx_len);
 800cf56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf58:	b10a      	cbz	r2, 800cf5e <spi_stm32_transceive+0x3a2>
 800cf5a:	b103      	cbz	r3, 800cf5e <spi_stm32_transceive+0x3a2>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800cf5c:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800cf5e:	f8ab 100c 	strh.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0a8      	beq.n	800ceb8 <spi_stm32_transceive+0x2fc>
	ctx->tx_len -= len;
 800cf66:	3b01      	subs	r3, #1
 800cf68:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800cf6a:	b93b      	cbnz	r3, 800cf7c <spi_stm32_transceive+0x3c0>
		++ctx->current_tx;
 800cf6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf6e:	3308      	adds	r3, #8
 800cf70:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800cf72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf74:	3b01      	subs	r3, #1
 800cf76:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800cf78:	2302      	movs	r3, #2
 800cf7a:	e761      	b.n	800ce40 <spi_stm32_transceive+0x284>
	} else if (ctx->tx_buf) {
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	d09b      	beq.n	800ceb8 <spi_stm32_transceive+0x2fc>
		ctx->tx_buf += dfs * len;
 800cf80:	3202      	adds	r2, #2
 800cf82:	6562      	str	r2, [r4, #84]	; 0x54
 800cf84:	e798      	b.n	800ceb8 <spi_stm32_transceive+0x2fc>
  return (uint16_t)(READ_REG(SPIx->DR));
 800cf86:	f8db 200c 	ldr.w	r2, [fp, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 800cf8a:	b10b      	cbz	r3, 800cf90 <spi_stm32_transceive+0x3d4>
 800cf8c:	b101      	cbz	r1, 800cf90 <spi_stm32_transceive+0x3d4>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800cf8e:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800cf90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0b6      	beq.n	800cf04 <spi_stm32_transceive+0x348>
	ctx->rx_len -= len;
 800cf96:	3b01      	subs	r3, #1
 800cf98:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d164      	bne.n	800d068 <spi_stm32_transceive+0x4ac>
		++ctx->current_rx;
 800cf9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800cfa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800cfaa:	2302      	movs	r3, #2
 800cfac:	e7a4      	b.n	800cef8 <spi_stm32_transceive+0x33c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800cfae:	f8db 2008 	ldr.w	r2, [fp, #8]
 800cfb2:	0790      	lsls	r0, r2, #30
 800cfb4:	d547      	bpl.n	800d046 <spi_stm32_transceive+0x48a>
	return !!(ctx->tx_len);
 800cfb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	d044      	beq.n	800d046 <spi_stm32_transceive+0x48a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800cfbc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800cfc0:	2b08      	cmp	r3, #8
 800cfc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800cfc4:	d12e      	bne.n	800d024 <spi_stm32_transceive+0x468>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800cfc6:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 800cfc8:	f88b 300c 	strb.w	r3, [fp, #12]
	if (!ctx->tx_len) {
 800cfcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfce:	b1a3      	cbz	r3, 800cffa <spi_stm32_transceive+0x43e>
	ctx->tx_len -= len;
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800cfd4:	b96b      	cbnz	r3, 800cff2 <spi_stm32_transceive+0x436>
		++ctx->current_tx;
 800cfd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cfd8:	3308      	adds	r3, #8
 800cfda:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800cfdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	68b8      	ldr	r0, [r7, #8]
 800cfe6:	4642      	mov	r2, r8
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f008 f898 	bl	801511e <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800cfee:	6560      	str	r0, [r4, #84]	; 0x54
 800cff0:	e003      	b.n	800cffa <spi_stm32_transceive+0x43e>
	} else if (ctx->tx_buf) {
 800cff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cff4:	b10b      	cbz	r3, 800cffa <spi_stm32_transceive+0x43e>
		ctx->tx_buf += dfs * len;
 800cff6:	3301      	adds	r3, #1
 800cff8:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800cffa:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 800cffe:	07d9      	lsls	r1, r3, #31
 800d000:	d580      	bpl.n	800cf04 <spi_stm32_transceive+0x348>
	return !!(ctx->rx_buf && ctx->rx_len);
 800d002:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d004:	2b00      	cmp	r3, #0
 800d006:	f43f af7d 	beq.w	800cf04 <spi_stm32_transceive+0x348>
 800d00a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	f43f af79 	beq.w	800cf04 <spi_stm32_transceive+0x348>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800d012:	6822      	ldr	r2, [r4, #0]
 800d014:	8892      	ldrh	r2, [r2, #4]
 800d016:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800d01a:	2a08      	cmp	r2, #8
 800d01c:	d121      	bne.n	800d062 <spi_stm32_transceive+0x4a6>
  return (*((__IO uint8_t *)&SPIx->DR));
 800d01e:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800d022:	e75a      	b.n	800ceda <spi_stm32_transceive+0x31e>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800d024:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 800d026:	f8ab 300c 	strh.w	r3, [fp, #12]
	ctx->tx_len -= len;
 800d02a:	3901      	subs	r1, #1
 800d02c:	65a1      	str	r1, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800d02e:	b939      	cbnz	r1, 800d040 <spi_stm32_transceive+0x484>
		++ctx->current_tx;
 800d030:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d032:	3308      	adds	r3, #8
 800d034:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800d036:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d038:	3b01      	subs	r3, #1
 800d03a:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800d03c:	2302      	movs	r3, #2
 800d03e:	e7d1      	b.n	800cfe4 <spi_stm32_transceive+0x428>
		ctx->tx_buf += dfs * len;
 800d040:	3202      	adds	r2, #2
 800d042:	6562      	str	r2, [r4, #84]	; 0x54
 800d044:	e7d9      	b.n	800cffa <spi_stm32_transceive+0x43e>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800d046:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d04a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d04e:	f8cb 3004 	str.w	r3, [fp, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 800d052:	e7d2      	b.n	800cffa <spi_stm32_transceive+0x43e>
	} else if (ctx->rx_buf) {
 800d054:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d056:	2b00      	cmp	r3, #0
 800d058:	f43f af54 	beq.w	800cf04 <spi_stm32_transceive+0x348>
		ctx->rx_buf += dfs * len;
 800d05c:	3301      	adds	r3, #1
 800d05e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d060:	e750      	b.n	800cf04 <spi_stm32_transceive+0x348>
  return (uint16_t)(READ_REG(SPIx->DR));
 800d062:	f8db 200c 	ldr.w	r2, [fp, #12]
 800d066:	e792      	b.n	800cf8e <spi_stm32_transceive+0x3d2>
	} else if (ctx->rx_buf) {
 800d068:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f43f af4a 	beq.w	800cf04 <spi_stm32_transceive+0x348>
		ctx->rx_buf += dfs * len;
 800d070:	3302      	adds	r3, #2
 800d072:	e7f4      	b.n	800d05e <spi_stm32_transceive+0x4a2>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800d074:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d076:	2b00      	cmp	r3, #0
 800d078:	f47f aebd 	bne.w	800cdf6 <spi_stm32_transceive+0x23a>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800d07c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f47f aeb9 	bne.w	800cdf6 <spi_stm32_transceive+0x23a>
		ret = spi_stm32_shift_frames(spi, data);
 800d084:	461e      	mov	r6, r3
	SPI_TypeDef *spi = cfg->spi;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	689d      	ldr	r5, [r3, #8]
	_spi_context_cs_control(ctx, on, false);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	6918      	ldr	r0, [r3, #16]
 800d092:	4611      	mov	r1, r2
 800d094:	f008 f857 	bl	8015146 <_spi_context_cs_control.isra.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800d098:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800d09a:	07db      	lsls	r3, r3, #31
 800d09c:	d417      	bmi.n	800d0ce <spi_stm32_transceive+0x512>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800d09e:	682b      	ldr	r3, [r5, #0]
 800d0a0:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800d0a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0a8:	d102      	bne.n	800d0b0 <spi_stm32_transceive+0x4f4>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d0aa:	68ab      	ldr	r3, [r5, #8]
 800d0ac:	0618      	lsls	r0, r3, #24
 800d0ae:	d4fc      	bmi.n	800d0aa <spi_stm32_transceive+0x4ee>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800d0b0:	68ab      	ldr	r3, [r5, #8]
 800d0b2:	0699      	lsls	r1, r3, #26
 800d0b4:	d506      	bpl.n	800d0c4 <spi_stm32_transceive+0x508>
  tmpreg_sr = SPIx->SR;
 800d0b6:	68ab      	ldr	r3, [r5, #8]
 800d0b8:	633b      	str	r3, [r7, #48]	; 0x30
  (void) tmpreg_sr;
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0c2:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0ca:	602b      	str	r3, [r5, #0]
}
 800d0cc:	e5d1      	b.n	800cc72 <spi_stm32_transceive+0xb6>
  return (*((__IO uint8_t *)&SPIx->DR));
 800d0ce:	7b2b      	ldrb	r3, [r5, #12]
 800d0d0:	e7e2      	b.n	800d098 <spi_stm32_transceive+0x4dc>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800d0d2:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800d0d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d0d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0dc:	602a      	str	r2, [r5, #0]
 800d0de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800d0e2:	682a      	ldr	r2, [r5, #0]
 800d0e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800d0e8:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800d0f0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800d0f4:	079a      	lsls	r2, r3, #30
 800d0f6:	f53f ae01 	bmi.w	800ccfc <spi_stm32_transceive+0x140>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800d0fa:	682a      	ldr	r2, [r5, #0]
 800d0fc:	f022 0202 	bic.w	r2, r2, #2
 800d100:	e5ff      	b.n	800cd02 <spi_stm32_transceive+0x146>
 800d102:	bf00      	nop
 800d104:	080196eb 	.word	0x080196eb
 800d108:	08019738 	.word	0x08019738
 800d10c:	01000004 	.word	0x01000004
 800d110:	08015bbc 	.word	0x08015bbc

0800d114 <uart_stm32_set_baudrate>:
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 800d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	b089      	sub	sp, #36	; 0x24
	const struct uart_stm32_config *config = dev->config;
 800d11a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uart_stm32_data *data = dev->data;

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 800d11e:	6903      	ldr	r3, [r0, #16]
{
 800d120:	af00      	add	r7, sp, #0
	if (clock_control_get_rate(data->clock,
 800d122:	685c      	ldr	r4, [r3, #4]
{
 800d124:	4606      	mov	r6, r0
 800d126:	460d      	mov	r5, r1
			       (clock_control_subsys_t *)&config->pclken,
 800d128:	f108 0904 	add.w	r9, r8, #4
 800d12c:	4620      	mov	r0, r4
 800d12e:	f008 f8fa 	bl	8015326 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d132:	b978      	cbnz	r0, 800d154 <uart_stm32_set_baudrate+0x40>
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 800d134:	4b38      	ldr	r3, [pc, #224]	; (800d218 <uart_stm32_set_baudrate+0x104>)
 800d136:	61bb      	str	r3, [r7, #24]
 800d138:	2302      	movs	r3, #2
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	4837      	ldr	r0, [pc, #220]	; (800d21c <uart_stm32_set_baudrate+0x108>)
 800d13e:	2300      	movs	r3, #0
 800d140:	f107 0214 	add.w	r2, r7, #20
 800d144:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d148:	f7f5 ff08 	bl	8002f5c <z_impl_z_log_msg2_static_create>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 800d14c:	3724      	adds	r7, #36	; 0x24
 800d14e:	46bd      	mov	sp, r7
 800d150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->get_rate == NULL) {
 800d154:	68a3      	ldr	r3, [r4, #8]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d0eb      	beq.n	800d134 <uart_stm32_set_baudrate+0x20>
	return api->get_rate(dev, sys, rate);
 800d15c:	1d3a      	adds	r2, r7, #4
 800d15e:	4649      	mov	r1, r9
 800d160:	4620      	mov	r0, r4
 800d162:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800d164:	2800      	cmp	r0, #0
 800d166:	dbe5      	blt.n	800d134 <uart_stm32_set_baudrate+0x20>
	if (IS_LPUART_INSTANCE(config->usart)) {
 800d168:	f8d8 3000 	ldr.w	r3, [r8]
 800d16c:	4a2c      	ldr	r2, [pc, #176]	; (800d220 <uart_stm32_set_baudrate+0x10c>)
 800d16e:	687c      	ldr	r4, [r7, #4]
 800d170:	4293      	cmp	r3, r2
 800d172:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800d176:	d139      	bne.n	800d1ec <uart_stm32_set_baudrate+0xd8>
	lpuartdiv += baud_rate / 2;
 800d178:	f04f 0b00 	mov.w	fp, #0
 800d17c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800d230 <uart_stm32_set_baudrate+0x11c>
 800d180:	46d9      	mov	r9, fp
	lpuartdiv = clock_rate / LPUART_PRESCALER_TAB[presc_idx];
 800d182:	f83a 2b02 	ldrh.w	r2, [sl], #2
 800d186:	2300      	movs	r3, #0
 800d188:	4620      	mov	r0, r4
 800d18a:	2100      	movs	r1, #0
 800d18c:	f7f3 f9c0 	bl	8000510 <__aeabi_uldivmod>
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800d190:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 800d194:	ea4f 2e00 	mov.w	lr, r0, lsl #8
 800d198:	ea4c 6c10 	orr.w	ip, ip, r0, lsr #24
	lpuartdiv /= baud_rate;
 800d19c:	eb1e 0008 	adds.w	r0, lr, r8
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	eb4c 010b 	adc.w	r1, ip, fp
 800d1aa:	f7f3 f9b1 	bl	8000510 <__aeabi_uldivmod>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800d1ae:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <uart_stm32_set_baudrate+0x110>)
 800d1b0:	f5a0 7340 	sub.w	r3, r0, #768	; 0x300
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d923      	bls.n	800d200 <uart_stm32_set_baudrate+0xec>
		for (presc_idx = 0; presc_idx < ARRAY_SIZE(LPUART_PRESCALER_TAB); presc_idx++) {
 800d1b8:	f109 0901 	add.w	r9, r9, #1
 800d1bc:	f1b9 0f0c 	cmp.w	r9, #12
 800d1c0:	d1df      	bne.n	800d182 <uart_stm32_set_baudrate+0x6e>
			LOG_ERR("Unable to set %s to %d", dev->name, baud_rate);
 800d1c2:	6833      	ldr	r3, [r6, #0]
 800d1c4:	4918      	ldr	r1, [pc, #96]	; (800d228 <uart_stm32_set_baudrate+0x114>)
 800d1c6:	466c      	mov	r4, sp
 800d1c8:	b088      	sub	sp, #32
 800d1ca:	466a      	mov	r2, sp
 800d1cc:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	7713      	strb	r3, [r2, #28]
 800d1d4:	4b15      	ldr	r3, [pc, #84]	; (800d22c <uart_stm32_set_baudrate+0x118>)
 800d1d6:	6195      	str	r5, [r2, #24]
 800d1d8:	f842 3f0c 	str.w	r3, [r2, #12]!
 800d1dc:	480f      	ldr	r0, [pc, #60]	; (800d21c <uart_stm32_set_baudrate+0x108>)
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800d1e4:	f7f5 feba 	bl	8002f5c <z_impl_z_log_msg2_static_create>
 800d1e8:	46a5      	mov	sp, r4
			return;
 800d1ea:	e7af      	b.n	800d14c <uart_stm32_set_baudrate+0x38>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800d1ec:	681a      	ldr	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800d1ee:	4444      	add	r4, r8
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800d1f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800d1f4:	fbb4 f5f5 	udiv	r5, r4, r5
 800d1f8:	b2ad      	uxth	r5, r5
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800d1fa:	601a      	str	r2, [r3, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800d1fc:	60dd      	str	r5, [r3, #12]
 800d1fe:	e7a5      	b.n	800d14c <uart_stm32_set_baudrate+0x38>
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800d200:	4a07      	ldr	r2, [pc, #28]	; (800d220 <uart_stm32_set_baudrate+0x10c>)
 800d202:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d204:	f023 030f 	bic.w	r3, r3, #15
 800d208:	ea43 0309 	orr.w	r3, r3, r9
 800d20c:	62d3      	str	r3, [r2, #44]	; 0x2c
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 800d20e:	2d00      	cmp	r5, #0
 800d210:	d09c      	beq.n	800d14c <uart_stm32_set_baudrate+0x38>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800d212:	60d0      	str	r0, [r2, #12]
 800d214:	e79a      	b.n	800d14c <uart_stm32_set_baudrate+0x38>
 800d216:	bf00      	nop
 800d218:	080196c8 	.word	0x080196c8
 800d21c:	08015bc4 	.word	0x08015bc4
 800d220:	40008000 	.word	0x40008000
 800d224:	000ffcff 	.word	0x000ffcff
 800d228:	0801974a 	.word	0x0801974a
 800d22c:	01000004 	.word	0x01000004
 800d230:	0801674e 	.word	0x0801674e

0800d234 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800d238:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800d23a:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800d23c:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800d23e:	2b01      	cmp	r3, #1
{
 800d240:	460c      	mov	r4, r1
	switch (parity) {
 800d242:	d01b      	beq.n	800d27c <uart_stm32_configure+0x48>
		return LL_USART_PARITY_NONE;
 800d244:	2b02      	cmp	r3, #2
 800d246:	bf0c      	ite	eq
 800d248:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 800d24c:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800d250:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800d254:	79a7      	ldrb	r7, [r4, #6]
 800d256:	f1b9 0f02 	cmp.w	r9, #2
 800d25a:	bf96      	itet	ls
 800d25c:	4a41      	ldrls	r2, [pc, #260]	; (800d364 <uart_stm32_configure+0x130>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800d25e:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 800d262:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 800d266:	2f02      	cmp	r7, #2
 800d268:	d00b      	beq.n	800d282 <uart_stm32_configure+0x4e>
 800d26a:	2f04      	cmp	r7, #4
 800d26c:	d073      	beq.n	800d356 <uart_stm32_configure+0x122>
			return LL_USART_DATAWIDTH_8B;
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bf14      	ite	ne
 800d272:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 800d276:	f04f 0e00 	moveq.w	lr, #0
 800d27a:	e008      	b.n	800d28e <uart_stm32_configure+0x5a>
	switch (parity) {
 800d27c:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800d280:	e7e6      	b.n	800d250 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 800d282:	2b00      	cmp	r3, #0
 800d284:	bf0c      	ite	eq
 800d286:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 800d28a:	f04f 0e00 	movne.w	lr, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800d28e:	79e2      	ldrb	r2, [r4, #7]

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800d290:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800d294:	2a01      	cmp	r2, #1
 800d296:	bf14      	ite	ne
 800d298:	f04f 0c00 	movne.w	ip, #0
 800d29c:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800d2a0:	f1ba 0f01 	cmp.w	sl, #1
 800d2a4:	d95a      	bls.n	800d35c <uart_stm32_configure+0x128>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800d2a6:	b10b      	cbz	r3, 800d2ac <uart_stm32_configure+0x78>
 800d2a8:	2f04      	cmp	r7, #4
 800d2aa:	d057      	beq.n	800d35c <uart_stm32_configure+0x128>
	    (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
		return -ENOTSUP;
	}

#if defined(LL_USART_STOPBITS_0_5) && HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart) &&
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d36c <uart_stm32_configure+0x138>
 800d2b2:	4553      	cmp	r3, sl
 800d2b4:	d102      	bne.n	800d2bc <uart_stm32_configure+0x88>
 800d2b6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800d2ba:	d04f      	beq.n	800d35c <uart_stm32_configure+0x128>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800d2bc:	2f01      	cmp	r7, #1
 800d2be:	d94d      	bls.n	800d35c <uart_stm32_configure+0x128>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800d2c0:	2f04      	cmp	r7, #4
 800d2c2:	d04b      	beq.n	800d35c <uart_stm32_configure+0x128>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800d2c4:	b142      	cbz	r2, 800d2d8 <uart_stm32_configure+0xa4>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800d2c6:	4f28      	ldr	r7, [pc, #160]	; (800d368 <uart_stm32_configure+0x134>)
 800d2c8:	42bb      	cmp	r3, r7
 800d2ca:	d003      	beq.n	800d2d4 <uart_stm32_configure+0xa0>
 800d2cc:	f5a7 4738 	sub.w	r7, r7, #47104	; 0xb800
 800d2d0:	42bb      	cmp	r3, r7
 800d2d2:	d143      	bne.n	800d35c <uart_stm32_configure+0x128>
 800d2d4:	2a01      	cmp	r2, #1
 800d2d6:	d141      	bne.n	800d35c <uart_stm32_configure+0x128>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	f022 0201 	bic.w	r2, r2, #1
 800d2de:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 800d2e6:	4542      	cmp	r2, r8
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800d2e8:	bf1f      	itttt	ne
 800d2ea:	681a      	ldrne	r2, [r3, #0]
 800d2ec:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800d2f0:	ea42 0208 	orrne.w	r2, r2, r8
 800d2f4:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800d2fc:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d2fe:	bf1f      	itttt	ne
 800d300:	685f      	ldrne	r7, [r3, #4]
 800d302:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 800d306:	430f      	orrne	r7, r1
 800d308:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800d310:	4572      	cmp	r2, lr
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800d312:	bf1f      	itttt	ne
 800d314:	6819      	ldrne	r1, [r3, #0]
 800d316:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 800d31a:	ea41 010e 	orrne.w	r1, r1, lr
 800d31e:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800d320:	689a      	ldr	r2, [r3, #8]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800d322:	6821      	ldr	r1, [r4, #0]
 800d324:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800d328:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d32a:	bf1f      	itttt	ne
 800d32c:	689a      	ldrne	r2, [r3, #8]
 800d32e:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 800d332:	ea42 020c 	orrne.w	r2, r2, ip
 800d336:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	4299      	cmp	r1, r3
 800d33c:	d003      	beq.n	800d346 <uart_stm32_configure+0x112>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800d33e:	f7ff fee9 	bl	800d114 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 800d346:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800d348:	6813      	ldr	r3, [r2, #0]
 800d34a:	f043 0301 	orr.w	r3, r3, #1
 800d34e:	6013      	str	r3, [r2, #0]
	return 0;
 800d350:	2000      	movs	r0, #0
};
 800d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 800d356:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 800d35a:	e798      	b.n	800d28e <uart_stm32_configure+0x5a>
		return -ENOTSUP;
 800d35c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d360:	e7f7      	b.n	800d352 <uart_stm32_configure+0x11e>
 800d362:	bf00      	nop
 800d364:	08016748 	.word	0x08016748
 800d368:	40013800 	.word	0x40013800
 800d36c:	40008000 	.word	0x40008000

0800d370 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800d370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 800d374:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800d376:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800d378:	4c3e      	ldr	r4, [pc, #248]	; (800d474 <uart_stm32_init+0x104>)
 800d37a:	607c      	str	r4, [r7, #4]
{
 800d37c:	b086      	sub	sp, #24
 800d37e:	4606      	mov	r6, r0
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 800d380:	f105 0804 	add.w	r8, r5, #4
 800d384:	4620      	mov	r0, r4
 800d386:	f007 ffce 	bl	8015326 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d06c      	beq.n	800d468 <uart_stm32_init+0xf8>
	return api->on(dev, sys);
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	4620      	mov	r0, r4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4641      	mov	r1, r8
 800d396:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800d398:	4604      	mov	r4, r0
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d164      	bne.n	800d468 <uart_stm32_init+0xf8>
	ret = pinctrl_lookup_state(config, id, &state);
 800d39e:	4601      	mov	r1, r0
 800d3a0:	466a      	mov	r2, sp
 800d3a2:	69a8      	ldr	r0, [r5, #24]
 800d3a4:	f007 ffa6 	bl	80152f4 <pinctrl_lookup_state>
	if (ret < 0) {
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	db5f      	blt.n	800d46c <uart_stm32_init+0xfc>
	return pinctrl_apply_state_direct(config, state);
 800d3ac:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	7919      	ldrb	r1, [r3, #4]
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	f000 fd48 	bl	800de48 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	db57      	blt.n	800d46c <uart_stm32_init+0xfc>
		return err;
	}

	LL_USART_Disable(config->usart);
 800d3bc:	6829      	ldr	r1, [r5, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800d3be:	680b      	ldr	r3, [r1, #0]
 800d3c0:	f023 0301 	bic.w	r3, r3, #1
 800d3c4:	600b      	str	r3, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c6:	e851 2f00 	ldrex	r2, [r1]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800d3ca:	f042 020c 	orr.w	r2, r2, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ce:	e841 2400 	strex	r4, r2, [r1]
 800d3d2:	2c00      	cmp	r4, #0
 800d3d4:	d1f7      	bne.n	800d3c6 <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800d3d6:	692b      	ldr	r3, [r5, #16]
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d010      	beq.n	800d3fe <uart_stm32_init+0x8e>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d03e      	beq.n	800d45e <uart_stm32_init+0xee>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800d3e0:	b15b      	cbz	r3, 800d3fa <uart_stm32_init+0x8a>
			LOG_WRN("Invalid parity setting '%d'."
 800d3e2:	4a25      	ldr	r2, [pc, #148]	; (800d478 <uart_stm32_init+0x108>)
 800d3e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	9303      	str	r3, [sp, #12]
 800d3ec:	4823      	ldr	r0, [pc, #140]	; (800d47c <uart_stm32_init+0x10c>)
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	aa03      	add	r2, sp, #12
 800d3f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800d3f6:	f7f5 fdb1 	bl	8002f5c <z_impl_z_log_msg2_static_create>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800d3fa:	4623      	mov	r3, r4
 800d3fc:	e003      	b.n	800d406 <uart_stm32_init+0x96>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800d3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800d402:	f44f 6480 	mov.w	r4, #1024	; 0x400
	}

	/* Set datawidth and parity, 1 start bit, 1 stop bit  */
	LL_USART_ConfigCharacter(config->usart,
 800d406:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800d408:	680a      	ldr	r2, [r1, #0]
 800d40a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d40e:	431c      	orrs	r4, r3
 800d410:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800d414:	4322      	orrs	r2, r4
 800d416:	600a      	str	r2, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d418:	684b      	ldr	r3, [r1, #4]
 800d41a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d41e:	604b      	str	r3, [r1, #4]
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800d420:	7b2b      	ldrb	r3, [r5, #12]
 800d422:	b12b      	cbz	r3, 800d430 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800d424:	6873      	ldr	r3, [r6, #4]
 800d426:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d428:	6893      	ldr	r3, [r2, #8]
 800d42a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d42e:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	4630      	mov	r0, r6
 800d434:	f7ff fe6e 	bl	800d114 <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800d438:	7d2a      	ldrb	r2, [r5, #20]
 800d43a:	682b      	ldr	r3, [r5, #0]
 800d43c:	b11a      	cbz	r2, 800d446 <uart_stm32_init+0xd6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800d43e:	689a      	ldr	r2, [r3, #8]
 800d440:	f042 0208 	orr.w	r2, r2, #8
 800d444:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	f042 0201 	orr.w	r2, r2, #1
 800d44c:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1U : 0U);
 800d44e:	69da      	ldr	r2, [r3, #28]
 800d450:	0291      	lsls	r1, r2, #10
 800d452:	d5fc      	bpl.n	800d44e <uart_stm32_init+0xde>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1U : 0U);
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	0252      	lsls	r2, r2, #9
 800d458:	d5fc      	bpl.n	800d454 <uart_stm32_init+0xe4>
#endif /* CONFIG_PM || CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 800d45a:	2000      	movs	r0, #0
 800d45c:	e006      	b.n	800d46c <uart_stm32_init+0xfc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800d45e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800d462:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800d466:	e7ce      	b.n	800d406 <uart_stm32_init+0x96>
		return -EIO;
 800d468:	f06f 0004 	mvn.w	r0, #4
#endif
}
 800d46c:	b006      	add	sp, #24
 800d46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d472:	bf00      	nop
 800d474:	080157a4 	.word	0x080157a4
 800d478:	08019761 	.word	0x08019761
 800d47c:	08015bc4 	.word	0x08015bc4

0800d480 <TM_EvtReceivedCb>:
		evt->peer_addr.type = BT_ADDR_LE_RANDOM;
	}
}

void TM_EvtReceivedCb(TL_EvtPacket_t *hcievt)
{
 800d480:	4601      	mov	r1, r0
	k_fifo_put(&ipm_rx_events_fifo, hcievt);
 800d482:	4801      	ldr	r0, [pc, #4]	; (800d488 <TM_EvtReceivedCb+0x8>)
 800d484:	f007 bf94 	b.w	80153b0 <k_queue_append>
 800d488:	20000624 	.word	0x20000624

0800d48c <TM_AclDataAck>:
 800d48c:	4801      	ldr	r0, [pc, #4]	; (800d494 <TM_AclDataAck+0x8>)
 800d48e:	f001 bcdd 	b.w	800ee4c <z_impl_k_sem_give>
 800d492:	bf00      	nop
 800d494:	20000578 	.word	0x20000578

0800d498 <sysevt_received>:
 800d498:	4801      	ldr	r0, [pc, #4]	; (800d4a0 <sysevt_received+0x8>)
 800d49a:	f001 bcd7 	b.w	800ee4c <z_impl_k_sem_give>
 800d49e:	bf00      	nop
 800d4a0:	200005a8 	.word	0x200005a8

0800d4a4 <bt_ipm_close.part.0>:
	BT_DBG("IPM Channel Open Completed");

	return 0;
}

static int bt_ipm_close(void)
 800d4a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct net_buf *rsp;

	err = bt_hci_cmd_send_sync(ACI_HAL_STACK_RESET, NULL, &rsp);
	if (err) {
		BT_ERR("IPM Channel Close Issue");
 800d4a6:	4b07      	ldr	r3, [pc, #28]	; (800d4c4 <bt_ipm_close.part.0+0x20>)
 800d4a8:	9304      	str	r3, [sp, #16]
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	9303      	str	r3, [sp, #12]
 800d4ae:	4806      	ldr	r0, [pc, #24]	; (800d4c8 <bt_ipm_close.part.0+0x24>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	aa03      	add	r2, sp, #12
 800d4b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d4b8:	f7f5 fd50 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	k_thread_abort(&ipm_rx_thread_data);

	BT_DBG("IPM Channel Close Completed");

	return err;
}
 800d4bc:	b007      	add	sp, #28
 800d4be:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4c2:	bf00      	nop
 800d4c4:	080197a7 	.word	0x080197a7
 800d4c8:	08015b84 	.word	0x08015b84

0800d4cc <bt_ipm_close>:
{
 800d4cc:	b513      	push	{r0, r1, r4, lr}
	err = bt_hci_cmd_send_sync(ACI_HAL_STACK_RESET, NULL, &rsp);
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	aa01      	add	r2, sp, #4
 800d4d2:	f64f 403b 	movw	r0, #64571	; 0xfc3b
 800d4d6:	f7f7 feeb 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800d4da:	4604      	mov	r4, r0
 800d4dc:	b120      	cbz	r0, 800d4e8 <bt_ipm_close+0x1c>
 800d4de:	f7ff ffe1 	bl	800d4a4 <bt_ipm_close.part.0>
}
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	b002      	add	sp, #8
 800d4e6:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
 800d4e8:	9801      	ldr	r0, [sp, #4]
 800d4ea:	f7fe fd17 	bl	800bf1c <net_buf_unref>
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800d4ee:	4a06      	ldr	r2, [pc, #24]	; (800d508 <bt_ipm_close+0x3c>)
 800d4f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800d4f4:	041b      	lsls	r3, r3, #16
 800d4f6:	d5fb      	bpl.n	800d4f0 <bt_ipm_close+0x24>
	c2_started_flag = false;
 800d4f8:	4b04      	ldr	r3, [pc, #16]	; (800d50c <bt_ipm_close+0x40>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	701a      	strb	r2, [r3, #0]
	z_impl_k_thread_abort(thread);
 800d4fe:	4804      	ldr	r0, [pc, #16]	; (800d510 <bt_ipm_close+0x44>)
 800d500:	f7f6 ffc4 	bl	800448c <z_impl_k_thread_abort>
}
 800d504:	e7ed      	b.n	800d4e2 <bt_ipm_close+0x16>
 800d506:	bf00      	nop
 800d508:	58000400 	.word	0x58000400
 800d50c:	20001989 	.word	0x20001989
 800d510:	200012f0 	.word	0x200012f0

0800d514 <bt_ipm_rx_thread>:
{
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hcievt = k_fifo_get(&ipm_rx_events_fifo, K_FOREVER);
 800d518:	4e66      	ldr	r6, [pc, #408]	; (800d6b4 <bt_ipm_rx_thread+0x1a0>)
	return z_impl_k_sem_take(sem, timeout);
 800d51a:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800d6d4 <bt_ipm_rx_thread+0x1c0>
{
 800d51e:	b089      	sub	sp, #36	; 0x24
 800d520:	46b2      	mov	sl, r6
 800d522:	af00      	add	r7, sp, #0
		k_timeout_t timeout = K_FOREVER;
 800d524:	f04f 38ff 	mov.w	r8, #4294967295
 800d528:	f04f 39ff 	mov.w	r9, #4294967295
	return z_impl_k_queue_get(queue, timeout);
 800d52c:	4862      	ldr	r0, [pc, #392]	; (800d6b8 <bt_ipm_rx_thread+0x1a4>)
 800d52e:	4642      	mov	r2, r8
 800d530:	464b      	mov	r3, r9
 800d532:	f001 fc1f 	bl	800ed74 <z_impl_k_queue_get>
		hcievt = k_fifo_get(&ipm_rx_events_fifo, K_FOREVER);
 800d536:	6030      	str	r0, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
 800d538:	464b      	mov	r3, r9
 800d53a:	4642      	mov	r2, r8
 800d53c:	4658      	mov	r0, fp
 800d53e:	f001 fcc9 	bl	800eed4 <z_impl_k_sem_take>
		switch (hcievt->evtserial.type) {
 800d542:	6835      	ldr	r5, [r6, #0]
 800d544:	7a2b      	ldrb	r3, [r5, #8]
 800d546:	2b02      	cmp	r3, #2
 800d548:	f000 808e 	beq.w	800d668 <bt_ipm_rx_thread+0x154>
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	f040 80ad 	bne.w	800d6ac <bt_ipm_rx_thread+0x198>
			switch (hcievt->evtserial.evt.evtcode) {
 800d552:	7a68      	ldrb	r0, [r5, #9]
 800d554:	28ff      	cmp	r0, #255	; 0xff
 800d556:	d110      	bne.n	800d57a <bt_ipm_rx_thread+0x66>
				BT_ERR("Unknown evtcode type 0x%02x",
 800d558:	4b58      	ldr	r3, [pc, #352]	; (800d6bc <bt_ipm_rx_thread+0x1a8>)
 800d55a:	e9c7 3006 	strd	r3, r0, [r7, #24]
			BT_ERR("Unknown BT buf type %d",
 800d55e:	2303      	movs	r3, #3
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	4857      	ldr	r0, [pc, #348]	; (800d6c0 <bt_ipm_rx_thread+0x1ac>)
 800d564:	2300      	movs	r3, #0
 800d566:	f107 0214 	add.w	r2, r7, #20
 800d56a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d56e:	f7f5 fcf5 	bl	8002f5c <z_impl_z_log_msg2_static_create>
			TL_MM_EvtDone(hcievt);
 800d572:	6830      	ldr	r0, [r6, #0]
 800d574:	f7f5 ffd6 	bl	8003524 <TL_MM_EvtDone>
			goto end_loop;
 800d578:	e064      	b.n	800d644 <bt_ipm_rx_thread+0x130>
				if (hcievt->evtserial.evt.evtcode == BT_HCI_EVT_LE_META_EVENT &&
 800d57a:	283e      	cmp	r0, #62	; 0x3e
 800d57c:	d166      	bne.n	800d64c <bt_ipm_rx_thread+0x138>
 800d57e:	7aeb      	ldrb	r3, [r5, #11]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d163      	bne.n	800d64c <bt_ipm_rx_thread+0x138>
					timeout = K_NO_WAIT;
 800d584:	f04f 0800 	mov.w	r8, #0
 800d588:	f04f 0900 	mov.w	r9, #0
					discardable = true;
 800d58c:	2101      	movs	r1, #1
				buf = bt_buf_get_evt(
 800d58e:	4642      	mov	r2, r8
 800d590:	464b      	mov	r3, r9
 800d592:	f7f7 f9b9 	bl	8004908 <bt_buf_get_evt>
				if (!buf) {
 800d596:	4604      	mov	r4, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	d053      	beq.n	800d644 <bt_ipm_rx_thread+0x130>
			tryfix_event(&hcievt->evtserial.evt);
 800d59c:	f8da 5000 	ldr.w	r5, [sl]
	if (tev->evtcode != BT_HCI_EVT_LE_META_EVENT ||
 800d5a0:	7a6b      	ldrb	r3, [r5, #9]
 800d5a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d5a4:	d12e      	bne.n	800d604 <bt_ipm_rx_thread+0xf0>
 800d5a6:	7aeb      	ldrb	r3, [r5, #11]
 800d5a8:	2b0a      	cmp	r3, #10
 800d5aa:	d12b      	bne.n	800d604 <bt_ipm_rx_thread+0xf0>
	if (!bt_addr_cmp(&evt->peer_addr.a, BT_ADDR_NONE)) {
 800d5ac:	f105 0811 	add.w	r8, r5, #17
 800d5b0:	f04f 33ff 	mov.w	r3, #4294967295
	return memcmp(a, b, sizeof(*a));
 800d5b4:	2206      	movs	r2, #6
 800d5b6:	f107 0108 	add.w	r1, r7, #8
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	60bb      	str	r3, [r7, #8]
 800d5be:	81bb      	strh	r3, [r7, #12]
 800d5c0:	f005 fc54 	bl	8012e6c <memcmp>
 800d5c4:	b9f0      	cbnz	r0, 800d604 <bt_ipm_rx_thread+0xf0>
 800d5c6:	6078      	str	r0, [r7, #4]
		BT_WARN("Invalid peer addr %s", bt_addr_le_str(&evt->peer_addr));
 800d5c8:	f105 0010 	add.w	r0, r5, #16
 800d5cc:	f7f7 f8d6 	bl	800477c <bt_addr_le_str_real>
 800d5d0:	46e9      	mov	r9, sp
 800d5d2:	493c      	ldr	r1, [pc, #240]	; (800d6c4 <bt_ipm_rx_thread+0x1b0>)
 800d5d4:	b088      	sub	sp, #32
 800d5d6:	466a      	mov	r2, sp
 800d5d8:	e9c2 1004 	strd	r1, r0, [r2, #16]
 800d5dc:	2102      	movs	r1, #2
 800d5de:	7611      	strb	r1, [r2, #24]
 800d5e0:	4939      	ldr	r1, [pc, #228]	; (800d6c8 <bt_ipm_rx_thread+0x1b4>)
 800d5e2:	f842 1f0c 	str.w	r1, [r2, #12]!
 800d5e6:	4836      	ldr	r0, [pc, #216]	; (800d6c0 <bt_ipm_rx_thread+0x1ac>)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 800d5ee:	f7f5 fcb5 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	memcpy(dst, src, sizeof(*dst));
 800d5f2:	2206      	movs	r2, #6
 800d5f4:	46cd      	mov	sp, r9
 800d5f6:	f105 011d 	add.w	r1, r5, #29
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	f005 fc46 	bl	8012e8c <memcpy>
		evt->peer_addr.type = BT_ADDR_LE_RANDOM;
 800d600:	2301      	movs	r3, #1
 800d602:	742b      	strb	r3, [r5, #16]
	return net_buf_simple_tailroom(&buf->b);
 800d604:	f104 0508 	add.w	r5, r4, #8
 800d608:	4628      	mov	r0, r5
 800d60a:	f007 fc36 	bl	8014e7a <net_buf_simple_tailroom>
			buf_add_len = hcievt->evtserial.evt.plen + 2;
 800d60e:	f8da 1000 	ldr.w	r1, [sl]
 800d612:	7a8a      	ldrb	r2, [r1, #10]
 800d614:	3202      	adds	r2, #2
			if (buf_tailroom < buf_add_len) {
 800d616:	4290      	cmp	r0, r2
 800d618:	d21a      	bcs.n	800d650 <bt_ipm_rx_thread+0x13c>
				BT_ERR("Not enough space in buffer %zu/%zu",
 800d61a:	492c      	ldr	r1, [pc, #176]	; (800d6cc <bt_ipm_rx_thread+0x1b8>)
 800d61c:	466d      	mov	r5, sp
 800d61e:	b088      	sub	sp, #32
 800d620:	466b      	mov	r3, sp
 800d622:	e9c3 1204 	strd	r1, r2, [r3, #16]
 800d626:	461a      	mov	r2, r3
 800d628:	6198      	str	r0, [r3, #24]
 800d62a:	2304      	movs	r3, #4
 800d62c:	f842 3f0c 	str.w	r3, [r2, #12]!
 800d630:	4823      	ldr	r0, [pc, #140]	; (800d6c0 <bt_ipm_rx_thread+0x1ac>)
 800d632:	2300      	movs	r3, #0
 800d634:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800d638:	f7f5 fc90 	bl	8002f5c <z_impl_z_log_msg2_static_create>
				net_buf_unref(buf);
 800d63c:	4620      	mov	r0, r4
 800d63e:	46ad      	mov	sp, r5
 800d640:	f7fe fc6c 	bl	800bf1c <net_buf_unref>
	z_impl_k_sem_give(sem);
 800d644:	4658      	mov	r0, fp
 800d646:	f001 fc01 	bl	800ee4c <z_impl_k_sem_give>
	while (true) {
 800d64a:	e76b      	b.n	800d524 <bt_ipm_rx_thread+0x10>
		bool discardable = false;
 800d64c:	2100      	movs	r1, #0
 800d64e:	e79e      	b.n	800d58e <bt_ipm_rx_thread+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
 800d650:	3109      	adds	r1, #9
 800d652:	4628      	mov	r0, r5
 800d654:	f007 fc19 	bl	8014e8a <net_buf_simple_add_mem>
		TL_MM_EvtDone(hcievt);
 800d658:	f8da 0000 	ldr.w	r0, [sl]
 800d65c:	f7f5 ff62 	bl	8003524 <TL_MM_EvtDone>
		bt_recv(buf);
 800d660:	4620      	mov	r0, r4
 800d662:	f7f8 fa61 	bl	8005b28 <bt_recv>
 800d666:	e7ed      	b.n	800d644 <bt_ipm_rx_thread+0x130>
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 800d668:	4642      	mov	r2, r8
 800d66a:	464b      	mov	r3, r9
 800d66c:	2003      	movs	r0, #3
 800d66e:	f7f7 f901 	bl	8004874 <bt_buf_get_rx>
			acl_hdr.handle = acl->handle;
 800d672:	7aaa      	ldrb	r2, [r5, #10]
 800d674:	7a6b      	ldrb	r3, [r5, #9]
 800d676:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d67a:	813b      	strh	r3, [r7, #8]
			acl_hdr.len = acl->length;
 800d67c:	7b2a      	ldrb	r2, [r5, #12]
 800d67e:	7aeb      	ldrb	r3, [r5, #11]
 800d680:	f100 0808 	add.w	r8, r0, #8
 800d684:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d688:	f107 0108 	add.w	r1, r7, #8
 800d68c:	2204      	movs	r2, #4
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 800d68e:	4604      	mov	r4, r0
 800d690:	4640      	mov	r0, r8
			acl_hdr.len = acl->length;
 800d692:	817b      	strh	r3, [r7, #10]
 800d694:	f007 fbf9 	bl	8014e8a <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
 800d698:	4640      	mov	r0, r8
 800d69a:	f007 fbee 	bl	8014e7a <net_buf_simple_tailroom>
			buf_add_len = acl_hdr.len;
 800d69e:	897a      	ldrh	r2, [r7, #10]
			if (buf_tailroom < buf_add_len) {
 800d6a0:	4282      	cmp	r2, r0
 800d6a2:	d8ba      	bhi.n	800d61a <bt_ipm_rx_thread+0x106>
	return net_buf_simple_add_mem(&buf->b, mem, len);
 800d6a4:	f105 010d 	add.w	r1, r5, #13
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	e7d3      	b.n	800d654 <bt_ipm_rx_thread+0x140>
			BT_ERR("Unknown BT buf type %d",
 800d6ac:	4a08      	ldr	r2, [pc, #32]	; (800d6d0 <bt_ipm_rx_thread+0x1bc>)
		switch (hcievt->evtserial.type) {
 800d6ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d6b2:	e754      	b.n	800d55e <bt_ipm_rx_thread+0x4a>
 800d6b4:	20001800 	.word	0x20001800
 800d6b8:	20000624 	.word	0x20000624
 800d6bc:	080197bf 	.word	0x080197bf
 800d6c0:	08015b84 	.word	0x08015b84
 800d6c4:	080197db 	.word	0x080197db
 800d6c8:	01000003 	.word	0x01000003
 800d6cc:	080197f0 	.word	0x080197f0
 800d6d0:	08019813 	.word	0x08019813
 800d6d4:	200005c0 	.word	0x200005c0

0800d6d8 <bt_ipm_send>:
{
 800d6d8:	b530      	push	{r4, r5, lr}
 800d6da:	4604      	mov	r4, r0
 800d6dc:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
 800d6de:	4824      	ldr	r0, [pc, #144]	; (800d770 <bt_ipm_send+0x98>)
 800d6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	f001 fbf4 	bl	800eed4 <z_impl_k_sem_take>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
 800d6ec:	7d25      	ldrb	r5, [r4, #20]
	switch (bt_buf_get_type(buf)) {
 800d6ee:	b1f5      	cbz	r5, 800d72e <bt_ipm_send+0x56>
 800d6f0:	2d02      	cmp	r5, #2
 800d6f2:	d12a      	bne.n	800d74a <bt_ipm_send+0x72>
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fc:	481d      	ldr	r0, [pc, #116]	; (800d774 <bt_ipm_send+0x9c>)
 800d6fe:	f001 fbe9 	bl	800eed4 <z_impl_k_sem_take>
	net_buf_simple_push_u8(&buf->b, val);
 800d702:	4629      	mov	r1, r5
 800d704:	f104 0008 	add.w	r0, r4, #8
 800d708:	f007 fba4 	bl	8014e54 <net_buf_simple_push_u8>
		memcpy((void *)
 800d70c:	68a1      	ldr	r1, [r4, #8]
 800d70e:	89a2      	ldrh	r2, [r4, #12]
 800d710:	4819      	ldr	r0, [pc, #100]	; (800d778 <bt_ipm_send+0xa0>)
 800d712:	f005 fbbb 	bl	8012e8c <memcpy>
		TL_BLE_SendAclData(NULL, 0);
 800d716:	2100      	movs	r1, #0
 800d718:	4608      	mov	r0, r1
 800d71a:	f7f5 fe83 	bl	8003424 <TL_BLE_SendAclData>
	z_impl_k_sem_give(sem);
 800d71e:	4814      	ldr	r0, [pc, #80]	; (800d770 <bt_ipm_send+0x98>)
 800d720:	f001 fb94 	bl	800ee4c <z_impl_k_sem_give>
	net_buf_unref(buf);
 800d724:	4620      	mov	r0, r4
 800d726:	f7fe fbf9 	bl	800bf1c <net_buf_unref>
	return 0;
 800d72a:	2000      	movs	r0, #0
 800d72c:	e01d      	b.n	800d76a <bt_ipm_send+0x92>
		ble_cmd_buff->cmdserial.type = HCI_CMD;
 800d72e:	4813      	ldr	r0, [pc, #76]	; (800d77c <bt_ipm_send+0xa4>)
		ble_cmd_buff->cmdserial.cmd.plen = buf->len;
 800d730:	89a2      	ldrh	r2, [r4, #12]
 800d732:	72c2      	strb	r2, [r0, #11]
		ble_cmd_buff->cmdserial.type = HCI_CMD;
 800d734:	2301      	movs	r3, #1
 800d736:	7203      	strb	r3, [r0, #8]
		memcpy((void *)&ble_cmd_buff->cmdserial.cmd, buf->data,
 800d738:	68a1      	ldr	r1, [r4, #8]
 800d73a:	3009      	adds	r0, #9
 800d73c:	f005 fba6 	bl	8012e8c <memcpy>
		TL_BLE_SendCmd(NULL, 0);
 800d740:	4629      	mov	r1, r5
 800d742:	4628      	mov	r0, r5
 800d744:	f7f5 fe4a 	bl	80033dc <TL_BLE_SendCmd>
		break;
 800d748:	e7e9      	b.n	800d71e <bt_ipm_send+0x46>
 800d74a:	4809      	ldr	r0, [pc, #36]	; (800d770 <bt_ipm_send+0x98>)
 800d74c:	f001 fb7e 	bl	800ee4c <z_impl_k_sem_give>
		BT_ERR("Unsupported type");
 800d750:	4b0b      	ldr	r3, [pc, #44]	; (800d780 <bt_ipm_send+0xa8>)
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	2302      	movs	r3, #2
 800d756:	9303      	str	r3, [sp, #12]
 800d758:	480a      	ldr	r0, [pc, #40]	; (800d784 <bt_ipm_send+0xac>)
 800d75a:	2300      	movs	r3, #0
 800d75c:	aa03      	add	r2, sp, #12
 800d75e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d762:	f7f5 fbfb 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800d766:	f06f 0015 	mvn.w	r0, #21
}
 800d76a:	b007      	add	sp, #28
 800d76c:	bd30      	pop	{r4, r5, pc}
 800d76e:	bf00      	nop
 800d770:	200005c0 	.word	0x200005c0
 800d774:	20000578 	.word	0x20000578
 800d778:	20038018 	.word	0x20038018
 800d77c:	200300d4 	.word	0x200300d4
 800d780:	0801982a 	.word	0x0801982a
 800d784:	08015b84 	.word	0x08015b84

0800d788 <shci_cmd_resp_release>:
 800d788:	4801      	ldr	r0, [pc, #4]	; (800d790 <shci_cmd_resp_release+0x8>)
 800d78a:	f001 bb5f 	b.w	800ee4c <z_impl_k_sem_give>
 800d78e:	bf00      	nop
 800d790:	20000590 	.word	0x20000590

0800d794 <shci_cmd_resp_wait>:
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800d794:	220a      	movs	r2, #10
 800d796:	fba0 2302 	umull	r2, r3, r0, r2
	return z_impl_k_sem_take(sem, timeout);
 800d79a:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <shci_cmd_resp_wait+0xc>)
 800d79c:	f001 bb9a 	b.w	800eed4 <z_impl_k_sem_take>
 800d7a0:	20000590 	.word	0x20000590

0800d7a4 <ipcc_reset>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d7a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800d7a8:	b507      	push	{r0, r1, r2, lr}
 800d7aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d7b0:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7b8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800d7ba:	9b01      	ldr	r3, [sp, #4]
 800d7bc:	4b10      	ldr	r3, [pc, #64]	; (800d800 <ipcc_reset+0x5c>)
 800d7be:	223f      	movs	r2, #63	; 0x3f
 800d7c0:	609a      	str	r2, [r3, #8]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800d7c2:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 800d7ca:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800d7cc:	695a      	ldr	r2, [r3, #20]
 800d7ce:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 800d7d2:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d7da:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 800d7dc:	695a      	ldr	r2, [r3, #20]
 800d7de:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d7e2:	615a      	str	r2, [r3, #20]
	IRQ_CONNECT(IPCC_C1_RX_IRQn, 0, HW_IPCC_Rx_Handler, NULL, 0);
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	202c      	movs	r0, #44	; 0x2c
 800d7ea:	f7f6 f9f7 	bl	8003bdc <z_arm_irq_priority_set>
	IRQ_CONNECT(IPCC_C1_TX_IRQn, 0, HW_IPCC_Tx_Handler, NULL, 0);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	202d      	movs	r0, #45	; 0x2d
}
 800d7f4:	b003      	add	sp, #12
 800d7f6:	f85d eb04 	ldr.w	lr, [sp], #4
	IRQ_CONNECT(IPCC_C1_TX_IRQn, 0, HW_IPCC_Tx_Handler, NULL, 0);
 800d7fa:	f7f6 b9ef 	b.w	8003bdc <z_arm_irq_priority_set>
 800d7fe:	bf00      	nop
 800d800:	58000c00 	.word	0x58000c00

0800d804 <transport_init>:
{
 800d804:	b510      	push	{r4, lr}
	shci_init_config.p_cmdbuffer = (uint8_t *)&SystemCmdBuffer;
 800d806:	4c15      	ldr	r4, [pc, #84]	; (800d85c <transport_init+0x58>)
{
 800d808:	b08c      	sub	sp, #48	; 0x30
	TL_Init();
 800d80a:	f7f5 fd9f 	bl	800334c <TL_Init>
	shci_init_config.p_cmdbuffer = (uint8_t *)&SystemCmdBuffer;
 800d80e:	f504 7384 	add.w	r3, r4, #264	; 0x108
	shci_init(sysevt_received, (void *) &shci_init_config);
 800d812:	4669      	mov	r1, sp
	shci_init_config.p_cmdbuffer = (uint8_t *)&SystemCmdBuffer;
 800d814:	9300      	str	r3, [sp, #0]
	shci_init(sysevt_received, (void *) &shci_init_config);
 800d816:	4812      	ldr	r0, [pc, #72]	; (800d860 <transport_init+0x5c>)
	shci_init_config.StatusNotCallBack = syscmd_status_not;
 800d818:	4b12      	ldr	r3, [pc, #72]	; (800d864 <transport_init+0x60>)
 800d81a:	9301      	str	r3, [sp, #4]
	shci_init(sysevt_received, (void *) &shci_init_config);
 800d81c:	f7f5 fcde 	bl	80031dc <shci_init>
	tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800d820:	f504 7305 	add.w	r3, r4, #532	; 0x214
 800d824:	9306      	str	r3, [sp, #24]
	tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800d826:	f504 7348 	add.w	r3, r4, #800	; 0x320
 800d82a:	9307      	str	r3, [sp, #28]
	tl_mm_config.p_AsynchEvtPool = EvtPool;
 800d82c:	f204 432c 	addw	r3, r4, #1068	; 0x42c
 800d830:	9308      	str	r3, [sp, #32]
	TL_MM_Init(&tl_mm_config);
 800d832:	a806      	add	r0, sp, #24
	tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800d834:	f240 533c 	movw	r3, #1340	; 0x53c
 800d838:	9309      	str	r3, [sp, #36]	; 0x24
	TL_MM_Init(&tl_mm_config);
 800d83a:	f7f5 fe53 	bl	80034e4 <TL_MM_Init>
	tl_ble_config.p_cmdbuffer = (uint8_t *)&BleCmdBuffer;
 800d83e:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <transport_init+0x64>)
	tl_ble_config.p_AclDataBuffer = HciAclDataBuffer;
 800d840:	e9cd 3404 	strd	r3, r4, [sp, #16]
	tl_ble_config.IoBusEvtCallBack = TM_EvtReceivedCb;
 800d844:	4b09      	ldr	r3, [pc, #36]	; (800d86c <transport_init+0x68>)
 800d846:	9302      	str	r3, [sp, #8]
	TL_BLE_Init((void *)&tl_ble_config);
 800d848:	a802      	add	r0, sp, #8
	tl_ble_config.IoBusAclDataTxAck = TM_AclDataAck;
 800d84a:	4b09      	ldr	r3, [pc, #36]	; (800d870 <transport_init+0x6c>)
 800d84c:	9303      	str	r3, [sp, #12]
	TL_BLE_Init((void *)&tl_ble_config);
 800d84e:	f7f5 fda1 	bl	8003394 <TL_BLE_Init>
	TL_Enable();
 800d852:	f004 feda 	bl	801260a <TL_Enable>
}
 800d856:	b00c      	add	sp, #48	; 0x30
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	bf00      	nop
 800d85c:	20038010 	.word	0x20038010
 800d860:	0800d499 	.word	0x0800d499
 800d864:	080152ef 	.word	0x080152ef
 800d868:	200300d4 	.word	0x200300d4
 800d86c:	0800d481 	.word	0x0800d481
 800d870:	0800d48d 	.word	0x0800d48d

0800d874 <c2_reset>:
{
 800d874:	b510      	push	{r4, lr}
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800d876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d87a:	b08e      	sub	sp, #56	; 0x38
 800d87c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d880:	0152      	lsls	r2, r2, #5
 800d882:	d518      	bpl.n	800d8b6 <c2_reset+0x42>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800d884:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d888:	00d4      	lsls	r4, r2, #3
 800d88a:	d414      	bmi.n	800d8b6 <c2_reset+0x42>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d88c:	4a3b      	ldr	r2, [pc, #236]	; (800d97c <c2_reset+0x108>)
 800d88e:	6811      	ldr	r1, [r2, #0]
 800d890:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d894:	6011      	str	r1, [r2, #0]
 800d896:	6811      	ldr	r1, [r2, #0]
 800d898:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d89c:	6011      	str	r1, [r2, #0]
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d89e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d8a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d8a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d8aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d8ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d8b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d8b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d8be:	f042 0201 	orr.w	r2, r2, #1
 800d8c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d8c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d8ca:	0790      	lsls	r0, r2, #30
 800d8cc:	d5fb      	bpl.n	800d8c6 <c2_reset+0x52>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d8ce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d8d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d8d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d8de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d8e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d8e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d8ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d8f2:	f022 0204 	bic.w	r2, r2, #4
 800d8f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d8fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d8fe:	f042 0201 	orr.w	r2, r2, #1
 800d902:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800d906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d90a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d90e:	0791      	lsls	r1, r2, #30
 800d910:	d5fb      	bpl.n	800d90a <c2_reset+0x96>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d916:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800d91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	ipcc_reset();
 800d91e:	f7ff ff41 	bl	800d7a4 <ipcc_reset>
	transport_init();
 800d922:	f7ff ff6f 	bl	800d804 <transport_init>
 800d926:	4816      	ldr	r0, [pc, #88]	; (800d980 <c2_reset+0x10c>)
 800d928:	f241 3288 	movw	r2, #5000	; 0x1388
 800d92c:	2300      	movs	r3, #0
 800d92e:	f001 fad1 	bl	800eed4 <z_impl_k_sem_take>
	if (k_sem_take(&c2_started, STM32WB_C2_LOCK_TIMEOUT)) {
 800d932:	4604      	mov	r4, r0
 800d934:	b9f0      	cbnz	r0, 800d974 <c2_reset+0x100>
	SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet = {
 800d936:	4601      	mov	r1, r0
 800d938:	2231      	movs	r2, #49	; 0x31
 800d93a:	a801      	add	r0, sp, #4
 800d93c:	f005 fab1 	bl	8012ea2 <memset>
 800d940:	4a10      	ldr	r2, [pc, #64]	; (800d984 <c2_reset+0x110>)
 800d942:	4b11      	ldr	r3, [pc, #68]	; (800d988 <c2_reset+0x114>)
 800d944:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d948:	4b10      	ldr	r3, [pc, #64]	; (800d98c <c2_reset+0x118>)
 800d94a:	9308      	str	r3, [sp, #32]
 800d94c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d950:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d954:	f04f 33ff 	mov.w	r3, #4294967295
 800d958:	930a      	str	r3, [sp, #40]	; 0x28
 800d95a:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 800d95e:	3348      	adds	r3, #72	; 0x48
	SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d960:	a801      	add	r0, sp, #4
	SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet = {
 800d962:	930b      	str	r3, [sp, #44]	; 0x2c
	SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d964:	f004 fe36 	bl	80125d4 <SHCI_C2_BLE_Init>
	c2_started_flag = true;
 800d968:	4b09      	ldr	r3, [pc, #36]	; (800d990 <c2_reset+0x11c>)
 800d96a:	2201      	movs	r2, #1
 800d96c:	701a      	strb	r2, [r3, #0]
}
 800d96e:	4620      	mov	r0, r4
 800d970:	b00e      	add	sp, #56	; 0x38
 800d972:	bd10      	pop	{r4, pc}
		return -ETIMEDOUT;
 800d974:	f06f 0473 	mvn.w	r4, #115	; 0x73
 800d978:	e7f9      	b.n	800d96e <c2_reset+0xfa>
 800d97a:	bf00      	nop
 800d97c:	58000400 	.word	0x58000400
 800d980:	200005a8 	.word	0x200005a8
 800d984:	00080044 	.word	0x00080044
 800d988:	01020540 	.word	0x01020540
 800d98c:	009c2712 	.word	0x009c2712
 800d990:	20001989 	.word	0x20001989

0800d994 <_bt_ipm_init>:
	.close          = bt_ipm_close,
	.send           = bt_ipm_send,
};

static int _bt_ipm_init(const struct device *unused)
{
 800d994:	b508      	push	{r3, lr}
	int err;

	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
 800d996:	4803      	ldr	r0, [pc, #12]	; (800d9a4 <_bt_ipm_init+0x10>)
 800d998:	f7f8 f902 	bl	8005ba0 <bt_hci_driver_register>
	if (err) {
		return err;
	}

	return 0;
}
 800d99c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = c2_reset();
 800d9a0:	f7ff bf68 	b.w	800d874 <c2_reset>
 800d9a4:	08016658 	.word	0x08016658

0800d9a8 <bt_get_ble_addr>:
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d9a8:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <bt_get_ble_addr+0x28>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
	if (udn != 0xFFFFFFFF) {
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	d00d      	beq.n	800d9cc <bt_get_ble_addr+0x24>
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800d9b0:	4a08      	ldr	r2, [pc, #32]	; (800d9d4 <bt_get_ble_addr+0x2c>)
		bd_addr_udn.val[0] = (uint8_t)(udn & 0x000000FF);
 800d9b2:	4809      	ldr	r0, [pc, #36]	; (800d9d8 <bt_get_ble_addr+0x30>)
 800d9b4:	6812      	ldr	r2, [r2, #0]
 800d9b6:	7003      	strb	r3, [r0, #0]
		bd_addr_udn.val[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d9b8:	0a19      	lsrs	r1, r3, #8
		bd_addr_udn.val[2] = (uint8_t)((udn & 0x00FF0000) >> 16);
 800d9ba:	0c1b      	lsrs	r3, r3, #16
 800d9bc:	7083      	strb	r3, [r0, #2]
		bd_addr_udn.val[3] = (uint8_t)device_id;
 800d9be:	70c2      	strb	r2, [r0, #3]
 800d9c0:	0a13      	lsrs	r3, r2, #8
		bd_addr_udn.val[5] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d9c2:	0c12      	lsrs	r2, r2, #16
		bd_addr_udn.val[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d9c4:	7041      	strb	r1, [r0, #1]
		bd_addr_udn.val[4] = (uint8_t)(company_id & 0x000000FF);
 800d9c6:	7103      	strb	r3, [r0, #4]
		bd_addr_udn.val[5] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d9c8:	7142      	strb	r2, [r0, #5]
		bd_addr = &bd_addr_udn;
 800d9ca:	4770      	bx	lr
		bd_addr = NULL;
 800d9cc:	2000      	movs	r0, #0
}
 800d9ce:	4770      	bx	lr
 800d9d0:	1fff7580 	.word	0x1fff7580
 800d9d4:	1fff7584 	.word	0x1fff7584
 800d9d8:	20001983 	.word	0x20001983

0800d9dc <bt_ipm_open>:
{
 800d9dc:	b570      	push	{r4, r5, r6, lr}
	if (!c2_started_flag) {
 800d9de:	4b44      	ldr	r3, [pc, #272]	; (800daf0 <bt_ipm_open+0x114>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
{
 800d9e2:	b090      	sub	sp, #64	; 0x40
	if (!c2_started_flag) {
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d065      	beq.n	800dab4 <bt_ipm_open+0xd8>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	2400      	movs	r4, #0
 800d9ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d9f2:	f06f 0309 	mvn.w	r3, #9
 800d9f6:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800d9fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800d9fe:	4b3d      	ldr	r3, [pc, #244]	; (800daf4 <bt_ipm_open+0x118>)
 800da00:	493d      	ldr	r1, [pc, #244]	; (800daf8 <bt_ipm_open+0x11c>)
 800da02:	9400      	str	r4, [sp, #0]
 800da04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da08:	483c      	ldr	r0, [pc, #240]	; (800dafc <bt_ipm_open+0x120>)
 800da0a:	f000 ffa7 	bl	800e95c <z_impl_k_thread_create>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 800da0e:	4621      	mov	r1, r4
 800da10:	aa09      	add	r2, sp, #36	; 0x24
 800da12:	f640 4003 	movw	r0, #3075	; 0xc03
 800da16:	f7f7 fc4b 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800da1a:	4604      	mov	r4, r0
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d155      	bne.n	800dacc <bt_ipm_open+0xf0>
	net_buf_unref(rsp);
 800da20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da22:	f7fe fa7b 	bl	800bf1c <net_buf_unref>
	uid_addr = bt_get_ble_addr();
 800da26:	f7ff ffbf 	bl	800d9a8 <bt_get_ble_addr>
	if (!uid_addr) {
 800da2a:	4605      	mov	r5, r0
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d050      	beq.n	800dad2 <bt_ipm_open+0xf6>
	buf = bt_hci_cmd_create(ACI_HAL_WRITE_CONFIG_DATA, sizeof(*param));
 800da30:	2108      	movs	r1, #8
 800da32:	f64f 400c 	movw	r0, #64524	; 0xfc0c
 800da36:	f7f7 fbf3 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 800da3a:	4606      	mov	r6, r0
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d048      	beq.n	800dad2 <bt_ipm_open+0xf6>
	return net_buf_simple_add(&buf->b, len);
 800da40:	2108      	movs	r1, #8
 800da42:	4408      	add	r0, r1
 800da44:	f7fe fb9a 	bl	800c17c <net_buf_simple_add>
	param->length = 6;
 800da48:	2206      	movs	r2, #6
	param->config_offset = HCI_CONFIG_DATA_PUBADDR_OFFSET;
 800da4a:	7004      	strb	r4, [r0, #0]
	param->length = 6;
 800da4c:	7042      	strb	r2, [r0, #1]
	param->value[0] = uid_addr->val[0];
 800da4e:	782a      	ldrb	r2, [r5, #0]
 800da50:	7082      	strb	r2, [r0, #2]
	param->value[1] = uid_addr->val[1];
 800da52:	786a      	ldrb	r2, [r5, #1]
 800da54:	70c2      	strb	r2, [r0, #3]
	param->value[2] = uid_addr->val[2];
 800da56:	78aa      	ldrb	r2, [r5, #2]
 800da58:	7102      	strb	r2, [r0, #4]
	param->value[3] = uid_addr->val[3];
 800da5a:	78ea      	ldrb	r2, [r5, #3]
 800da5c:	7142      	strb	r2, [r0, #5]
	param->value[4] = uid_addr->val[4];
 800da5e:	792a      	ldrb	r2, [r5, #4]
 800da60:	7182      	strb	r2, [r0, #6]
	param->value[5] = uid_addr->val[5];
 800da62:	796a      	ldrb	r2, [r5, #5]
 800da64:	71c2      	strb	r2, [r0, #7]
	err = bt_hci_cmd_send_sync(ACI_HAL_WRITE_CONFIG_DATA, buf, &rsp);
 800da66:	4631      	mov	r1, r6
 800da68:	aa0a      	add	r2, sp, #40	; 0x28
 800da6a:	f64f 400c 	movw	r0, #64524	; 0xfc0c
 800da6e:	f7f7 fc1f 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800da72:	bb70      	cbnz	r0, 800dad2 <bt_ipm_open+0xf6>
	net_buf_unref(rsp);
 800da74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da76:	f7fe fa51 	bl	800bf1c <net_buf_unref>
	buf = bt_hci_cmd_create(ACI_WRITE_SET_TX_POWER_LEVEL, 3);
 800da7a:	2103      	movs	r1, #3
 800da7c:	f64f 400f 	movw	r0, #64527	; 0xfc0f
 800da80:	f7f7 fbce 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 800da84:	4604      	mov	r4, r0
 800da86:	b380      	cbz	r0, 800daea <bt_ipm_open+0x10e>
 800da88:	2103      	movs	r1, #3
 800da8a:	3008      	adds	r0, #8
 800da8c:	f7fe fb76 	bl	800c17c <net_buf_simple_add>
	param->cmd = 0x0F;
 800da90:	230f      	movs	r3, #15
 800da92:	7003      	strb	r3, [r0, #0]
	param->value[0] = 0x18;
 800da94:	2318      	movs	r3, #24
 800da96:	7043      	strb	r3, [r0, #1]
	param->value[1] = 0x01;
 800da98:	2301      	movs	r3, #1
 800da9a:	7083      	strb	r3, [r0, #2]
	err = bt_hci_cmd_send_sync(ACI_WRITE_SET_TX_POWER_LEVEL, buf, &rsp);
 800da9c:	4621      	mov	r1, r4
 800da9e:	aa09      	add	r2, sp, #36	; 0x24
 800daa0:	f64f 400f 	movw	r0, #64527	; 0xfc0f
 800daa4:	f7f7 fc04 	bl	80052b0 <bt_hci_cmd_send_sync>
	if (err) {
 800daa8:	4604      	mov	r4, r0
 800daaa:	b978      	cbnz	r0, 800dacc <bt_ipm_open+0xf0>
	net_buf_unref(rsp);
 800daac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daae:	f7fe fa35 	bl	800bf1c <net_buf_unref>
	if (err) {
 800dab2:	e00b      	b.n	800dacc <bt_ipm_open+0xf0>
		SHCI_C2_Reinit();
 800dab4:	f004 fd9c 	bl	80125f0 <SHCI_C2_Reinit>
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 800dab8:	4a11      	ldr	r2, [pc, #68]	; (800db00 <bt_ipm_open+0x124>)
 800daba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	d5fb      	bpl.n	800daba <bt_ipm_open+0xde>
		err = c2_reset();
 800dac2:	f7ff fed7 	bl	800d874 <c2_reset>
		if (err) {
 800dac6:	4604      	mov	r4, r0
 800dac8:	2800      	cmp	r0, #0
 800daca:	d08d      	beq.n	800d9e8 <bt_ipm_open+0xc>
}
 800dacc:	4620      	mov	r0, r4
 800dace:	b010      	add	sp, #64	; 0x40
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Can't set BLE UID addr");
 800dad2:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <bt_ipm_open+0x128>)
 800dad4:	930e      	str	r3, [sp, #56]	; 0x38
 800dad6:	2302      	movs	r3, #2
 800dad8:	930d      	str	r3, [sp, #52]	; 0x34
 800dada:	480b      	ldr	r0, [pc, #44]	; (800db08 <bt_ipm_open+0x12c>)
 800dadc:	2300      	movs	r3, #0
 800dade:	aa0d      	add	r2, sp, #52	; 0x34
 800dae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800dae4:	f7f5 fa3a 	bl	8002f5c <z_impl_z_log_msg2_static_create>
 800dae8:	e7c7      	b.n	800da7a <bt_ipm_open+0x9e>
		return -ENOBUFS;
 800daea:	f06f 0468 	mvn.w	r4, #104	; 0x68
 800daee:	e7ed      	b.n	800dacc <bt_ipm_open+0xf0>
 800daf0:	20001989 	.word	0x20001989
 800daf4:	0800d515 	.word	0x0800d515
 800daf8:	20002380 	.word	0x20002380
 800dafc:	200012f0 	.word	0x200012f0
 800db00:	58000400 	.word	0x58000400
 800db04:	0801983b 	.word	0x0801983b
 800db08:	08015b84 	.word	0x08015b84

0800db0c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800db0c:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <elapsed+0x30>)
 800db0e:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800db10:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 800db12:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800db14:	4b0a      	ldr	r3, [pc, #40]	; (800db40 <elapsed+0x34>)
 800db16:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 800db1a:	b510      	push	{r4, lr}
 800db1c:	4909      	ldr	r1, [pc, #36]	; (800db44 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800db1e:	d101      	bne.n	800db24 <elapsed+0x18>
	    || (val1 < val2)) {
 800db20:	4282      	cmp	r2, r0
 800db22:	d205      	bcs.n	800db30 <elapsed+0x24>
		overflow_cyc += last_load;
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	680c      	ldr	r4, [r1, #0]
 800db28:	4422      	add	r2, r4
 800db2a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800db2c:	4a03      	ldr	r2, [pc, #12]	; (800db3c <elapsed+0x30>)
 800db2e:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	680a      	ldr	r2, [r1, #0]
 800db34:	4413      	add	r3, r2
}
 800db36:	1a18      	subs	r0, r3, r0
 800db38:	bd10      	pop	{r4, pc}
 800db3a:	bf00      	nop
 800db3c:	e000e010 	.word	0xe000e010
 800db40:	20001814 	.word	0x20001814
 800db44:	2000180c 	.word	0x2000180c

0800db48 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db48:	4b09      	ldr	r3, [pc, #36]	; (800db70 <sys_clock_driver_init+0x28>)
 800db4a:	2210      	movs	r2, #16
 800db4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800db50:	4b08      	ldr	r3, [pc, #32]	; (800db74 <sys_clock_driver_init+0x2c>)
 800db52:	f640 427f 	movw	r2, #3199	; 0xc7f
 800db56:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800db58:	4b07      	ldr	r3, [pc, #28]	; (800db78 <sys_clock_driver_init+0x30>)
 800db5a:	2000      	movs	r0, #0
 800db5c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800db5e:	4b07      	ldr	r3, [pc, #28]	; (800db7c <sys_clock_driver_init+0x34>)
 800db60:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800db62:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	f042 0207 	orr.w	r2, r2, #7
 800db6a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	e000ed00 	.word	0xe000ed00
 800db74:	2000180c 	.word	0x2000180c
 800db78:	20001814 	.word	0x20001814
 800db7c:	e000e010 	.word	0xe000e010

0800db80 <sys_clock_isr>:
{
 800db80:	b508      	push	{r3, lr}
	elapsed();
 800db82:	f7ff ffc3 	bl	800db0c <elapsed>
	cycle_count += overflow_cyc;
 800db86:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <sys_clock_isr+0x38>)
 800db88:	4a0c      	ldr	r2, [pc, #48]	; (800dbbc <sys_clock_isr+0x3c>)
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	6811      	ldr	r1, [r2, #0]
 800db8e:	4408      	add	r0, r1
 800db90:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800db92:	2200      	movs	r2, #0
 800db94:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800db96:	4a0a      	ldr	r2, [pc, #40]	; (800dbc0 <sys_clock_isr+0x40>)
 800db98:	6811      	ldr	r1, [r2, #0]
 800db9a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800db9e:	1a40      	subs	r0, r0, r1
 800dba0:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 800dba4:	fb03 1300 	mla	r3, r3, r0, r1
 800dba8:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800dbaa:	f003 faa7 	bl	80110fc <sys_clock_announce>
}
 800dbae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800dbb2:	f7f6 b923 	b.w	8003dfc <z_arm_exc_exit>
 800dbb6:	bf00      	nop
 800dbb8:	20001814 	.word	0x20001814
 800dbbc:	20001808 	.word	0x20001808
 800dbc0:	20001804 	.word	0x20001804

0800dbc4 <sys_clock_set_timeout>:
{
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	4d43      	ldr	r5, [pc, #268]	; (800dcd4 <sys_clock_set_timeout+0x110>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800dbc8:	b151      	cbz	r1, 800dbe0 <sys_clock_set_timeout+0x1c>
 800dbca:	1c42      	adds	r2, r0, #1
 800dbcc:	d108      	bne.n	800dbe0 <sys_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800dbce:	4a42      	ldr	r2, [pc, #264]	; (800dcd8 <sys_clock_set_timeout+0x114>)
 800dbd0:	6813      	ldr	r3, [r2, #0]
 800dbd2:	f023 0301 	bic.w	r3, r3, #1
 800dbd6:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 800dbd8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800dbdc:	602b      	str	r3, [r5, #0]
}
 800dbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800dbe0:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800dbe2:	682e      	ldr	r6, [r5, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800dbe4:	d03a      	beq.n	800dc5c <sys_clock_set_timeout+0x98>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800dbe6:	2801      	cmp	r0, #1
 800dbe8:	dd3b      	ble.n	800dc62 <sys_clock_set_timeout+0x9e>
 800dbea:	f241 4479 	movw	r4, #5241	; 0x1479
 800dbee:	42a0      	cmp	r0, r4
 800dbf0:	dc00      	bgt.n	800dbf4 <sys_clock_set_timeout+0x30>
 800dbf2:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 800dbf4:	f04f 0310 	mov.w	r3, #16
 800dbf8:	f3ef 8711 	mrs	r7, BASEPRI
 800dbfc:	f383 8812 	msr	BASEPRI_MAX, r3
 800dc00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800dc04:	4835      	ldr	r0, [pc, #212]	; (800dcdc <sys_clock_set_timeout+0x118>)
 800dc06:	f000 ff73 	bl	800eaf0 <z_spin_lock_valid>
 800dc0a:	b968      	cbnz	r0, 800dc28 <sys_clock_set_timeout+0x64>
 800dc0c:	4a34      	ldr	r2, [pc, #208]	; (800dce0 <sys_clock_set_timeout+0x11c>)
 800dc0e:	4935      	ldr	r1, [pc, #212]	; (800dce4 <sys_clock_set_timeout+0x120>)
 800dc10:	4835      	ldr	r0, [pc, #212]	; (800dce8 <sys_clock_set_timeout+0x124>)
 800dc12:	238e      	movs	r3, #142	; 0x8e
 800dc14:	f004 fb48 	bl	80122a8 <assert_print>
 800dc18:	4930      	ldr	r1, [pc, #192]	; (800dcdc <sys_clock_set_timeout+0x118>)
 800dc1a:	4834      	ldr	r0, [pc, #208]	; (800dcec <sys_clock_set_timeout+0x128>)
 800dc1c:	f004 fb44 	bl	80122a8 <assert_print>
 800dc20:	482f      	ldr	r0, [pc, #188]	; (800dce0 <sys_clock_set_timeout+0x11c>)
 800dc22:	218e      	movs	r1, #142	; 0x8e
 800dc24:	f004 fb39 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800dc28:	482c      	ldr	r0, [pc, #176]	; (800dcdc <sys_clock_set_timeout+0x118>)
 800dc2a:	f000 ff7f 	bl	800eb2c <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
 800dc2e:	f7ff ff6d 	bl	800db0c <elapsed>
	val1 = SysTick->VAL;
 800dc32:	4b29      	ldr	r3, [pc, #164]	; (800dcd8 <sys_clock_set_timeout+0x114>)
	cycle_count += pending;
 800dc34:	4a2e      	ldr	r2, [pc, #184]	; (800dcf0 <sys_clock_set_timeout+0x12c>)
	val1 = SysTick->VAL;
 800dc36:	6899      	ldr	r1, [r3, #8]
	cycle_count += pending;
 800dc38:	6813      	ldr	r3, [r2, #0]
 800dc3a:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800dc3c:	4b2d      	ldr	r3, [pc, #180]	; (800dcf4 <sys_clock_set_timeout+0x130>)
	cycle_count += pending;
 800dc3e:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
 800dc40:	f04f 0c00 	mov.w	ip, #0
 800dc44:	f8c3 c000 	str.w	ip, [r3]
	uint32_t unannounced = cycle_count - announced_cycles;
 800dc48:	4b2b      	ldr	r3, [pc, #172]	; (800dcf8 <sys_clock_set_timeout+0x134>)
 800dc4a:	f8d3 c000 	ldr.w	ip, [r3]
	if ((int32_t)unannounced < 0) {
 800dc4e:	ebb0 030c 	subs.w	r3, r0, ip
 800dc52:	d508      	bpl.n	800dc66 <sys_clock_set_timeout+0xa2>
		delay = MAX(delay, MIN_DELAY);
 800dc54:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800dc58:	602b      	str	r3, [r5, #0]
 800dc5a:	e017      	b.n	800dc8c <sys_clock_set_timeout+0xc8>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800dc5c:	f241 4079 	movw	r0, #5241	; 0x1479
 800dc60:	e7c7      	b.n	800dbf2 <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800dc62:	2400      	movs	r4, #0
 800dc64:	e7c6      	b.n	800dbf4 <sys_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
 800dc66:	f44f 6e48 	mov.w	lr, #3200	; 0xc80
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800dc6a:	fb0e 3304 	mla	r3, lr, r4, r3
		delay -= unannounced;
 800dc6e:	ebac 0c00 	sub.w	ip, ip, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800dc72:	f603 437f 	addw	r3, r3, #3199	; 0xc7f
 800dc76:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 800dc7a:	fb0e c303 	mla	r3, lr, r3, ip
		delay = MAX(delay, MIN_DELAY);
 800dc7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc82:	d9e7      	bls.n	800dc54 <sys_clock_set_timeout+0x90>
		if (delay > MAX_CYCLES) {
 800dc84:	4c1d      	ldr	r4, [pc, #116]	; (800dcfc <sys_clock_set_timeout+0x138>)
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	d9e6      	bls.n	800dc58 <sys_clock_set_timeout+0x94>
			last_load = MAX_CYCLES;
 800dc8a:	602c      	str	r4, [r5, #0]
	val2 = SysTick->VAL;
 800dc8c:	4c12      	ldr	r4, [pc, #72]	; (800dcd8 <sys_clock_set_timeout+0x114>)
	SysTick->LOAD = last_load - 1;
 800dc8e:	682d      	ldr	r5, [r5, #0]
	val2 = SysTick->VAL;
 800dc90:	68a3      	ldr	r3, [r4, #8]
	if (val1 < val2) {
 800dc92:	4299      	cmp	r1, r3
		cycle_count += (val1 + (last_load_ - val2));
 800dc94:	bf38      	it	cc
 800dc96:	1989      	addcc	r1, r1, r6
	SysTick->LOAD = last_load - 1;
 800dc98:	3d01      	subs	r5, #1
		cycle_count += (val1 - val2);
 800dc9a:	1ac9      	subs	r1, r1, r3
	SysTick->LOAD = last_load - 1;
 800dc9c:	6065      	str	r5, [r4, #4]
		cycle_count += (val1 - val2);
 800dc9e:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
 800dca0:	2500      	movs	r5, #0
 800dca2:	60a5      	str	r5, [r4, #8]
		cycle_count += (val1 - val2);
 800dca4:	6010      	str	r0, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800dca6:	480d      	ldr	r0, [pc, #52]	; (800dcdc <sys_clock_set_timeout+0x118>)
 800dca8:	f000 ff30 	bl	800eb0c <z_spin_unlock_valid>
 800dcac:	b968      	cbnz	r0, 800dcca <sys_clock_set_timeout+0x106>
 800dcae:	4a0c      	ldr	r2, [pc, #48]	; (800dce0 <sys_clock_set_timeout+0x11c>)
 800dcb0:	4913      	ldr	r1, [pc, #76]	; (800dd00 <sys_clock_set_timeout+0x13c>)
 800dcb2:	480d      	ldr	r0, [pc, #52]	; (800dce8 <sys_clock_set_timeout+0x124>)
 800dcb4:	23b9      	movs	r3, #185	; 0xb9
 800dcb6:	f004 faf7 	bl	80122a8 <assert_print>
 800dcba:	4908      	ldr	r1, [pc, #32]	; (800dcdc <sys_clock_set_timeout+0x118>)
 800dcbc:	4811      	ldr	r0, [pc, #68]	; (800dd04 <sys_clock_set_timeout+0x140>)
 800dcbe:	f004 faf3 	bl	80122a8 <assert_print>
 800dcc2:	4807      	ldr	r0, [pc, #28]	; (800dce0 <sys_clock_set_timeout+0x11c>)
 800dcc4:	21b9      	movs	r1, #185	; 0xb9
 800dcc6:	f004 fae8 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800dcca:	f387 8811 	msr	BASEPRI, r7
 800dcce:	f3bf 8f6f 	isb	sy
 800dcd2:	e784      	b.n	800dbde <sys_clock_set_timeout+0x1a>
 800dcd4:	2000180c 	.word	0x2000180c
 800dcd8:	e000e010 	.word	0xe000e010
 800dcdc:	20001810 	.word	0x20001810
 800dce0:	080170fb 	.word	0x080170fb
 800dce4:	08017121 	.word	0x08017121
 800dce8:	08016836 	.word	0x08016836
 800dcec:	08017136 	.word	0x08017136
 800dcf0:	20001808 	.word	0x20001808
 800dcf4:	20001814 	.word	0x20001814
 800dcf8:	20001804 	.word	0x20001804
 800dcfc:	00ffe880 	.word	0x00ffe880
 800dd00:	0801714e 	.word	0x0801714e
 800dd04:	08017165 	.word	0x08017165

0800dd08 <sys_clock_elapsed>:
{
 800dd08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800dd0a:	f04f 0310 	mov.w	r3, #16
 800dd0e:	f3ef 8511 	mrs	r5, BASEPRI
 800dd12:	f383 8812 	msr	BASEPRI_MAX, r3
 800dd16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800dd1a:	481c      	ldr	r0, [pc, #112]	; (800dd8c <sys_clock_elapsed+0x84>)
 800dd1c:	f000 fee8 	bl	800eaf0 <z_spin_lock_valid>
 800dd20:	b968      	cbnz	r0, 800dd3e <sys_clock_elapsed+0x36>
 800dd22:	4a1b      	ldr	r2, [pc, #108]	; (800dd90 <sys_clock_elapsed+0x88>)
 800dd24:	491b      	ldr	r1, [pc, #108]	; (800dd94 <sys_clock_elapsed+0x8c>)
 800dd26:	481c      	ldr	r0, [pc, #112]	; (800dd98 <sys_clock_elapsed+0x90>)
 800dd28:	238e      	movs	r3, #142	; 0x8e
 800dd2a:	f004 fabd 	bl	80122a8 <assert_print>
 800dd2e:	4917      	ldr	r1, [pc, #92]	; (800dd8c <sys_clock_elapsed+0x84>)
 800dd30:	481a      	ldr	r0, [pc, #104]	; (800dd9c <sys_clock_elapsed+0x94>)
 800dd32:	f004 fab9 	bl	80122a8 <assert_print>
 800dd36:	4816      	ldr	r0, [pc, #88]	; (800dd90 <sys_clock_elapsed+0x88>)
 800dd38:	218e      	movs	r1, #142	; 0x8e
 800dd3a:	f004 faae 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800dd3e:	4813      	ldr	r0, [pc, #76]	; (800dd8c <sys_clock_elapsed+0x84>)
 800dd40:	f000 fef4 	bl	800eb2c <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800dd44:	f7ff fee2 	bl	800db0c <elapsed>
 800dd48:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <sys_clock_elapsed+0x98>)
 800dd4a:	681c      	ldr	r4, [r3, #0]
 800dd4c:	4b15      	ldr	r3, [pc, #84]	; (800dda4 <sys_clock_elapsed+0x9c>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	1ae4      	subs	r4, r4, r3
 800dd52:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800dd54:	480d      	ldr	r0, [pc, #52]	; (800dd8c <sys_clock_elapsed+0x84>)
 800dd56:	f000 fed9 	bl	800eb0c <z_spin_unlock_valid>
 800dd5a:	b968      	cbnz	r0, 800dd78 <sys_clock_elapsed+0x70>
 800dd5c:	4a0c      	ldr	r2, [pc, #48]	; (800dd90 <sys_clock_elapsed+0x88>)
 800dd5e:	4912      	ldr	r1, [pc, #72]	; (800dda8 <sys_clock_elapsed+0xa0>)
 800dd60:	480d      	ldr	r0, [pc, #52]	; (800dd98 <sys_clock_elapsed+0x90>)
 800dd62:	23b9      	movs	r3, #185	; 0xb9
 800dd64:	f004 faa0 	bl	80122a8 <assert_print>
 800dd68:	4908      	ldr	r1, [pc, #32]	; (800dd8c <sys_clock_elapsed+0x84>)
 800dd6a:	4810      	ldr	r0, [pc, #64]	; (800ddac <sys_clock_elapsed+0xa4>)
 800dd6c:	f004 fa9c 	bl	80122a8 <assert_print>
 800dd70:	4807      	ldr	r0, [pc, #28]	; (800dd90 <sys_clock_elapsed+0x88>)
 800dd72:	21b9      	movs	r1, #185	; 0xb9
 800dd74:	f004 fa91 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800dd78:	f385 8811 	msr	BASEPRI, r5
 800dd7c:	f3bf 8f6f 	isb	sy
}
 800dd80:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 800dd84:	fbb4 f0f0 	udiv	r0, r4, r0
 800dd88:	bd38      	pop	{r3, r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20001810 	.word	0x20001810
 800dd90:	080170fb 	.word	0x080170fb
 800dd94:	08017121 	.word	0x08017121
 800dd98:	08016836 	.word	0x08016836
 800dd9c:	08017136 	.word	0x08017136
 800dda0:	20001808 	.word	0x20001808
 800dda4:	20001804 	.word	0x20001804
 800dda8:	0801714e 	.word	0x0801714e
 800ddac:	08017165 	.word	0x08017165

0800ddb0 <sys_clock_cycle_get_32>:
{
 800ddb0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800ddb2:	f04f 0310 	mov.w	r3, #16
 800ddb6:	f3ef 8511 	mrs	r5, BASEPRI
 800ddba:	f383 8812 	msr	BASEPRI_MAX, r3
 800ddbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ddc2:	4819      	ldr	r0, [pc, #100]	; (800de28 <sys_clock_cycle_get_32+0x78>)
 800ddc4:	f000 fe94 	bl	800eaf0 <z_spin_lock_valid>
 800ddc8:	b968      	cbnz	r0, 800dde6 <sys_clock_cycle_get_32+0x36>
 800ddca:	4a18      	ldr	r2, [pc, #96]	; (800de2c <sys_clock_cycle_get_32+0x7c>)
 800ddcc:	4918      	ldr	r1, [pc, #96]	; (800de30 <sys_clock_cycle_get_32+0x80>)
 800ddce:	4819      	ldr	r0, [pc, #100]	; (800de34 <sys_clock_cycle_get_32+0x84>)
 800ddd0:	238e      	movs	r3, #142	; 0x8e
 800ddd2:	f004 fa69 	bl	80122a8 <assert_print>
 800ddd6:	4914      	ldr	r1, [pc, #80]	; (800de28 <sys_clock_cycle_get_32+0x78>)
 800ddd8:	4817      	ldr	r0, [pc, #92]	; (800de38 <sys_clock_cycle_get_32+0x88>)
 800ddda:	f004 fa65 	bl	80122a8 <assert_print>
 800ddde:	4813      	ldr	r0, [pc, #76]	; (800de2c <sys_clock_cycle_get_32+0x7c>)
 800dde0:	218e      	movs	r1, #142	; 0x8e
 800dde2:	f004 fa5a 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800dde6:	4810      	ldr	r0, [pc, #64]	; (800de28 <sys_clock_cycle_get_32+0x78>)
 800dde8:	f000 fea0 	bl	800eb2c <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
 800ddec:	f7ff fe8e 	bl	800db0c <elapsed>
 800ddf0:	4b12      	ldr	r3, [pc, #72]	; (800de3c <sys_clock_cycle_get_32+0x8c>)
 800ddf2:	681c      	ldr	r4, [r3, #0]
 800ddf4:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800ddf6:	480c      	ldr	r0, [pc, #48]	; (800de28 <sys_clock_cycle_get_32+0x78>)
 800ddf8:	f000 fe88 	bl	800eb0c <z_spin_unlock_valid>
 800ddfc:	b968      	cbnz	r0, 800de1a <sys_clock_cycle_get_32+0x6a>
 800ddfe:	4a0b      	ldr	r2, [pc, #44]	; (800de2c <sys_clock_cycle_get_32+0x7c>)
 800de00:	490f      	ldr	r1, [pc, #60]	; (800de40 <sys_clock_cycle_get_32+0x90>)
 800de02:	480c      	ldr	r0, [pc, #48]	; (800de34 <sys_clock_cycle_get_32+0x84>)
 800de04:	23b9      	movs	r3, #185	; 0xb9
 800de06:	f004 fa4f 	bl	80122a8 <assert_print>
 800de0a:	4907      	ldr	r1, [pc, #28]	; (800de28 <sys_clock_cycle_get_32+0x78>)
 800de0c:	480d      	ldr	r0, [pc, #52]	; (800de44 <sys_clock_cycle_get_32+0x94>)
 800de0e:	f004 fa4b 	bl	80122a8 <assert_print>
 800de12:	4806      	ldr	r0, [pc, #24]	; (800de2c <sys_clock_cycle_get_32+0x7c>)
 800de14:	21b9      	movs	r1, #185	; 0xb9
 800de16:	f004 fa40 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800de1a:	f385 8811 	msr	BASEPRI, r5
 800de1e:	f3bf 8f6f 	isb	sy
}
 800de22:	4620      	mov	r0, r4
 800de24:	bd38      	pop	{r3, r4, r5, pc}
 800de26:	bf00      	nop
 800de28:	20001810 	.word	0x20001810
 800de2c:	080170fb 	.word	0x080170fb
 800de30:	08017121 	.word	0x08017121
 800de34:	08016836 	.word	0x08016836
 800de38:	08017136 	.word	0x08017136
 800de3c:	20001808 	.word	0x20001808
 800de40:	0801714e 	.word	0x0801714e
 800de44:	08017165 	.word	0x08017165

0800de48 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800de48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			} else {
				pin_cgf = pins[i].pincfg | STM32_MODER_INPUT_MODE;
			}
		} else {
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
 800de4c:	4f2d      	ldr	r7, [pc, #180]	; (800df04 <pinctrl_configure_pins+0xbc>)
 800de4e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800df0c <pinctrl_configure_pins+0xc4>
 800de52:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800df10 <pinctrl_configure_pins+0xc8>
 800de56:	4604      	mov	r4, r0
 800de58:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin_cgf = 0;
 800de5c:	2500      	movs	r5, #0
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800de5e:	42b4      	cmp	r4, r6
 800de60:	d101      	bne.n	800de66 <pinctrl_configure_pins+0x1e>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800de62:	2000      	movs	r0, #0
 800de64:	e018      	b.n	800de98 <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 800de66:	f8d4 a000 	ldr.w	sl, [r4]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800de6a:	f01a 0f10 	tst.w	sl, #16
 800de6e:	f00a 0b1f 	and.w	fp, sl, #31
 800de72:	d114      	bne.n	800de9e <pinctrl_configure_pins+0x56>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800de74:	6865      	ldr	r5, [r4, #4]
 800de76:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800de7a:	f3ca 1147 	ubfx	r1, sl, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800de7e:	f3ca 2a43 	ubfx	sl, sl, #9, #4
 800de82:	f1ba 0f0a 	cmp.w	sl, #10
 800de86:	d839      	bhi.n	800defc <pinctrl_configure_pins+0xb4>
	port_device = gpio_ports[STM32_PORT(pin)];
 800de88:	4b1f      	ldr	r3, [pc, #124]	; (800df08 <pinctrl_configure_pins+0xc0>)
 800de8a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800de8e:	f1ba 0f00 	cmp.w	sl, #0
 800de92:	d120      	bne.n	800ded6 <pinctrl_configure_pins+0x8e>
		return -ENODEV;
 800de94:	f06f 0012 	mvn.w	r0, #18
}
 800de98:	b003      	add	sp, #12
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800de9e:	f1bb 0f10 	cmp.w	fp, #16
 800dea2:	d016      	beq.n	800ded2 <pinctrl_configure_pins+0x8a>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800dea4:	f1bb 0f11 	cmp.w	fp, #17
 800dea8:	d105      	bne.n	800deb6 <pinctrl_configure_pins+0x6e>
			uint32_t gpio_out = pins[i].pincfg &
 800deaa:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 800deac:	052b      	lsls	r3, r5, #20
 800deae:	d5e4      	bpl.n	800de7a <pinctrl_configure_pins+0x32>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 800deb0:	f045 0510 	orr.w	r5, r5, #16
 800deb4:	e7e1      	b.n	800de7a <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
 800deb6:	f1bb 0f00 	cmp.w	fp, #0
 800deba:	d1de      	bne.n	800de7a <pinctrl_configure_pins+0x32>
 800debc:	4641      	mov	r1, r8
 800debe:	4648      	mov	r0, r9
 800dec0:	23f8      	movs	r3, #248	; 0xf8
 800dec2:	463a      	mov	r2, r7
 800dec4:	f004 f9f0 	bl	80122a8 <assert_print>
 800dec8:	21f8      	movs	r1, #248	; 0xf8
 800deca:	4638      	mov	r0, r7
 800decc:	f004 f9e5 	bl	801229a <assert_post_action>
 800ded0:	e7d3      	b.n	800de7a <pinctrl_configure_pins+0x32>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 800ded2:	2530      	movs	r5, #48	; 0x30
 800ded4:	e7d1      	b.n	800de7a <pinctrl_configure_pins+0x32>
 800ded6:	9101      	str	r1, [sp, #4]
 800ded8:	4650      	mov	r0, sl
 800deda:	f007 fa24 	bl	8015326 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800dede:	2800      	cmp	r0, #0
 800dee0:	d0d8      	beq.n	800de94 <pinctrl_configure_pins+0x4c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 800dee2:	9901      	ldr	r1, [sp, #4]
 800dee4:	465b      	mov	r3, fp
 800dee6:	462a      	mov	r2, r5
 800dee8:	f001 010f 	and.w	r1, r1, #15
 800deec:	4650      	mov	r0, sl
 800deee:	f007 f901 	bl	80150f4 <gpio_stm32_configure>
		if (ret < 0) {
 800def2:	2800      	cmp	r0, #0
 800def4:	f104 0408 	add.w	r4, r4, #8
 800def8:	dab1      	bge.n	800de5e <pinctrl_configure_pins+0x16>
 800defa:	e7cd      	b.n	800de98 <pinctrl_configure_pins+0x50>
		return -EINVAL;
 800defc:	f06f 0015 	mvn.w	r0, #21
 800df00:	e7ca      	b.n	800de98 <pinctrl_configure_pins+0x50>
 800df02:	bf00      	nop
 800df04:	08019861 	.word	0x08019861
 800df08:	08016670 	.word	0x08016670
 800df0c:	08019894 	.word	0x08019894
 800df10:	08016836 	.word	0x08016836

0800df14 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800df14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df18:	689a      	ldr	r2, [r3, #8]
{
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800df1a:	f012 020c 	ands.w	r2, r2, #12
 800df1e:	d10a      	bne.n	800df36 <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800df20:	681b      	ldr	r3, [r3, #0]
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800df22:	4a22      	ldr	r2, [pc, #136]	; (800dfac <HAL_RCC_GetSysClockFreq+0x98>)
 800df24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df28:	2bb0      	cmp	r3, #176	; 0xb0
 800df2a:	bf28      	it	cs
 800df2c:	23b0      	movcs	r3, #176	; 0xb0
 800df2e:	091b      	lsrs	r3, r3, #4
 800df30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800df34:	4770      	bx	lr
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df36:	2a04      	cmp	r2, #4
 800df38:	d035      	beq.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800df3a:	2a08      	cmp	r2, #8
 800df3c:	d107      	bne.n	800df4e <HAL_RCC_GetSysClockFreq+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800df3e:	681b      	ldr	r3, [r3, #0]
    {
      sysclockfreq = HSE_VALUE / 2U;
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800df40:	481b      	ldr	r0, [pc, #108]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800df42:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800df46:	4b1b      	ldr	r3, [pc, #108]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800df48:	bf08      	it	eq
 800df4a:	4618      	moveq	r0, r3
 800df4c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800df4e:	68da      	ldr	r2, [r3, #12]
 800df50:	f002 0203 	and.w	r2, r2, #3
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
    switch (pllsource)
 800df54:	2a02      	cmp	r2, #2
 800df56:	d024      	beq.n	800dfa2 <HAL_RCC_GetSysClockFreq+0x8e>
 800df58:	2a03      	cmp	r2, #3
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	d117      	bne.n	800df8e <HAL_RCC_GetSysClockFreq+0x7a>
        pllinputfreq = HSI_VALUE;
        break;
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
        {
          pllinputfreq = HSE_VALUE / 2U;
 800df5e:	4814      	ldr	r0, [pc, #80]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0x9c>)
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800df60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800df64:	4b13      	ldr	r3, [pc, #76]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800df66:	bf18      	it	ne
 800df68:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800df6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800df6e:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800df70:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800df72:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800df74:	f3c0 2006 	ubfx	r0, r0, #8, #7
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
        break;
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800df78:	4358      	muls	r0, r3
 800df7a:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800df7e:	3301      	adds	r3, #1
 800df80:	fbb0 f0f3 	udiv	r0, r0, r3
 800df84:	0f53      	lsrs	r3, r2, #29
 800df86:	3301      	adds	r3, #1
 800df88:	fbb0 f0f3 	udiv	r0, r0, r3
  }

  return sysclockfreq;
 800df8c:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800df8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800df92:	2bb0      	cmp	r3, #176	; 0xb0
 800df94:	bf28      	it	cs
 800df96:	23b0      	movcs	r3, #176	; 0xb0
 800df98:	4a04      	ldr	r2, [pc, #16]	; (800dfac <HAL_RCC_GetSysClockFreq+0x98>)
 800df9a:	091b      	lsrs	r3, r3, #4
 800df9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        break;
 800dfa0:	e7e3      	b.n	800df6a <HAL_RCC_GetSysClockFreq+0x56>
    switch (pllsource)
 800dfa2:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800dfa4:	e7e1      	b.n	800df6a <HAL_RCC_GetSysClockFreq+0x56>
    sysclockfreq = HSI_VALUE;
 800dfa6:	4802      	ldr	r0, [pc, #8]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	080166dc 	.word	0x080166dc
 800dfb0:	00f42400 	.word	0x00f42400
 800dfb4:	01e84800 	.word	0x01e84800

0800dfb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	db08      	blt.n	800dfce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	0942      	lsrs	r2, r0, #5
 800dfc0:	f000 001f 	and.w	r0, r0, #31
 800dfc4:	fa03 f000 	lsl.w	r0, r3, r0
 800dfc8:	4b01      	ldr	r3, [pc, #4]	; (800dfd0 <HAL_NVIC_EnableIRQ+0x18>)
 800dfca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800dfce:	4770      	bx	lr
 800dfd0:	e000e100 	.word	0xe000e100

0800dfd4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800dfd4:	4b01      	ldr	r3, [pc, #4]	; (800dfdc <LL_SetSystemCoreClock+0x8>)
 800dfd6:	6018      	str	r0, [r3, #0]
}
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	200003dc 	.word	0x200003dc

0800dfe0 <LL_SetFlashLatency>:
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800dfe0:	4b28      	ldr	r3, [pc, #160]	; (800e084 <LL_SetFlashLatency+0xa4>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
ErrorStatus LL_SetFlashLatency(uint32_t HCLK4Frequency)
{
 800dfe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe4:	681f      	ldr	r7, [r3, #0]
  uint32_t maxfreq = UTILS_MAX_FREQUENCY_SCALE1;
#endif

  /* Array used for FLASH latency according to HCLK4 Frequency */
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS1[] = {18000000U, 36000000U, 54000000U, UTILS_MAX_FREQUENCY_SCALE1};
 800dfe6:	4c28      	ldr	r4, [pc, #160]	; (800e088 <LL_SetFlashLatency+0xa8>)
  uint32_t maxfreq = (voltagescaling == LL_PWR_REGU_VOLTAGE_SCALE1) ? UTILS_MAX_FREQUENCY_SCALE1 : UTILS_MAX_FREQUENCY_SCALE2;
 800dfe8:	4b28      	ldr	r3, [pc, #160]	; (800e08c <LL_SetFlashLatency+0xac>)
 800dfea:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800e09c <LL_SetFlashLatency+0xbc>
 800dfee:	f407 67c0 	and.w	r7, r7, #1536	; 0x600
{
 800dff2:	4606      	mov	r6, r0
  uint32_t maxfreq = (voltagescaling == LL_PWR_REGU_VOLTAGE_SCALE1) ? UTILS_MAX_FREQUENCY_SCALE1 : UTILS_MAX_FREQUENCY_SCALE2;
 800dff4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800dff8:	bf0c      	ite	eq
 800dffa:	469c      	moveq	ip, r3
 800dffc:	46f4      	movne	ip, lr
  const uint32_t UTILS_CLK_SRC_RANGE_VOS1[] = {18000000U, 36000000U, 54000000U, UTILS_MAX_FREQUENCY_SCALE1};
 800dffe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
{
 800e002:	b089      	sub	sp, #36	; 0x24
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};
#endif

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2, LL_FLASH_LATENCY_3};
 800e004:	3410      	adds	r4, #16
  const uint32_t UTILS_CLK_SRC_RANGE_VOS1[] = {18000000U, 36000000U, 54000000U, UTILS_MAX_FREQUENCY_SCALE1};
 800e006:	466d      	mov	r5, sp
 800e008:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2, LL_FLASH_LATENCY_3};
 800e00c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e010:	ac08      	add	r4, sp, #32
 800e012:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}

  /* Frequency cannot be equal to 0 or greater than max clock */
  if ((HCLK4Frequency > 0U) && (HCLK4Frequency <= maxfreq))
 800e016:	b36e      	cbz	r6, 800e074 <LL_SetFlashLatency+0x94>
 800e018:	45b4      	cmp	ip, r6
 800e01a:	d32b      	bcc.n	800e074 <LL_SetFlashLatency+0x94>
  {
#if defined(PWR_CR1_VOS)
    if (voltagescaling == LL_PWR_REGU_VOLTAGE_SCALE1)
 800e01c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800e020:	d009      	beq.n	800e036 <LL_SetFlashLatency+0x56>
    }
    else /* SCALE2 */
    {
      for (index = 0; index < countof(UTILS_CLK_SRC_RANGE_VOS2); index++)
      {
        if (HCLK4Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800e022:	4b1b      	ldr	r3, [pc, #108]	; (800e090 <LL_SetFlashLatency+0xb0>)
 800e024:	429e      	cmp	r6, r3
 800e026:	d928      	bls.n	800e07a <LL_SetFlashLatency+0x9a>
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <LL_SetFlashLatency+0xb4>)
 800e02a:	429e      	cmp	r6, r3
 800e02c:	d927      	bls.n	800e07e <LL_SetFlashLatency+0x9e>
 800e02e:	4576      	cmp	r6, lr
 800e030:	d820      	bhi.n	800e074 <LL_SetFlashLatency+0x94>
 800e032:	2302      	movs	r3, #2
 800e034:	e004      	b.n	800e040 <LL_SetFlashLatency+0x60>
    if (voltagescaling == LL_PWR_REGU_VOLTAGE_SCALE1)
 800e036:	2300      	movs	r3, #0
        if (HCLK4Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 800e038:	f855 2b04 	ldr.w	r2, [r5], #4
 800e03c:	42b2      	cmp	r2, r6
 800e03e:	d316      	bcc.n	800e06e <LL_SetFlashLatency+0x8e>
        {
          latency = UTILS_LATENCY_RANGE[index];
 800e040:	aa08      	add	r2, sp, #32
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800e042:	4915      	ldr	r1, [pc, #84]	; (800e098 <LL_SetFlashLatency+0xb8>)
 800e044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e048:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800e04c:	680b      	ldr	r3, [r1, #0]
 800e04e:	f023 0307 	bic.w	r3, r3, #7
 800e052:	4313      	orrs	r3, r2
 800e054:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800e056:	680b      	ldr	r3, [r1, #0]
 800e058:	f003 0307 	and.w	r3, r3, #7
    {
      /* Wait for Flash latency to be updated */
      getlatency = LL_FLASH_GetLatency();
      timeout--;
    }
    while ((getlatency != latency) && (timeout > 0U));
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d004      	beq.n	800e06a <LL_SetFlashLatency+0x8a>
 800e060:	680b      	ldr	r3, [r1, #0]
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	429a      	cmp	r2, r3
 800e068:	d104      	bne.n	800e074 <LL_SetFlashLatency+0x94>
 800e06a:	2000      	movs	r0, #0
 800e06c:	e003      	b.n	800e076 <LL_SetFlashLatency+0x96>
      for (index = 0; index < countof(UTILS_CLK_SRC_RANGE_VOS1); index++)
 800e06e:	3301      	adds	r3, #1
 800e070:	2b04      	cmp	r3, #4
 800e072:	d1e1      	bne.n	800e038 <LL_SetFlashLatency+0x58>
  ErrorStatus status = ERROR;
 800e074:	2001      	movs	r0, #1
    {
      status = ERROR;
    }
  }
  return status;
}
 800e076:	b009      	add	sp, #36	; 0x24
 800e078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (HCLK4Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800e07a:	2300      	movs	r3, #0
 800e07c:	e7e0      	b.n	800e040 <LL_SetFlashLatency+0x60>
 800e07e:	2301      	movs	r3, #1
 800e080:	e7de      	b.n	800e040 <LL_SetFlashLatency+0x60>
 800e082:	bf00      	nop
 800e084:	58000400 	.word	0x58000400
 800e088:	08015ca4 	.word	0x08015ca4
 800e08c:	03d09000 	.word	0x03d09000
 800e090:	005b8d80 	.word	0x005b8d80
 800e094:	00b71b00 	.word	0x00b71b00
 800e098:	58004000 	.word	0x58004000
 800e09c:	00f42400 	.word	0x00f42400

0800e0a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800e0a0:	4b0e      	ldr	r3, [pc, #56]	; (800e0dc <z_sys_init_run_level+0x3c>)
{
 800e0a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800e0a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e0ae:	42a6      	cmp	r6, r4
 800e0b0:	d800      	bhi.n	800e0b4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800e0b4:	e9d4 3500 	ldrd	r3, r5, [r4]
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	4798      	blx	r3
		if (dev != NULL) {
 800e0bc:	b165      	cbz	r5, 800e0d8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
 800e0be:	68eb      	ldr	r3, [r5, #12]
 800e0c0:	b130      	cbz	r0, 800e0d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	bfb8      	it	lt
 800e0c6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800e0c8:	28ff      	cmp	r0, #255	; 0xff
 800e0ca:	bfa8      	it	ge
 800e0cc:	20ff      	movge	r0, #255	; 0xff
 800e0ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800e0d0:	785a      	ldrb	r2, [r3, #1]
 800e0d2:	f042 0201 	orr.w	r2, r2, #1
 800e0d6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800e0d8:	3408      	adds	r4, #8
 800e0da:	e7e8      	b.n	800e0ae <z_sys_init_run_level+0xe>
 800e0dc:	0801671c 	.word	0x0801671c

0800e0e0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800e0e0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	b910      	cbnz	r0, 800e0ec <z_impl_device_get_binding+0xc>
		return NULL;
 800e0e6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800e0ec:	7803      	ldrb	r3, [r0, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0f9      	beq.n	800e0e6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800e0f2:	4a0f      	ldr	r2, [pc, #60]	; (800e130 <z_impl_device_get_binding+0x50>)
 800e0f4:	4c0f      	ldr	r4, [pc, #60]	; (800e134 <z_impl_device_get_binding+0x54>)
 800e0f6:	4616      	mov	r6, r2
 800e0f8:	4294      	cmp	r4, r2
 800e0fa:	d108      	bne.n	800e10e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800e0fc:	4c0d      	ldr	r4, [pc, #52]	; (800e134 <z_impl_device_get_binding+0x54>)
 800e0fe:	42b4      	cmp	r4, r6
 800e100:	d0f1      	beq.n	800e0e6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800e102:	4620      	mov	r0, r4
 800e104:	f007 f90f 	bl	8015326 <z_device_is_ready>
 800e108:	b950      	cbnz	r0, 800e120 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
 800e10a:	3418      	adds	r4, #24
 800e10c:	e7f7      	b.n	800e0fe <z_impl_device_get_binding+0x1e>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800e10e:	4620      	mov	r0, r4
 800e110:	f007 f909 	bl	8015326 <z_device_is_ready>
 800e114:	b110      	cbz	r0, 800e11c <z_impl_device_get_binding+0x3c>
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	42ab      	cmp	r3, r5
 800e11a:	d0e5      	beq.n	800e0e8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800e11c:	3418      	adds	r4, #24
 800e11e:	e7eb      	b.n	800e0f8 <z_impl_device_get_binding+0x18>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800e120:	6821      	ldr	r1, [r4, #0]
 800e122:	4628      	mov	r0, r5
 800e124:	f004 fe96 	bl	8012e54 <strcmp>
 800e128:	2800      	cmp	r0, #0
 800e12a:	d1ee      	bne.n	800e10a <z_impl_device_get_binding+0x2a>
 800e12c:	e7dc      	b.n	800e0e8 <z_impl_device_get_binding+0x8>
 800e12e:	bf00      	nop
 800e130:	080158ac 	.word	0x080158ac
 800e134:	080157a4 	.word	0x080157a4

0800e138 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800e138:	b510      	push	{r4, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	b086      	sub	sp, #24
	z_impl_log_panic();
 800e13e:	f7f4 fc91 	bl	8002a64 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800e142:	4b07      	ldr	r3, [pc, #28]	; (800e160 <k_sys_fatal_error_handler+0x28>)
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	2302      	movs	r3, #2
 800e148:	9303      	str	r3, [sp, #12]
 800e14a:	4806      	ldr	r0, [pc, #24]	; (800e164 <k_sys_fatal_error_handler+0x2c>)
 800e14c:	2300      	movs	r3, #0
 800e14e:	aa03      	add	r2, sp, #12
 800e150:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e154:	f7f4 ff02 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800e158:	4620      	mov	r0, r4
 800e15a:	f007 f8ee 	bl	801533a <arch_system_halt>
 800e15e:	bf00      	nop
 800e160:	080198ac 	.word	0x080198ac
 800e164:	08015bac 	.word	0x08015bac

0800e168 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800e168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e16c:	b086      	sub	sp, #24
 800e16e:	4604      	mov	r4, r0
 800e170:	af00      	add	r7, sp, #0
 800e172:	460e      	mov	r6, r1
	__asm__ volatile(
 800e174:	f04f 0310 	mov.w	r3, #16
 800e178:	f3ef 8811 	mrs	r8, BASEPRI
 800e17c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e180:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800e184:	f002 fcae 	bl	8010ae4 <z_impl_z_current_get>
 800e188:	2c04      	cmp	r4, #4
 800e18a:	bf96      	itet	ls
 800e18c:	4b33      	ldrls	r3, [pc, #204]	; (800e25c <z_fatal_error+0xf4>)
 800e18e:	4b34      	ldrhi	r3, [pc, #208]	; (800e260 <z_fatal_error+0xf8>)
 800e190:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800e194:	4933      	ldr	r1, [pc, #204]	; (800e264 <z_fatal_error+0xfc>)
 800e196:	46e9      	mov	r9, sp
 800e198:	b08a      	sub	sp, #40	; 0x28
 800e19a:	466a      	mov	r2, sp
 800e19c:	f04f 0a00 	mov.w	sl, #0
 800e1a0:	6193      	str	r3, [r2, #24]
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	f882 3020 	strb.w	r3, [r2, #32]
 800e1a8:	4b2f      	ldr	r3, [pc, #188]	; (800e268 <z_fatal_error+0x100>)
 800e1aa:	f8c2 a01c 	str.w	sl, [r2, #28]
 800e1ae:	e9c2 1404 	strd	r1, r4, [r2, #16]
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	f842 3f0c 	str.w	r3, [r2, #12]!
 800e1b8:	482c      	ldr	r0, [pc, #176]	; (800e26c <z_fatal_error+0x104>)
 800e1ba:	4653      	mov	r3, sl
 800e1bc:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
 800e1c0:	f7f4 fecc 	bl	8002f5c <z_impl_z_log_msg2_static_create>
 800e1c4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800e1c6:	b17e      	cbz	r6, 800e1e8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800e1c8:	69f3      	ldr	r3, [r6, #28]
 800e1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1ce:	b15b      	cbz	r3, 800e1e8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
 800e1d0:	4b27      	ldr	r3, [pc, #156]	; (800e270 <z_fatal_error+0x108>)
 800e1d2:	613b      	str	r3, [r7, #16]
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	4824      	ldr	r0, [pc, #144]	; (800e26c <z_fatal_error+0x104>)
 800e1da:	4653      	mov	r3, sl
 800e1dc:	f107 020c 	add.w	r2, r7, #12
 800e1e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e1e4:	f7f4 feba 	bl	8002f5c <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800e1e8:	b12d      	cbz	r5, 800e1f6 <z_fatal_error+0x8e>
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f007 f8c3 	bl	8015376 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800e1f0:	b108      	cbz	r0, 800e1f6 <z_fatal_error+0x8e>
 800e1f2:	7803      	ldrb	r3, [r0, #0]
 800e1f4:	b903      	cbnz	r3, 800e1f8 <z_fatal_error+0x90>
		thread_name = "unknown";
 800e1f6:	481f      	ldr	r0, [pc, #124]	; (800e274 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800e1f8:	4b1f      	ldr	r3, [pc, #124]	; (800e278 <z_fatal_error+0x110>)
 800e1fa:	46e9      	mov	r9, sp
 800e1fc:	b088      	sub	sp, #32
 800e1fe:	466a      	mov	r2, sp
 800e200:	e9c2 3504 	strd	r3, r5, [r2, #16]
 800e204:	2303      	movs	r3, #3
 800e206:	7713      	strb	r3, [r2, #28]
 800e208:	4b1c      	ldr	r3, [pc, #112]	; (800e27c <z_fatal_error+0x114>)
 800e20a:	6190      	str	r0, [r2, #24]
 800e20c:	f842 3f0c 	str.w	r3, [r2, #12]!
 800e210:	4816      	ldr	r0, [pc, #88]	; (800e26c <z_fatal_error+0x104>)
 800e212:	2300      	movs	r3, #0
 800e214:	f44f 5109 	mov.w	r1, #8768	; 0x2240
 800e218:	f7f4 fea0 	bl	8002f5c <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800e21c:	4631      	mov	r1, r6
 800e21e:	46cd      	mov	sp, r9
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff ff89 	bl	800e138 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
 800e226:	2c04      	cmp	r4, #4
 800e228:	d10c      	bne.n	800e244 <z_fatal_error+0xdc>
 800e22a:	4915      	ldr	r1, [pc, #84]	; (800e280 <z_fatal_error+0x118>)
 800e22c:	4a15      	ldr	r2, [pc, #84]	; (800e284 <z_fatal_error+0x11c>)
 800e22e:	4816      	ldr	r0, [pc, #88]	; (800e288 <z_fatal_error+0x120>)
 800e230:	238f      	movs	r3, #143	; 0x8f
 800e232:	f004 f839 	bl	80122a8 <assert_print>
 800e236:	4815      	ldr	r0, [pc, #84]	; (800e28c <z_fatal_error+0x124>)
 800e238:	f004 f836 	bl	80122a8 <assert_print>
 800e23c:	4811      	ldr	r0, [pc, #68]	; (800e284 <z_fatal_error+0x11c>)
 800e23e:	218f      	movs	r1, #143	; 0x8f
 800e240:	f004 f82b 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800e244:	f388 8811 	msr	BASEPRI, r8
 800e248:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800e24c:	4628      	mov	r0, r5
 800e24e:	f7f6 f91d 	bl	800448c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25a:	bf00      	nop
 800e25c:	08016734 	.word	0x08016734
 800e260:	080198bb 	.word	0x080198bb
 800e264:	080198d1 	.word	0x080198d1
 800e268:	01000005 	.word	0x01000005
 800e26c:	08015bac 	.word	0x08015bac
 800e270:	080198f9 	.word	0x080198f9
 800e274:	080198c9 	.word	0x080198c9
 800e278:	0801991a 	.word	0x0801991a
 800e27c:	01000004 	.word	0x01000004
 800e280:	08019954 	.word	0x08019954
 800e284:	08019932 	.word	0x08019932
 800e288:	08016836 	.word	0x08016836
 800e28c:	08019971 	.word	0x08019971

0800e290 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800e290:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800e292:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <bg_thread_main+0x2c>)
 800e294:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800e296:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800e298:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800e29a:	f7ff ff01 	bl	800e0a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800e29e:	f003 fd5f 	bl	8011d60 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800e2a2:	2003      	movs	r0, #3
 800e2a4:	f7ff fefc 	bl	800e0a0 <z_sys_init_run_level>

	z_init_static_threads();
 800e2a8:	f000 fba6 	bl	800e9f8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800e2ac:	f7f2 fee8 	bl	8001080 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800e2b0:	4a03      	ldr	r2, [pc, #12]	; (800e2c0 <bg_thread_main+0x30>)
 800e2b2:	7b13      	ldrb	r3, [r2, #12]
 800e2b4:	f023 0301 	bic.w	r3, r3, #1
 800e2b8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800e2ba:	bd08      	pop	{r3, pc}
 800e2bc:	2000198a 	.word	0x2000198a
 800e2c0:	200013f0 	.word	0x200013f0

0800e2c4 <z_bss_zero>:
{
 800e2c4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 800e2c6:	4803      	ldr	r0, [pc, #12]	; (800e2d4 <z_bss_zero+0x10>)
 800e2c8:	4a03      	ldr	r2, [pc, #12]	; (800e2d8 <z_bss_zero+0x14>)
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	1a12      	subs	r2, r2, r0
 800e2ce:	f007 f83d 	bl	801534c <z_early_memset>
}
 800e2d2:	bd08      	pop	{r3, pc}
 800e2d4:	20000778 	.word	0x20000778
 800e2d8:	2000198c 	.word	0x2000198c

0800e2dc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800e2dc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800e2de:	2300      	movs	r3, #0
{
 800e2e0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2e8:	220f      	movs	r2, #15
 800e2ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e2ee:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
 800e2f0:	4e11      	ldr	r6, [pc, #68]	; (800e338 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 800e2f4:	4912      	ldr	r1, [pc, #72]	; (800e340 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800e2f6:	2518      	movs	r5, #24
 800e2f8:	fb05 3500 	mla	r5, r5, r0, r3
	struct k_thread *thread = &z_idle_threads[i];
 800e2fc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800e300:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800e302:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800e306:	fb00 1104 	mla	r1, r0, r4, r1
 800e30a:	4b0e      	ldr	r3, [pc, #56]	; (800e344 <z_init_cpu+0x68>)
 800e30c:	9500      	str	r5, [sp, #0]
 800e30e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e312:	4630      	mov	r0, r6
 800e314:	f000 fabe 	bl	800e894 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800e318:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800e31a:	480b      	ldr	r0, [pc, #44]	; (800e348 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 800e31c:	752c      	strb	r4, [r5, #20]
 800e31e:	f023 0304 	bic.w	r3, r3, #4
 800e322:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800e324:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800e328:	fb03 0404 	mla	r4, r3, r4, r0
 800e32c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800e32e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 800e330:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800e332:	b006      	add	sp, #24
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	bf00      	nop
 800e338:	20001370 	.word	0x20001370
 800e33c:	20001818 	.word	0x20001818
 800e340:	200029c0 	.word	0x200029c0
 800e344:	0800eb3d 	.word	0x0800eb3d
 800e348:	20002b20 	.word	0x20002b20

0800e34c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800e34c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800e34e:	4b2d      	ldr	r3, [pc, #180]	; (800e404 <z_cstart+0xb8>)
 800e350:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800e352:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800e356:	4d2c      	ldr	r5, [pc, #176]	; (800e408 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800e358:	4e2c      	ldr	r6, [pc, #176]	; (800e40c <z_cstart+0xc0>)
 800e35a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800e35c:	4f2c      	ldr	r7, [pc, #176]	; (800e410 <z_cstart+0xc4>)
 800e35e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e362:	2400      	movs	r4, #0
 800e364:	616b      	str	r3, [r5, #20]
 800e366:	23f0      	movs	r3, #240	; 0xf0
 800e368:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800e36c:	77ec      	strb	r4, [r5, #31]
 800e36e:	762c      	strb	r4, [r5, #24]
 800e370:	766c      	strb	r4, [r5, #25]
 800e372:	76ac      	strb	r4, [r5, #26]
 800e374:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800e378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e37a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800e37e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800e380:	f7f6 f850 	bl	8004424 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800e384:	f7f5 fba6 	bl	8003ad4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800e388:	f04f 33ff 	mov.w	r3, #4294967295
 800e38c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800e38e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800e390:	f7f6 f96e 	bl	8004670 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800e394:	f7f6 f88c 	bl	80044b0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800e398:	f7f4 fa54 	bl	8002844 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800e39c:	f240 1301 	movw	r3, #257	; 0x101
 800e3a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800e3a4:	ab06      	add	r3, sp, #24
 800e3a6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800e3a8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
 800e3ac:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800e3ae:	f006 ffb9 	bl	8015324 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff fe74 	bl	800e0a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800e3b8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800e3ba:	4d16      	ldr	r5, [pc, #88]	; (800e414 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800e3bc:	f7ff fe70 	bl	800e0a0 <z_sys_init_run_level>
	z_sched_init();
 800e3c0:	f002 f9fc 	bl	80107bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800e3c4:	4b14      	ldr	r3, [pc, #80]	; (800e418 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
 800e3c6:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800e3c8:	9305      	str	r3, [sp, #20]
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4913      	ldr	r1, [pc, #76]	; (800e41c <z_cstart+0xd0>)
 800e3ce:	9400      	str	r4, [sp, #0]
 800e3d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800e3d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3d8:	463b      	mov	r3, r7
 800e3da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f000 fa58 	bl	800e894 <z_setup_new_thread>
 800e3e4:	7b6a      	ldrb	r2, [r5, #13]
 800e3e6:	f022 0204 	bic.w	r2, r2, #4
 800e3ea:	736a      	strb	r2, [r5, #13]
 800e3ec:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f001 fe80 	bl	80100f4 <z_ready_thread>
	z_init_cpu(0);
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f7ff ff71 	bl	800e2dc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800e3fa:	463a      	mov	r2, r7
 800e3fc:	4631      	mov	r1, r6
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7f5 fcd2 	bl	8003da8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800e404:	20003340 	.word	0x20003340
 800e408:	e000ed00 	.word	0xe000ed00
 800e40c:	20001818 	.word	0x20001818
 800e410:	0800e291 	.word	0x0800e291
 800e414:	200013f0 	.word	0x200013f0
 800e418:	080199f0 	.word	0x080199f0
 800e41c:	200025a0 	.word	0x200025a0

0800e420 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800e422:	4d0f      	ldr	r5, [pc, #60]	; (800e460 <statics_init+0x40>)
 800e424:	4c0f      	ldr	r4, [pc, #60]	; (800e464 <statics_init+0x44>)
 800e426:	4e10      	ldr	r6, [pc, #64]	; (800e468 <statics_init+0x48>)
 800e428:	462f      	mov	r7, r5
 800e42a:	42ac      	cmp	r4, r5
 800e42c:	d90c      	bls.n	800e448 <statics_init+0x28>
 800e42e:	490f      	ldr	r1, [pc, #60]	; (800e46c <statics_init+0x4c>)
 800e430:	480f      	ldr	r0, [pc, #60]	; (800e470 <statics_init+0x50>)
 800e432:	2318      	movs	r3, #24
 800e434:	4632      	mov	r2, r6
 800e436:	f003 ff37 	bl	80122a8 <assert_print>
 800e43a:	480e      	ldr	r0, [pc, #56]	; (800e474 <statics_init+0x54>)
 800e43c:	f003 ff34 	bl	80122a8 <assert_print>
 800e440:	2118      	movs	r1, #24
 800e442:	4630      	mov	r0, r6
 800e444:	f003 ff29 	bl	801229a <assert_post_action>
 800e448:	42bc      	cmp	r4, r7
 800e44a:	d301      	bcc.n	800e450 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800e44c:	2000      	movs	r0, #0
 800e44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800e450:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800e454:	4620      	mov	r0, r4
 800e456:	f006 ff7d 	bl	8015354 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800e45a:	3418      	adds	r4, #24
 800e45c:	e7e5      	b.n	800e42a <statics_init+0xa>
 800e45e:	bf00      	nop
 800e460:	20000578 	.word	0x20000578
 800e464:	20000578 	.word	0x20000578
 800e468:	080199f8 	.word	0x080199f8
 800e46c:	08019a1a 	.word	0x08019a1a
 800e470:	08016836 	.word	0x08016836
 800e474:	08018699 	.word	0x08018699

0800e478 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	b087      	sub	sp, #28
 800e47e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800e482:	4606      	mov	r6, r0
 800e484:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800e486:	4640      	mov	r0, r8
 800e488:	4649      	mov	r1, r9
{
 800e48a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800e48c:	f007 f83c 	bl	8015508 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800e490:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800e494:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
 800e498:	f04f 0310 	mov.w	r3, #16
 800e49c:	f3ef 8511 	mrs	r5, BASEPRI
 800e4a0:	f383 8812 	msr	BASEPRI_MAX, r3
 800e4a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f000 fb21 	bl	800eaf0 <z_spin_lock_valid>
 800e4ae:	b968      	cbnz	r0, 800e4cc <k_heap_aligned_alloc+0x54>
 800e4b0:	4a3f      	ldr	r2, [pc, #252]	; (800e5b0 <k_heap_aligned_alloc+0x138>)
 800e4b2:	4940      	ldr	r1, [pc, #256]	; (800e5b4 <k_heap_aligned_alloc+0x13c>)
 800e4b4:	4840      	ldr	r0, [pc, #256]	; (800e5b8 <k_heap_aligned_alloc+0x140>)
 800e4b6:	238e      	movs	r3, #142	; 0x8e
 800e4b8:	f003 fef6 	bl	80122a8 <assert_print>
 800e4bc:	483f      	ldr	r0, [pc, #252]	; (800e5bc <k_heap_aligned_alloc+0x144>)
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f003 fef2 	bl	80122a8 <assert_print>
 800e4c4:	483a      	ldr	r0, [pc, #232]	; (800e5b0 <k_heap_aligned_alloc+0x138>)
 800e4c6:	218e      	movs	r1, #142	; 0x8e
 800e4c8:	f003 fee7 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f000 fb2d 	bl	800eb2c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4d2:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
 800e4d6:	b17b      	cbz	r3, 800e4f8 <k_heap_aligned_alloc+0x80>
 800e4d8:	ea58 0309 	orrs.w	r3, r8, r9
 800e4dc:	d00c      	beq.n	800e4f8 <k_heap_aligned_alloc+0x80>
 800e4de:	4938      	ldr	r1, [pc, #224]	; (800e5c0 <k_heap_aligned_alloc+0x148>)
 800e4e0:	4a38      	ldr	r2, [pc, #224]	; (800e5c4 <k_heap_aligned_alloc+0x14c>)
 800e4e2:	4835      	ldr	r0, [pc, #212]	; (800e5b8 <k_heap_aligned_alloc+0x140>)
 800e4e4:	2349      	movs	r3, #73	; 0x49
 800e4e6:	f003 fedf 	bl	80122a8 <assert_print>
 800e4ea:	4837      	ldr	r0, [pc, #220]	; (800e5c8 <k_heap_aligned_alloc+0x150>)
 800e4ec:	f003 fedc 	bl	80122a8 <assert_print>
 800e4f0:	4834      	ldr	r0, [pc, #208]	; (800e5c4 <k_heap_aligned_alloc+0x14c>)
 800e4f2:	2149      	movs	r1, #73	; 0x49
 800e4f4:	f003 fed1 	bl	801229a <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e4f8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800e5b0 <k_heap_aligned_alloc+0x138>
 800e4fc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800e5b4 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 800e500:	4652      	mov	r2, sl
 800e502:	4659      	mov	r1, fp
 800e504:	4630      	mov	r0, r6
 800e506:	f7f3 f965 	bl	80017d4 <sys_heap_aligned_alloc>
 800e50a:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
 800e50c:	f002 fec2 	bl	8011294 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 800e510:	b1cf      	cbz	r7, 800e546 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fafa 	bl	800eb0c <z_spin_unlock_valid>
 800e518:	b968      	cbnz	r0, 800e536 <k_heap_aligned_alloc+0xbe>
 800e51a:	4a25      	ldr	r2, [pc, #148]	; (800e5b0 <k_heap_aligned_alloc+0x138>)
 800e51c:	492b      	ldr	r1, [pc, #172]	; (800e5cc <k_heap_aligned_alloc+0x154>)
 800e51e:	4826      	ldr	r0, [pc, #152]	; (800e5b8 <k_heap_aligned_alloc+0x140>)
 800e520:	23b9      	movs	r3, #185	; 0xb9
 800e522:	f003 fec1 	bl	80122a8 <assert_print>
 800e526:	482a      	ldr	r0, [pc, #168]	; (800e5d0 <k_heap_aligned_alloc+0x158>)
 800e528:	4621      	mov	r1, r4
 800e52a:	f003 febd 	bl	80122a8 <assert_print>
 800e52e:	4820      	ldr	r0, [pc, #128]	; (800e5b0 <k_heap_aligned_alloc+0x138>)
 800e530:	21b9      	movs	r1, #185	; 0xb9
 800e532:	f003 feb2 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800e536:	f385 8811 	msr	BASEPRI, r5
 800e53a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800e53e:	4638      	mov	r0, r7
 800e540:	b007      	add	sp, #28
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	1a1b      	subs	r3, r3, r0
 800e54a:	9302      	str	r3, [sp, #8]
 800e54c:	9b05      	ldr	r3, [sp, #20]
 800e54e:	eb63 0301 	sbc.w	r3, r3, r1
 800e552:	9303      	str	r3, [sp, #12]
 800e554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e558:	2a01      	cmp	r2, #1
 800e55a:	f173 0300 	sbcs.w	r3, r3, #0
 800e55e:	dbd8      	blt.n	800e512 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800e560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e564:	4629      	mov	r1, r5
 800e566:	e9cd 2300 	strd	r2, r3, [sp]
 800e56a:	4620      	mov	r0, r4
 800e56c:	f106 020c 	add.w	r2, r6, #12
 800e570:	f001 ff72 	bl	8010458 <z_pend_curr>
	__asm__ volatile(
 800e574:	f04f 0310 	mov.w	r3, #16
 800e578:	f3ef 8511 	mrs	r5, BASEPRI
 800e57c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e584:	4620      	mov	r0, r4
 800e586:	f000 fab3 	bl	800eaf0 <z_spin_lock_valid>
 800e58a:	b968      	cbnz	r0, 800e5a8 <k_heap_aligned_alloc+0x130>
 800e58c:	480a      	ldr	r0, [pc, #40]	; (800e5b8 <k_heap_aligned_alloc+0x140>)
 800e58e:	238e      	movs	r3, #142	; 0x8e
 800e590:	4642      	mov	r2, r8
 800e592:	4649      	mov	r1, r9
 800e594:	f003 fe88 	bl	80122a8 <assert_print>
 800e598:	4808      	ldr	r0, [pc, #32]	; (800e5bc <k_heap_aligned_alloc+0x144>)
 800e59a:	4621      	mov	r1, r4
 800e59c:	f003 fe84 	bl	80122a8 <assert_print>
 800e5a0:	218e      	movs	r1, #142	; 0x8e
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	f003 fe79 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f000 fabf 	bl	800eb2c <z_spin_lock_set_owner>
	return k;
 800e5ae:	e7a7      	b.n	800e500 <k_heap_aligned_alloc+0x88>
 800e5b0:	080170fb 	.word	0x080170fb
 800e5b4:	08017121 	.word	0x08017121
 800e5b8:	08016836 	.word	0x08016836
 800e5bc:	08017136 	.word	0x08017136
 800e5c0:	08019a30 	.word	0x08019a30
 800e5c4:	080199f8 	.word	0x080199f8
 800e5c8:	08019487 	.word	0x08019487
 800e5cc:	0801714e 	.word	0x0801714e
 800e5d0:	08017165 	.word	0x08017165

0800e5d4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 800e5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800e5da:	f100 0414 	add.w	r4, r0, #20
 800e5de:	f04f 0310 	mov.w	r3, #16
 800e5e2:	f3ef 8711 	mrs	r7, BASEPRI
 800e5e6:	f383 8812 	msr	BASEPRI_MAX, r3
 800e5ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f000 fa7e 	bl	800eaf0 <z_spin_lock_valid>
 800e5f4:	b968      	cbnz	r0, 800e612 <k_heap_free+0x3e>
 800e5f6:	4a1b      	ldr	r2, [pc, #108]	; (800e664 <k_heap_free+0x90>)
 800e5f8:	491b      	ldr	r1, [pc, #108]	; (800e668 <k_heap_free+0x94>)
 800e5fa:	481c      	ldr	r0, [pc, #112]	; (800e66c <k_heap_free+0x98>)
 800e5fc:	238e      	movs	r3, #142	; 0x8e
 800e5fe:	f003 fe53 	bl	80122a8 <assert_print>
 800e602:	481b      	ldr	r0, [pc, #108]	; (800e670 <k_heap_free+0x9c>)
 800e604:	4621      	mov	r1, r4
 800e606:	f003 fe4f 	bl	80122a8 <assert_print>
 800e60a:	4816      	ldr	r0, [pc, #88]	; (800e664 <k_heap_free+0x90>)
 800e60c:	218e      	movs	r1, #142	; 0x8e
 800e60e:	f003 fe44 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fa8a 	bl	800eb2c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
 800e618:	4628      	mov	r0, r5
 800e61a:	4631      	mov	r1, r6
 800e61c:	f7f3 f88e 	bl	800173c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 800e620:	f105 000c 	add.w	r0, r5, #12
 800e624:	f006 ff5a 	bl	80154dc <z_unpend_all>
 800e628:	b128      	cbz	r0, 800e636 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
 800e62a:	4639      	mov	r1, r7
 800e62c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 800e62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
 800e632:	f001 babd 	b.w	800fbb0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800e636:	4620      	mov	r0, r4
 800e638:	f000 fa68 	bl	800eb0c <z_spin_unlock_valid>
 800e63c:	b968      	cbnz	r0, 800e65a <k_heap_free+0x86>
 800e63e:	4a09      	ldr	r2, [pc, #36]	; (800e664 <k_heap_free+0x90>)
 800e640:	490c      	ldr	r1, [pc, #48]	; (800e674 <k_heap_free+0xa0>)
 800e642:	480a      	ldr	r0, [pc, #40]	; (800e66c <k_heap_free+0x98>)
 800e644:	23b9      	movs	r3, #185	; 0xb9
 800e646:	f003 fe2f 	bl	80122a8 <assert_print>
 800e64a:	480b      	ldr	r0, [pc, #44]	; (800e678 <k_heap_free+0xa4>)
 800e64c:	4621      	mov	r1, r4
 800e64e:	f003 fe2b 	bl	80122a8 <assert_print>
 800e652:	4804      	ldr	r0, [pc, #16]	; (800e664 <k_heap_free+0x90>)
 800e654:	21b9      	movs	r1, #185	; 0xb9
 800e656:	f003 fe20 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800e65a:	f387 8811 	msr	BASEPRI, r7
 800e65e:	f3bf 8f6f 	isb	sy
}
 800e662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e664:	080170fb 	.word	0x080170fb
 800e668:	08017121 	.word	0x08017121
 800e66c:	08016836 	.word	0x08016836
 800e670:	08017136 	.word	0x08017136
 800e674:	0801714e 	.word	0x0801714e
 800e678:	08017165 	.word	0x08017165

0800e67c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800e680:	4d16      	ldr	r5, [pc, #88]	; (800e6dc <init_mem_slab_module+0x60>)
 800e682:	4c17      	ldr	r4, [pc, #92]	; (800e6e0 <init_mem_slab_module+0x64>)
 800e684:	4e17      	ldr	r6, [pc, #92]	; (800e6e4 <init_mem_slab_module+0x68>)
 800e686:	46a8      	mov	r8, r5
 800e688:	42ac      	cmp	r4, r5
 800e68a:	d90c      	bls.n	800e6a6 <init_mem_slab_module+0x2a>
 800e68c:	4916      	ldr	r1, [pc, #88]	; (800e6e8 <init_mem_slab_module+0x6c>)
 800e68e:	4817      	ldr	r0, [pc, #92]	; (800e6ec <init_mem_slab_module+0x70>)
 800e690:	233d      	movs	r3, #61	; 0x3d
 800e692:	4632      	mov	r2, r6
 800e694:	f003 fe08 	bl	80122a8 <assert_print>
 800e698:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <init_mem_slab_module+0x74>)
 800e69a:	f003 fe05 	bl	80122a8 <assert_print>
 800e69e:	213d      	movs	r1, #61	; 0x3d
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f003 fdfa 	bl	801229a <assert_post_action>
 800e6a6:	4544      	cmp	r4, r8
 800e6a8:	d302      	bcc.n	800e6b0 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800e6aa:	2000      	movs	r0, #0
	return rc;
}
 800e6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800e6b0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800e6b4:	ea41 0302 	orr.w	r3, r1, r2
 800e6b8:	f013 0303 	ands.w	r3, r3, #3
 800e6bc:	d10b      	bne.n	800e6d6 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
 800e6be:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
 800e6c0:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800e6c2:	4283      	cmp	r3, r0
 800e6c4:	d101      	bne.n	800e6ca <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800e6c6:	3420      	adds	r4, #32
 800e6c8:	e7de      	b.n	800e688 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
 800e6ca:	69a7      	ldr	r7, [r4, #24]
 800e6cc:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800e6ce:	3301      	adds	r3, #1
		slab->free_list = p;
 800e6d0:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
 800e6d2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
 800e6d4:	e7f5      	b.n	800e6c2 <init_mem_slab_module+0x46>
		return -EINVAL;
 800e6d6:	f06f 0015 	mvn.w	r0, #21
	return rc;
 800e6da:	e7e7      	b.n	800e6ac <init_mem_slab_module+0x30>
 800e6dc:	20000578 	.word	0x20000578
 800e6e0:	20000518 	.word	0x20000518
 800e6e4:	08019a76 	.word	0x08019a76
 800e6e8:	08019a9b 	.word	0x08019a9b
 800e6ec:	08016836 	.word	0x08016836
 800e6f0:	08018699 	.word	0x08018699

0800e6f4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 800e6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	460e      	mov	r6, r1
 800e6fc:	4690      	mov	r8, r2
 800e6fe:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 800e700:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 800e704:	f04f 0310 	mov.w	r3, #16
 800e708:	f3ef 8711 	mrs	r7, BASEPRI
 800e70c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e714:	4628      	mov	r0, r5
 800e716:	f000 f9eb 	bl	800eaf0 <z_spin_lock_valid>
 800e71a:	b968      	cbnz	r0, 800e738 <k_mem_slab_alloc+0x44>
 800e71c:	4a24      	ldr	r2, [pc, #144]	; (800e7b0 <k_mem_slab_alloc+0xbc>)
 800e71e:	4925      	ldr	r1, [pc, #148]	; (800e7b4 <k_mem_slab_alloc+0xc0>)
 800e720:	4825      	ldr	r0, [pc, #148]	; (800e7b8 <k_mem_slab_alloc+0xc4>)
 800e722:	238e      	movs	r3, #142	; 0x8e
 800e724:	f003 fdc0 	bl	80122a8 <assert_print>
 800e728:	4824      	ldr	r0, [pc, #144]	; (800e7bc <k_mem_slab_alloc+0xc8>)
 800e72a:	4629      	mov	r1, r5
 800e72c:	f003 fdbc 	bl	80122a8 <assert_print>
 800e730:	481f      	ldr	r0, [pc, #124]	; (800e7b0 <k_mem_slab_alloc+0xbc>)
 800e732:	218e      	movs	r1, #142	; 0x8e
 800e734:	f003 fdb1 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800e738:	4628      	mov	r0, r5
 800e73a:	f000 f9f7 	bl	800eb2c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800e73e:	69a3      	ldr	r3, [r4, #24]
 800e740:	b1eb      	cbz	r3, 800e77e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
 800e742:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
 800e748:	69e3      	ldr	r3, [r4, #28]
 800e74a:	3301      	adds	r3, #1
 800e74c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800e74e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800e750:	4628      	mov	r0, r5
 800e752:	f000 f9db 	bl	800eb0c <z_spin_unlock_valid>
 800e756:	b968      	cbnz	r0, 800e774 <k_mem_slab_alloc+0x80>
 800e758:	4a15      	ldr	r2, [pc, #84]	; (800e7b0 <k_mem_slab_alloc+0xbc>)
 800e75a:	4919      	ldr	r1, [pc, #100]	; (800e7c0 <k_mem_slab_alloc+0xcc>)
 800e75c:	4816      	ldr	r0, [pc, #88]	; (800e7b8 <k_mem_slab_alloc+0xc4>)
 800e75e:	23b9      	movs	r3, #185	; 0xb9
 800e760:	f003 fda2 	bl	80122a8 <assert_print>
 800e764:	4817      	ldr	r0, [pc, #92]	; (800e7c4 <k_mem_slab_alloc+0xd0>)
 800e766:	4629      	mov	r1, r5
 800e768:	f003 fd9e 	bl	80122a8 <assert_print>
 800e76c:	4810      	ldr	r0, [pc, #64]	; (800e7b0 <k_mem_slab_alloc+0xbc>)
 800e76e:	21b9      	movs	r1, #185	; 0xb9
 800e770:	f003 fd93 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800e774:	f387 8811 	msr	BASEPRI, r7
 800e778:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800e77c:	e013      	b.n	800e7a6 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800e77e:	ea58 0209 	orrs.w	r2, r8, r9
 800e782:	d103      	bne.n	800e78c <k_mem_slab_alloc+0x98>
		*mem = NULL;
 800e784:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
 800e786:	f06f 040b 	mvn.w	r4, #11
 800e78a:	e7e1      	b.n	800e750 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800e78c:	4622      	mov	r2, r4
 800e78e:	e9cd 8900 	strd	r8, r9, [sp]
 800e792:	4639      	mov	r1, r7
 800e794:	4628      	mov	r0, r5
 800e796:	f001 fe5f 	bl	8010458 <z_pend_curr>
		if (result == 0) {
 800e79a:	4604      	mov	r4, r0
 800e79c:	b918      	cbnz	r0, 800e7a6 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
 800e79e:	4b0a      	ldr	r3, [pc, #40]	; (800e7c8 <k_mem_slab_alloc+0xd4>)
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	6033      	str	r3, [r6, #0]
}
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	b003      	add	sp, #12
 800e7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ae:	bf00      	nop
 800e7b0:	080170fb 	.word	0x080170fb
 800e7b4:	08017121 	.word	0x08017121
 800e7b8:	08016836 	.word	0x08016836
 800e7bc:	08017136 	.word	0x08017136
 800e7c0:	0801714e 	.word	0x0801714e
 800e7c4:	08017165 	.word	0x08017165
 800e7c8:	20001818 	.word	0x20001818

0800e7cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
 800e7d4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 800e7d8:	f04f 0310 	mov.w	r3, #16
 800e7dc:	f3ef 8711 	mrs	r7, BASEPRI
 800e7e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800e7e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f000 f981 	bl	800eaf0 <z_spin_lock_valid>
 800e7ee:	b968      	cbnz	r0, 800e80c <k_mem_slab_free+0x40>
 800e7f0:	4a22      	ldr	r2, [pc, #136]	; (800e87c <k_mem_slab_free+0xb0>)
 800e7f2:	4923      	ldr	r1, [pc, #140]	; (800e880 <k_mem_slab_free+0xb4>)
 800e7f4:	4823      	ldr	r0, [pc, #140]	; (800e884 <k_mem_slab_free+0xb8>)
 800e7f6:	238e      	movs	r3, #142	; 0x8e
 800e7f8:	f003 fd56 	bl	80122a8 <assert_print>
 800e7fc:	4822      	ldr	r0, [pc, #136]	; (800e888 <k_mem_slab_free+0xbc>)
 800e7fe:	4629      	mov	r1, r5
 800e800:	f003 fd52 	bl	80122a8 <assert_print>
 800e804:	481d      	ldr	r0, [pc, #116]	; (800e87c <k_mem_slab_free+0xb0>)
 800e806:	218e      	movs	r1, #142	; 0x8e
 800e808:	f003 fd47 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800e80c:	4628      	mov	r0, r5
 800e80e:	f000 f98d 	bl	800eb2c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800e812:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800e816:	f1b8 0f00 	cmp.w	r8, #0
 800e81a:	d10f      	bne.n	800e83c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800e81c:	4620      	mov	r0, r4
 800e81e:	f001 ff7d 	bl	801071c <z_unpend_first_thread>

		if (pending_thread != NULL) {
 800e822:	b158      	cbz	r0, 800e83c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800e824:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800e826:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800e828:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800e82c:	f001 fc62 	bl	80100f4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800e830:	4639      	mov	r1, r7
 800e832:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800e834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
 800e838:	f001 b9ba 	b.w	800fbb0 <z_reschedule>
	**(char ***) mem = slab->free_list;
 800e83c:	6833      	ldr	r3, [r6, #0]
 800e83e:	69a2      	ldr	r2, [r4, #24]
 800e840:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800e842:	6833      	ldr	r3, [r6, #0]
 800e844:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800e846:	69e3      	ldr	r3, [r4, #28]
 800e848:	3b01      	subs	r3, #1
 800e84a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800e84c:	4628      	mov	r0, r5
 800e84e:	f000 f95d 	bl	800eb0c <z_spin_unlock_valid>
 800e852:	b968      	cbnz	r0, 800e870 <k_mem_slab_free+0xa4>
 800e854:	4a09      	ldr	r2, [pc, #36]	; (800e87c <k_mem_slab_free+0xb0>)
 800e856:	490d      	ldr	r1, [pc, #52]	; (800e88c <k_mem_slab_free+0xc0>)
 800e858:	480a      	ldr	r0, [pc, #40]	; (800e884 <k_mem_slab_free+0xb8>)
 800e85a:	23b9      	movs	r3, #185	; 0xb9
 800e85c:	f003 fd24 	bl	80122a8 <assert_print>
 800e860:	480b      	ldr	r0, [pc, #44]	; (800e890 <k_mem_slab_free+0xc4>)
 800e862:	4629      	mov	r1, r5
 800e864:	f003 fd20 	bl	80122a8 <assert_print>
 800e868:	4804      	ldr	r0, [pc, #16]	; (800e87c <k_mem_slab_free+0xb0>)
 800e86a:	21b9      	movs	r1, #185	; 0xb9
 800e86c:	f003 fd15 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800e870:	f387 8811 	msr	BASEPRI, r7
 800e874:	f3bf 8f6f 	isb	sy
}
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87c:	080170fb 	.word	0x080170fb
 800e880:	08017121 	.word	0x08017121
 800e884:	08016836 	.word	0x08016836
 800e888:	08017136 	.word	0x08017136
 800e88c:	0801714e 	.word	0x0801714e
 800e890:	08017165 	.word	0x08017165

0800e894 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800e894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e898:	b085      	sub	sp, #20
 800e89a:	4604      	mov	r4, r0
 800e89c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
 800e8a0:	f1b8 0f0f 	cmp.w	r8, #15
{
 800e8a4:	460f      	mov	r7, r1
 800e8a6:	4615      	mov	r5, r2
 800e8a8:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
 800e8aa:	d132      	bne.n	800e912 <z_setup_new_thread+0x7e>
 800e8ac:	4b25      	ldr	r3, [pc, #148]	; (800e944 <z_setup_new_thread+0xb0>)
 800e8ae:	4599      	cmp	r9, r3
 800e8b0:	d133      	bne.n	800e91a <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800e8b2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800e8b6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800e8ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8bc:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800e8be:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800e8c4:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800e8c8:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
 800e8cc:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
 800e8d2:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8d6:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800e8d8:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8de:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
 800e8e0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8e4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
 800e8e6:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8e8:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800e8ea:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
 800e8ee:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
 800e8f0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 800e8f2:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800e8f4:	4642      	mov	r2, r8
 800e8f6:	4639      	mov	r1, r7
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f7f5 fa1f 	bl	8003d3c <arch_new_thread>
	if (!_current) {
 800e8fe:	4b12      	ldr	r3, [pc, #72]	; (800e948 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
 800e900:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	b103      	cbz	r3, 800e908 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
 800e906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800e908:	6763      	str	r3, [r4, #116]	; 0x74
}
 800e90a:	4640      	mov	r0, r8
 800e90c:	b005      	add	sp, #20
 800e90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
 800e912:	f108 0310 	add.w	r3, r8, #16
 800e916:	2b1e      	cmp	r3, #30
 800e918:	d9cb      	bls.n	800e8b2 <z_setup_new_thread+0x1e>
 800e91a:	4a0c      	ldr	r2, [pc, #48]	; (800e94c <z_setup_new_thread+0xb8>)
 800e91c:	490c      	ldr	r1, [pc, #48]	; (800e950 <z_setup_new_thread+0xbc>)
 800e91e:	480d      	ldr	r0, [pc, #52]	; (800e954 <z_setup_new_thread+0xc0>)
 800e920:	f240 13ff 	movw	r3, #511	; 0x1ff
 800e924:	f003 fcc0 	bl	80122a8 <assert_print>
 800e928:	4641      	mov	r1, r8
 800e92a:	480b      	ldr	r0, [pc, #44]	; (800e958 <z_setup_new_thread+0xc4>)
 800e92c:	f06f 030f 	mvn.w	r3, #15
 800e930:	220e      	movs	r2, #14
 800e932:	f003 fcb9 	bl	80122a8 <assert_print>
 800e936:	4805      	ldr	r0, [pc, #20]	; (800e94c <z_setup_new_thread+0xb8>)
 800e938:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e93c:	f003 fcad 	bl	801229a <assert_post_action>
 800e940:	e7b7      	b.n	800e8b2 <z_setup_new_thread+0x1e>
 800e942:	bf00      	nop
 800e944:	0800eb3d 	.word	0x0800eb3d
 800e948:	20001818 	.word	0x20001818
 800e94c:	08019ab8 	.word	0x08019ab8
 800e950:	08019adb 	.word	0x08019adb
 800e954:	08016836 	.word	0x08016836
 800e958:	08019b5b 	.word	0x08019b5b

0800e95c <z_impl_k_thread_create>:
{
 800e95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e960:	b087      	sub	sp, #28
 800e962:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 800e966:	4604      	mov	r4, r0
 800e968:	460d      	mov	r5, r1
 800e96a:	4690      	mov	r8, r2
 800e96c:	4699      	mov	r9, r3
 800e96e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
 800e972:	b173      	cbz	r3, 800e992 <z_impl_k_thread_create+0x36>
 800e974:	491b      	ldr	r1, [pc, #108]	; (800e9e4 <z_impl_k_thread_create+0x88>)
 800e976:	4a1c      	ldr	r2, [pc, #112]	; (800e9e8 <z_impl_k_thread_create+0x8c>)
 800e978:	481c      	ldr	r0, [pc, #112]	; (800e9ec <z_impl_k_thread_create+0x90>)
 800e97a:	f240 236e 	movw	r3, #622	; 0x26e
 800e97e:	f003 fc93 	bl	80122a8 <assert_print>
 800e982:	481b      	ldr	r0, [pc, #108]	; (800e9f0 <z_impl_k_thread_create+0x94>)
 800e984:	f003 fc90 	bl	80122a8 <assert_print>
 800e988:	4817      	ldr	r0, [pc, #92]	; (800e9e8 <z_impl_k_thread_create+0x8c>)
 800e98a:	f240 216e 	movw	r1, #622	; 0x26e
 800e98e:	f003 fc84 	bl	801229a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800e992:	2300      	movs	r3, #0
 800e994:	9305      	str	r3, [sp, #20]
 800e996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e99c:	9303      	str	r3, [sp, #12]
 800e99e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9a0:	9302      	str	r3, [sp, #8]
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4642      	mov	r2, r8
 800e9ac:	464b      	mov	r3, r9
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f7ff ff6f 	bl	800e894 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800e9b6:	1c7b      	adds	r3, r7, #1
 800e9b8:	bf08      	it	eq
 800e9ba:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 800e9be:	d005      	beq.n	800e9cc <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800e9c0:	ea56 0307 	orrs.w	r3, r6, r7
 800e9c4:	d106      	bne.n	800e9d4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f001 fbdc 	bl	8010184 <z_sched_start>
}
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	b007      	add	sp, #28
 800e9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800e9d4:	4907      	ldr	r1, [pc, #28]	; (800e9f4 <z_impl_k_thread_create+0x98>)
 800e9d6:	4632      	mov	r2, r6
 800e9d8:	463b      	mov	r3, r7
 800e9da:	f104 0018 	add.w	r0, r4, #24
 800e9de:	f002 fa1b 	bl	8010e18 <z_add_timeout>
 800e9e2:	e7f3      	b.n	800e9cc <z_impl_k_thread_create+0x70>
 800e9e4:	08019b8c 	.word	0x08019b8c
 800e9e8:	08019ab8 	.word	0x08019ab8
 800e9ec:	08016836 	.word	0x08016836
 800e9f0:	08019b9e 	.word	0x08019b9e
 800e9f4:	0801022d 	.word	0x0801022d

0800e9f8 <z_init_static_threads>:
{
 800e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800e9fc:	4f35      	ldr	r7, [pc, #212]	; (800ead4 <z_init_static_threads+0xdc>)
 800e9fe:	4e36      	ldr	r6, [pc, #216]	; (800ead8 <z_init_static_threads+0xe0>)
 800ea00:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800eae8 <z_init_static_threads+0xf0>
{
 800ea04:	b086      	sub	sp, #24
 800ea06:	463d      	mov	r5, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 800ea08:	42be      	cmp	r6, r7
 800ea0a:	d90e      	bls.n	800ea2a <z_init_static_threads+0x32>
 800ea0c:	4933      	ldr	r1, [pc, #204]	; (800eadc <z_init_static_threads+0xe4>)
 800ea0e:	4834      	ldr	r0, [pc, #208]	; (800eae0 <z_init_static_threads+0xe8>)
 800ea10:	f240 23d5 	movw	r3, #725	; 0x2d5
 800ea14:	4642      	mov	r2, r8
 800ea16:	f003 fc47 	bl	80122a8 <assert_print>
 800ea1a:	4832      	ldr	r0, [pc, #200]	; (800eae4 <z_init_static_threads+0xec>)
 800ea1c:	f003 fc44 	bl	80122a8 <assert_print>
 800ea20:	f240 21d5 	movw	r1, #725	; 0x2d5
 800ea24:	4640      	mov	r0, r8
 800ea26:	f003 fc38 	bl	801229a <assert_post_action>
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	f106 0430 	add.w	r4, r6, #48	; 0x30
 800ea30:	d31e      	bcc.n	800ea70 <z_init_static_threads+0x78>
	k_sched_lock();
 800ea32:	f001 f901 	bl	800fc38 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800ea36:	4c28      	ldr	r4, [pc, #160]	; (800ead8 <z_init_static_threads+0xe0>)
 800ea38:	4e2b      	ldr	r6, [pc, #172]	; (800eae8 <z_init_static_threads+0xf0>)
 800ea3a:	4f28      	ldr	r7, [pc, #160]	; (800eadc <z_init_static_threads+0xe4>)
 800ea3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800eae0 <z_init_static_threads+0xe8>
 800ea40:	42ac      	cmp	r4, r5
 800ea42:	d90e      	bls.n	800ea62 <z_init_static_threads+0x6a>
 800ea44:	4639      	mov	r1, r7
 800ea46:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 800ea4a:	4632      	mov	r2, r6
 800ea4c:	4640      	mov	r0, r8
 800ea4e:	f003 fc2b 	bl	80122a8 <assert_print>
 800ea52:	4824      	ldr	r0, [pc, #144]	; (800eae4 <z_init_static_threads+0xec>)
 800ea54:	f003 fc28 	bl	80122a8 <assert_print>
 800ea58:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f003 fc1c 	bl	801229a <assert_post_action>
 800ea62:	42ac      	cmp	r4, r5
 800ea64:	d321      	bcc.n	800eaaa <z_init_static_threads+0xb2>
}
 800ea66:	b006      	add	sp, #24
 800ea68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_sched_unlock();
 800ea6c:	f001 bd8e 	b.w	801058c <k_sched_unlock>
		z_setup_new_thread(
 800ea70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ea74:	9305      	str	r3, [sp, #20]
 800ea76:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800ea80:	9303      	str	r3, [sp, #12]
 800ea82:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800ea86:	9302      	str	r3, [sp, #8]
 800ea88:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800ea98:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800ea9c:	f7ff fefa 	bl	800e894 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800eaa0:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800eaa4:	655e      	str	r6, [r3, #84]	; 0x54
 800eaa6:	4626      	mov	r6, r4
 800eaa8:	e7ae      	b.n	800ea08 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800eaaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eaac:	1c53      	adds	r3, r2, #1
 800eaae:	d00a      	beq.n	800eac6 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
 800eab0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800eab4:	230a      	movs	r3, #10
 800eab6:	fb82 2303 	smull	r2, r3, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800eaba:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800eabe:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800eac0:	d103      	bne.n	800eaca <z_init_static_threads+0xd2>
	z_sched_start(thread);
 800eac2:	f001 fb5f 	bl	8010184 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800eac6:	3430      	adds	r4, #48	; 0x30
 800eac8:	e7ba      	b.n	800ea40 <z_init_static_threads+0x48>
 800eaca:	4908      	ldr	r1, [pc, #32]	; (800eaec <z_init_static_threads+0xf4>)
 800eacc:	3018      	adds	r0, #24
 800eace:	f002 f9a3 	bl	8010e18 <z_add_timeout>
 800ead2:	e7f8      	b.n	800eac6 <z_init_static_threads+0xce>
 800ead4:	20000518 	.word	0x20000518
 800ead8:	20000518 	.word	0x20000518
 800eadc:	08019bc3 	.word	0x08019bc3
 800eae0:	08016836 	.word	0x08016836
 800eae4:	08018699 	.word	0x08018699
 800eae8:	08019ab8 	.word	0x08019ab8
 800eaec:	0801022d 	.word	0x0801022d

0800eaf0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
 800eaf0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
 800eaf2:	b138      	cbz	r0, 800eb04 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
 800eaf4:	4b04      	ldr	r3, [pc, #16]	; (800eb08 <z_spin_lock_valid+0x18>)
 800eaf6:	7d1b      	ldrb	r3, [r3, #20]
 800eaf8:	f000 0003 	and.w	r0, r0, #3
 800eafc:	1ac0      	subs	r0, r0, r3
 800eafe:	bf18      	it	ne
 800eb00:	2001      	movne	r0, #1
 800eb02:	4770      	bx	lr
			return false;
		}
	}
	return true;
 800eb04:	2001      	movs	r0, #1
}
 800eb06:	4770      	bx	lr
 800eb08:	20001818 	.word	0x20001818

0800eb0c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 800eb0c:	4906      	ldr	r1, [pc, #24]	; (800eb28 <z_spin_unlock_valid+0x1c>)
{
 800eb0e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
 800eb10:	688a      	ldr	r2, [r1, #8]
 800eb12:	7d08      	ldrb	r0, [r1, #20]
 800eb14:	6819      	ldr	r1, [r3, #0]
 800eb16:	4302      	orrs	r2, r0
 800eb18:	4291      	cmp	r1, r2
 800eb1a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
 800eb1e:	bf04      	itt	eq
 800eb20:	6018      	streq	r0, [r3, #0]
	return true;
 800eb22:	2001      	moveq	r0, #1
}
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	20001818 	.word	0x20001818

0800eb2c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
 800eb2c:	4a02      	ldr	r2, [pc, #8]	; (800eb38 <z_spin_lock_set_owner+0xc>)
 800eb2e:	7d11      	ldrb	r1, [r2, #20]
 800eb30:	6893      	ldr	r3, [r2, #8]
 800eb32:	430b      	orrs	r3, r1
 800eb34:	6003      	str	r3, [r0, #0]
}
 800eb36:	4770      	bx	lr
 800eb38:	20001818 	.word	0x20001818

0800eb3c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800eb3c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
 800eb3e:	4b0d      	ldr	r3, [pc, #52]	; (800eb74 <idle+0x38>)
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	da09      	bge.n	800eb5e <idle+0x22>
 800eb4a:	490b      	ldr	r1, [pc, #44]	; (800eb78 <idle+0x3c>)
 800eb4c:	480b      	ldr	r0, [pc, #44]	; (800eb7c <idle+0x40>)
 800eb4e:	4a0c      	ldr	r2, [pc, #48]	; (800eb80 <idle+0x44>)
 800eb50:	2327      	movs	r3, #39	; 0x27
 800eb52:	f003 fba9 	bl	80122a8 <assert_print>
 800eb56:	480a      	ldr	r0, [pc, #40]	; (800eb80 <idle+0x44>)
 800eb58:	2127      	movs	r1, #39	; 0x27
 800eb5a:	f003 fb9e 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800eb5e:	f04f 0210 	mov.w	r2, #16
 800eb62:	f3ef 8311 	mrs	r3, BASEPRI
 800eb66:	f382 8812 	msr	BASEPRI_MAX, r2
 800eb6a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800eb6e:	f7f4 ffb7 	bl	8003ae0 <arch_cpu_idle>
 800eb72:	e7f4      	b.n	800eb5e <idle+0x22>
 800eb74:	20001818 	.word	0x20001818
 800eb78:	08019c11 	.word	0x08019c11
 800eb7c:	08016836 	.word	0x08016836
 800eb80:	08019bf0 	.word	0x08019bf0

0800eb84 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
 800eb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb88:	4604      	mov	r4, r0
 800eb8a:	f89d a020 	ldrb.w	sl, [sp, #32]
 800eb8e:	460e      	mov	r6, r1
 800eb90:	4690      	mov	r8, r2
 800eb92:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800eb94:	f100 0508 	add.w	r5, r0, #8
 800eb98:	f04f 0310 	mov.w	r3, #16
 800eb9c:	f3ef 8711 	mrs	r7, BASEPRI
 800eba0:	f383 8812 	msr	BASEPRI_MAX, r3
 800eba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800eba8:	4628      	mov	r0, r5
 800ebaa:	f7ff ffa1 	bl	800eaf0 <z_spin_lock_valid>
 800ebae:	b968      	cbnz	r0, 800ebcc <queue_insert+0x48>
 800ebb0:	4a3b      	ldr	r2, [pc, #236]	; (800eca0 <queue_insert+0x11c>)
 800ebb2:	493c      	ldr	r1, [pc, #240]	; (800eca4 <queue_insert+0x120>)
 800ebb4:	483c      	ldr	r0, [pc, #240]	; (800eca8 <queue_insert+0x124>)
 800ebb6:	238e      	movs	r3, #142	; 0x8e
 800ebb8:	f003 fb76 	bl	80122a8 <assert_print>
 800ebbc:	483b      	ldr	r0, [pc, #236]	; (800ecac <queue_insert+0x128>)
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	f003 fb72 	bl	80122a8 <assert_print>
 800ebc4:	4836      	ldr	r0, [pc, #216]	; (800eca0 <queue_insert+0x11c>)
 800ebc6:	218e      	movs	r1, #142	; 0x8e
 800ebc8:	f003 fb67 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f7ff ffad 	bl	800eb2c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
 800ebd2:	f1ba 0f00 	cmp.w	sl, #0
 800ebd6:	d000      	beq.n	800ebda <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
 800ebd8:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 800ebda:	f104 000c 	add.w	r0, r4, #12
 800ebde:	f001 fd9d 	bl	801071c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
 800ebe2:	b158      	cbz	r0, 800ebfc <queue_insert+0x78>
 800ebe4:	2400      	movs	r4, #0
 800ebe6:	67c4      	str	r4, [r0, #124]	; 0x7c
 800ebe8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
 800ebec:	f001 fa82 	bl	80100f4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f000 ffdc 	bl	800fbb0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e01e      	b.n	800ec3a <queue_insert+0xb6>
	if (alloc) {
 800ebfc:	f1b9 0f00 	cmp.w	r9, #0
 800ec00:	d02d      	beq.n	800ec5e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
 800ec02:	2108      	movs	r1, #8
 800ec04:	f003 f870 	bl	8011ce8 <z_thread_aligned_alloc>
		if (anode == NULL) {
 800ec08:	b9c8      	cbnz	r0, 800ec3e <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f7ff ff7e 	bl	800eb0c <z_spin_unlock_valid>
 800ec10:	b968      	cbnz	r0, 800ec2e <queue_insert+0xaa>
 800ec12:	4a23      	ldr	r2, [pc, #140]	; (800eca0 <queue_insert+0x11c>)
 800ec14:	4926      	ldr	r1, [pc, #152]	; (800ecb0 <queue_insert+0x12c>)
 800ec16:	4824      	ldr	r0, [pc, #144]	; (800eca8 <queue_insert+0x124>)
 800ec18:	23b9      	movs	r3, #185	; 0xb9
 800ec1a:	f003 fb45 	bl	80122a8 <assert_print>
 800ec1e:	4825      	ldr	r0, [pc, #148]	; (800ecb4 <queue_insert+0x130>)
 800ec20:	4629      	mov	r1, r5
 800ec22:	f003 fb41 	bl	80122a8 <assert_print>
 800ec26:	481e      	ldr	r0, [pc, #120]	; (800eca0 <queue_insert+0x11c>)
 800ec28:	21b9      	movs	r1, #185	; 0xb9
 800ec2a:	f003 fb36 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800ec2e:	f387 8811 	msr	BASEPRI, r7
 800ec32:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 800ec36:	f06f 000b 	mvn.w	r0, #11
}
 800ec3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
 800ec3e:	2301      	movs	r3, #1
		anode->data = data;
 800ec40:	f8c0 8004 	str.w	r8, [r0, #4]
 800ec44:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
 800ec46:	6803      	ldr	r3, [r0, #0]
 800ec48:	f003 0303 	and.w	r3, r3, #3
 800ec4c:	b95e      	cbnz	r6, 800ec66 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ec4e:	6822      	ldr	r2, [r4, #0]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800ec54:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 800ec56:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 800ec58:	b973      	cbnz	r3, 800ec78 <queue_insert+0xf4>
	list->tail = node;
 800ec5a:	6060      	str	r0, [r4, #4]
}
 800ec5c:	e00c      	b.n	800ec78 <queue_insert+0xf4>
	node->next_and_flags = flags;
 800ec5e:	f8c8 9000 	str.w	r9, [r8]
}
 800ec62:	4640      	mov	r0, r8
 800ec64:	e7ef      	b.n	800ec46 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800ec66:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800ec68:	f032 0203 	bics.w	r2, r2, #3
 800ec6c:	d110      	bne.n	800ec90 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
 800ec6e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ec70:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
 800ec72:	b93a      	cbnz	r2, 800ec84 <queue_insert+0x100>
	list->head = node;
 800ec74:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 800ec78:	2104      	movs	r1, #4
 800ec7a:	f104 0014 	add.w	r0, r4, #20
 800ec7e:	f006 fd24 	bl	80156ca <z_handle_obj_poll_events>
 800ec82:	e7b5      	b.n	800ebf0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ec84:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ec86:	f003 0303 	and.w	r3, r3, #3
 800ec8a:	4303      	orrs	r3, r0
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	e7e4      	b.n	800ec5a <queue_insert+0xd6>
 800ec90:	4313      	orrs	r3, r2
 800ec92:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ec94:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ec96:	f003 0303 	and.w	r3, r3, #3
 800ec9a:	4303      	orrs	r3, r0
 800ec9c:	6033      	str	r3, [r6, #0]
}
 800ec9e:	e7eb      	b.n	800ec78 <queue_insert+0xf4>
 800eca0:	080170fb 	.word	0x080170fb
 800eca4:	08017121 	.word	0x08017121
 800eca8:	08016836 	.word	0x08016836
 800ecac:	08017136 	.word	0x08017136
 800ecb0:	0801714e 	.word	0x0801714e
 800ecb4:	08017165 	.word	0x08017165

0800ecb8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
 800ecb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	2900      	cmp	r1, #0
 800ecc4:	d04a      	beq.n	800ed5c <k_queue_append_list+0xa4>
 800ecc6:	2a00      	cmp	r2, #0
 800ecc8:	d048      	beq.n	800ed5c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800ecca:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
 800ecce:	f04f 0310 	mov.w	r3, #16
 800ecd2:	f3ef 8911 	mrs	r9, BASEPRI
 800ecd6:	f383 8812 	msr	BASEPRI_MAX, r3
 800ecda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ecde:	4630      	mov	r0, r6
 800ece0:	f7ff ff06 	bl	800eaf0 <z_spin_lock_valid>
 800ece4:	b968      	cbnz	r0, 800ed02 <k_queue_append_list+0x4a>
 800ece6:	4a1f      	ldr	r2, [pc, #124]	; (800ed64 <k_queue_append_list+0xac>)
 800ece8:	491f      	ldr	r1, [pc, #124]	; (800ed68 <k_queue_append_list+0xb0>)
 800ecea:	4820      	ldr	r0, [pc, #128]	; (800ed6c <k_queue_append_list+0xb4>)
 800ecec:	238e      	movs	r3, #142	; 0x8e
 800ecee:	f003 fadb 	bl	80122a8 <assert_print>
 800ecf2:	481f      	ldr	r0, [pc, #124]	; (800ed70 <k_queue_append_list+0xb8>)
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	f003 fad7 	bl	80122a8 <assert_print>
 800ecfa:	481a      	ldr	r0, [pc, #104]	; (800ed64 <k_queue_append_list+0xac>)
 800ecfc:	218e      	movs	r1, #142	; 0x8e
 800ecfe:	f003 facc 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800ed02:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
 800ed04:	f105 080c 	add.w	r8, r5, #12
 800ed08:	f7ff ff10 	bl	800eb2c <z_spin_lock_set_owner>
 800ed0c:	4640      	mov	r0, r8
 800ed0e:	f001 fd05 	bl	801071c <z_unpend_first_thread>
 800ed12:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
 800ed16:	b920      	cbnz	r0, 800ed22 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
 800ed18:	686b      	ldr	r3, [r5, #4]
 800ed1a:	b9cb      	cbnz	r3, 800ed50 <k_queue_append_list+0x98>
	list->head = node;
 800ed1c:	602c      	str	r4, [r5, #0]
	list->tail = node;
 800ed1e:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
 800ed20:	e00a      	b.n	800ed38 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
 800ed22:	6144      	str	r4, [r0, #20]
 800ed24:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
 800ed28:	f001 f9e4 	bl	80100f4 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
 800ed2c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
 800ed2e:	4640      	mov	r0, r8
 800ed30:	f001 fcf4 	bl	801071c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
 800ed34:	2c00      	cmp	r4, #0
 800ed36:	d1ee      	bne.n	800ed16 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
 800ed38:	2104      	movs	r1, #4
 800ed3a:	f105 0014 	add.w	r0, r5, #20
 800ed3e:	f006 fcc4 	bl	80156ca <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
 800ed42:	4630      	mov	r0, r6
 800ed44:	4649      	mov	r1, r9
 800ed46:	f000 ff33 	bl	800fbb0 <z_reschedule>
	return 0;
 800ed4a:	2000      	movs	r0, #0
}
 800ed4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ed50:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ed52:	f001 0103 	and.w	r1, r1, #3
 800ed56:	430c      	orrs	r4, r1
 800ed58:	601c      	str	r4, [r3, #0]
}
 800ed5a:	e7e0      	b.n	800ed1e <k_queue_append_list+0x66>
		return -EINVAL;
 800ed5c:	f06f 0015 	mvn.w	r0, #21
 800ed60:	e7f4      	b.n	800ed4c <k_queue_append_list+0x94>
 800ed62:	bf00      	nop
 800ed64:	080170fb 	.word	0x080170fb
 800ed68:	08017121 	.word	0x08017121
 800ed6c:	08016836 	.word	0x08016836
 800ed70:	08017136 	.word	0x08017136

0800ed74 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 800ed74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed78:	4606      	mov	r6, r0
 800ed7a:	4690      	mov	r8, r2
 800ed7c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800ed7e:	f100 0508 	add.w	r5, r0, #8
 800ed82:	f04f 0310 	mov.w	r3, #16
 800ed86:	f3ef 8711 	mrs	r7, BASEPRI
 800ed8a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ed8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ed92:	4628      	mov	r0, r5
 800ed94:	f7ff feac 	bl	800eaf0 <z_spin_lock_valid>
 800ed98:	b968      	cbnz	r0, 800edb6 <z_impl_k_queue_get+0x42>
 800ed9a:	4a25      	ldr	r2, [pc, #148]	; (800ee30 <z_impl_k_queue_get+0xbc>)
 800ed9c:	4925      	ldr	r1, [pc, #148]	; (800ee34 <z_impl_k_queue_get+0xc0>)
 800ed9e:	4826      	ldr	r0, [pc, #152]	; (800ee38 <z_impl_k_queue_get+0xc4>)
 800eda0:	238e      	movs	r3, #142	; 0x8e
 800eda2:	f003 fa81 	bl	80122a8 <assert_print>
 800eda6:	4825      	ldr	r0, [pc, #148]	; (800ee3c <z_impl_k_queue_get+0xc8>)
 800eda8:	4629      	mov	r1, r5
 800edaa:	f003 fa7d 	bl	80122a8 <assert_print>
 800edae:	4820      	ldr	r0, [pc, #128]	; (800ee30 <z_impl_k_queue_get+0xbc>)
 800edb0:	218e      	movs	r1, #142	; 0x8e
 800edb2:	f003 fa72 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800edb6:	4628      	mov	r0, r5
 800edb8:	f7ff feb8 	bl	800eb2c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
 800edbc:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 800edbe:	b334      	cbz	r4, 800ee0e <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800edc0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800edc2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800edc4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800edc8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 800edca:	4620      	mov	r0, r4
	list->head = node;
 800edcc:	6033      	str	r3, [r6, #0]
	list->tail = node;
 800edce:	bf08      	it	eq
 800edd0:	6073      	streq	r3, [r6, #4]
 800edd2:	2101      	movs	r1, #1
 800edd4:	f006 fad3 	bl	801537e <z_queue_node_peek>
 800edd8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800edda:	4628      	mov	r0, r5
 800eddc:	f7ff fe96 	bl	800eb0c <z_spin_unlock_valid>
 800ede0:	b968      	cbnz	r0, 800edfe <z_impl_k_queue_get+0x8a>
 800ede2:	4a13      	ldr	r2, [pc, #76]	; (800ee30 <z_impl_k_queue_get+0xbc>)
 800ede4:	4916      	ldr	r1, [pc, #88]	; (800ee40 <z_impl_k_queue_get+0xcc>)
 800ede6:	4814      	ldr	r0, [pc, #80]	; (800ee38 <z_impl_k_queue_get+0xc4>)
 800ede8:	23b9      	movs	r3, #185	; 0xb9
 800edea:	f003 fa5d 	bl	80122a8 <assert_print>
 800edee:	4815      	ldr	r0, [pc, #84]	; (800ee44 <z_impl_k_queue_get+0xd0>)
 800edf0:	4629      	mov	r1, r5
 800edf2:	f003 fa59 	bl	80122a8 <assert_print>
 800edf6:	480e      	ldr	r0, [pc, #56]	; (800ee30 <z_impl_k_queue_get+0xbc>)
 800edf8:	21b9      	movs	r1, #185	; 0xb9
 800edfa:	f003 fa4e 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800edfe:	f387 8811 	msr	BASEPRI, r7
 800ee02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 800ee06:	4620      	mov	r0, r4
 800ee08:	b003      	add	sp, #12
 800ee0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ee0e:	ea58 0309 	orrs.w	r3, r8, r9
 800ee12:	d0e2      	beq.n	800edda <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 800ee14:	e9cd 8900 	strd	r8, r9, [sp]
 800ee18:	f106 020c 	add.w	r2, r6, #12
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f001 fb1a 	bl	8010458 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1ee      	bne.n	800ee06 <z_impl_k_queue_get+0x92>
 800ee28:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <z_impl_k_queue_get+0xd4>)
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	695c      	ldr	r4, [r3, #20]
 800ee2e:	e7ea      	b.n	800ee06 <z_impl_k_queue_get+0x92>
 800ee30:	080170fb 	.word	0x080170fb
 800ee34:	08017121 	.word	0x08017121
 800ee38:	08016836 	.word	0x08016836
 800ee3c:	08017136 	.word	0x08017136
 800ee40:	0801714e 	.word	0x0801714e
 800ee44:	08017165 	.word	0x08017165
 800ee48:	20001818 	.word	0x20001818

0800ee4c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4604      	mov	r4, r0
	__asm__ volatile(
 800ee50:	f04f 0310 	mov.w	r3, #16
 800ee54:	f3ef 8511 	mrs	r5, BASEPRI
 800ee58:	f383 8812 	msr	BASEPRI_MAX, r3
 800ee5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ee60:	4817      	ldr	r0, [pc, #92]	; (800eec0 <z_impl_k_sem_give+0x74>)
 800ee62:	f7ff fe45 	bl	800eaf0 <z_spin_lock_valid>
 800ee66:	b968      	cbnz	r0, 800ee84 <z_impl_k_sem_give+0x38>
 800ee68:	4a16      	ldr	r2, [pc, #88]	; (800eec4 <z_impl_k_sem_give+0x78>)
 800ee6a:	4917      	ldr	r1, [pc, #92]	; (800eec8 <z_impl_k_sem_give+0x7c>)
 800ee6c:	4817      	ldr	r0, [pc, #92]	; (800eecc <z_impl_k_sem_give+0x80>)
 800ee6e:	238e      	movs	r3, #142	; 0x8e
 800ee70:	f003 fa1a 	bl	80122a8 <assert_print>
 800ee74:	4912      	ldr	r1, [pc, #72]	; (800eec0 <z_impl_k_sem_give+0x74>)
 800ee76:	4816      	ldr	r0, [pc, #88]	; (800eed0 <z_impl_k_sem_give+0x84>)
 800ee78:	f003 fa16 	bl	80122a8 <assert_print>
 800ee7c:	4811      	ldr	r0, [pc, #68]	; (800eec4 <z_impl_k_sem_give+0x78>)
 800ee7e:	218e      	movs	r1, #142	; 0x8e
 800ee80:	f003 fa0b 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800ee84:	480e      	ldr	r0, [pc, #56]	; (800eec0 <z_impl_k_sem_give+0x74>)
 800ee86:	f7ff fe51 	bl	800eb2c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f001 fc46 	bl	801071c <z_unpend_first_thread>

	if (thread != NULL) {
 800ee90:	b148      	cbz	r0, 800eea6 <z_impl_k_sem_give+0x5a>
 800ee92:	2200      	movs	r2, #0
 800ee94:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800ee96:	f001 f92d 	bl	80100f4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	4808      	ldr	r0, [pc, #32]	; (800eec0 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800ee9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800eea2:	f000 be85 	b.w	800fbb0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800eea6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	bf18      	it	ne
 800eeae:	3301      	addne	r3, #1
 800eeb0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800eeb2:	2102      	movs	r1, #2
 800eeb4:	f104 0010 	add.w	r0, r4, #16
 800eeb8:	f006 fc07 	bl	80156ca <z_handle_obj_poll_events>
}
 800eebc:	e7ed      	b.n	800ee9a <z_impl_k_sem_give+0x4e>
 800eebe:	bf00      	nop
 800eec0:	2000183c 	.word	0x2000183c
 800eec4:	080170fb 	.word	0x080170fb
 800eec8:	08017121 	.word	0x08017121
 800eecc:	08016836 	.word	0x08016836
 800eed0:	08017136 	.word	0x08017136

0800eed4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800eed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eed6:	4604      	mov	r4, r0
 800eed8:	4616      	mov	r6, r2
 800eeda:	461f      	mov	r7, r3
 800eedc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
 800eee0:	b17b      	cbz	r3, 800ef02 <z_impl_k_sem_take+0x2e>
 800eee2:	ea56 0307 	orrs.w	r3, r6, r7
 800eee6:	d00c      	beq.n	800ef02 <z_impl_k_sem_take+0x2e>
 800eee8:	4935      	ldr	r1, [pc, #212]	; (800efc0 <z_impl_k_sem_take+0xec>)
 800eeea:	4a36      	ldr	r2, [pc, #216]	; (800efc4 <z_impl_k_sem_take+0xf0>)
 800eeec:	4836      	ldr	r0, [pc, #216]	; (800efc8 <z_impl_k_sem_take+0xf4>)
 800eeee:	2379      	movs	r3, #121	; 0x79
 800eef0:	f003 f9da 	bl	80122a8 <assert_print>
 800eef4:	4835      	ldr	r0, [pc, #212]	; (800efcc <z_impl_k_sem_take+0xf8>)
 800eef6:	f003 f9d7 	bl	80122a8 <assert_print>
 800eefa:	4832      	ldr	r0, [pc, #200]	; (800efc4 <z_impl_k_sem_take+0xf0>)
 800eefc:	2179      	movs	r1, #121	; 0x79
 800eefe:	f003 f9cc 	bl	801229a <assert_post_action>
 800ef02:	f04f 0310 	mov.w	r3, #16
 800ef06:	f3ef 8511 	mrs	r5, BASEPRI
 800ef0a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ef0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ef12:	482f      	ldr	r0, [pc, #188]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef14:	f7ff fdec 	bl	800eaf0 <z_spin_lock_valid>
 800ef18:	b968      	cbnz	r0, 800ef36 <z_impl_k_sem_take+0x62>
 800ef1a:	4a2e      	ldr	r2, [pc, #184]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef1c:	492e      	ldr	r1, [pc, #184]	; (800efd8 <z_impl_k_sem_take+0x104>)
 800ef1e:	482a      	ldr	r0, [pc, #168]	; (800efc8 <z_impl_k_sem_take+0xf4>)
 800ef20:	238e      	movs	r3, #142	; 0x8e
 800ef22:	f003 f9c1 	bl	80122a8 <assert_print>
 800ef26:	492a      	ldr	r1, [pc, #168]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef28:	482c      	ldr	r0, [pc, #176]	; (800efdc <z_impl_k_sem_take+0x108>)
 800ef2a:	f003 f9bd 	bl	80122a8 <assert_print>
 800ef2e:	4829      	ldr	r0, [pc, #164]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef30:	218e      	movs	r1, #142	; 0x8e
 800ef32:	f003 f9b2 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800ef36:	4826      	ldr	r0, [pc, #152]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef38:	f7ff fdf8 	bl	800eb2c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	b1d3      	cbz	r3, 800ef76 <z_impl_k_sem_take+0xa2>
		sem->count--;
 800ef40:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800ef42:	4823      	ldr	r0, [pc, #140]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef44:	60a3      	str	r3, [r4, #8]
 800ef46:	f7ff fde1 	bl	800eb0c <z_spin_unlock_valid>
 800ef4a:	b968      	cbnz	r0, 800ef68 <z_impl_k_sem_take+0x94>
 800ef4c:	4a21      	ldr	r2, [pc, #132]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef4e:	4924      	ldr	r1, [pc, #144]	; (800efe0 <z_impl_k_sem_take+0x10c>)
 800ef50:	481d      	ldr	r0, [pc, #116]	; (800efc8 <z_impl_k_sem_take+0xf4>)
 800ef52:	23b9      	movs	r3, #185	; 0xb9
 800ef54:	f003 f9a8 	bl	80122a8 <assert_print>
 800ef58:	491d      	ldr	r1, [pc, #116]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef5a:	4822      	ldr	r0, [pc, #136]	; (800efe4 <z_impl_k_sem_take+0x110>)
 800ef5c:	f003 f9a4 	bl	80122a8 <assert_print>
 800ef60:	481c      	ldr	r0, [pc, #112]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef62:	21b9      	movs	r1, #185	; 0xb9
 800ef64:	f003 f999 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800ef68:	f385 8811 	msr	BASEPRI, r5
 800ef6c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800ef70:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800ef72:	b003      	add	sp, #12
 800ef74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ef76:	ea56 0307 	orrs.w	r3, r6, r7
 800ef7a:	d118      	bne.n	800efae <z_impl_k_sem_take+0xda>
 800ef7c:	4814      	ldr	r0, [pc, #80]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef7e:	f7ff fdc5 	bl	800eb0c <z_spin_unlock_valid>
 800ef82:	b968      	cbnz	r0, 800efa0 <z_impl_k_sem_take+0xcc>
 800ef84:	4a13      	ldr	r2, [pc, #76]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef86:	4916      	ldr	r1, [pc, #88]	; (800efe0 <z_impl_k_sem_take+0x10c>)
 800ef88:	480f      	ldr	r0, [pc, #60]	; (800efc8 <z_impl_k_sem_take+0xf4>)
 800ef8a:	23b9      	movs	r3, #185	; 0xb9
 800ef8c:	f003 f98c 	bl	80122a8 <assert_print>
 800ef90:	490f      	ldr	r1, [pc, #60]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800ef92:	4814      	ldr	r0, [pc, #80]	; (800efe4 <z_impl_k_sem_take+0x110>)
 800ef94:	f003 f988 	bl	80122a8 <assert_print>
 800ef98:	480e      	ldr	r0, [pc, #56]	; (800efd4 <z_impl_k_sem_take+0x100>)
 800ef9a:	21b9      	movs	r1, #185	; 0xb9
 800ef9c:	f003 f97d 	bl	801229a <assert_post_action>
 800efa0:	f385 8811 	msr	BASEPRI, r5
 800efa4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800efa8:	f06f 000f 	mvn.w	r0, #15
 800efac:	e7e1      	b.n	800ef72 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800efae:	e9cd 6700 	strd	r6, r7, [sp]
 800efb2:	4622      	mov	r2, r4
 800efb4:	4629      	mov	r1, r5
 800efb6:	4806      	ldr	r0, [pc, #24]	; (800efd0 <z_impl_k_sem_take+0xfc>)
 800efb8:	f001 fa4e 	bl	8010458 <z_pend_curr>
	return ret;
 800efbc:	e7d9      	b.n	800ef72 <z_impl_k_sem_take+0x9e>
 800efbe:	bf00      	nop
 800efc0:	08019c59 	.word	0x08019c59
 800efc4:	08019c39 	.word	0x08019c39
 800efc8:	08016836 	.word	0x08016836
 800efcc:	08019487 	.word	0x08019487
 800efd0:	2000183c 	.word	0x2000183c
 800efd4:	080170fb 	.word	0x080170fb
 800efd8:	08017121 	.word	0x08017121
 800efdc:	08017136 	.word	0x08017136
 800efe0:	0801714e 	.word	0x0801714e
 800efe4:	08017165 	.word	0x08017165

0800efe8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800efe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800efea:	4b09      	ldr	r3, [pc, #36]	; (800f010 <k_sys_work_q_init+0x28>)
 800efec:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800efee:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800eff0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	4907      	ldr	r1, [pc, #28]	; (800f014 <k_sys_work_q_init+0x2c>)
 800eff6:	4808      	ldr	r0, [pc, #32]	; (800f018 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800eff8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800effc:	f04f 33ff 	mov.w	r3, #4294967295
 800f000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f004:	f000 fa88 	bl	800f518 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800f008:	4620      	mov	r0, r4
 800f00a:	b004      	add	sp, #16
 800f00c:	bd10      	pop	{r4, pc}
 800f00e:	bf00      	nop
 800f010:	08019ca7 	.word	0x08019ca7
 800f014:	20003340 	.word	0x20003340
 800f018:	20001470 	.word	0x20001470

0800f01c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800f01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f020:	4e7e      	ldr	r6, [pc, #504]	; (800f21c <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800f022:	4f7f      	ldr	r7, [pc, #508]	; (800f220 <work_queue_main+0x204>)
{
 800f024:	b085      	sub	sp, #20
 800f026:	4604      	mov	r4, r0
	__asm__ volatile(
 800f028:	f04f 0310 	mov.w	r3, #16
 800f02c:	f3ef 8811 	mrs	r8, BASEPRI
 800f030:	f383 8812 	msr	BASEPRI_MAX, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	4630      	mov	r0, r6
 800f03a:	f7ff fd59 	bl	800eaf0 <z_spin_lock_valid>
 800f03e:	b968      	cbnz	r0, 800f05c <work_queue_main+0x40>
 800f040:	4a78      	ldr	r2, [pc, #480]	; (800f224 <work_queue_main+0x208>)
 800f042:	4979      	ldr	r1, [pc, #484]	; (800f228 <work_queue_main+0x20c>)
 800f044:	4879      	ldr	r0, [pc, #484]	; (800f22c <work_queue_main+0x210>)
 800f046:	238e      	movs	r3, #142	; 0x8e
 800f048:	f003 f92e 	bl	80122a8 <assert_print>
 800f04c:	4878      	ldr	r0, [pc, #480]	; (800f230 <work_queue_main+0x214>)
 800f04e:	4631      	mov	r1, r6
 800f050:	f003 f92a 	bl	80122a8 <assert_print>
 800f054:	4873      	ldr	r0, [pc, #460]	; (800f224 <work_queue_main+0x208>)
 800f056:	218e      	movs	r1, #142	; 0x8e
 800f058:	f003 f91f 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f05c:	4630      	mov	r0, r6
 800f05e:	f7ff fd65 	bl	800eb2c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
 800f062:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
 800f066:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
 800f06a:	b9ad      	cbnz	r5, 800f098 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
 800f06c:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 800f070:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
 800f072:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800f076:	f100 8092 	bmi.w	800f19e <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800f07a:	2300      	movs	r3, #0
 800f07c:	9302      	str	r3, [sp, #8]
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	e9cd 2300 	strd	r2, r3, [sp]
 800f08a:	4641      	mov	r1, r8
 800f08c:	f104 0288 	add.w	r2, r4, #136	; 0x88
 800f090:	4630      	mov	r0, r6
 800f092:	f001 fe49 	bl	8010d28 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
 800f096:	e7c7      	b.n	800f028 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800f098:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800f09c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
 800f09e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800f0a2:	428d      	cmp	r5, r1
 800f0a4:	d101      	bne.n	800f0aa <work_queue_main+0x8e>
	list->tail = node;
 800f0a6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 800f0aa:	f043 0302 	orr.w	r3, r3, #2
 800f0ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800f0b2:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
 800f0b4:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
 800f0b8:	f023 0304 	bic.w	r3, r3, #4
 800f0bc:	f043 0301 	orr.w	r3, r3, #1
 800f0c0:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f7ff fd22 	bl	800eb0c <z_spin_unlock_valid>
 800f0c8:	b968      	cbnz	r0, 800f0e6 <work_queue_main+0xca>
 800f0ca:	4a56      	ldr	r2, [pc, #344]	; (800f224 <work_queue_main+0x208>)
 800f0cc:	4959      	ldr	r1, [pc, #356]	; (800f234 <work_queue_main+0x218>)
 800f0ce:	4857      	ldr	r0, [pc, #348]	; (800f22c <work_queue_main+0x210>)
 800f0d0:	23b9      	movs	r3, #185	; 0xb9
 800f0d2:	f003 f8e9 	bl	80122a8 <assert_print>
 800f0d6:	4858      	ldr	r0, [pc, #352]	; (800f238 <work_queue_main+0x21c>)
 800f0d8:	4631      	mov	r1, r6
 800f0da:	f003 f8e5 	bl	80122a8 <assert_print>
 800f0de:	4851      	ldr	r0, [pc, #324]	; (800f224 <work_queue_main+0x208>)
 800f0e0:	21b9      	movs	r1, #185	; 0xb9
 800f0e2:	f003 f8da 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f0e6:	f388 8811 	msr	BASEPRI, r8
 800f0ea:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
 800f0ee:	f1b9 0f00 	cmp.w	r9, #0
 800f0f2:	d10b      	bne.n	800f10c <work_queue_main+0xf0>
 800f0f4:	4951      	ldr	r1, [pc, #324]	; (800f23c <work_queue_main+0x220>)
 800f0f6:	484d      	ldr	r0, [pc, #308]	; (800f22c <work_queue_main+0x210>)
 800f0f8:	4a51      	ldr	r2, [pc, #324]	; (800f240 <work_queue_main+0x224>)
 800f0fa:	f44f 7322 	mov.w	r3, #648	; 0x288
 800f0fe:	f003 f8d3 	bl	80122a8 <assert_print>
 800f102:	484f      	ldr	r0, [pc, #316]	; (800f240 <work_queue_main+0x224>)
 800f104:	f44f 7122 	mov.w	r1, #648	; 0x288
 800f108:	f003 f8c7 	bl	801229a <assert_post_action>
		handler(work);
 800f10c:	4628      	mov	r0, r5
 800f10e:	47c8      	blx	r9
	__asm__ volatile(
 800f110:	f04f 0310 	mov.w	r3, #16
 800f114:	f3ef 8a11 	mrs	sl, BASEPRI
 800f118:	f383 8812 	msr	BASEPRI_MAX, r3
 800f11c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f120:	4630      	mov	r0, r6
 800f122:	f7ff fce5 	bl	800eaf0 <z_spin_lock_valid>
 800f126:	b968      	cbnz	r0, 800f144 <work_queue_main+0x128>
 800f128:	4a3e      	ldr	r2, [pc, #248]	; (800f224 <work_queue_main+0x208>)
 800f12a:	493f      	ldr	r1, [pc, #252]	; (800f228 <work_queue_main+0x20c>)
 800f12c:	483f      	ldr	r0, [pc, #252]	; (800f22c <work_queue_main+0x210>)
 800f12e:	238e      	movs	r3, #142	; 0x8e
 800f130:	f003 f8ba 	bl	80122a8 <assert_print>
 800f134:	483e      	ldr	r0, [pc, #248]	; (800f230 <work_queue_main+0x214>)
 800f136:	4631      	mov	r1, r6
 800f138:	f003 f8b6 	bl	80122a8 <assert_print>
 800f13c:	4839      	ldr	r0, [pc, #228]	; (800f224 <work_queue_main+0x208>)
 800f13e:	218e      	movs	r1, #142	; 0x8e
 800f140:	f003 f8ab 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f144:	4630      	mov	r0, r6
 800f146:	f7ff fcf1 	bl	800eb2c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
 800f14a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800f14c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 800f14e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800f152:	d42e      	bmi.n	800f1b2 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
 800f154:	60ea      	str	r2, [r5, #12]
 800f156:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800f15a:	f023 0302 	bic.w	r3, r3, #2
 800f15e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f162:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
 800f164:	f3c3 2500 	ubfx	r5, r3, #8, #1
 800f168:	f7ff fcd0 	bl	800eb0c <z_spin_unlock_valid>
 800f16c:	b968      	cbnz	r0, 800f18a <work_queue_main+0x16e>
 800f16e:	4a2d      	ldr	r2, [pc, #180]	; (800f224 <work_queue_main+0x208>)
 800f170:	4930      	ldr	r1, [pc, #192]	; (800f234 <work_queue_main+0x218>)
 800f172:	482e      	ldr	r0, [pc, #184]	; (800f22c <work_queue_main+0x210>)
 800f174:	23b9      	movs	r3, #185	; 0xb9
 800f176:	f003 f897 	bl	80122a8 <assert_print>
 800f17a:	482f      	ldr	r0, [pc, #188]	; (800f238 <work_queue_main+0x21c>)
 800f17c:	4631      	mov	r1, r6
 800f17e:	f003 f893 	bl	80122a8 <assert_print>
 800f182:	4828      	ldr	r0, [pc, #160]	; (800f224 <work_queue_main+0x208>)
 800f184:	21b9      	movs	r1, #185	; 0xb9
 800f186:	f003 f888 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f18a:	f38a 8811 	msr	BASEPRI, sl
 800f18e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800f192:	2d00      	cmp	r5, #0
 800f194:	f47f af48 	bne.w	800f028 <work_queue_main+0xc>
	z_impl_k_yield();
 800f198:	f001 fb1c 	bl	80107d4 <z_impl_k_yield>
}
 800f19c:	e744      	b.n	800f028 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800f19e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f001 fd66 	bl	8010c78 <z_sched_wake>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1f8      	bne.n	800f1a2 <work_queue_main+0x186>
 800f1b0:	e763      	b.n	800f07a <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800f1b2:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
 800f1b4:	f023 0303 	bic.w	r3, r3, #3
 800f1b8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d0cb      	beq.n	800f156 <work_queue_main+0x13a>
	return node->next;
 800f1be:	6803      	ldr	r3, [r0, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bf38      	it	cc
 800f1c4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800f1c6:	f04f 0900 	mov.w	r9, #0
 800f1ca:	4698      	mov	r8, r3
	parent->next = child;
 800f1cc:	46cb      	mov	fp, r9
		if (wc->work == work) {
 800f1ce:	6843      	ldr	r3, [r0, #4]
 800f1d0:	429d      	cmp	r5, r3
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	d10d      	bne.n	800f1f2 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
 800f1d6:	6802      	ldr	r2, [r0, #0]
 800f1d8:	f1b9 0f00 	cmp.w	r9, #0
 800f1dc:	d115      	bne.n	800f20a <work_queue_main+0x1ee>
 800f1de:	687b      	ldr	r3, [r7, #4]
	list->head = node;
 800f1e0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 800f1e2:	4283      	cmp	r3, r0
 800f1e4:	d100      	bne.n	800f1e8 <work_queue_main+0x1cc>
	list->tail = node;
 800f1e6:	607a      	str	r2, [r7, #4]
	parent->next = child;
 800f1e8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
 800f1ec:	f7ff fe2e 	bl	800ee4c <z_impl_k_sem_give>
}
 800f1f0:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800f1f2:	f1b8 0f00 	cmp.w	r8, #0
 800f1f6:	d0ae      	beq.n	800f156 <work_queue_main+0x13a>
	return node->next;
 800f1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bf38      	it	cc
 800f200:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800f202:	4640      	mov	r0, r8
 800f204:	4691      	mov	r9, r2
 800f206:	4698      	mov	r8, r3
 800f208:	e7e1      	b.n	800f1ce <work_queue_main+0x1b2>
	parent->next = child;
 800f20a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4283      	cmp	r3, r0
	list->tail = node;
 800f212:	bf08      	it	eq
 800f214:	f8c7 9004 	streq.w	r9, [r7, #4]
}
 800f218:	e7e6      	b.n	800f1e8 <work_queue_main+0x1cc>
 800f21a:	bf00      	nop
 800f21c:	20001840 	.word	0x20001840
 800f220:	20001844 	.word	0x20001844
 800f224:	080170fb 	.word	0x080170fb
 800f228:	08017121 	.word	0x08017121
 800f22c:	08016836 	.word	0x08016836
 800f230:	08017136 	.word	0x08017136
 800f234:	0801714e 	.word	0x0801714e
 800f238:	08017165 	.word	0x08017165
 800f23c:	08019cd1 	.word	0x08019cd1
 800f240:	08019cb0 	.word	0x08019cb0

0800f244 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
 800f244:	68c3      	ldr	r3, [r0, #12]
{
 800f246:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
 800f248:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
 800f24c:	079b      	lsls	r3, r3, #30
{
 800f24e:	4605      	mov	r5, r0
 800f250:	460c      	mov	r4, r1
	if (ret) {
 800f252:	d50d      	bpl.n	800f270 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800f254:	2201      	movs	r2, #1
 800f256:	2100      	movs	r1, #0
 800f258:	f104 0008 	add.w	r0, r4, #8
 800f25c:	f006 f8bd 	bl	80153da <z_impl_k_sem_init>
	parent->next = child;
 800f260:	2300      	movs	r3, #0
 800f262:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
 800f264:	4b05      	ldr	r3, [pc, #20]	; (800f27c <cancel_sync_locked+0x38>)
	canceler->work = work;
 800f266:	6065      	str	r5, [r4, #4]
 800f268:	685a      	ldr	r2, [r3, #4]
 800f26a:	b91a      	cbnz	r2, 800f274 <cancel_sync_locked+0x30>
	list->head = node;
 800f26c:	e9c3 4400 	strd	r4, r4, [r3]
}
 800f270:	4630      	mov	r0, r6
 800f272:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
 800f274:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800f276:	605c      	str	r4, [r3, #4]
}
 800f278:	e7fa      	b.n	800f270 <cancel_sync_locked+0x2c>
 800f27a:	bf00      	nop
 800f27c:	20001844 	.word	0x20001844

0800f280 <submit_to_queue_locked>:
{
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800f282:	68c3      	ldr	r3, [r0, #12]
 800f284:	079a      	lsls	r2, r3, #30
{
 800f286:	4604      	mov	r4, r0
 800f288:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800f28a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f28e:	d42b      	bmi.n	800f2e8 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800f290:	075f      	lsls	r7, r3, #29
 800f292:	d42b      	bmi.n	800f2ec <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
 800f294:	680a      	ldr	r2, [r1, #0]
 800f296:	b90a      	cbnz	r2, 800f29c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 800f298:	6882      	ldr	r2, [r0, #8]
 800f29a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800f29c:	07d8      	lsls	r0, r3, #31
 800f29e:	d528      	bpl.n	800f2f2 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
 800f2a0:	68a3      	ldr	r3, [r4, #8]
 800f2a2:	b95b      	cbnz	r3, 800f2bc <submit_to_queue_locked+0x3c>
 800f2a4:	4924      	ldr	r1, [pc, #144]	; (800f338 <submit_to_queue_locked+0xb8>)
 800f2a6:	4825      	ldr	r0, [pc, #148]	; (800f33c <submit_to_queue_locked+0xbc>)
 800f2a8:	4a25      	ldr	r2, [pc, #148]	; (800f340 <submit_to_queue_locked+0xc0>)
 800f2aa:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800f2ae:	f002 fffb 	bl	80122a8 <assert_print>
 800f2b2:	4823      	ldr	r0, [pc, #140]	; (800f340 <submit_to_queue_locked+0xc0>)
 800f2b4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800f2b8:	f002 ffef 	bl	801229a <assert_post_action>
			*queuep = work->queue;
 800f2bc:	68a3      	ldr	r3, [r4, #8]
 800f2be:	6033      	str	r3, [r6, #0]
			ret = 2;
 800f2c0:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
 800f2c2:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
 800f2c4:	b38f      	cbz	r7, 800f32a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800f2c6:	4b1f      	ldr	r3, [pc, #124]	; (800f344 <submit_to_queue_locked+0xc4>)
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	42bb      	cmp	r3, r7
 800f2cc:	d113      	bne.n	800f2f6 <submit_to_queue_locked+0x76>
 800f2ce:	f006 f849 	bl	8015364 <k_is_in_isr>
 800f2d2:	f080 0001 	eor.w	r0, r0, #1
 800f2d6:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
 800f2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800f2dc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800f2de:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800f2e2:	d525      	bpl.n	800f330 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
 800f2e4:	b14a      	cbz	r2, 800f2fa <submit_to_queue_locked+0x7a>
 800f2e6:	b950      	cbnz	r0, 800f2fe <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
 800f2e8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	6033      	str	r3, [r6, #0]
	return ret;
 800f2f0:	e015      	b.n	800f31e <submit_to_queue_locked+0x9e>
		ret = 1;
 800f2f2:	2501      	movs	r5, #1
 800f2f4:	e7e5      	b.n	800f2c2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	e7ee      	b.n	800f2d8 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
 800f2fa:	071b      	lsls	r3, r3, #28
 800f2fc:	d4f4      	bmi.n	800f2e8 <submit_to_queue_locked+0x68>
	parent->next = child;
 800f2fe:	2300      	movs	r3, #0
 800f300:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
 800f302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f306:	b963      	cbnz	r3, 800f322 <submit_to_queue_locked+0xa2>
	list->head = node;
 800f308:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 800f30c:	4638      	mov	r0, r7
 800f30e:	f006 f874 	bl	80153fa <notify_queue_locked>
	*flagp |= BIT(bit);
 800f312:	68e3      	ldr	r3, [r4, #12]
 800f314:	f043 0304 	orr.w	r3, r3, #4
 800f318:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 800f31a:	6833      	ldr	r3, [r6, #0]
 800f31c:	60a3      	str	r3, [r4, #8]
}
 800f31e:	4628      	mov	r0, r5
 800f320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 800f322:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f324:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 800f328:	e7f0      	b.n	800f30c <submit_to_queue_locked+0x8c>
		return -EINVAL;
 800f32a:	f06f 0515 	mvn.w	r5, #21
 800f32e:	e7dd      	b.n	800f2ec <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
 800f330:	f06f 0512 	mvn.w	r5, #18
 800f334:	e7da      	b.n	800f2ec <submit_to_queue_locked+0x6c>
 800f336:	bf00      	nop
 800f338:	08019ce8 	.word	0x08019ce8
 800f33c:	08016836 	.word	0x08016836
 800f340:	08019cb0 	.word	0x08019cb0
 800f344:	20001818 	.word	0x20001818

0800f348 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
 800f348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f34a:	4604      	mov	r4, r0
	__asm__ volatile(
 800f34c:	f04f 0310 	mov.w	r3, #16
 800f350:	f3ef 8511 	mrs	r5, BASEPRI
 800f354:	f383 8812 	msr	BASEPRI_MAX, r3
 800f358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f35c:	481e      	ldr	r0, [pc, #120]	; (800f3d8 <work_timeout+0x90>)
 800f35e:	f7ff fbc7 	bl	800eaf0 <z_spin_lock_valid>
 800f362:	b968      	cbnz	r0, 800f380 <work_timeout+0x38>
 800f364:	4a1d      	ldr	r2, [pc, #116]	; (800f3dc <work_timeout+0x94>)
 800f366:	491e      	ldr	r1, [pc, #120]	; (800f3e0 <work_timeout+0x98>)
 800f368:	481e      	ldr	r0, [pc, #120]	; (800f3e4 <work_timeout+0x9c>)
 800f36a:	238e      	movs	r3, #142	; 0x8e
 800f36c:	f002 ff9c 	bl	80122a8 <assert_print>
 800f370:	4919      	ldr	r1, [pc, #100]	; (800f3d8 <work_timeout+0x90>)
 800f372:	481d      	ldr	r0, [pc, #116]	; (800f3e8 <work_timeout+0xa0>)
 800f374:	f002 ff98 	bl	80122a8 <assert_print>
 800f378:	4818      	ldr	r0, [pc, #96]	; (800f3dc <work_timeout+0x94>)
 800f37a:	218e      	movs	r1, #142	; 0x8e
 800f37c:	f002 ff8d 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f380:	4815      	ldr	r0, [pc, #84]	; (800f3d8 <work_timeout+0x90>)
 800f382:	f7ff fbd3 	bl	800eb2c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
 800f386:	2300      	movs	r3, #0
 800f388:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
 800f38a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
 800f38e:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800f392:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
 800f394:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800f398:	d506      	bpl.n	800f3a8 <work_timeout+0x60>
		queue = dw->queue;
 800f39a:	69a3      	ldr	r3, [r4, #24]
 800f39c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 800f39e:	a901      	add	r1, sp, #4
 800f3a0:	f1a4 0010 	sub.w	r0, r4, #16
 800f3a4:	f7ff ff6c 	bl	800f280 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f3a8:	480b      	ldr	r0, [pc, #44]	; (800f3d8 <work_timeout+0x90>)
 800f3aa:	f7ff fbaf 	bl	800eb0c <z_spin_unlock_valid>
 800f3ae:	b968      	cbnz	r0, 800f3cc <work_timeout+0x84>
 800f3b0:	4a0a      	ldr	r2, [pc, #40]	; (800f3dc <work_timeout+0x94>)
 800f3b2:	490e      	ldr	r1, [pc, #56]	; (800f3ec <work_timeout+0xa4>)
 800f3b4:	480b      	ldr	r0, [pc, #44]	; (800f3e4 <work_timeout+0x9c>)
 800f3b6:	23b9      	movs	r3, #185	; 0xb9
 800f3b8:	f002 ff76 	bl	80122a8 <assert_print>
 800f3bc:	4906      	ldr	r1, [pc, #24]	; (800f3d8 <work_timeout+0x90>)
 800f3be:	480c      	ldr	r0, [pc, #48]	; (800f3f0 <work_timeout+0xa8>)
 800f3c0:	f002 ff72 	bl	80122a8 <assert_print>
 800f3c4:	4805      	ldr	r0, [pc, #20]	; (800f3dc <work_timeout+0x94>)
 800f3c6:	21b9      	movs	r1, #185	; 0xb9
 800f3c8:	f002 ff67 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f3cc:	f385 8811 	msr	BASEPRI, r5
 800f3d0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
 800f3d4:	b003      	add	sp, #12
 800f3d6:	bd30      	pop	{r4, r5, pc}
 800f3d8:	20001840 	.word	0x20001840
 800f3dc:	080170fb 	.word	0x080170fb
 800f3e0:	08017121 	.word	0x08017121
 800f3e4:	08016836 	.word	0x08016836
 800f3e8:	08017136 	.word	0x08017136
 800f3ec:	0801714e 	.word	0x0801714e
 800f3f0:	08017165 	.word	0x08017165

0800f3f4 <k_work_init>:
{
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	b948      	cbnz	r0, 800f410 <k_work_init+0x1c>
 800f3fc:	490d      	ldr	r1, [pc, #52]	; (800f434 <k_work_init+0x40>)
 800f3fe:	480e      	ldr	r0, [pc, #56]	; (800f438 <k_work_init+0x44>)
 800f400:	4a0e      	ldr	r2, [pc, #56]	; (800f43c <k_work_init+0x48>)
 800f402:	2389      	movs	r3, #137	; 0x89
 800f404:	f002 ff50 	bl	80122a8 <assert_print>
 800f408:	480c      	ldr	r0, [pc, #48]	; (800f43c <k_work_init+0x48>)
 800f40a:	2189      	movs	r1, #137	; 0x89
 800f40c:	f002 ff45 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
 800f410:	b94d      	cbnz	r5, 800f426 <k_work_init+0x32>
 800f412:	490b      	ldr	r1, [pc, #44]	; (800f440 <k_work_init+0x4c>)
 800f414:	4808      	ldr	r0, [pc, #32]	; (800f438 <k_work_init+0x44>)
 800f416:	4a09      	ldr	r2, [pc, #36]	; (800f43c <k_work_init+0x48>)
 800f418:	238a      	movs	r3, #138	; 0x8a
 800f41a:	f002 ff45 	bl	80122a8 <assert_print>
 800f41e:	4807      	ldr	r0, [pc, #28]	; (800f43c <k_work_init+0x48>)
 800f420:	218a      	movs	r1, #138	; 0x8a
 800f422:	f002 ff3a 	bl	801229a <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800f426:	2210      	movs	r2, #16
 800f428:	2100      	movs	r1, #0
 800f42a:	4620      	mov	r0, r4
 800f42c:	f003 fd39 	bl	8012ea2 <memset>
 800f430:	6065      	str	r5, [r4, #4]
}
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	08019d87 	.word	0x08019d87
 800f438:	08016836 	.word	0x08016836
 800f43c:	08019cb0 	.word	0x08019cb0
 800f440:	08019cd1 	.word	0x08019cd1

0800f444 <k_work_submit_to_queue>:
{
 800f444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
 800f446:	460c      	mov	r4, r1
{
 800f448:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
 800f44a:	b959      	cbnz	r1, 800f464 <k_work_submit_to_queue+0x20>
 800f44c:	4926      	ldr	r1, [pc, #152]	; (800f4e8 <k_work_submit_to_queue+0xa4>)
 800f44e:	4827      	ldr	r0, [pc, #156]	; (800f4ec <k_work_submit_to_queue+0xa8>)
 800f450:	4a27      	ldr	r2, [pc, #156]	; (800f4f0 <k_work_submit_to_queue+0xac>)
 800f452:	f240 1369 	movw	r3, #361	; 0x169
 800f456:	f002 ff27 	bl	80122a8 <assert_print>
 800f45a:	4825      	ldr	r0, [pc, #148]	; (800f4f0 <k_work_submit_to_queue+0xac>)
 800f45c:	f240 1169 	movw	r1, #361	; 0x169
 800f460:	f002 ff1b 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f464:	f04f 0310 	mov.w	r3, #16
 800f468:	f3ef 8511 	mrs	r5, BASEPRI
 800f46c:	f383 8812 	msr	BASEPRI_MAX, r3
 800f470:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f474:	481f      	ldr	r0, [pc, #124]	; (800f4f4 <k_work_submit_to_queue+0xb0>)
 800f476:	f7ff fb3b 	bl	800eaf0 <z_spin_lock_valid>
 800f47a:	b968      	cbnz	r0, 800f498 <k_work_submit_to_queue+0x54>
 800f47c:	4a1e      	ldr	r2, [pc, #120]	; (800f4f8 <k_work_submit_to_queue+0xb4>)
 800f47e:	491f      	ldr	r1, [pc, #124]	; (800f4fc <k_work_submit_to_queue+0xb8>)
 800f480:	481a      	ldr	r0, [pc, #104]	; (800f4ec <k_work_submit_to_queue+0xa8>)
 800f482:	238e      	movs	r3, #142	; 0x8e
 800f484:	f002 ff10 	bl	80122a8 <assert_print>
 800f488:	491a      	ldr	r1, [pc, #104]	; (800f4f4 <k_work_submit_to_queue+0xb0>)
 800f48a:	481d      	ldr	r0, [pc, #116]	; (800f500 <k_work_submit_to_queue+0xbc>)
 800f48c:	f002 ff0c 	bl	80122a8 <assert_print>
 800f490:	4819      	ldr	r0, [pc, #100]	; (800f4f8 <k_work_submit_to_queue+0xb4>)
 800f492:	218e      	movs	r1, #142	; 0x8e
 800f494:	f002 ff01 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f498:	4816      	ldr	r0, [pc, #88]	; (800f4f4 <k_work_submit_to_queue+0xb0>)
 800f49a:	f7ff fb47 	bl	800eb2c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
 800f49e:	4620      	mov	r0, r4
 800f4a0:	a901      	add	r1, sp, #4
 800f4a2:	f7ff feed 	bl	800f280 <submit_to_queue_locked>
 800f4a6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f4a8:	4812      	ldr	r0, [pc, #72]	; (800f4f4 <k_work_submit_to_queue+0xb0>)
 800f4aa:	f7ff fb2f 	bl	800eb0c <z_spin_unlock_valid>
 800f4ae:	b968      	cbnz	r0, 800f4cc <k_work_submit_to_queue+0x88>
 800f4b0:	4a11      	ldr	r2, [pc, #68]	; (800f4f8 <k_work_submit_to_queue+0xb4>)
 800f4b2:	4914      	ldr	r1, [pc, #80]	; (800f504 <k_work_submit_to_queue+0xc0>)
 800f4b4:	480d      	ldr	r0, [pc, #52]	; (800f4ec <k_work_submit_to_queue+0xa8>)
 800f4b6:	23b9      	movs	r3, #185	; 0xb9
 800f4b8:	f002 fef6 	bl	80122a8 <assert_print>
 800f4bc:	490d      	ldr	r1, [pc, #52]	; (800f4f4 <k_work_submit_to_queue+0xb0>)
 800f4be:	4812      	ldr	r0, [pc, #72]	; (800f508 <k_work_submit_to_queue+0xc4>)
 800f4c0:	f002 fef2 	bl	80122a8 <assert_print>
 800f4c4:	480c      	ldr	r0, [pc, #48]	; (800f4f8 <k_work_submit_to_queue+0xb4>)
 800f4c6:	21b9      	movs	r1, #185	; 0xb9
 800f4c8:	f002 fee7 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f4cc:	f385 8811 	msr	BASEPRI, r5
 800f4d0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800f4d4:	2c00      	cmp	r4, #0
 800f4d6:	dd04      	ble.n	800f4e2 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
 800f4d8:	f001 fb0a 	bl	8010af0 <z_impl_k_is_preempt_thread>
 800f4dc:	b108      	cbz	r0, 800f4e2 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
 800f4de:	f001 f979 	bl	80107d4 <z_impl_k_yield>
}
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	bd30      	pop	{r4, r5, pc}
 800f4e8:	08019d87 	.word	0x08019d87
 800f4ec:	08016836 	.word	0x08016836
 800f4f0:	08019cb0 	.word	0x08019cb0
 800f4f4:	20001840 	.word	0x20001840
 800f4f8:	080170fb 	.word	0x080170fb
 800f4fc:	08017121 	.word	0x08017121
 800f500:	08017136 	.word	0x08017136
 800f504:	0801714e 	.word	0x0801714e
 800f508:	08017165 	.word	0x08017165

0800f50c <k_work_submit>:
{
 800f50c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800f50e:	4801      	ldr	r0, [pc, #4]	; (800f514 <k_work_submit+0x8>)
 800f510:	f7ff bf98 	b.w	800f444 <k_work_submit_to_queue>
 800f514:	20001470 	.word	0x20001470

0800f518 <k_work_queue_start>:
{
 800f518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f51c:	b088      	sub	sp, #32
 800f51e:	460e      	mov	r6, r1
 800f520:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f522:	4617      	mov	r7, r2
 800f524:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
 800f526:	4604      	mov	r4, r0
 800f528:	b958      	cbnz	r0, 800f542 <k_work_queue_start+0x2a>
 800f52a:	492e      	ldr	r1, [pc, #184]	; (800f5e4 <k_work_queue_start+0xcc>)
 800f52c:	482e      	ldr	r0, [pc, #184]	; (800f5e8 <k_work_queue_start+0xd0>)
 800f52e:	4a2f      	ldr	r2, [pc, #188]	; (800f5ec <k_work_queue_start+0xd4>)
 800f530:	f240 23b5 	movw	r3, #693	; 0x2b5
 800f534:	f002 feb8 	bl	80122a8 <assert_print>
 800f538:	482c      	ldr	r0, [pc, #176]	; (800f5ec <k_work_queue_start+0xd4>)
 800f53a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800f53e:	f002 feac 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(stack);
 800f542:	b95e      	cbnz	r6, 800f55c <k_work_queue_start+0x44>
 800f544:	492a      	ldr	r1, [pc, #168]	; (800f5f0 <k_work_queue_start+0xd8>)
 800f546:	4828      	ldr	r0, [pc, #160]	; (800f5e8 <k_work_queue_start+0xd0>)
 800f548:	4a28      	ldr	r2, [pc, #160]	; (800f5ec <k_work_queue_start+0xd4>)
 800f54a:	f240 23b6 	movw	r3, #694	; 0x2b6
 800f54e:	f002 feab 	bl	80122a8 <assert_print>
 800f552:	4826      	ldr	r0, [pc, #152]	; (800f5ec <k_work_queue_start+0xd4>)
 800f554:	f240 21b6 	movw	r1, #694	; 0x2b6
 800f558:	f002 fe9f 	bl	801229a <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
 800f55c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
 800f560:	07db      	lsls	r3, r3, #31
 800f562:	d50b      	bpl.n	800f57c <k_work_queue_start+0x64>
 800f564:	4923      	ldr	r1, [pc, #140]	; (800f5f4 <k_work_queue_start+0xdc>)
 800f566:	4820      	ldr	r0, [pc, #128]	; (800f5e8 <k_work_queue_start+0xd0>)
 800f568:	4a20      	ldr	r2, [pc, #128]	; (800f5ec <k_work_queue_start+0xd4>)
 800f56a:	f240 23b7 	movw	r3, #695	; 0x2b7
 800f56e:	f002 fe9b 	bl	80122a8 <assert_print>
 800f572:	481e      	ldr	r0, [pc, #120]	; (800f5ec <k_work_queue_start+0xd4>)
 800f574:	f240 21b7 	movw	r1, #695	; 0x2b7
 800f578:	f002 fe8f 	bl	801229a <assert_post_action>
	list->head = NULL;
 800f57c:	2300      	movs	r3, #0
	list->tail = NULL;
 800f57e:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
 800f582:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 800f586:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
 800f58a:	f104 0390 	add.w	r3, r4, #144	; 0x90
 800f58e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
 800f592:	b32d      	cbz	r5, 800f5e0 <k_work_queue_start+0xc8>
 800f594:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800f596:	2b00      	cmp	r3, #0
 800f598:	f240 1101 	movw	r1, #257	; 0x101
 800f59c:	bf08      	it	eq
 800f59e:	2101      	moveq	r1, #1
	*flagp = flags;
 800f5a0:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800f5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	e9cd 8203 	strd	r8, r2, [sp, #12]
 800f5b6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f5ba:	4b0f      	ldr	r3, [pc, #60]	; (800f5f8 <k_work_queue_start+0xe0>)
 800f5bc:	9400      	str	r4, [sp, #0]
 800f5be:	463a      	mov	r2, r7
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7ff f9ca 	bl	800e95c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800f5c8:	b125      	cbz	r5, 800f5d4 <k_work_queue_start+0xbc>
 800f5ca:	6829      	ldr	r1, [r5, #0]
 800f5cc:	b111      	cbz	r1, 800f5d4 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f005 fece 	bl	8015370 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800f5d4:	4620      	mov	r0, r4
}
 800f5d6:	b008      	add	sp, #32
 800f5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5dc:	f005 becd 	b.w	801537a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	e7dd      	b.n	800f5a0 <k_work_queue_start+0x88>
 800f5e4:	08019d46 	.word	0x08019d46
 800f5e8:	08016836 	.word	0x08016836
 800f5ec:	08019cb0 	.word	0x08019cb0
 800f5f0:	08019d4c 	.word	0x08019d4c
 800f5f4:	08019d52 	.word	0x08019d52
 800f5f8:	0800f01d 	.word	0x0800f01d

0800f5fc <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
 800f600:	4604      	mov	r4, r0
 800f602:	b958      	cbnz	r0, 800f61c <k_work_init_delayable+0x20>
 800f604:	4911      	ldr	r1, [pc, #68]	; (800f64c <k_work_init_delayable+0x50>)
 800f606:	4812      	ldr	r0, [pc, #72]	; (800f650 <k_work_init_delayable+0x54>)
 800f608:	4a12      	ldr	r2, [pc, #72]	; (800f654 <k_work_init_delayable+0x58>)
 800f60a:	f240 332d 	movw	r3, #813	; 0x32d
 800f60e:	f002 fe4b 	bl	80122a8 <assert_print>
 800f612:	4810      	ldr	r0, [pc, #64]	; (800f654 <k_work_init_delayable+0x58>)
 800f614:	f240 312d 	movw	r1, #813	; 0x32d
 800f618:	f002 fe3f 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
 800f61c:	b95d      	cbnz	r5, 800f636 <k_work_init_delayable+0x3a>
 800f61e:	490e      	ldr	r1, [pc, #56]	; (800f658 <k_work_init_delayable+0x5c>)
 800f620:	480b      	ldr	r0, [pc, #44]	; (800f650 <k_work_init_delayable+0x54>)
 800f622:	4a0c      	ldr	r2, [pc, #48]	; (800f654 <k_work_init_delayable+0x58>)
 800f624:	f240 332e 	movw	r3, #814	; 0x32e
 800f628:	f002 fe3e 	bl	80122a8 <assert_print>
 800f62c:	4809      	ldr	r0, [pc, #36]	; (800f654 <k_work_init_delayable+0x58>)
 800f62e:	f240 312e 	movw	r1, #814	; 0x32e
 800f632:	f002 fe32 	bl	801229a <assert_post_action>

	*dwork = (struct k_work_delayable){
 800f636:	2230      	movs	r2, #48	; 0x30
 800f638:	2100      	movs	r1, #0
 800f63a:	4620      	mov	r0, r4
 800f63c:	f003 fc31 	bl	8012ea2 <memset>
 800f640:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f644:	6065      	str	r5, [r4, #4]
 800f646:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
 800f648:	bd38      	pop	{r3, r4, r5, pc}
 800f64a:	bf00      	nop
 800f64c:	08019d86 	.word	0x08019d86
 800f650:	08016836 	.word	0x08016836
 800f654:	08019cb0 	.word	0x08019cb0
 800f658:	08019cd1 	.word	0x08019cd1

0800f65c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
 800f65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f65e:	4616      	mov	r6, r2
 800f660:	9001      	str	r0, [sp, #4]
 800f662:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
 800f664:	460c      	mov	r4, r1
 800f666:	b959      	cbnz	r1, 800f680 <k_work_schedule_for_queue+0x24>
 800f668:	492e      	ldr	r1, [pc, #184]	; (800f724 <k_work_schedule_for_queue+0xc8>)
 800f66a:	482f      	ldr	r0, [pc, #188]	; (800f728 <k_work_schedule_for_queue+0xcc>)
 800f66c:	4a2f      	ldr	r2, [pc, #188]	; (800f72c <k_work_schedule_for_queue+0xd0>)
 800f66e:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 800f672:	f002 fe19 	bl	80122a8 <assert_print>
 800f676:	482d      	ldr	r0, [pc, #180]	; (800f72c <k_work_schedule_for_queue+0xd0>)
 800f678:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f67c:	f002 fe0d 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f680:	f04f 0310 	mov.w	r3, #16
 800f684:	f3ef 8511 	mrs	r5, BASEPRI
 800f688:	f383 8812 	msr	BASEPRI_MAX, r3
 800f68c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f690:	4827      	ldr	r0, [pc, #156]	; (800f730 <k_work_schedule_for_queue+0xd4>)
 800f692:	f7ff fa2d 	bl	800eaf0 <z_spin_lock_valid>
 800f696:	b968      	cbnz	r0, 800f6b4 <k_work_schedule_for_queue+0x58>
 800f698:	4a26      	ldr	r2, [pc, #152]	; (800f734 <k_work_schedule_for_queue+0xd8>)
 800f69a:	4927      	ldr	r1, [pc, #156]	; (800f738 <k_work_schedule_for_queue+0xdc>)
 800f69c:	4822      	ldr	r0, [pc, #136]	; (800f728 <k_work_schedule_for_queue+0xcc>)
 800f69e:	238e      	movs	r3, #142	; 0x8e
 800f6a0:	f002 fe02 	bl	80122a8 <assert_print>
 800f6a4:	4922      	ldr	r1, [pc, #136]	; (800f730 <k_work_schedule_for_queue+0xd4>)
 800f6a6:	4825      	ldr	r0, [pc, #148]	; (800f73c <k_work_schedule_for_queue+0xe0>)
 800f6a8:	f002 fdfe 	bl	80122a8 <assert_print>
 800f6ac:	4821      	ldr	r0, [pc, #132]	; (800f734 <k_work_schedule_for_queue+0xd8>)
 800f6ae:	218e      	movs	r1, #142	; 0x8e
 800f6b0:	f002 fdf3 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f6b4:	481e      	ldr	r0, [pc, #120]	; (800f730 <k_work_schedule_for_queue+0xd4>)
 800f6b6:	f7ff fa39 	bl	800eb2c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
 800f6ba:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 800f6bc:	f013 0f0e 	tst.w	r3, #14
 800f6c0:	d12e      	bne.n	800f720 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800f6c2:	ea56 0207 	orrs.w	r2, r6, r7
 800f6c6:	d11d      	bne.n	800f704 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	a901      	add	r1, sp, #4
 800f6cc:	f7ff fdd8 	bl	800f280 <submit_to_queue_locked>
 800f6d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f6d2:	4817      	ldr	r0, [pc, #92]	; (800f730 <k_work_schedule_for_queue+0xd4>)
 800f6d4:	f7ff fa1a 	bl	800eb0c <z_spin_unlock_valid>
 800f6d8:	b968      	cbnz	r0, 800f6f6 <k_work_schedule_for_queue+0x9a>
 800f6da:	4a16      	ldr	r2, [pc, #88]	; (800f734 <k_work_schedule_for_queue+0xd8>)
 800f6dc:	4918      	ldr	r1, [pc, #96]	; (800f740 <k_work_schedule_for_queue+0xe4>)
 800f6de:	4812      	ldr	r0, [pc, #72]	; (800f728 <k_work_schedule_for_queue+0xcc>)
 800f6e0:	23b9      	movs	r3, #185	; 0xb9
 800f6e2:	f002 fde1 	bl	80122a8 <assert_print>
 800f6e6:	4912      	ldr	r1, [pc, #72]	; (800f730 <k_work_schedule_for_queue+0xd4>)
 800f6e8:	4816      	ldr	r0, [pc, #88]	; (800f744 <k_work_schedule_for_queue+0xe8>)
 800f6ea:	f002 fddd 	bl	80122a8 <assert_print>
 800f6ee:	4811      	ldr	r0, [pc, #68]	; (800f734 <k_work_schedule_for_queue+0xd8>)
 800f6f0:	21b9      	movs	r1, #185	; 0xb9
 800f6f2:	f002 fdd2 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f6f6:	f385 8811 	msr	BASEPRI, r5
 800f6fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 800f6fe:	4620      	mov	r0, r4
 800f700:	b003      	add	sp, #12
 800f702:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 800f704:	f043 0308 	orr.w	r3, r3, #8
 800f708:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 800f70a:	9b01      	ldr	r3, [sp, #4]
 800f70c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800f70e:	f104 0010 	add.w	r0, r4, #16
 800f712:	490d      	ldr	r1, [pc, #52]	; (800f748 <k_work_schedule_for_queue+0xec>)
 800f714:	4632      	mov	r2, r6
 800f716:	463b      	mov	r3, r7
 800f718:	f001 fb7e 	bl	8010e18 <z_add_timeout>
	return ret;
 800f71c:	2401      	movs	r4, #1
 800f71e:	e7d8      	b.n	800f6d2 <k_work_schedule_for_queue+0x76>
	int ret = 0;
 800f720:	2400      	movs	r4, #0
 800f722:	e7d6      	b.n	800f6d2 <k_work_schedule_for_queue+0x76>
 800f724:	08019d86 	.word	0x08019d86
 800f728:	08016836 	.word	0x08016836
 800f72c:	08019cb0 	.word	0x08019cb0
 800f730:	20001840 	.word	0x20001840
 800f734:	080170fb 	.word	0x080170fb
 800f738:	08017121 	.word	0x08017121
 800f73c:	08017136 	.word	0x08017136
 800f740:	0801714e 	.word	0x0801714e
 800f744:	08017165 	.word	0x08017165
 800f748:	0800f349 	.word	0x0800f349

0800f74c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 800f74c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
 800f74e:	4801      	ldr	r0, [pc, #4]	; (800f754 <k_work_schedule+0x8>)
 800f750:	f7ff bf84 	b.w	800f65c <k_work_schedule_for_queue>
 800f754:	20001470 	.word	0x20001470

0800f758 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
 800f758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f75a:	4616      	mov	r6, r2
 800f75c:	9001      	str	r0, [sp, #4]
 800f75e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
 800f760:	460c      	mov	r4, r1
 800f762:	b959      	cbnz	r1, 800f77c <k_work_reschedule_for_queue+0x24>
 800f764:	492d      	ldr	r1, [pc, #180]	; (800f81c <k_work_reschedule_for_queue+0xc4>)
 800f766:	482e      	ldr	r0, [pc, #184]	; (800f820 <k_work_reschedule_for_queue+0xc8>)
 800f768:	4a2e      	ldr	r2, [pc, #184]	; (800f824 <k_work_reschedule_for_queue+0xcc>)
 800f76a:	f44f 7372 	mov.w	r3, #968	; 0x3c8
 800f76e:	f002 fd9b 	bl	80122a8 <assert_print>
 800f772:	482c      	ldr	r0, [pc, #176]	; (800f824 <k_work_reschedule_for_queue+0xcc>)
 800f774:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800f778:	f002 fd8f 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f77c:	f04f 0310 	mov.w	r3, #16
 800f780:	f3ef 8511 	mrs	r5, BASEPRI
 800f784:	f383 8812 	msr	BASEPRI_MAX, r3
 800f788:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f78c:	4826      	ldr	r0, [pc, #152]	; (800f828 <k_work_reschedule_for_queue+0xd0>)
 800f78e:	f7ff f9af 	bl	800eaf0 <z_spin_lock_valid>
 800f792:	b968      	cbnz	r0, 800f7b0 <k_work_reschedule_for_queue+0x58>
 800f794:	4a25      	ldr	r2, [pc, #148]	; (800f82c <k_work_reschedule_for_queue+0xd4>)
 800f796:	4926      	ldr	r1, [pc, #152]	; (800f830 <k_work_reschedule_for_queue+0xd8>)
 800f798:	4821      	ldr	r0, [pc, #132]	; (800f820 <k_work_reschedule_for_queue+0xc8>)
 800f79a:	238e      	movs	r3, #142	; 0x8e
 800f79c:	f002 fd84 	bl	80122a8 <assert_print>
 800f7a0:	4921      	ldr	r1, [pc, #132]	; (800f828 <k_work_reschedule_for_queue+0xd0>)
 800f7a2:	4824      	ldr	r0, [pc, #144]	; (800f834 <k_work_reschedule_for_queue+0xdc>)
 800f7a4:	f002 fd80 	bl	80122a8 <assert_print>
 800f7a8:	4820      	ldr	r0, [pc, #128]	; (800f82c <k_work_reschedule_for_queue+0xd4>)
 800f7aa:	218e      	movs	r1, #142	; 0x8e
 800f7ac:	f002 fd75 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f7b0:	481d      	ldr	r0, [pc, #116]	; (800f828 <k_work_reschedule_for_queue+0xd0>)
 800f7b2:	f7ff f9bb 	bl	800eb2c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f005 fe26 	bl	8015408 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800f7bc:	ea56 0307 	orrs.w	r3, r6, r7
 800f7c0:	d11d      	bne.n	800f7fe <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	a901      	add	r1, sp, #4
 800f7c6:	f7ff fd5b 	bl	800f280 <submit_to_queue_locked>
 800f7ca:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f7cc:	4816      	ldr	r0, [pc, #88]	; (800f828 <k_work_reschedule_for_queue+0xd0>)
 800f7ce:	f7ff f99d 	bl	800eb0c <z_spin_unlock_valid>
 800f7d2:	b968      	cbnz	r0, 800f7f0 <k_work_reschedule_for_queue+0x98>
 800f7d4:	4a15      	ldr	r2, [pc, #84]	; (800f82c <k_work_reschedule_for_queue+0xd4>)
 800f7d6:	4918      	ldr	r1, [pc, #96]	; (800f838 <k_work_reschedule_for_queue+0xe0>)
 800f7d8:	4811      	ldr	r0, [pc, #68]	; (800f820 <k_work_reschedule_for_queue+0xc8>)
 800f7da:	23b9      	movs	r3, #185	; 0xb9
 800f7dc:	f002 fd64 	bl	80122a8 <assert_print>
 800f7e0:	4911      	ldr	r1, [pc, #68]	; (800f828 <k_work_reschedule_for_queue+0xd0>)
 800f7e2:	4816      	ldr	r0, [pc, #88]	; (800f83c <k_work_reschedule_for_queue+0xe4>)
 800f7e4:	f002 fd60 	bl	80122a8 <assert_print>
 800f7e8:	4810      	ldr	r0, [pc, #64]	; (800f82c <k_work_reschedule_for_queue+0xd4>)
 800f7ea:	21b9      	movs	r1, #185	; 0xb9
 800f7ec:	f002 fd55 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f7f0:	f385 8811 	msr	BASEPRI, r5
 800f7f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	b003      	add	sp, #12
 800f7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 800f7fe:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800f800:	490f      	ldr	r1, [pc, #60]	; (800f840 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
 800f802:	f043 0308 	orr.w	r3, r3, #8
 800f806:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 800f808:	9b01      	ldr	r3, [sp, #4]
 800f80a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800f80c:	f104 0010 	add.w	r0, r4, #16
 800f810:	4632      	mov	r2, r6
 800f812:	463b      	mov	r3, r7
 800f814:	f001 fb00 	bl	8010e18 <z_add_timeout>
	return ret;
 800f818:	2401      	movs	r4, #1
 800f81a:	e7d7      	b.n	800f7cc <k_work_reschedule_for_queue+0x74>
 800f81c:	08019d86 	.word	0x08019d86
 800f820:	08016836 	.word	0x08016836
 800f824:	08019cb0 	.word	0x08019cb0
 800f828:	20001840 	.word	0x20001840
 800f82c:	080170fb 	.word	0x080170fb
 800f830:	08017121 	.word	0x08017121
 800f834:	08017136 	.word	0x08017136
 800f838:	0801714e 	.word	0x0801714e
 800f83c:	08017165 	.word	0x08017165
 800f840:	0800f349 	.word	0x0800f349

0800f844 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800f844:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800f846:	4801      	ldr	r0, [pc, #4]	; (800f84c <k_work_reschedule+0x8>)
 800f848:	f7ff bf86 	b.w	800f758 <k_work_reschedule_for_queue>
 800f84c:	20001470 	.word	0x20001470

0800f850 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 800f850:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
 800f852:	4604      	mov	r4, r0
 800f854:	b958      	cbnz	r0, 800f86e <k_work_cancel_delayable+0x1e>
 800f856:	4924      	ldr	r1, [pc, #144]	; (800f8e8 <k_work_cancel_delayable+0x98>)
 800f858:	4824      	ldr	r0, [pc, #144]	; (800f8ec <k_work_cancel_delayable+0x9c>)
 800f85a:	4a25      	ldr	r2, [pc, #148]	; (800f8f0 <k_work_cancel_delayable+0xa0>)
 800f85c:	f240 33ea 	movw	r3, #1002	; 0x3ea
 800f860:	f002 fd22 	bl	80122a8 <assert_print>
 800f864:	4822      	ldr	r0, [pc, #136]	; (800f8f0 <k_work_cancel_delayable+0xa0>)
 800f866:	f240 31ea 	movw	r1, #1002	; 0x3ea
 800f86a:	f002 fd16 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f86e:	f04f 0310 	mov.w	r3, #16
 800f872:	f3ef 8511 	mrs	r5, BASEPRI
 800f876:	f383 8812 	msr	BASEPRI_MAX, r3
 800f87a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f87e:	481d      	ldr	r0, [pc, #116]	; (800f8f4 <k_work_cancel_delayable+0xa4>)
 800f880:	f7ff f936 	bl	800eaf0 <z_spin_lock_valid>
 800f884:	b968      	cbnz	r0, 800f8a2 <k_work_cancel_delayable+0x52>
 800f886:	4a1c      	ldr	r2, [pc, #112]	; (800f8f8 <k_work_cancel_delayable+0xa8>)
 800f888:	491c      	ldr	r1, [pc, #112]	; (800f8fc <k_work_cancel_delayable+0xac>)
 800f88a:	4818      	ldr	r0, [pc, #96]	; (800f8ec <k_work_cancel_delayable+0x9c>)
 800f88c:	238e      	movs	r3, #142	; 0x8e
 800f88e:	f002 fd0b 	bl	80122a8 <assert_print>
 800f892:	4918      	ldr	r1, [pc, #96]	; (800f8f4 <k_work_cancel_delayable+0xa4>)
 800f894:	481a      	ldr	r0, [pc, #104]	; (800f900 <k_work_cancel_delayable+0xb0>)
 800f896:	f002 fd07 	bl	80122a8 <assert_print>
 800f89a:	4817      	ldr	r0, [pc, #92]	; (800f8f8 <k_work_cancel_delayable+0xa8>)
 800f89c:	218e      	movs	r1, #142	; 0x8e
 800f89e:	f002 fcfc 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f8a2:	4814      	ldr	r0, [pc, #80]	; (800f8f4 <k_work_cancel_delayable+0xa4>)
 800f8a4:	f7ff f942 	bl	800eb2c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f005 fdad 	bl	8015408 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f005 fdb8 	bl	8015424 <cancel_async_locked>
 800f8b4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f8b6:	480f      	ldr	r0, [pc, #60]	; (800f8f4 <k_work_cancel_delayable+0xa4>)
 800f8b8:	f7ff f928 	bl	800eb0c <z_spin_unlock_valid>
 800f8bc:	b968      	cbnz	r0, 800f8da <k_work_cancel_delayable+0x8a>
 800f8be:	4a0e      	ldr	r2, [pc, #56]	; (800f8f8 <k_work_cancel_delayable+0xa8>)
 800f8c0:	4910      	ldr	r1, [pc, #64]	; (800f904 <k_work_cancel_delayable+0xb4>)
 800f8c2:	480a      	ldr	r0, [pc, #40]	; (800f8ec <k_work_cancel_delayable+0x9c>)
 800f8c4:	23b9      	movs	r3, #185	; 0xb9
 800f8c6:	f002 fcef 	bl	80122a8 <assert_print>
 800f8ca:	490a      	ldr	r1, [pc, #40]	; (800f8f4 <k_work_cancel_delayable+0xa4>)
 800f8cc:	480e      	ldr	r0, [pc, #56]	; (800f908 <k_work_cancel_delayable+0xb8>)
 800f8ce:	f002 fceb 	bl	80122a8 <assert_print>
 800f8d2:	4809      	ldr	r0, [pc, #36]	; (800f8f8 <k_work_cancel_delayable+0xa8>)
 800f8d4:	21b9      	movs	r1, #185	; 0xb9
 800f8d6:	f002 fce0 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f8da:	f385 8811 	msr	BASEPRI, r5
 800f8de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	bd38      	pop	{r3, r4, r5, pc}
 800f8e6:	bf00      	nop
 800f8e8:	08019d86 	.word	0x08019d86
 800f8ec:	08016836 	.word	0x08016836
 800f8f0:	08019cb0 	.word	0x08019cb0
 800f8f4:	20001840 	.word	0x20001840
 800f8f8:	080170fb 	.word	0x080170fb
 800f8fc:	08017121 	.word	0x08017121
 800f900:	08017136 	.word	0x08017136
 800f904:	0801714e 	.word	0x0801714e
 800f908:	08017165 	.word	0x08017165

0800f90c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
 800f90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f910:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
 800f912:	4605      	mov	r5, r0
 800f914:	b958      	cbnz	r0, 800f92e <k_work_cancel_delayable_sync+0x22>
 800f916:	493d      	ldr	r1, [pc, #244]	; (800fa0c <k_work_cancel_delayable_sync+0x100>)
 800f918:	483d      	ldr	r0, [pc, #244]	; (800fa10 <k_work_cancel_delayable_sync+0x104>)
 800f91a:	4a3e      	ldr	r2, [pc, #248]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f91c:	f240 33fb 	movw	r3, #1019	; 0x3fb
 800f920:	f002 fcc2 	bl	80122a8 <assert_print>
 800f924:	483b      	ldr	r0, [pc, #236]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f926:	f240 31fb 	movw	r1, #1019	; 0x3fb
 800f92a:	f002 fcb6 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
 800f92e:	b95e      	cbnz	r6, 800f948 <k_work_cancel_delayable_sync+0x3c>
 800f930:	4939      	ldr	r1, [pc, #228]	; (800fa18 <k_work_cancel_delayable_sync+0x10c>)
 800f932:	4837      	ldr	r0, [pc, #220]	; (800fa10 <k_work_cancel_delayable_sync+0x104>)
 800f934:	4a37      	ldr	r2, [pc, #220]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f936:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800f93a:	f002 fcb5 	bl	80122a8 <assert_print>
 800f93e:	4835      	ldr	r0, [pc, #212]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f940:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800f944:	f002 fca9 	bl	801229a <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
 800f948:	f005 fd0c 	bl	8015364 <k_is_in_isr>
 800f94c:	b158      	cbz	r0, 800f966 <k_work_cancel_delayable_sync+0x5a>
 800f94e:	4933      	ldr	r1, [pc, #204]	; (800fa1c <k_work_cancel_delayable_sync+0x110>)
 800f950:	482f      	ldr	r0, [pc, #188]	; (800fa10 <k_work_cancel_delayable_sync+0x104>)
 800f952:	4a30      	ldr	r2, [pc, #192]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f954:	f240 33fd 	movw	r3, #1021	; 0x3fd
 800f958:	f002 fca6 	bl	80122a8 <assert_print>
 800f95c:	482d      	ldr	r0, [pc, #180]	; (800fa14 <k_work_cancel_delayable_sync+0x108>)
 800f95e:	f240 31fd 	movw	r1, #1021	; 0x3fd
 800f962:	f002 fc9a 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f966:	f04f 0310 	mov.w	r3, #16
 800f96a:	f3ef 8811 	mrs	r8, BASEPRI
 800f96e:	f383 8812 	msr	BASEPRI_MAX, r3
 800f972:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800f976:	482a      	ldr	r0, [pc, #168]	; (800fa20 <k_work_cancel_delayable_sync+0x114>)
 800f978:	f7ff f8ba 	bl	800eaf0 <z_spin_lock_valid>
 800f97c:	b968      	cbnz	r0, 800f99a <k_work_cancel_delayable_sync+0x8e>
 800f97e:	4a29      	ldr	r2, [pc, #164]	; (800fa24 <k_work_cancel_delayable_sync+0x118>)
 800f980:	4929      	ldr	r1, [pc, #164]	; (800fa28 <k_work_cancel_delayable_sync+0x11c>)
 800f982:	4823      	ldr	r0, [pc, #140]	; (800fa10 <k_work_cancel_delayable_sync+0x104>)
 800f984:	238e      	movs	r3, #142	; 0x8e
 800f986:	f002 fc8f 	bl	80122a8 <assert_print>
 800f98a:	4925      	ldr	r1, [pc, #148]	; (800fa20 <k_work_cancel_delayable_sync+0x114>)
 800f98c:	4827      	ldr	r0, [pc, #156]	; (800fa2c <k_work_cancel_delayable_sync+0x120>)
 800f98e:	f002 fc8b 	bl	80122a8 <assert_print>
 800f992:	4824      	ldr	r0, [pc, #144]	; (800fa24 <k_work_cancel_delayable_sync+0x118>)
 800f994:	218e      	movs	r1, #142	; 0x8e
 800f996:	f002 fc80 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800f99a:	4821      	ldr	r0, [pc, #132]	; (800fa20 <k_work_cancel_delayable_sync+0x114>)
 800f99c:	f7ff f8c6 	bl	800eb2c <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
 800f9a0:	68ec      	ldr	r4, [r5, #12]
 800f9a2:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
 800f9a6:	2c00      	cmp	r4, #0
 800f9a8:	bf14      	ite	ne
 800f9aa:	2701      	movne	r7, #1
 800f9ac:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
 800f9ae:	d00a      	beq.n	800f9c6 <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f005 fd29 	bl	8015408 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f005 fd34 	bl	8015424 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
 800f9bc:	4631      	mov	r1, r6
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f7ff fc40 	bl	800f244 <cancel_sync_locked>
 800f9c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800f9c6:	4816      	ldr	r0, [pc, #88]	; (800fa20 <k_work_cancel_delayable_sync+0x114>)
 800f9c8:	f7ff f8a0 	bl	800eb0c <z_spin_unlock_valid>
 800f9cc:	b968      	cbnz	r0, 800f9ea <k_work_cancel_delayable_sync+0xde>
 800f9ce:	4a15      	ldr	r2, [pc, #84]	; (800fa24 <k_work_cancel_delayable_sync+0x118>)
 800f9d0:	4917      	ldr	r1, [pc, #92]	; (800fa30 <k_work_cancel_delayable_sync+0x124>)
 800f9d2:	480f      	ldr	r0, [pc, #60]	; (800fa10 <k_work_cancel_delayable_sync+0x104>)
 800f9d4:	23b9      	movs	r3, #185	; 0xb9
 800f9d6:	f002 fc67 	bl	80122a8 <assert_print>
 800f9da:	4911      	ldr	r1, [pc, #68]	; (800fa20 <k_work_cancel_delayable_sync+0x114>)
 800f9dc:	4815      	ldr	r0, [pc, #84]	; (800fa34 <k_work_cancel_delayable_sync+0x128>)
 800f9de:	f002 fc63 	bl	80122a8 <assert_print>
 800f9e2:	4810      	ldr	r0, [pc, #64]	; (800fa24 <k_work_cancel_delayable_sync+0x118>)
 800f9e4:	21b9      	movs	r1, #185	; 0xb9
 800f9e6:	f002 fc58 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800f9ea:	f388 8811 	msr	BASEPRI, r8
 800f9ee:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
 800f9f2:	b13c      	cbz	r4, 800fa04 <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
 800f9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fc:	f106 0008 	add.w	r0, r6, #8
 800fa00:	f7ff fa68 	bl	800eed4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
 800fa04:	4638      	mov	r0, r7
 800fa06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa0a:	bf00      	nop
 800fa0c:	08019d86 	.word	0x08019d86
 800fa10:	08016836 	.word	0x08016836
 800fa14:	08019cb0 	.word	0x08019cb0
 800fa18:	08019d32 	.word	0x08019d32
 800fa1c:	0801898d 	.word	0x0801898d
 800fa20:	20001840 	.word	0x20001840
 800fa24:	080170fb 	.word	0x080170fb
 800fa28:	08017121 	.word	0x08017121
 800fa2c:	08017136 	.word	0x08017136
 800fa30:	0801714e 	.word	0x0801714e
 800fa34:	08017165 	.word	0x08017165

0800fa38 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800fa38:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800fa3a:	4d07      	ldr	r5, [pc, #28]	; (800fa58 <z_reset_time_slice+0x20>)
 800fa3c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 800fa3e:	b154      	cbz	r4, 800fa56 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 800fa40:	f7fe f962 	bl	800dd08 <sys_clock_elapsed>
 800fa44:	4b05      	ldr	r3, [pc, #20]	; (800fa5c <z_reset_time_slice+0x24>)
 800fa46:	4404      	add	r4, r0
 800fa48:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800fa4a:	6828      	ldr	r0, [r5, #0]
 800fa4c:	2100      	movs	r1, #0
	}
}
 800fa4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800fa52:	f001 bb03 	b.w	801105c <z_set_timeout_expiry>
}
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	20001858 	.word	0x20001858
 800fa5c:	20001818 	.word	0x20001818

0800fa60 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 800fa60:	b570      	push	{r4, r5, r6, lr}
 800fa62:	4604      	mov	r4, r0
 800fa64:	460d      	mov	r5, r1
	__asm__ volatile(
 800fa66:	f04f 0310 	mov.w	r3, #16
 800fa6a:	f3ef 8611 	mrs	r6, BASEPRI
 800fa6e:	f383 8812 	msr	BASEPRI_MAX, r3
 800fa72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800fa76:	4820      	ldr	r0, [pc, #128]	; (800faf8 <k_sched_time_slice_set+0x98>)
 800fa78:	f7ff f83a 	bl	800eaf0 <z_spin_lock_valid>
 800fa7c:	b968      	cbnz	r0, 800fa9a <k_sched_time_slice_set+0x3a>
 800fa7e:	4a1f      	ldr	r2, [pc, #124]	; (800fafc <k_sched_time_slice_set+0x9c>)
 800fa80:	491f      	ldr	r1, [pc, #124]	; (800fb00 <k_sched_time_slice_set+0xa0>)
 800fa82:	4820      	ldr	r0, [pc, #128]	; (800fb04 <k_sched_time_slice_set+0xa4>)
 800fa84:	238e      	movs	r3, #142	; 0x8e
 800fa86:	f002 fc0f 	bl	80122a8 <assert_print>
 800fa8a:	491b      	ldr	r1, [pc, #108]	; (800faf8 <k_sched_time_slice_set+0x98>)
 800fa8c:	481e      	ldr	r0, [pc, #120]	; (800fb08 <k_sched_time_slice_set+0xa8>)
 800fa8e:	f002 fc0b 	bl	80122a8 <assert_print>
 800fa92:	481a      	ldr	r0, [pc, #104]	; (800fafc <k_sched_time_slice_set+0x9c>)
 800fa94:	218e      	movs	r1, #142	; 0x8e
 800fa96:	f002 fc00 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800fa9a:	4817      	ldr	r0, [pc, #92]	; (800faf8 <k_sched_time_slice_set+0x98>)
 800fa9c:	f7ff f846 	bl	800eb2c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800faa0:	4a1a      	ldr	r2, [pc, #104]	; (800fb0c <k_sched_time_slice_set+0xac>)
 800faa2:	491b      	ldr	r1, [pc, #108]	; (800fb10 <k_sched_time_slice_set+0xb0>)
 800faa4:	2300      	movs	r3, #0
 800faa6:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800faa8:	2c00      	cmp	r4, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 800faaa:	f04f 030a 	mov.w	r3, #10
 800faae:	fb03 f304 	mul.w	r3, r3, r4
 800fab2:	dc1c      	bgt.n	800faee <k_sched_time_slice_set+0x8e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 800fab4:	600b      	str	r3, [r1, #0]
		}
		slice_max_prio = prio;
 800fab6:	4b17      	ldr	r3, [pc, #92]	; (800fb14 <k_sched_time_slice_set+0xb4>)
		z_reset_time_slice(_current);
 800fab8:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 800faba:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
 800fabc:	f7ff ffbc 	bl	800fa38 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fac0:	480d      	ldr	r0, [pc, #52]	; (800faf8 <k_sched_time_slice_set+0x98>)
 800fac2:	f7ff f823 	bl	800eb0c <z_spin_unlock_valid>
 800fac6:	b968      	cbnz	r0, 800fae4 <k_sched_time_slice_set+0x84>
 800fac8:	4a0c      	ldr	r2, [pc, #48]	; (800fafc <k_sched_time_slice_set+0x9c>)
 800faca:	4913      	ldr	r1, [pc, #76]	; (800fb18 <k_sched_time_slice_set+0xb8>)
 800facc:	480d      	ldr	r0, [pc, #52]	; (800fb04 <k_sched_time_slice_set+0xa4>)
 800face:	23b9      	movs	r3, #185	; 0xb9
 800fad0:	f002 fbea 	bl	80122a8 <assert_print>
 800fad4:	4908      	ldr	r1, [pc, #32]	; (800faf8 <k_sched_time_slice_set+0x98>)
 800fad6:	4811      	ldr	r0, [pc, #68]	; (800fb1c <k_sched_time_slice_set+0xbc>)
 800fad8:	f002 fbe6 	bl	80122a8 <assert_print>
 800fadc:	4807      	ldr	r0, [pc, #28]	; (800fafc <k_sched_time_slice_set+0x9c>)
 800fade:	21b9      	movs	r1, #185	; 0xb9
 800fae0:	f002 fbdb 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800fae4:	f386 8811 	msr	BASEPRI, r6
 800fae8:	f3bf 8f6f 	isb	sy
	}
}
 800faec:	bd70      	pop	{r4, r5, r6, pc}
			slice_ticks = MAX(2, slice_ticks);
 800faee:	2b02      	cmp	r3, #2
 800faf0:	bfb8      	it	lt
 800faf2:	2302      	movlt	r3, #2
 800faf4:	e7de      	b.n	800fab4 <k_sched_time_slice_set+0x54>
 800faf6:	bf00      	nop
 800faf8:	20001850 	.word	0x20001850
 800fafc:	080170fb 	.word	0x080170fb
 800fb00:	08017121 	.word	0x08017121
 800fb04:	08016836 	.word	0x08016836
 800fb08:	08017136 	.word	0x08017136
 800fb0c:	20001818 	.word	0x20001818
 800fb10:	20001858 	.word	0x20001858
 800fb14:	20001854 	.word	0x20001854
 800fb18:	0801714e 	.word	0x0801714e
 800fb1c:	08017165 	.word	0x08017165

0800fb20 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4604      	mov	r4, r0
	__asm__ volatile(
 800fb24:	f04f 0310 	mov.w	r3, #16
 800fb28:	f3ef 8511 	mrs	r5, BASEPRI
 800fb2c:	f383 8812 	msr	BASEPRI_MAX, r3
 800fb30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800fb34:	4817      	ldr	r0, [pc, #92]	; (800fb94 <z_unpend_thread_no_timeout+0x74>)
 800fb36:	f7fe ffdb 	bl	800eaf0 <z_spin_lock_valid>
 800fb3a:	b968      	cbnz	r0, 800fb58 <z_unpend_thread_no_timeout+0x38>
 800fb3c:	4a16      	ldr	r2, [pc, #88]	; (800fb98 <z_unpend_thread_no_timeout+0x78>)
 800fb3e:	4917      	ldr	r1, [pc, #92]	; (800fb9c <z_unpend_thread_no_timeout+0x7c>)
 800fb40:	4817      	ldr	r0, [pc, #92]	; (800fba0 <z_unpend_thread_no_timeout+0x80>)
 800fb42:	238e      	movs	r3, #142	; 0x8e
 800fb44:	f002 fbb0 	bl	80122a8 <assert_print>
 800fb48:	4912      	ldr	r1, [pc, #72]	; (800fb94 <z_unpend_thread_no_timeout+0x74>)
 800fb4a:	4816      	ldr	r0, [pc, #88]	; (800fba4 <z_unpend_thread_no_timeout+0x84>)
 800fb4c:	f002 fbac 	bl	80122a8 <assert_print>
 800fb50:	4811      	ldr	r0, [pc, #68]	; (800fb98 <z_unpend_thread_no_timeout+0x78>)
 800fb52:	218e      	movs	r1, #142	; 0x8e
 800fb54:	f002 fba1 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800fb58:	480e      	ldr	r0, [pc, #56]	; (800fb94 <z_unpend_thread_no_timeout+0x74>)
 800fb5a:	f7fe ffe7 	bl	800eb2c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f000 f900 	bl	800fd64 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fb64:	480b      	ldr	r0, [pc, #44]	; (800fb94 <z_unpend_thread_no_timeout+0x74>)
 800fb66:	f7fe ffd1 	bl	800eb0c <z_spin_unlock_valid>
 800fb6a:	b968      	cbnz	r0, 800fb88 <z_unpend_thread_no_timeout+0x68>
 800fb6c:	4a0a      	ldr	r2, [pc, #40]	; (800fb98 <z_unpend_thread_no_timeout+0x78>)
 800fb6e:	490e      	ldr	r1, [pc, #56]	; (800fba8 <z_unpend_thread_no_timeout+0x88>)
 800fb70:	480b      	ldr	r0, [pc, #44]	; (800fba0 <z_unpend_thread_no_timeout+0x80>)
 800fb72:	23b9      	movs	r3, #185	; 0xb9
 800fb74:	f002 fb98 	bl	80122a8 <assert_print>
 800fb78:	4906      	ldr	r1, [pc, #24]	; (800fb94 <z_unpend_thread_no_timeout+0x74>)
 800fb7a:	480c      	ldr	r0, [pc, #48]	; (800fbac <z_unpend_thread_no_timeout+0x8c>)
 800fb7c:	f002 fb94 	bl	80122a8 <assert_print>
 800fb80:	4805      	ldr	r0, [pc, #20]	; (800fb98 <z_unpend_thread_no_timeout+0x78>)
 800fb82:	21b9      	movs	r1, #185	; 0xb9
 800fb84:	f002 fb89 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800fb88:	f385 8811 	msr	BASEPRI, r5
 800fb8c:	f3bf 8f6f 	isb	sy
	}
}
 800fb90:	bd38      	pop	{r3, r4, r5, pc}
 800fb92:	bf00      	nop
 800fb94:	20001850 	.word	0x20001850
 800fb98:	080170fb 	.word	0x080170fb
 800fb9c:	08017121 	.word	0x08017121
 800fba0:	08016836 	.word	0x08016836
 800fba4:	08017136 	.word	0x08017136
 800fba8:	0801714e 	.word	0x0801714e
 800fbac:	08017165 	.word	0x08017165

0800fbb0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800fbb4:	460d      	mov	r5, r1
 800fbb6:	b9e9      	cbnz	r1, 800fbf4 <z_reschedule+0x44>
 800fbb8:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
 800fbbc:	b9d3      	cbnz	r3, 800fbf4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
 800fbbe:	4b19      	ldr	r3, [pc, #100]	; (800fc24 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
 800fbc0:	699a      	ldr	r2, [r3, #24]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d015      	beq.n	800fbf4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fbc8:	f7fe ffa0 	bl	800eb0c <z_spin_unlock_valid>
 800fbcc:	b968      	cbnz	r0, 800fbea <z_reschedule+0x3a>
 800fbce:	4a16      	ldr	r2, [pc, #88]	; (800fc28 <z_reschedule+0x78>)
 800fbd0:	4916      	ldr	r1, [pc, #88]	; (800fc2c <z_reschedule+0x7c>)
 800fbd2:	4817      	ldr	r0, [pc, #92]	; (800fc30 <z_reschedule+0x80>)
 800fbd4:	23d0      	movs	r3, #208	; 0xd0
 800fbd6:	f002 fb67 	bl	80122a8 <assert_print>
 800fbda:	4816      	ldr	r0, [pc, #88]	; (800fc34 <z_reschedule+0x84>)
 800fbdc:	4621      	mov	r1, r4
 800fbde:	f002 fb63 	bl	80122a8 <assert_print>
 800fbe2:	4811      	ldr	r0, [pc, #68]	; (800fc28 <z_reschedule+0x78>)
 800fbe4:	21d0      	movs	r1, #208	; 0xd0
 800fbe6:	f002 fb58 	bl	801229a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 800fbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f7f4 b850 	b.w	8003c94 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f7fe ff89 	bl	800eb0c <z_spin_unlock_valid>
 800fbfa:	b968      	cbnz	r0, 800fc18 <z_reschedule+0x68>
 800fbfc:	4a0a      	ldr	r2, [pc, #40]	; (800fc28 <z_reschedule+0x78>)
 800fbfe:	490b      	ldr	r1, [pc, #44]	; (800fc2c <z_reschedule+0x7c>)
 800fc00:	480b      	ldr	r0, [pc, #44]	; (800fc30 <z_reschedule+0x80>)
 800fc02:	23b9      	movs	r3, #185	; 0xb9
 800fc04:	f002 fb50 	bl	80122a8 <assert_print>
 800fc08:	480a      	ldr	r0, [pc, #40]	; (800fc34 <z_reschedule+0x84>)
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	f002 fb4c 	bl	80122a8 <assert_print>
 800fc10:	4805      	ldr	r0, [pc, #20]	; (800fc28 <z_reschedule+0x78>)
 800fc12:	21b9      	movs	r1, #185	; 0xb9
 800fc14:	f002 fb41 	bl	801229a <assert_post_action>
 800fc18:	f385 8811 	msr	BASEPRI, r5
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	bd38      	pop	{r3, r4, r5, pc}
 800fc22:	bf00      	nop
 800fc24:	20001818 	.word	0x20001818
 800fc28:	080170fb 	.word	0x080170fb
 800fc2c:	0801714e 	.word	0x0801714e
 800fc30:	08016836 	.word	0x08016836
 800fc34:	08017165 	.word	0x08017165

0800fc38 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
 800fc38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800fc3a:	f04f 0310 	mov.w	r3, #16
 800fc3e:	f3ef 8511 	mrs	r5, BASEPRI
 800fc42:	f383 8812 	msr	BASEPRI_MAX, r3
 800fc46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800fc4a:	4829      	ldr	r0, [pc, #164]	; (800fcf0 <k_sched_lock+0xb8>)
 800fc4c:	f7fe ff50 	bl	800eaf0 <z_spin_lock_valid>
 800fc50:	b968      	cbnz	r0, 800fc6e <k_sched_lock+0x36>
 800fc52:	4a28      	ldr	r2, [pc, #160]	; (800fcf4 <k_sched_lock+0xbc>)
 800fc54:	4928      	ldr	r1, [pc, #160]	; (800fcf8 <k_sched_lock+0xc0>)
 800fc56:	4829      	ldr	r0, [pc, #164]	; (800fcfc <k_sched_lock+0xc4>)
 800fc58:	238e      	movs	r3, #142	; 0x8e
 800fc5a:	f002 fb25 	bl	80122a8 <assert_print>
 800fc5e:	4924      	ldr	r1, [pc, #144]	; (800fcf0 <k_sched_lock+0xb8>)
 800fc60:	4827      	ldr	r0, [pc, #156]	; (800fd00 <k_sched_lock+0xc8>)
 800fc62:	f002 fb21 	bl	80122a8 <assert_print>
 800fc66:	4823      	ldr	r0, [pc, #140]	; (800fcf4 <k_sched_lock+0xbc>)
 800fc68:	218e      	movs	r1, #142	; 0x8e
 800fc6a:	f002 fb16 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800fc6e:	4820      	ldr	r0, [pc, #128]	; (800fcf0 <k_sched_lock+0xb8>)
 800fc70:	f7fe ff5c 	bl	800eb2c <z_spin_lock_set_owner>
 800fc74:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 800fc78:	b163      	cbz	r3, 800fc94 <k_sched_lock+0x5c>
 800fc7a:	4922      	ldr	r1, [pc, #136]	; (800fd04 <k_sched_lock+0xcc>)
 800fc7c:	4a22      	ldr	r2, [pc, #136]	; (800fd08 <k_sched_lock+0xd0>)
 800fc7e:	481f      	ldr	r0, [pc, #124]	; (800fcfc <k_sched_lock+0xc4>)
 800fc80:	23fd      	movs	r3, #253	; 0xfd
 800fc82:	f002 fb11 	bl	80122a8 <assert_print>
 800fc86:	4821      	ldr	r0, [pc, #132]	; (800fd0c <k_sched_lock+0xd4>)
 800fc88:	f002 fb0e 	bl	80122a8 <assert_print>
 800fc8c:	481e      	ldr	r0, [pc, #120]	; (800fd08 <k_sched_lock+0xd0>)
 800fc8e:	21fd      	movs	r1, #253	; 0xfd
 800fc90:	f002 fb03 	bl	801229a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
 800fc94:	4c1e      	ldr	r4, [pc, #120]	; (800fd10 <k_sched_lock+0xd8>)
 800fc96:	68a2      	ldr	r2, [r4, #8]
 800fc98:	7bd2      	ldrb	r2, [r2, #15]
 800fc9a:	2a01      	cmp	r2, #1
 800fc9c:	d10c      	bne.n	800fcb8 <k_sched_lock+0x80>
 800fc9e:	491d      	ldr	r1, [pc, #116]	; (800fd14 <k_sched_lock+0xdc>)
 800fca0:	4a19      	ldr	r2, [pc, #100]	; (800fd08 <k_sched_lock+0xd0>)
 800fca2:	4816      	ldr	r0, [pc, #88]	; (800fcfc <k_sched_lock+0xc4>)
 800fca4:	23fe      	movs	r3, #254	; 0xfe
 800fca6:	f002 faff 	bl	80122a8 <assert_print>
 800fcaa:	4818      	ldr	r0, [pc, #96]	; (800fd0c <k_sched_lock+0xd4>)
 800fcac:	f002 fafc 	bl	80122a8 <assert_print>
 800fcb0:	4815      	ldr	r0, [pc, #84]	; (800fd08 <k_sched_lock+0xd0>)
 800fcb2:	21fe      	movs	r1, #254	; 0xfe
 800fcb4:	f002 faf1 	bl	801229a <assert_post_action>
	--_current->base.sched_locked;
 800fcb8:	68a2      	ldr	r2, [r4, #8]
 800fcba:	7bd3      	ldrb	r3, [r2, #15]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fcc0:	480b      	ldr	r0, [pc, #44]	; (800fcf0 <k_sched_lock+0xb8>)
 800fcc2:	f7fe ff23 	bl	800eb0c <z_spin_unlock_valid>
 800fcc6:	b968      	cbnz	r0, 800fce4 <k_sched_lock+0xac>
 800fcc8:	4a0a      	ldr	r2, [pc, #40]	; (800fcf4 <k_sched_lock+0xbc>)
 800fcca:	4913      	ldr	r1, [pc, #76]	; (800fd18 <k_sched_lock+0xe0>)
 800fccc:	480b      	ldr	r0, [pc, #44]	; (800fcfc <k_sched_lock+0xc4>)
 800fcce:	23b9      	movs	r3, #185	; 0xb9
 800fcd0:	f002 faea 	bl	80122a8 <assert_print>
 800fcd4:	4906      	ldr	r1, [pc, #24]	; (800fcf0 <k_sched_lock+0xb8>)
 800fcd6:	4811      	ldr	r0, [pc, #68]	; (800fd1c <k_sched_lock+0xe4>)
 800fcd8:	f002 fae6 	bl	80122a8 <assert_print>
 800fcdc:	4805      	ldr	r0, [pc, #20]	; (800fcf4 <k_sched_lock+0xbc>)
 800fcde:	21b9      	movs	r1, #185	; 0xb9
 800fce0:	f002 fadb 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800fce4:	f385 8811 	msr	BASEPRI, r5
 800fce8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800fcec:	bd38      	pop	{r3, r4, r5, pc}
 800fcee:	bf00      	nop
 800fcf0:	20001850 	.word	0x20001850
 800fcf4:	080170fb 	.word	0x080170fb
 800fcf8:	08017121 	.word	0x08017121
 800fcfc:	08016836 	.word	0x08016836
 800fd00:	08017136 	.word	0x08017136
 800fd04:	08019b8c 	.word	0x08019b8c
 800fd08:	08019d9b 	.word	0x08019d9b
 800fd0c:	08019487 	.word	0x08019487
 800fd10:	20001818 	.word	0x20001818
 800fd14:	08019dc6 	.word	0x08019dc6
 800fd18:	0801714e 	.word	0x0801714e
 800fd1c:	08017165 	.word	0x08017165

0800fd20 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 800fd20:	4b0c      	ldr	r3, [pc, #48]	; (800fd54 <z_priq_dumb_remove+0x34>)
 800fd22:	4299      	cmp	r1, r3
{
 800fd24:	b510      	push	{r4, lr}
 800fd26:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 800fd28:	d10b      	bne.n	800fd42 <z_priq_dumb_remove+0x22>
 800fd2a:	490b      	ldr	r1, [pc, #44]	; (800fd58 <z_priq_dumb_remove+0x38>)
 800fd2c:	480b      	ldr	r0, [pc, #44]	; (800fd5c <z_priq_dumb_remove+0x3c>)
 800fd2e:	4a0c      	ldr	r2, [pc, #48]	; (800fd60 <z_priq_dumb_remove+0x40>)
 800fd30:	f240 433d 	movw	r3, #1085	; 0x43d
 800fd34:	f002 fab8 	bl	80122a8 <assert_print>
 800fd38:	4809      	ldr	r0, [pc, #36]	; (800fd60 <z_priq_dumb_remove+0x40>)
 800fd3a:	f240 413d 	movw	r1, #1085	; 0x43d
 800fd3e:	f002 faac 	bl	801229a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 800fd42:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
 800fd46:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800fd48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800fd4a:	2300      	movs	r3, #0
	node->prev = NULL;
 800fd4c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	20001370 	.word	0x20001370
 800fd58:	08019e19 	.word	0x08019e19
 800fd5c:	08016836 	.word	0x08016836
 800fd60:	08019df7 	.word	0x08019df7

0800fd64 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
 800fd64:	6883      	ldr	r3, [r0, #8]
{
 800fd66:	b510      	push	{r4, lr}
 800fd68:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
 800fd6a:	b95b      	cbnz	r3, 800fd84 <unpend_thread_no_timeout+0x20>
 800fd6c:	490b      	ldr	r1, [pc, #44]	; (800fd9c <unpend_thread_no_timeout+0x38>)
 800fd6e:	480c      	ldr	r0, [pc, #48]	; (800fda0 <unpend_thread_no_timeout+0x3c>)
 800fd70:	4a0c      	ldr	r2, [pc, #48]	; (800fda4 <unpend_thread_no_timeout+0x40>)
 800fd72:	f240 23b9 	movw	r3, #697	; 0x2b9
 800fd76:	f002 fa97 	bl	80122a8 <assert_print>
 800fd7a:	480a      	ldr	r0, [pc, #40]	; (800fda4 <unpend_thread_no_timeout+0x40>)
 800fd7c:	f240 21b9 	movw	r1, #697	; 0x2b9
 800fd80:	f002 fa8b 	bl	801229a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fd84:	68a0      	ldr	r0, [r4, #8]
 800fd86:	4621      	mov	r1, r4
 800fd88:	f7ff ffca 	bl	800fd20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fd8c:	7b63      	ldrb	r3, [r4, #13]
 800fd8e:	f023 0302 	bic.w	r3, r3, #2
 800fd92:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fd94:	2300      	movs	r3, #0
 800fd96:	60a3      	str	r3, [r4, #8]
}
 800fd98:	bd10      	pop	{r4, pc}
 800fd9a:	bf00      	nop
 800fd9c:	08019e3a 	.word	0x08019e3a
 800fda0:	08016836 	.word	0x08016836
 800fda4:	08019df7 	.word	0x08019df7

0800fda8 <z_unpend_thread>:
{
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4604      	mov	r4, r0
	__asm__ volatile(
 800fdac:	f04f 0310 	mov.w	r3, #16
 800fdb0:	f3ef 8511 	mrs	r5, BASEPRI
 800fdb4:	f383 8812 	msr	BASEPRI_MAX, r3
 800fdb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800fdbc:	4819      	ldr	r0, [pc, #100]	; (800fe24 <z_unpend_thread+0x7c>)
 800fdbe:	f7fe fe97 	bl	800eaf0 <z_spin_lock_valid>
 800fdc2:	b968      	cbnz	r0, 800fde0 <z_unpend_thread+0x38>
 800fdc4:	4a18      	ldr	r2, [pc, #96]	; (800fe28 <z_unpend_thread+0x80>)
 800fdc6:	4919      	ldr	r1, [pc, #100]	; (800fe2c <z_unpend_thread+0x84>)
 800fdc8:	4819      	ldr	r0, [pc, #100]	; (800fe30 <z_unpend_thread+0x88>)
 800fdca:	238e      	movs	r3, #142	; 0x8e
 800fdcc:	f002 fa6c 	bl	80122a8 <assert_print>
 800fdd0:	4914      	ldr	r1, [pc, #80]	; (800fe24 <z_unpend_thread+0x7c>)
 800fdd2:	4818      	ldr	r0, [pc, #96]	; (800fe34 <z_unpend_thread+0x8c>)
 800fdd4:	f002 fa68 	bl	80122a8 <assert_print>
 800fdd8:	4813      	ldr	r0, [pc, #76]	; (800fe28 <z_unpend_thread+0x80>)
 800fdda:	218e      	movs	r1, #142	; 0x8e
 800fddc:	f002 fa5d 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800fde0:	4810      	ldr	r0, [pc, #64]	; (800fe24 <z_unpend_thread+0x7c>)
 800fde2:	f7fe fea3 	bl	800eb2c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
 800fde6:	4620      	mov	r0, r4
 800fde8:	f7ff ffbc 	bl	800fd64 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800fdec:	480d      	ldr	r0, [pc, #52]	; (800fe24 <z_unpend_thread+0x7c>)
 800fdee:	f7fe fe8d 	bl	800eb0c <z_spin_unlock_valid>
 800fdf2:	b968      	cbnz	r0, 800fe10 <z_unpend_thread+0x68>
 800fdf4:	4a0c      	ldr	r2, [pc, #48]	; (800fe28 <z_unpend_thread+0x80>)
 800fdf6:	4910      	ldr	r1, [pc, #64]	; (800fe38 <z_unpend_thread+0x90>)
 800fdf8:	480d      	ldr	r0, [pc, #52]	; (800fe30 <z_unpend_thread+0x88>)
 800fdfa:	23b9      	movs	r3, #185	; 0xb9
 800fdfc:	f002 fa54 	bl	80122a8 <assert_print>
 800fe00:	4908      	ldr	r1, [pc, #32]	; (800fe24 <z_unpend_thread+0x7c>)
 800fe02:	480e      	ldr	r0, [pc, #56]	; (800fe3c <z_unpend_thread+0x94>)
 800fe04:	f002 fa50 	bl	80122a8 <assert_print>
 800fe08:	4807      	ldr	r0, [pc, #28]	; (800fe28 <z_unpend_thread+0x80>)
 800fe0a:	21b9      	movs	r1, #185	; 0xb9
 800fe0c:	f002 fa45 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800fe10:	f385 8811 	msr	BASEPRI, r5
 800fe14:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800fe18:	f104 0018 	add.w	r0, r4, #24
}
 800fe1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe20:	f001 b8ce 	b.w	8010fc0 <z_abort_timeout>
 800fe24:	20001850 	.word	0x20001850
 800fe28:	080170fb 	.word	0x080170fb
 800fe2c:	08017121 	.word	0x08017121
 800fe30:	08016836 	.word	0x08016836
 800fe34:	08017136 	.word	0x08017136
 800fe38:	0801714e 	.word	0x0801714e
 800fe3c:	08017165 	.word	0x08017165

0800fe40 <update_cache>:
{
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 800fe44:	4814      	ldr	r0, [pc, #80]	; (800fe98 <update_cache+0x58>)
 800fe46:	4d15      	ldr	r5, [pc, #84]	; (800fe9c <update_cache+0x5c>)
 800fe48:	f005 fb3e 	bl	80154c8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	b900      	cbnz	r0, 800fe52 <update_cache+0x12>
 800fe50:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
 800fe52:	b9ca      	cbnz	r2, 800fe88 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
 800fe54:	68ab      	ldr	r3, [r5, #8]
 800fe56:	b963      	cbnz	r3, 800fe72 <update_cache+0x32>
 800fe58:	4911      	ldr	r1, [pc, #68]	; (800fea0 <update_cache+0x60>)
 800fe5a:	4a12      	ldr	r2, [pc, #72]	; (800fea4 <update_cache+0x64>)
 800fe5c:	4812      	ldr	r0, [pc, #72]	; (800fea8 <update_cache+0x68>)
 800fe5e:	2389      	movs	r3, #137	; 0x89
 800fe60:	f002 fa22 	bl	80122a8 <assert_print>
 800fe64:	4811      	ldr	r0, [pc, #68]	; (800feac <update_cache+0x6c>)
 800fe66:	f002 fa1f 	bl	80122a8 <assert_print>
 800fe6a:	480e      	ldr	r0, [pc, #56]	; (800fea4 <update_cache+0x64>)
 800fe6c:	2189      	movs	r1, #137	; 0x89
 800fe6e:	f002 fa14 	bl	801229a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
 800fe72:	68ab      	ldr	r3, [r5, #8]
 800fe74:	7b5a      	ldrb	r2, [r3, #13]
 800fe76:	06d2      	lsls	r2, r2, #27
 800fe78:	d106      	bne.n	800fe88 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800fe7a:	69a2      	ldr	r2, [r4, #24]
 800fe7c:	b922      	cbnz	r2, 800fe88 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
 800fe7e:	89da      	ldrh	r2, [r3, #14]
 800fe80:	2a7f      	cmp	r2, #127	; 0x7f
 800fe82:	d901      	bls.n	800fe88 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
 800fe84:	61ab      	str	r3, [r5, #24]
}
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800fe88:	68ab      	ldr	r3, [r5, #8]
 800fe8a:	42a3      	cmp	r3, r4
 800fe8c:	d002      	beq.n	800fe94 <update_cache+0x54>
			z_reset_time_slice(thread);
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff fdd2 	bl	800fa38 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800fe94:	61ac      	str	r4, [r5, #24]
}
 800fe96:	e7f6      	b.n	800fe86 <update_cache+0x46>
 800fe98:	20001834 	.word	0x20001834
 800fe9c:	20001818 	.word	0x20001818
 800fea0:	08019e51 	.word	0x08019e51
 800fea4:	08019df7 	.word	0x08019df7
 800fea8:	08016836 	.word	0x08016836
 800feac:	08019487 	.word	0x08019487

0800feb0 <move_thread_to_end_of_prio_q>:
{
 800feb0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800feb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 800feb6:	7b43      	ldrb	r3, [r0, #13]
 800feb8:	2a00      	cmp	r2, #0
{
 800feba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 800febc:	da06      	bge.n	800fecc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800febe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fec2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800fec4:	4601      	mov	r1, r0
 800fec6:	481f      	ldr	r0, [pc, #124]	; (800ff44 <move_thread_to_end_of_prio_q+0x94>)
 800fec8:	f7ff ff2a 	bl	800fd20 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800fecc:	7b63      	ldrb	r3, [r4, #13]
 800fece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fed2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 800fed4:	4b1c      	ldr	r3, [pc, #112]	; (800ff48 <move_thread_to_end_of_prio_q+0x98>)
 800fed6:	429c      	cmp	r4, r3
 800fed8:	d109      	bne.n	800feee <move_thread_to_end_of_prio_q+0x3e>
 800feda:	491c      	ldr	r1, [pc, #112]	; (800ff4c <move_thread_to_end_of_prio_q+0x9c>)
 800fedc:	481c      	ldr	r0, [pc, #112]	; (800ff50 <move_thread_to_end_of_prio_q+0xa0>)
 800fede:	4a1d      	ldr	r2, [pc, #116]	; (800ff54 <move_thread_to_end_of_prio_q+0xa4>)
 800fee0:	23ba      	movs	r3, #186	; 0xba
 800fee2:	f002 f9e1 	bl	80122a8 <assert_print>
 800fee6:	481b      	ldr	r0, [pc, #108]	; (800ff54 <move_thread_to_end_of_prio_q+0xa4>)
 800fee8:	21ba      	movs	r1, #186	; 0xba
 800feea:	f002 f9d6 	bl	801229a <assert_post_action>
	return list->head == list;
 800feee:	4a1a      	ldr	r2, [pc, #104]	; (800ff58 <move_thread_to_end_of_prio_q+0xa8>)
 800fef0:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800fef2:	6a15      	ldr	r5, [r2, #32]
	return list->head == list;
 800fef4:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fef8:	428b      	cmp	r3, r1
 800fefa:	bf08      	it	eq
 800fefc:	2300      	moveq	r3, #0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	bf38      	it	cc
 800ff02:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ff04:	b1cb      	cbz	r3, 800ff3a <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
 800ff06:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 800ff0a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 800ff0e:	4286      	cmp	r6, r0
 800ff10:	d00f      	beq.n	800ff32 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
 800ff12:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dd0c      	ble.n	800ff32 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
 800ff18:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 800ff1a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
 800ff1e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 800ff20:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
 800ff22:	6890      	ldr	r0, [r2, #8]
 800ff24:	1b03      	subs	r3, r0, r4
 800ff26:	4258      	negs	r0, r3
}
 800ff28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800ff2c:	4158      	adcs	r0, r3
 800ff2e:	f7ff bf87 	b.w	800fe40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800ff32:	42ab      	cmp	r3, r5
 800ff34:	d001      	beq.n	800ff3a <move_thread_to_end_of_prio_q+0x8a>
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	e7e4      	b.n	800ff04 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
 800ff3a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
 800ff3e:	602c      	str	r4, [r5, #0]
	list->tail = node;
 800ff40:	6214      	str	r4, [r2, #32]
}
 800ff42:	e7ee      	b.n	800ff22 <move_thread_to_end_of_prio_q+0x72>
 800ff44:	20001834 	.word	0x20001834
 800ff48:	20001370 	.word	0x20001370
 800ff4c:	08019e19 	.word	0x08019e19
 800ff50:	08016836 	.word	0x08016836
 800ff54:	08019df7 	.word	0x08019df7
 800ff58:	20001818 	.word	0x20001818

0800ff5c <z_time_slice>:
{
 800ff5c:	b570      	push	{r4, r5, r6, lr}
 800ff5e:	4605      	mov	r5, r0
	__asm__ volatile(
 800ff60:	f04f 0310 	mov.w	r3, #16
 800ff64:	f3ef 8611 	mrs	r6, BASEPRI
 800ff68:	f383 8812 	msr	BASEPRI_MAX, r3
 800ff6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 800ff70:	482b      	ldr	r0, [pc, #172]	; (8010020 <z_time_slice+0xc4>)
 800ff72:	f7fe fdbd 	bl	800eaf0 <z_spin_lock_valid>
 800ff76:	b968      	cbnz	r0, 800ff94 <z_time_slice+0x38>
 800ff78:	4a2a      	ldr	r2, [pc, #168]	; (8010024 <z_time_slice+0xc8>)
 800ff7a:	492b      	ldr	r1, [pc, #172]	; (8010028 <z_time_slice+0xcc>)
 800ff7c:	482b      	ldr	r0, [pc, #172]	; (801002c <z_time_slice+0xd0>)
 800ff7e:	238e      	movs	r3, #142	; 0x8e
 800ff80:	f002 f992 	bl	80122a8 <assert_print>
 800ff84:	4926      	ldr	r1, [pc, #152]	; (8010020 <z_time_slice+0xc4>)
 800ff86:	482a      	ldr	r0, [pc, #168]	; (8010030 <z_time_slice+0xd4>)
 800ff88:	f002 f98e 	bl	80122a8 <assert_print>
 800ff8c:	4825      	ldr	r0, [pc, #148]	; (8010024 <z_time_slice+0xc8>)
 800ff8e:	218e      	movs	r1, #142	; 0x8e
 800ff90:	f002 f983 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 800ff94:	4822      	ldr	r0, [pc, #136]	; (8010020 <z_time_slice+0xc4>)
 800ff96:	f7fe fdc9 	bl	800eb2c <z_spin_lock_set_owner>
	if (pending_current == _current) {
 800ff9a:	4b26      	ldr	r3, [pc, #152]	; (8010034 <z_time_slice+0xd8>)
 800ff9c:	4a26      	ldr	r2, [pc, #152]	; (8010038 <z_time_slice+0xdc>)
 800ff9e:	689c      	ldr	r4, [r3, #8]
 800ffa0:	6811      	ldr	r1, [r2, #0]
 800ffa2:	428c      	cmp	r4, r1
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	d119      	bne.n	800ffdc <z_time_slice+0x80>
	z_reset_time_slice(curr);
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f7ff fd45 	bl	800fa38 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 800ffae:	481c      	ldr	r0, [pc, #112]	; (8010020 <z_time_slice+0xc4>)
 800ffb0:	f7fe fdac 	bl	800eb0c <z_spin_unlock_valid>
 800ffb4:	b968      	cbnz	r0, 800ffd2 <z_time_slice+0x76>
 800ffb6:	4a1b      	ldr	r2, [pc, #108]	; (8010024 <z_time_slice+0xc8>)
 800ffb8:	4920      	ldr	r1, [pc, #128]	; (801003c <z_time_slice+0xe0>)
 800ffba:	481c      	ldr	r0, [pc, #112]	; (801002c <z_time_slice+0xd0>)
 800ffbc:	23b9      	movs	r3, #185	; 0xb9
 800ffbe:	f002 f973 	bl	80122a8 <assert_print>
 800ffc2:	4917      	ldr	r1, [pc, #92]	; (8010020 <z_time_slice+0xc4>)
 800ffc4:	481e      	ldr	r0, [pc, #120]	; (8010040 <z_time_slice+0xe4>)
 800ffc6:	f002 f96f 	bl	80122a8 <assert_print>
 800ffca:	4816      	ldr	r0, [pc, #88]	; (8010024 <z_time_slice+0xc8>)
 800ffcc:	21b9      	movs	r1, #185	; 0xb9
 800ffce:	f002 f964 	bl	801229a <assert_post_action>
	__asm__ volatile(
 800ffd2:	f386 8811 	msr	BASEPRI, r6
 800ffd6:	f3bf 8f6f 	isb	sy
}
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 800ffdc:	2000      	movs	r0, #0
 800ffde:	6010      	str	r0, [r2, #0]
	int ret = slice_ticks;
 800ffe0:	4a18      	ldr	r2, [pc, #96]	; (8010044 <z_time_slice+0xe8>)
	if (slice_time(_current) && sliceable(_current)) {
 800ffe2:	6812      	ldr	r2, [r2, #0]
 800ffe4:	b1c2      	cbz	r2, 8010018 <z_time_slice+0xbc>
		&& !z_is_idle_thread_object(thread);
 800ffe6:	89e2      	ldrh	r2, [r4, #14]
 800ffe8:	2a7f      	cmp	r2, #127	; 0x7f
 800ffea:	d815      	bhi.n	8010018 <z_time_slice+0xbc>
		&& !z_is_thread_prevented_from_running(thread)
 800ffec:	7b62      	ldrb	r2, [r4, #13]
 800ffee:	06d2      	lsls	r2, r2, #27
 800fff0:	d112      	bne.n	8010018 <z_time_slice+0xbc>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800fff2:	4a15      	ldr	r2, [pc, #84]	; (8010048 <z_time_slice+0xec>)
 800fff4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 800fff8:	6812      	ldr	r2, [r2, #0]
 800fffa:	4290      	cmp	r0, r2
 800fffc:	db0c      	blt.n	8010018 <z_time_slice+0xbc>
	if (slice_time(_current) && sliceable(_current)) {
 800fffe:	4a13      	ldr	r2, [pc, #76]	; (801004c <z_time_slice+0xf0>)
 8010000:	4294      	cmp	r4, r2
 8010002:	d009      	beq.n	8010018 <z_time_slice+0xbc>
		if (ticks >= _current_cpu->slice_ticks) {
 8010004:	691a      	ldr	r2, [r3, #16]
 8010006:	42aa      	cmp	r2, r5
 8010008:	dc03      	bgt.n	8010012 <z_time_slice+0xb6>
		move_thread_to_end_of_prio_q(curr);
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff ff50 	bl	800feb0 <move_thread_to_end_of_prio_q>
 8010010:	e7ca      	b.n	800ffa8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
 8010012:	1b52      	subs	r2, r2, r5
 8010014:	611a      	str	r2, [r3, #16]
 8010016:	e7ca      	b.n	800ffae <z_time_slice+0x52>
		_current_cpu->slice_ticks = 0;
 8010018:	2300      	movs	r3, #0
 801001a:	610b      	str	r3, [r1, #16]
 801001c:	e7c7      	b.n	800ffae <z_time_slice+0x52>
 801001e:	bf00      	nop
 8010020:	20001850 	.word	0x20001850
 8010024:	080170fb 	.word	0x080170fb
 8010028:	08017121 	.word	0x08017121
 801002c:	08016836 	.word	0x08016836
 8010030:	08017136 	.word	0x08017136
 8010034:	20001818 	.word	0x20001818
 8010038:	2000184c 	.word	0x2000184c
 801003c:	0801714e 	.word	0x0801714e
 8010040:	08017165 	.word	0x08017165
 8010044:	20001858 	.word	0x20001858
 8010048:	20001854 	.word	0x20001854
 801004c:	20001370 	.word	0x20001370

08010050 <ready_thread>:
{
 8010050:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8010052:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8010056:	7b43      	ldrb	r3, [r0, #13]
 8010058:	2a00      	cmp	r2, #0
{
 801005a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 801005c:	db3e      	blt.n	80100dc <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 801005e:	06da      	lsls	r2, r3, #27
 8010060:	d13c      	bne.n	80100dc <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
 8010062:	6985      	ldr	r5, [r0, #24]
 8010064:	2d00      	cmp	r5, #0
 8010066:	d139      	bne.n	80100dc <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
 8010068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801006c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 801006e:	4b1c      	ldr	r3, [pc, #112]	; (80100e0 <ready_thread+0x90>)
 8010070:	4298      	cmp	r0, r3
 8010072:	d109      	bne.n	8010088 <ready_thread+0x38>
 8010074:	491b      	ldr	r1, [pc, #108]	; (80100e4 <ready_thread+0x94>)
 8010076:	481c      	ldr	r0, [pc, #112]	; (80100e8 <ready_thread+0x98>)
 8010078:	4a1c      	ldr	r2, [pc, #112]	; (80100ec <ready_thread+0x9c>)
 801007a:	23ba      	movs	r3, #186	; 0xba
 801007c:	f002 f914 	bl	80122a8 <assert_print>
 8010080:	481a      	ldr	r0, [pc, #104]	; (80100ec <ready_thread+0x9c>)
 8010082:	21ba      	movs	r1, #186	; 0xba
 8010084:	f002 f909 	bl	801229a <assert_post_action>
	return list->head == list;
 8010088:	4919      	ldr	r1, [pc, #100]	; (80100f0 <ready_thread+0xa0>)
 801008a:	460b      	mov	r3, r1
 801008c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010090:	4298      	cmp	r0, r3
 8010092:	bf18      	it	ne
 8010094:	4605      	movne	r5, r0
 8010096:	2d00      	cmp	r5, #0
 8010098:	461a      	mov	r2, r3
 801009a:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801009c:	6a0d      	ldr	r5, [r1, #32]
 801009e:	bf38      	it	cc
 80100a0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80100a2:	b1b3      	cbz	r3, 80100d2 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
 80100a4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80100a8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 80100ac:	4286      	cmp	r6, r0
 80100ae:	d00c      	beq.n	80100ca <ready_thread+0x7a>
		return b2 - b1;
 80100b0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80100b2:	2800      	cmp	r0, #0
 80100b4:	dd09      	ble.n	80100ca <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
 80100b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80100b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80100bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80100be:	605c      	str	r4, [r3, #4]
}
 80100c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
 80100c4:	2000      	movs	r0, #0
 80100c6:	f7ff bebb 	b.w	800fe40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80100ca:	42ab      	cmp	r3, r5
 80100cc:	d001      	beq.n	80100d2 <ready_thread+0x82>
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	e7e7      	b.n	80100a2 <ready_thread+0x52>
	node->prev = tail;
 80100d2:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
 80100d6:	602c      	str	r4, [r5, #0]
	list->tail = node;
 80100d8:	620c      	str	r4, [r1, #32]
}
 80100da:	e7f1      	b.n	80100c0 <ready_thread+0x70>
}
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
 80100de:	bf00      	nop
 80100e0:	20001370 	.word	0x20001370
 80100e4:	08019e19 	.word	0x08019e19
 80100e8:	08016836 	.word	0x08016836
 80100ec:	08019df7 	.word	0x08019df7
 80100f0:	20001818 	.word	0x20001818

080100f4 <z_ready_thread>:
{
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4604      	mov	r4, r0
	__asm__ volatile(
 80100f8:	f04f 0310 	mov.w	r3, #16
 80100fc:	f3ef 8511 	mrs	r5, BASEPRI
 8010100:	f383 8812 	msr	BASEPRI_MAX, r3
 8010104:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010108:	4817      	ldr	r0, [pc, #92]	; (8010168 <z_ready_thread+0x74>)
 801010a:	f7fe fcf1 	bl	800eaf0 <z_spin_lock_valid>
 801010e:	b968      	cbnz	r0, 801012c <z_ready_thread+0x38>
 8010110:	4a16      	ldr	r2, [pc, #88]	; (801016c <z_ready_thread+0x78>)
 8010112:	4917      	ldr	r1, [pc, #92]	; (8010170 <z_ready_thread+0x7c>)
 8010114:	4817      	ldr	r0, [pc, #92]	; (8010174 <z_ready_thread+0x80>)
 8010116:	238e      	movs	r3, #142	; 0x8e
 8010118:	f002 f8c6 	bl	80122a8 <assert_print>
 801011c:	4912      	ldr	r1, [pc, #72]	; (8010168 <z_ready_thread+0x74>)
 801011e:	4816      	ldr	r0, [pc, #88]	; (8010178 <z_ready_thread+0x84>)
 8010120:	f002 f8c2 	bl	80122a8 <assert_print>
 8010124:	4811      	ldr	r0, [pc, #68]	; (801016c <z_ready_thread+0x78>)
 8010126:	218e      	movs	r1, #142	; 0x8e
 8010128:	f002 f8b7 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 801012c:	480e      	ldr	r0, [pc, #56]	; (8010168 <z_ready_thread+0x74>)
 801012e:	f7fe fcfd 	bl	800eb2c <z_spin_lock_set_owner>
			ready_thread(thread);
 8010132:	4620      	mov	r0, r4
 8010134:	f7ff ff8c 	bl	8010050 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010138:	480b      	ldr	r0, [pc, #44]	; (8010168 <z_ready_thread+0x74>)
 801013a:	f7fe fce7 	bl	800eb0c <z_spin_unlock_valid>
 801013e:	b968      	cbnz	r0, 801015c <z_ready_thread+0x68>
 8010140:	4a0a      	ldr	r2, [pc, #40]	; (801016c <z_ready_thread+0x78>)
 8010142:	490e      	ldr	r1, [pc, #56]	; (801017c <z_ready_thread+0x88>)
 8010144:	480b      	ldr	r0, [pc, #44]	; (8010174 <z_ready_thread+0x80>)
 8010146:	23b9      	movs	r3, #185	; 0xb9
 8010148:	f002 f8ae 	bl	80122a8 <assert_print>
 801014c:	4906      	ldr	r1, [pc, #24]	; (8010168 <z_ready_thread+0x74>)
 801014e:	480c      	ldr	r0, [pc, #48]	; (8010180 <z_ready_thread+0x8c>)
 8010150:	f002 f8aa 	bl	80122a8 <assert_print>
 8010154:	4805      	ldr	r0, [pc, #20]	; (801016c <z_ready_thread+0x78>)
 8010156:	21b9      	movs	r1, #185	; 0xb9
 8010158:	f002 f89f 	bl	801229a <assert_post_action>
	__asm__ volatile(
 801015c:	f385 8811 	msr	BASEPRI, r5
 8010160:	f3bf 8f6f 	isb	sy
}
 8010164:	bd38      	pop	{r3, r4, r5, pc}
 8010166:	bf00      	nop
 8010168:	20001850 	.word	0x20001850
 801016c:	080170fb 	.word	0x080170fb
 8010170:	08017121 	.word	0x08017121
 8010174:	08016836 	.word	0x08016836
 8010178:	08017136 	.word	0x08017136
 801017c:	0801714e 	.word	0x0801714e
 8010180:	08017165 	.word	0x08017165

08010184 <z_sched_start>:
{
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4604      	mov	r4, r0
	__asm__ volatile(
 8010188:	f04f 0310 	mov.w	r3, #16
 801018c:	f3ef 8511 	mrs	r5, BASEPRI
 8010190:	f383 8812 	msr	BASEPRI_MAX, r3
 8010194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010198:	481d      	ldr	r0, [pc, #116]	; (8010210 <z_sched_start+0x8c>)
 801019a:	f7fe fca9 	bl	800eaf0 <z_spin_lock_valid>
 801019e:	b968      	cbnz	r0, 80101bc <z_sched_start+0x38>
 80101a0:	4a1c      	ldr	r2, [pc, #112]	; (8010214 <z_sched_start+0x90>)
 80101a2:	491d      	ldr	r1, [pc, #116]	; (8010218 <z_sched_start+0x94>)
 80101a4:	481d      	ldr	r0, [pc, #116]	; (801021c <z_sched_start+0x98>)
 80101a6:	238e      	movs	r3, #142	; 0x8e
 80101a8:	f002 f87e 	bl	80122a8 <assert_print>
 80101ac:	4918      	ldr	r1, [pc, #96]	; (8010210 <z_sched_start+0x8c>)
 80101ae:	481c      	ldr	r0, [pc, #112]	; (8010220 <z_sched_start+0x9c>)
 80101b0:	f002 f87a 	bl	80122a8 <assert_print>
 80101b4:	4817      	ldr	r0, [pc, #92]	; (8010214 <z_sched_start+0x90>)
 80101b6:	218e      	movs	r1, #142	; 0x8e
 80101b8:	f002 f86f 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80101bc:	4814      	ldr	r0, [pc, #80]	; (8010210 <z_sched_start+0x8c>)
 80101be:	f7fe fcb5 	bl	800eb2c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
 80101c2:	7b63      	ldrb	r3, [r4, #13]
 80101c4:	075a      	lsls	r2, r3, #29
 80101c6:	d416      	bmi.n	80101f6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80101c8:	4811      	ldr	r0, [pc, #68]	; (8010210 <z_sched_start+0x8c>)
 80101ca:	f7fe fc9f 	bl	800eb0c <z_spin_unlock_valid>
 80101ce:	b968      	cbnz	r0, 80101ec <z_sched_start+0x68>
 80101d0:	4a10      	ldr	r2, [pc, #64]	; (8010214 <z_sched_start+0x90>)
 80101d2:	4914      	ldr	r1, [pc, #80]	; (8010224 <z_sched_start+0xa0>)
 80101d4:	4811      	ldr	r0, [pc, #68]	; (801021c <z_sched_start+0x98>)
 80101d6:	23b9      	movs	r3, #185	; 0xb9
 80101d8:	f002 f866 	bl	80122a8 <assert_print>
 80101dc:	490c      	ldr	r1, [pc, #48]	; (8010210 <z_sched_start+0x8c>)
 80101de:	4812      	ldr	r0, [pc, #72]	; (8010228 <z_sched_start+0xa4>)
 80101e0:	f002 f862 	bl	80122a8 <assert_print>
 80101e4:	480b      	ldr	r0, [pc, #44]	; (8010214 <z_sched_start+0x90>)
 80101e6:	21b9      	movs	r1, #185	; 0xb9
 80101e8:	f002 f857 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80101ec:	f385 8811 	msr	BASEPRI, r5
 80101f0:	f3bf 8f6f 	isb	sy
}
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80101f6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
 80101fa:	4620      	mov	r0, r4
 80101fc:	7363      	strb	r3, [r4, #13]
 80101fe:	f7ff ff27 	bl	8010050 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8010202:	4629      	mov	r1, r5
 8010204:	4802      	ldr	r0, [pc, #8]	; (8010210 <z_sched_start+0x8c>)
}
 8010206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
 801020a:	f7ff bcd1 	b.w	800fbb0 <z_reschedule>
 801020e:	bf00      	nop
 8010210:	20001850 	.word	0x20001850
 8010214:	080170fb 	.word	0x080170fb
 8010218:	08017121 	.word	0x08017121
 801021c:	08016836 	.word	0x08016836
 8010220:	08017136 	.word	0x08017136
 8010224:	0801714e 	.word	0x0801714e
 8010228:	08017165 	.word	0x08017165

0801022c <z_thread_timeout>:
{
 801022c:	b570      	push	{r4, r5, r6, lr}
 801022e:	4604      	mov	r4, r0
	__asm__ volatile(
 8010230:	f04f 0310 	mov.w	r3, #16
 8010234:	f3ef 8611 	mrs	r6, BASEPRI
 8010238:	f383 8812 	msr	BASEPRI_MAX, r3
 801023c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010240:	4820      	ldr	r0, [pc, #128]	; (80102c4 <z_thread_timeout+0x98>)
 8010242:	f7fe fc55 	bl	800eaf0 <z_spin_lock_valid>
 8010246:	b968      	cbnz	r0, 8010264 <z_thread_timeout+0x38>
 8010248:	4a1f      	ldr	r2, [pc, #124]	; (80102c8 <z_thread_timeout+0x9c>)
 801024a:	4920      	ldr	r1, [pc, #128]	; (80102cc <z_thread_timeout+0xa0>)
 801024c:	4820      	ldr	r0, [pc, #128]	; (80102d0 <z_thread_timeout+0xa4>)
 801024e:	238e      	movs	r3, #142	; 0x8e
 8010250:	f002 f82a 	bl	80122a8 <assert_print>
 8010254:	491b      	ldr	r1, [pc, #108]	; (80102c4 <z_thread_timeout+0x98>)
 8010256:	481f      	ldr	r0, [pc, #124]	; (80102d4 <z_thread_timeout+0xa8>)
 8010258:	f002 f826 	bl	80122a8 <assert_print>
 801025c:	481a      	ldr	r0, [pc, #104]	; (80102c8 <z_thread_timeout+0x9c>)
 801025e:	218e      	movs	r1, #142	; 0x8e
 8010260:	f002 f81b 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010264:	4817      	ldr	r0, [pc, #92]	; (80102c4 <z_thread_timeout+0x98>)
 8010266:	f7fe fc61 	bl	800eb2c <z_spin_lock_set_owner>
		if (!killed) {
 801026a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 801026e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8010272:	d110      	bne.n	8010296 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
 8010274:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8010278:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
 801027c:	b113      	cbz	r3, 8010284 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
 801027e:	4628      	mov	r0, r5
 8010280:	f7ff fd70 	bl	800fd64 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8010284:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8010288:	f023 0314 	bic.w	r3, r3, #20
 801028c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8010290:	4628      	mov	r0, r5
 8010292:	f7ff fedd 	bl	8010050 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010296:	480b      	ldr	r0, [pc, #44]	; (80102c4 <z_thread_timeout+0x98>)
 8010298:	f7fe fc38 	bl	800eb0c <z_spin_unlock_valid>
 801029c:	b968      	cbnz	r0, 80102ba <z_thread_timeout+0x8e>
 801029e:	4a0a      	ldr	r2, [pc, #40]	; (80102c8 <z_thread_timeout+0x9c>)
 80102a0:	490d      	ldr	r1, [pc, #52]	; (80102d8 <z_thread_timeout+0xac>)
 80102a2:	480b      	ldr	r0, [pc, #44]	; (80102d0 <z_thread_timeout+0xa4>)
 80102a4:	23b9      	movs	r3, #185	; 0xb9
 80102a6:	f001 ffff 	bl	80122a8 <assert_print>
 80102aa:	4906      	ldr	r1, [pc, #24]	; (80102c4 <z_thread_timeout+0x98>)
 80102ac:	480b      	ldr	r0, [pc, #44]	; (80102dc <z_thread_timeout+0xb0>)
 80102ae:	f001 fffb 	bl	80122a8 <assert_print>
 80102b2:	4805      	ldr	r0, [pc, #20]	; (80102c8 <z_thread_timeout+0x9c>)
 80102b4:	21b9      	movs	r1, #185	; 0xb9
 80102b6:	f001 fff0 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80102ba:	f386 8811 	msr	BASEPRI, r6
 80102be:	f3bf 8f6f 	isb	sy
}
 80102c2:	bd70      	pop	{r4, r5, r6, pc}
 80102c4:	20001850 	.word	0x20001850
 80102c8:	080170fb 	.word	0x080170fb
 80102cc:	08017121 	.word	0x08017121
 80102d0:	08016836 	.word	0x08016836
 80102d4:	08017136 	.word	0x08017136
 80102d8:	0801714e 	.word	0x0801714e
 80102dc:	08017165 	.word	0x08017165

080102e0 <unready_thread>:
{
 80102e0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
 80102e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 80102e6:	7b43      	ldrb	r3, [r0, #13]
 80102e8:	2a00      	cmp	r2, #0
{
 80102ea:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
 80102ec:	da06      	bge.n	80102fc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80102ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102f2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80102f4:	4601      	mov	r1, r0
 80102f6:	4806      	ldr	r0, [pc, #24]	; (8010310 <unready_thread+0x30>)
 80102f8:	f7ff fd12 	bl	800fd20 <z_priq_dumb_remove>
	update_cache(thread == _current);
 80102fc:	4b05      	ldr	r3, [pc, #20]	; (8010314 <unready_thread+0x34>)
 80102fe:	6898      	ldr	r0, [r3, #8]
 8010300:	1b03      	subs	r3, r0, r4
 8010302:	4258      	negs	r0, r3
}
 8010304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
 8010308:	4158      	adcs	r0, r3
 801030a:	f7ff bd99 	b.w	800fe40 <update_cache>
 801030e:	bf00      	nop
 8010310:	20001834 	.word	0x20001834
 8010314:	20001818 	.word	0x20001818

08010318 <add_to_waitq_locked>:
{
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4604      	mov	r4, r0
 801031c:	460d      	mov	r5, r1
	unready_thread(thread);
 801031e:	f7ff ffdf 	bl	80102e0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8010322:	7b63      	ldrb	r3, [r4, #13]
 8010324:	f043 0302 	orr.w	r3, r3, #2
 8010328:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 801032a:	b31d      	cbz	r5, 8010374 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 801032c:	4b17      	ldr	r3, [pc, #92]	; (801038c <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
 801032e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8010330:	429c      	cmp	r4, r3
 8010332:	d109      	bne.n	8010348 <add_to_waitq_locked+0x30>
 8010334:	4916      	ldr	r1, [pc, #88]	; (8010390 <add_to_waitq_locked+0x78>)
 8010336:	4817      	ldr	r0, [pc, #92]	; (8010394 <add_to_waitq_locked+0x7c>)
 8010338:	4a17      	ldr	r2, [pc, #92]	; (8010398 <add_to_waitq_locked+0x80>)
 801033a:	23ba      	movs	r3, #186	; 0xba
 801033c:	f001 ffb4 	bl	80122a8 <assert_print>
 8010340:	4815      	ldr	r0, [pc, #84]	; (8010398 <add_to_waitq_locked+0x80>)
 8010342:	21ba      	movs	r1, #186	; 0xba
 8010344:	f001 ffa9 	bl	801229a <assert_post_action>
	return list->head == list;
 8010348:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801034a:	429d      	cmp	r5, r3
 801034c:	bf08      	it	eq
 801034e:	2300      	moveq	r3, #0
 8010350:	2b00      	cmp	r3, #0
 8010352:	bf38      	it	cc
 8010354:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010356:	b19b      	cbz	r3, 8010380 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
 8010358:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 801035c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8010360:	4291      	cmp	r1, r2
 8010362:	d008      	beq.n	8010376 <add_to_waitq_locked+0x5e>
		return b2 - b1;
 8010364:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8010366:	2a00      	cmp	r2, #0
 8010368:	dd05      	ble.n	8010376 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
 801036a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 801036c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8010370:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8010372:	605c      	str	r4, [r3, #4]
}
 8010374:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8010376:	686a      	ldr	r2, [r5, #4]
 8010378:	4293      	cmp	r3, r2
 801037a:	d001      	beq.n	8010380 <add_to_waitq_locked+0x68>
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	e7ea      	b.n	8010356 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
 8010380:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8010382:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8010386:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8010388:	606c      	str	r4, [r5, #4]
 801038a:	e7f3      	b.n	8010374 <add_to_waitq_locked+0x5c>
 801038c:	20001370 	.word	0x20001370
 8010390:	08019e19 	.word	0x08019e19
 8010394:	08016836 	.word	0x08016836
 8010398:	08019df7 	.word	0x08019df7

0801039c <pend>:
{
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4604      	mov	r4, r0
 80103a2:	460d      	mov	r5, r1
 80103a4:	4616      	mov	r6, r2
 80103a6:	461f      	mov	r7, r3
	__asm__ volatile(
 80103a8:	f04f 0310 	mov.w	r3, #16
 80103ac:	f3ef 8811 	mrs	r8, BASEPRI
 80103b0:	f383 8812 	msr	BASEPRI_MAX, r3
 80103b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80103b8:	481f      	ldr	r0, [pc, #124]	; (8010438 <pend+0x9c>)
 80103ba:	f7fe fb99 	bl	800eaf0 <z_spin_lock_valid>
 80103be:	b968      	cbnz	r0, 80103dc <pend+0x40>
 80103c0:	4a1e      	ldr	r2, [pc, #120]	; (801043c <pend+0xa0>)
 80103c2:	491f      	ldr	r1, [pc, #124]	; (8010440 <pend+0xa4>)
 80103c4:	481f      	ldr	r0, [pc, #124]	; (8010444 <pend+0xa8>)
 80103c6:	238e      	movs	r3, #142	; 0x8e
 80103c8:	f001 ff6e 	bl	80122a8 <assert_print>
 80103cc:	491a      	ldr	r1, [pc, #104]	; (8010438 <pend+0x9c>)
 80103ce:	481e      	ldr	r0, [pc, #120]	; (8010448 <pend+0xac>)
 80103d0:	f001 ff6a 	bl	80122a8 <assert_print>
 80103d4:	4819      	ldr	r0, [pc, #100]	; (801043c <pend+0xa0>)
 80103d6:	218e      	movs	r1, #142	; 0x8e
 80103d8:	f001 ff5f 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80103dc:	4816      	ldr	r0, [pc, #88]	; (8010438 <pend+0x9c>)
 80103de:	f7fe fba5 	bl	800eb2c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
 80103e2:	4620      	mov	r0, r4
 80103e4:	4629      	mov	r1, r5
 80103e6:	f7ff ff97 	bl	8010318 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80103ea:	4813      	ldr	r0, [pc, #76]	; (8010438 <pend+0x9c>)
 80103ec:	f7fe fb8e 	bl	800eb0c <z_spin_unlock_valid>
 80103f0:	b968      	cbnz	r0, 801040e <pend+0x72>
 80103f2:	4a12      	ldr	r2, [pc, #72]	; (801043c <pend+0xa0>)
 80103f4:	4915      	ldr	r1, [pc, #84]	; (801044c <pend+0xb0>)
 80103f6:	4813      	ldr	r0, [pc, #76]	; (8010444 <pend+0xa8>)
 80103f8:	23b9      	movs	r3, #185	; 0xb9
 80103fa:	f001 ff55 	bl	80122a8 <assert_print>
 80103fe:	490e      	ldr	r1, [pc, #56]	; (8010438 <pend+0x9c>)
 8010400:	4813      	ldr	r0, [pc, #76]	; (8010450 <pend+0xb4>)
 8010402:	f001 ff51 	bl	80122a8 <assert_print>
 8010406:	480d      	ldr	r0, [pc, #52]	; (801043c <pend+0xa0>)
 8010408:	21b9      	movs	r1, #185	; 0xb9
 801040a:	f001 ff46 	bl	801229a <assert_post_action>
	__asm__ volatile(
 801040e:	f388 8811 	msr	BASEPRI, r8
 8010412:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010416:	1c7b      	adds	r3, r7, #1
 8010418:	bf08      	it	eq
 801041a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 801041e:	d008      	beq.n	8010432 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8010420:	4632      	mov	r2, r6
 8010422:	463b      	mov	r3, r7
 8010424:	f104 0018 	add.w	r0, r4, #24
 8010428:	490a      	ldr	r1, [pc, #40]	; (8010454 <pend+0xb8>)
}
 801042a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801042e:	f000 bcf3 	b.w	8010e18 <z_add_timeout>
 8010432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010436:	bf00      	nop
 8010438:	20001850 	.word	0x20001850
 801043c:	080170fb 	.word	0x080170fb
 8010440:	08017121 	.word	0x08017121
 8010444:	08016836 	.word	0x08016836
 8010448:	08017136 	.word	0x08017136
 801044c:	0801714e 	.word	0x0801714e
 8010450:	08017165 	.word	0x08017165
 8010454:	0801022d 	.word	0x0801022d

08010458 <z_pend_curr>:
{
 8010458:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
 801045a:	4b11      	ldr	r3, [pc, #68]	; (80104a0 <z_pend_curr+0x48>)
{
 801045c:	4604      	mov	r4, r0
	pending_current = _current;
 801045e:	6898      	ldr	r0, [r3, #8]
 8010460:	4b10      	ldr	r3, [pc, #64]	; (80104a4 <z_pend_curr+0x4c>)
{
 8010462:	460d      	mov	r5, r1
	pending_current = _current;
 8010464:	6018      	str	r0, [r3, #0]
{
 8010466:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8010468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801046c:	f7ff ff96 	bl	801039c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010470:	4620      	mov	r0, r4
 8010472:	f7fe fb4b 	bl	800eb0c <z_spin_unlock_valid>
 8010476:	b968      	cbnz	r0, 8010494 <z_pend_curr+0x3c>
 8010478:	4a0b      	ldr	r2, [pc, #44]	; (80104a8 <z_pend_curr+0x50>)
 801047a:	490c      	ldr	r1, [pc, #48]	; (80104ac <z_pend_curr+0x54>)
 801047c:	480c      	ldr	r0, [pc, #48]	; (80104b0 <z_pend_curr+0x58>)
 801047e:	23d0      	movs	r3, #208	; 0xd0
 8010480:	f001 ff12 	bl	80122a8 <assert_print>
 8010484:	480b      	ldr	r0, [pc, #44]	; (80104b4 <z_pend_curr+0x5c>)
 8010486:	4621      	mov	r1, r4
 8010488:	f001 ff0e 	bl	80122a8 <assert_print>
 801048c:	4806      	ldr	r0, [pc, #24]	; (80104a8 <z_pend_curr+0x50>)
 801048e:	21d0      	movs	r1, #208	; 0xd0
 8010490:	f001 ff03 	bl	801229a <assert_post_action>
 8010494:	4628      	mov	r0, r5
}
 8010496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801049a:	f7f3 bbfb 	b.w	8003c94 <arch_swap>
 801049e:	bf00      	nop
 80104a0:	20001818 	.word	0x20001818
 80104a4:	2000184c 	.word	0x2000184c
 80104a8:	080170fb 	.word	0x080170fb
 80104ac:	0801714e 	.word	0x0801714e
 80104b0:	08016836 	.word	0x08016836
 80104b4:	08017165 	.word	0x08017165

080104b8 <z_impl_k_thread_suspend>:
{
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
 80104bc:	3018      	adds	r0, #24
 80104be:	f000 fd7f 	bl	8010fc0 <z_abort_timeout>
	__asm__ volatile(
 80104c2:	f04f 0310 	mov.w	r3, #16
 80104c6:	f3ef 8611 	mrs	r6, BASEPRI
 80104ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80104ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80104d2:	4825      	ldr	r0, [pc, #148]	; (8010568 <z_impl_k_thread_suspend+0xb0>)
 80104d4:	f7fe fb0c 	bl	800eaf0 <z_spin_lock_valid>
 80104d8:	b968      	cbnz	r0, 80104f6 <z_impl_k_thread_suspend+0x3e>
 80104da:	4a24      	ldr	r2, [pc, #144]	; (801056c <z_impl_k_thread_suspend+0xb4>)
 80104dc:	4924      	ldr	r1, [pc, #144]	; (8010570 <z_impl_k_thread_suspend+0xb8>)
 80104de:	4825      	ldr	r0, [pc, #148]	; (8010574 <z_impl_k_thread_suspend+0xbc>)
 80104e0:	238e      	movs	r3, #142	; 0x8e
 80104e2:	f001 fee1 	bl	80122a8 <assert_print>
 80104e6:	4920      	ldr	r1, [pc, #128]	; (8010568 <z_impl_k_thread_suspend+0xb0>)
 80104e8:	4823      	ldr	r0, [pc, #140]	; (8010578 <z_impl_k_thread_suspend+0xc0>)
 80104ea:	f001 fedd 	bl	80122a8 <assert_print>
 80104ee:	481f      	ldr	r0, [pc, #124]	; (801056c <z_impl_k_thread_suspend+0xb4>)
 80104f0:	218e      	movs	r1, #142	; 0x8e
 80104f2:	f001 fed2 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80104f6:	481c      	ldr	r0, [pc, #112]	; (8010568 <z_impl_k_thread_suspend+0xb0>)
 80104f8:	f7fe fb18 	bl	800eb2c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
 80104fc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 8010500:	7b63      	ldrb	r3, [r4, #13]
 8010502:	2a00      	cmp	r2, #0
 8010504:	da06      	bge.n	8010514 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
 801050a:	481c      	ldr	r0, [pc, #112]	; (801057c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801050c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 801050e:	4621      	mov	r1, r4
 8010510:	f7ff fc06 	bl	800fd20 <z_priq_dumb_remove>
		update_cache(thread == _current);
 8010514:	4d1a      	ldr	r5, [pc, #104]	; (8010580 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8010516:	7b63      	ldrb	r3, [r4, #13]
 8010518:	68a8      	ldr	r0, [r5, #8]
 801051a:	f043 0310 	orr.w	r3, r3, #16
 801051e:	7363      	strb	r3, [r4, #13]
 8010520:	1b03      	subs	r3, r0, r4
 8010522:	4258      	negs	r0, r3
 8010524:	4158      	adcs	r0, r3
 8010526:	f7ff fc8b 	bl	800fe40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 801052a:	480f      	ldr	r0, [pc, #60]	; (8010568 <z_impl_k_thread_suspend+0xb0>)
 801052c:	f7fe faee 	bl	800eb0c <z_spin_unlock_valid>
 8010530:	b968      	cbnz	r0, 801054e <z_impl_k_thread_suspend+0x96>
 8010532:	4a0e      	ldr	r2, [pc, #56]	; (801056c <z_impl_k_thread_suspend+0xb4>)
 8010534:	4913      	ldr	r1, [pc, #76]	; (8010584 <z_impl_k_thread_suspend+0xcc>)
 8010536:	480f      	ldr	r0, [pc, #60]	; (8010574 <z_impl_k_thread_suspend+0xbc>)
 8010538:	23b9      	movs	r3, #185	; 0xb9
 801053a:	f001 feb5 	bl	80122a8 <assert_print>
 801053e:	490a      	ldr	r1, [pc, #40]	; (8010568 <z_impl_k_thread_suspend+0xb0>)
 8010540:	4811      	ldr	r0, [pc, #68]	; (8010588 <z_impl_k_thread_suspend+0xd0>)
 8010542:	f001 feb1 	bl	80122a8 <assert_print>
 8010546:	4809      	ldr	r0, [pc, #36]	; (801056c <z_impl_k_thread_suspend+0xb4>)
 8010548:	21b9      	movs	r1, #185	; 0xb9
 801054a:	f001 fea6 	bl	801229a <assert_post_action>
	__asm__ volatile(
 801054e:	f386 8811 	msr	BASEPRI, r6
 8010552:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8010556:	68ab      	ldr	r3, [r5, #8]
 8010558:	42a3      	cmp	r3, r4
 801055a:	d103      	bne.n	8010564 <z_impl_k_thread_suspend+0xac>
}
 801055c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8010560:	f004 bfa8 	b.w	80154b4 <z_reschedule_unlocked>
}
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	bf00      	nop
 8010568:	20001850 	.word	0x20001850
 801056c:	080170fb 	.word	0x080170fb
 8010570:	08017121 	.word	0x08017121
 8010574:	08016836 	.word	0x08016836
 8010578:	08017136 	.word	0x08017136
 801057c:	20001834 	.word	0x20001834
 8010580:	20001818 	.word	0x20001818
 8010584:	0801714e 	.word	0x0801714e
 8010588:	08017165 	.word	0x08017165

0801058c <k_sched_unlock>:
{
 801058c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801058e:	f04f 0310 	mov.w	r3, #16
 8010592:	f3ef 8511 	mrs	r5, BASEPRI
 8010596:	f383 8812 	msr	BASEPRI_MAX, r3
 801059a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 801059e:	482d      	ldr	r0, [pc, #180]	; (8010654 <k_sched_unlock+0xc8>)
 80105a0:	f7fe faa6 	bl	800eaf0 <z_spin_lock_valid>
 80105a4:	b968      	cbnz	r0, 80105c2 <k_sched_unlock+0x36>
 80105a6:	4a2c      	ldr	r2, [pc, #176]	; (8010658 <k_sched_unlock+0xcc>)
 80105a8:	492c      	ldr	r1, [pc, #176]	; (801065c <k_sched_unlock+0xd0>)
 80105aa:	482d      	ldr	r0, [pc, #180]	; (8010660 <k_sched_unlock+0xd4>)
 80105ac:	238e      	movs	r3, #142	; 0x8e
 80105ae:	f001 fe7b 	bl	80122a8 <assert_print>
 80105b2:	4928      	ldr	r1, [pc, #160]	; (8010654 <k_sched_unlock+0xc8>)
 80105b4:	482b      	ldr	r0, [pc, #172]	; (8010664 <k_sched_unlock+0xd8>)
 80105b6:	f001 fe77 	bl	80122a8 <assert_print>
 80105ba:	4827      	ldr	r0, [pc, #156]	; (8010658 <k_sched_unlock+0xcc>)
 80105bc:	218e      	movs	r1, #142	; 0x8e
 80105be:	f001 fe6c 	bl	801229a <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
 80105c2:	4c29      	ldr	r4, [pc, #164]	; (8010668 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
 80105c4:	4823      	ldr	r0, [pc, #140]	; (8010654 <k_sched_unlock+0xc8>)
 80105c6:	f7fe fab1 	bl	800eb2c <z_spin_lock_set_owner>
 80105ca:	68a2      	ldr	r2, [r4, #8]
 80105cc:	7bd2      	ldrb	r2, [r2, #15]
 80105ce:	b972      	cbnz	r2, 80105ee <k_sched_unlock+0x62>
 80105d0:	4926      	ldr	r1, [pc, #152]	; (801066c <k_sched_unlock+0xe0>)
 80105d2:	4a27      	ldr	r2, [pc, #156]	; (8010670 <k_sched_unlock+0xe4>)
 80105d4:	4822      	ldr	r0, [pc, #136]	; (8010660 <k_sched_unlock+0xd4>)
 80105d6:	f240 33bb 	movw	r3, #955	; 0x3bb
 80105da:	f001 fe65 	bl	80122a8 <assert_print>
 80105de:	4825      	ldr	r0, [pc, #148]	; (8010674 <k_sched_unlock+0xe8>)
 80105e0:	f001 fe62 	bl	80122a8 <assert_print>
 80105e4:	4822      	ldr	r0, [pc, #136]	; (8010670 <k_sched_unlock+0xe4>)
 80105e6:	f240 31bb 	movw	r1, #955	; 0x3bb
 80105ea:	f001 fe56 	bl	801229a <assert_post_action>
 80105ee:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
 80105f2:	b173      	cbz	r3, 8010612 <k_sched_unlock+0x86>
 80105f4:	4920      	ldr	r1, [pc, #128]	; (8010678 <k_sched_unlock+0xec>)
 80105f6:	4a1e      	ldr	r2, [pc, #120]	; (8010670 <k_sched_unlock+0xe4>)
 80105f8:	4819      	ldr	r0, [pc, #100]	; (8010660 <k_sched_unlock+0xd4>)
 80105fa:	f44f 736f 	mov.w	r3, #956	; 0x3bc
 80105fe:	f001 fe53 	bl	80122a8 <assert_print>
 8010602:	481c      	ldr	r0, [pc, #112]	; (8010674 <k_sched_unlock+0xe8>)
 8010604:	f001 fe50 	bl	80122a8 <assert_print>
 8010608:	4819      	ldr	r0, [pc, #100]	; (8010670 <k_sched_unlock+0xe4>)
 801060a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 801060e:	f001 fe44 	bl	801229a <assert_post_action>
		++_current->base.sched_locked;
 8010612:	68a2      	ldr	r2, [r4, #8]
 8010614:	7bd3      	ldrb	r3, [r2, #15]
 8010616:	3301      	adds	r3, #1
		update_cache(0);
 8010618:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 801061a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 801061c:	f7ff fc10 	bl	800fe40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010620:	480c      	ldr	r0, [pc, #48]	; (8010654 <k_sched_unlock+0xc8>)
 8010622:	f7fe fa73 	bl	800eb0c <z_spin_unlock_valid>
 8010626:	b968      	cbnz	r0, 8010644 <k_sched_unlock+0xb8>
 8010628:	4a0b      	ldr	r2, [pc, #44]	; (8010658 <k_sched_unlock+0xcc>)
 801062a:	4914      	ldr	r1, [pc, #80]	; (801067c <k_sched_unlock+0xf0>)
 801062c:	480c      	ldr	r0, [pc, #48]	; (8010660 <k_sched_unlock+0xd4>)
 801062e:	23b9      	movs	r3, #185	; 0xb9
 8010630:	f001 fe3a 	bl	80122a8 <assert_print>
 8010634:	4907      	ldr	r1, [pc, #28]	; (8010654 <k_sched_unlock+0xc8>)
 8010636:	4812      	ldr	r0, [pc, #72]	; (8010680 <k_sched_unlock+0xf4>)
 8010638:	f001 fe36 	bl	80122a8 <assert_print>
 801063c:	4806      	ldr	r0, [pc, #24]	; (8010658 <k_sched_unlock+0xcc>)
 801063e:	21b9      	movs	r1, #185	; 0xb9
 8010640:	f001 fe2b 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8010644:	f385 8811 	msr	BASEPRI, r5
 8010648:	f3bf 8f6f 	isb	sy
}
 801064c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
 8010650:	f004 bf30 	b.w	80154b4 <z_reschedule_unlocked>
 8010654:	20001850 	.word	0x20001850
 8010658:	080170fb 	.word	0x080170fb
 801065c:	08017121 	.word	0x08017121
 8010660:	08016836 	.word	0x08016836
 8010664:	08017136 	.word	0x08017136
 8010668:	20001818 	.word	0x20001818
 801066c:	08019e78 	.word	0x08019e78
 8010670:	08019df7 	.word	0x08019df7
 8010674:	08019487 	.word	0x08019487
 8010678:	08019b8c 	.word	0x08019b8c
 801067c:	0801714e 	.word	0x0801714e
 8010680:	08017165 	.word	0x08017165

08010684 <z_unpend1_no_timeout>:
{
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4604      	mov	r4, r0
	__asm__ volatile(
 8010688:	f04f 0310 	mov.w	r3, #16
 801068c:	f3ef 8511 	mrs	r5, BASEPRI
 8010690:	f383 8812 	msr	BASEPRI_MAX, r3
 8010694:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010698:	4819      	ldr	r0, [pc, #100]	; (8010700 <z_unpend1_no_timeout+0x7c>)
 801069a:	f7fe fa29 	bl	800eaf0 <z_spin_lock_valid>
 801069e:	b968      	cbnz	r0, 80106bc <z_unpend1_no_timeout+0x38>
 80106a0:	4a18      	ldr	r2, [pc, #96]	; (8010704 <z_unpend1_no_timeout+0x80>)
 80106a2:	4919      	ldr	r1, [pc, #100]	; (8010708 <z_unpend1_no_timeout+0x84>)
 80106a4:	4819      	ldr	r0, [pc, #100]	; (801070c <z_unpend1_no_timeout+0x88>)
 80106a6:	238e      	movs	r3, #142	; 0x8e
 80106a8:	f001 fdfe 	bl	80122a8 <assert_print>
 80106ac:	4914      	ldr	r1, [pc, #80]	; (8010700 <z_unpend1_no_timeout+0x7c>)
 80106ae:	4818      	ldr	r0, [pc, #96]	; (8010710 <z_unpend1_no_timeout+0x8c>)
 80106b0:	f001 fdfa 	bl	80122a8 <assert_print>
 80106b4:	4813      	ldr	r0, [pc, #76]	; (8010704 <z_unpend1_no_timeout+0x80>)
 80106b6:	218e      	movs	r1, #142	; 0x8e
 80106b8:	f001 fdef 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80106bc:	4810      	ldr	r0, [pc, #64]	; (8010700 <z_unpend1_no_timeout+0x7c>)
 80106be:	f7fe fa35 	bl	800eb2c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
 80106c2:	4620      	mov	r0, r4
 80106c4:	f004 ff00 	bl	80154c8 <z_priq_dumb_best>
		if (thread != NULL) {
 80106c8:	4604      	mov	r4, r0
 80106ca:	b108      	cbz	r0, 80106d0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
 80106cc:	f7ff fb4a 	bl	800fd64 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80106d0:	480b      	ldr	r0, [pc, #44]	; (8010700 <z_unpend1_no_timeout+0x7c>)
 80106d2:	f7fe fa1b 	bl	800eb0c <z_spin_unlock_valid>
 80106d6:	b968      	cbnz	r0, 80106f4 <z_unpend1_no_timeout+0x70>
 80106d8:	4a0a      	ldr	r2, [pc, #40]	; (8010704 <z_unpend1_no_timeout+0x80>)
 80106da:	490e      	ldr	r1, [pc, #56]	; (8010714 <z_unpend1_no_timeout+0x90>)
 80106dc:	480b      	ldr	r0, [pc, #44]	; (801070c <z_unpend1_no_timeout+0x88>)
 80106de:	23b9      	movs	r3, #185	; 0xb9
 80106e0:	f001 fde2 	bl	80122a8 <assert_print>
 80106e4:	4906      	ldr	r1, [pc, #24]	; (8010700 <z_unpend1_no_timeout+0x7c>)
 80106e6:	480c      	ldr	r0, [pc, #48]	; (8010718 <z_unpend1_no_timeout+0x94>)
 80106e8:	f001 fdde 	bl	80122a8 <assert_print>
 80106ec:	4805      	ldr	r0, [pc, #20]	; (8010704 <z_unpend1_no_timeout+0x80>)
 80106ee:	21b9      	movs	r1, #185	; 0xb9
 80106f0:	f001 fdd3 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80106f4:	f385 8811 	msr	BASEPRI, r5
 80106f8:	f3bf 8f6f 	isb	sy
}
 80106fc:	4620      	mov	r0, r4
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	20001850 	.word	0x20001850
 8010704:	080170fb 	.word	0x080170fb
 8010708:	08017121 	.word	0x08017121
 801070c:	08016836 	.word	0x08016836
 8010710:	08017136 	.word	0x08017136
 8010714:	0801714e 	.word	0x0801714e
 8010718:	08017165 	.word	0x08017165

0801071c <z_unpend_first_thread>:
{
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	4604      	mov	r4, r0
	__asm__ volatile(
 8010720:	f04f 0310 	mov.w	r3, #16
 8010724:	f3ef 8511 	mrs	r5, BASEPRI
 8010728:	f383 8812 	msr	BASEPRI_MAX, r3
 801072c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010730:	481b      	ldr	r0, [pc, #108]	; (80107a0 <z_unpend_first_thread+0x84>)
 8010732:	f7fe f9dd 	bl	800eaf0 <z_spin_lock_valid>
 8010736:	b968      	cbnz	r0, 8010754 <z_unpend_first_thread+0x38>
 8010738:	4a1a      	ldr	r2, [pc, #104]	; (80107a4 <z_unpend_first_thread+0x88>)
 801073a:	491b      	ldr	r1, [pc, #108]	; (80107a8 <z_unpend_first_thread+0x8c>)
 801073c:	481b      	ldr	r0, [pc, #108]	; (80107ac <z_unpend_first_thread+0x90>)
 801073e:	238e      	movs	r3, #142	; 0x8e
 8010740:	f001 fdb2 	bl	80122a8 <assert_print>
 8010744:	4916      	ldr	r1, [pc, #88]	; (80107a0 <z_unpend_first_thread+0x84>)
 8010746:	481a      	ldr	r0, [pc, #104]	; (80107b0 <z_unpend_first_thread+0x94>)
 8010748:	f001 fdae 	bl	80122a8 <assert_print>
 801074c:	4815      	ldr	r0, [pc, #84]	; (80107a4 <z_unpend_first_thread+0x88>)
 801074e:	218e      	movs	r1, #142	; 0x8e
 8010750:	f001 fda3 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010754:	4812      	ldr	r0, [pc, #72]	; (80107a0 <z_unpend_first_thread+0x84>)
 8010756:	f7fe f9e9 	bl	800eb2c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
 801075a:	4620      	mov	r0, r4
 801075c:	f004 feb4 	bl	80154c8 <z_priq_dumb_best>
		if (thread != NULL) {
 8010760:	4604      	mov	r4, r0
 8010762:	b128      	cbz	r0, 8010770 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
 8010764:	f7ff fafe 	bl	800fd64 <unpend_thread_no_timeout>
 8010768:	f104 0018 	add.w	r0, r4, #24
 801076c:	f000 fc28 	bl	8010fc0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010770:	480b      	ldr	r0, [pc, #44]	; (80107a0 <z_unpend_first_thread+0x84>)
 8010772:	f7fe f9cb 	bl	800eb0c <z_spin_unlock_valid>
 8010776:	b968      	cbnz	r0, 8010794 <z_unpend_first_thread+0x78>
 8010778:	4a0a      	ldr	r2, [pc, #40]	; (80107a4 <z_unpend_first_thread+0x88>)
 801077a:	490e      	ldr	r1, [pc, #56]	; (80107b4 <z_unpend_first_thread+0x98>)
 801077c:	480b      	ldr	r0, [pc, #44]	; (80107ac <z_unpend_first_thread+0x90>)
 801077e:	23b9      	movs	r3, #185	; 0xb9
 8010780:	f001 fd92 	bl	80122a8 <assert_print>
 8010784:	4906      	ldr	r1, [pc, #24]	; (80107a0 <z_unpend_first_thread+0x84>)
 8010786:	480c      	ldr	r0, [pc, #48]	; (80107b8 <z_unpend_first_thread+0x9c>)
 8010788:	f001 fd8e 	bl	80122a8 <assert_print>
 801078c:	4805      	ldr	r0, [pc, #20]	; (80107a4 <z_unpend_first_thread+0x88>)
 801078e:	21b9      	movs	r1, #185	; 0xb9
 8010790:	f001 fd83 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8010794:	f385 8811 	msr	BASEPRI, r5
 8010798:	f3bf 8f6f 	isb	sy
}
 801079c:	4620      	mov	r0, r4
 801079e:	bd38      	pop	{r3, r4, r5, pc}
 80107a0:	20001850 	.word	0x20001850
 80107a4:	080170fb 	.word	0x080170fb
 80107a8:	08017121 	.word	0x08017121
 80107ac:	08016836 	.word	0x08016836
 80107b0:	08017136 	.word	0x08017136
 80107b4:	0801714e 	.word	0x0801714e
 80107b8:	08017165 	.word	0x08017165

080107bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80107bc:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80107be:	2100      	movs	r1, #0
 80107c0:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80107c4:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80107c8:	4608      	mov	r0, r1
 80107ca:	f7ff b949 	b.w	800fa60 <k_sched_time_slice_set>
 80107ce:	bf00      	nop
 80107d0:	20001818 	.word	0x20001818

080107d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 80107d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
 80107da:	b173      	cbz	r3, 80107fa <z_impl_k_yield+0x26>
 80107dc:	4941      	ldr	r1, [pc, #260]	; (80108e4 <z_impl_k_yield+0x110>)
 80107de:	4a42      	ldr	r2, [pc, #264]	; (80108e8 <z_impl_k_yield+0x114>)
 80107e0:	4842      	ldr	r0, [pc, #264]	; (80108ec <z_impl_k_yield+0x118>)
 80107e2:	f240 5332 	movw	r3, #1330	; 0x532
 80107e6:	f001 fd5f 	bl	80122a8 <assert_print>
 80107ea:	4841      	ldr	r0, [pc, #260]	; (80108f0 <z_impl_k_yield+0x11c>)
 80107ec:	f001 fd5c 	bl	80122a8 <assert_print>
 80107f0:	483d      	ldr	r0, [pc, #244]	; (80108e8 <z_impl_k_yield+0x114>)
 80107f2:	f240 5132 	movw	r1, #1330	; 0x532
 80107f6:	f001 fd50 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80107fa:	f04f 0310 	mov.w	r3, #16
 80107fe:	f3ef 8611 	mrs	r6, BASEPRI
 8010802:	f383 8812 	msr	BASEPRI_MAX, r3
 8010806:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 801080a:	483a      	ldr	r0, [pc, #232]	; (80108f4 <z_impl_k_yield+0x120>)
 801080c:	f7fe f970 	bl	800eaf0 <z_spin_lock_valid>
 8010810:	b968      	cbnz	r0, 801082e <z_impl_k_yield+0x5a>
 8010812:	4a39      	ldr	r2, [pc, #228]	; (80108f8 <z_impl_k_yield+0x124>)
 8010814:	4939      	ldr	r1, [pc, #228]	; (80108fc <z_impl_k_yield+0x128>)
 8010816:	4835      	ldr	r0, [pc, #212]	; (80108ec <z_impl_k_yield+0x118>)
 8010818:	238e      	movs	r3, #142	; 0x8e
 801081a:	f001 fd45 	bl	80122a8 <assert_print>
 801081e:	4935      	ldr	r1, [pc, #212]	; (80108f4 <z_impl_k_yield+0x120>)
 8010820:	4837      	ldr	r0, [pc, #220]	; (8010900 <z_impl_k_yield+0x12c>)
 8010822:	f001 fd41 	bl	80122a8 <assert_print>
 8010826:	4834      	ldr	r0, [pc, #208]	; (80108f8 <z_impl_k_yield+0x124>)
 8010828:	218e      	movs	r1, #142	; 0x8e
 801082a:	f001 fd36 	bl	801229a <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 801082e:	4d35      	ldr	r5, [pc, #212]	; (8010904 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
 8010830:	4830      	ldr	r0, [pc, #192]	; (80108f4 <z_impl_k_yield+0x120>)
 8010832:	f7fe f97b 	bl	800eb2c <z_spin_lock_set_owner>
 8010836:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010838:	7b4b      	ldrb	r3, [r1, #13]
 801083a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801083e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8010840:	f105 001c 	add.w	r0, r5, #28
 8010844:	f7ff fa6c 	bl	800fd20 <z_priq_dumb_remove>
	}
	queue_thread(_current);
 8010848:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 801084a:	7b63      	ldrb	r3, [r4, #13]
 801084c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010850:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
 8010852:	4b2d      	ldr	r3, [pc, #180]	; (8010908 <z_impl_k_yield+0x134>)
 8010854:	429c      	cmp	r4, r3
 8010856:	d109      	bne.n	801086c <z_impl_k_yield+0x98>
 8010858:	492c      	ldr	r1, [pc, #176]	; (801090c <z_impl_k_yield+0x138>)
 801085a:	4824      	ldr	r0, [pc, #144]	; (80108ec <z_impl_k_yield+0x118>)
 801085c:	4a22      	ldr	r2, [pc, #136]	; (80108e8 <z_impl_k_yield+0x114>)
 801085e:	23ba      	movs	r3, #186	; 0xba
 8010860:	f001 fd22 	bl	80122a8 <assert_print>
 8010864:	4820      	ldr	r0, [pc, #128]	; (80108e8 <z_impl_k_yield+0x114>)
 8010866:	21ba      	movs	r1, #186	; 0xba
 8010868:	f001 fd17 	bl	801229a <assert_post_action>
	return list->head == list;
 801086c:	69eb      	ldr	r3, [r5, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801086e:	4828      	ldr	r0, [pc, #160]	; (8010910 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8010870:	6a29      	ldr	r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010872:	4283      	cmp	r3, r0
 8010874:	bf08      	it	eq
 8010876:	2300      	moveq	r3, #0
 8010878:	2b00      	cmp	r3, #0
 801087a:	bf38      	it	cc
 801087c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801087e:	b35b      	cbz	r3, 80108d8 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
 8010880:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8010884:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8010888:	4297      	cmp	r7, r2
 801088a:	d021      	beq.n	80108d0 <z_impl_k_yield+0xfc>
		return b2 - b1;
 801088c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
 801088e:	2a00      	cmp	r2, #0
 8010890:	dd1e      	ble.n	80108d0 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
 8010892:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8010894:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8010898:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 801089a:	605c      	str	r4, [r3, #4]
	update_cache(1);
 801089c:	2001      	movs	r0, #1
 801089e:	f7ff facf 	bl	800fe40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80108a2:	4814      	ldr	r0, [pc, #80]	; (80108f4 <z_impl_k_yield+0x120>)
 80108a4:	f7fe f932 	bl	800eb0c <z_spin_unlock_valid>
 80108a8:	b968      	cbnz	r0, 80108c6 <z_impl_k_yield+0xf2>
 80108aa:	4a13      	ldr	r2, [pc, #76]	; (80108f8 <z_impl_k_yield+0x124>)
 80108ac:	4919      	ldr	r1, [pc, #100]	; (8010914 <z_impl_k_yield+0x140>)
 80108ae:	480f      	ldr	r0, [pc, #60]	; (80108ec <z_impl_k_yield+0x118>)
 80108b0:	23d0      	movs	r3, #208	; 0xd0
 80108b2:	f001 fcf9 	bl	80122a8 <assert_print>
 80108b6:	490f      	ldr	r1, [pc, #60]	; (80108f4 <z_impl_k_yield+0x120>)
 80108b8:	4817      	ldr	r0, [pc, #92]	; (8010918 <z_impl_k_yield+0x144>)
 80108ba:	f001 fcf5 	bl	80122a8 <assert_print>
 80108be:	480e      	ldr	r0, [pc, #56]	; (80108f8 <z_impl_k_yield+0x124>)
 80108c0:	21d0      	movs	r1, #208	; 0xd0
 80108c2:	f001 fcea 	bl	801229a <assert_post_action>
 80108c6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
 80108c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80108cc:	f7f3 b9e2 	b.w	8003c94 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80108d0:	428b      	cmp	r3, r1
 80108d2:	d001      	beq.n	80108d8 <z_impl_k_yield+0x104>
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	e7d2      	b.n	801087e <z_impl_k_yield+0xaa>
	node->prev = tail;
 80108d8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
 80108dc:	600c      	str	r4, [r1, #0]
	list->tail = node;
 80108de:	622c      	str	r4, [r5, #32]
}
 80108e0:	e7dc      	b.n	801089c <z_impl_k_yield+0xc8>
 80108e2:	bf00      	nop
 80108e4:	08019b8c 	.word	0x08019b8c
 80108e8:	08019df7 	.word	0x08019df7
 80108ec:	08016836 	.word	0x08016836
 80108f0:	08019487 	.word	0x08019487
 80108f4:	20001850 	.word	0x20001850
 80108f8:	080170fb 	.word	0x080170fb
 80108fc:	08017121 	.word	0x08017121
 8010900:	08017136 	.word	0x08017136
 8010904:	20001818 	.word	0x20001818
 8010908:	20001370 	.word	0x20001370
 801090c:	08019e19 	.word	0x08019e19
 8010910:	20001834 	.word	0x20001834
 8010914:	0801714e 	.word	0x0801714e
 8010918:	08017165 	.word	0x08017165

0801091c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
 801091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010920:	4604      	mov	r4, r0
 8010922:	460d      	mov	r5, r1
 8010924:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
 8010928:	b173      	cbz	r3, 8010948 <z_tick_sleep+0x2c>
 801092a:	4945      	ldr	r1, [pc, #276]	; (8010a40 <z_tick_sleep+0x124>)
 801092c:	4a45      	ldr	r2, [pc, #276]	; (8010a44 <z_tick_sleep+0x128>)
 801092e:	4846      	ldr	r0, [pc, #280]	; (8010a48 <z_tick_sleep+0x12c>)
 8010930:	f240 534e 	movw	r3, #1358	; 0x54e
 8010934:	f001 fcb8 	bl	80122a8 <assert_print>
 8010938:	4844      	ldr	r0, [pc, #272]	; (8010a4c <z_tick_sleep+0x130>)
 801093a:	f001 fcb5 	bl	80122a8 <assert_print>
 801093e:	4841      	ldr	r0, [pc, #260]	; (8010a44 <z_tick_sleep+0x128>)
 8010940:	f240 514e 	movw	r1, #1358	; 0x54e
 8010944:	f001 fca9 	bl	801229a <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8010948:	ea54 0305 	orrs.w	r3, r4, r5
 801094c:	d104      	bne.n	8010958 <z_tick_sleep+0x3c>
	z_impl_k_yield();
 801094e:	f7ff ff41 	bl	80107d4 <z_impl_k_yield>
		k_yield();
		return 0;
 8010952:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
 8010954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
 8010958:	f06f 0301 	mvn.w	r3, #1
 801095c:	1b1e      	subs	r6, r3, r4
 801095e:	f04f 33ff 	mov.w	r3, #4294967295
 8010962:	eb63 0705 	sbc.w	r7, r3, r5
 8010966:	2e01      	cmp	r6, #1
 8010968:	f177 0300 	sbcs.w	r3, r7, #0
 801096c:	da64      	bge.n	8010a38 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 801096e:	f004 fdc5 	bl	80154fc <sys_clock_tick_get_32>
 8010972:	1906      	adds	r6, r0, r4
 8010974:	f04f 0310 	mov.w	r3, #16
 8010978:	f3ef 8811 	mrs	r8, BASEPRI
 801097c:	f383 8812 	msr	BASEPRI_MAX, r3
 8010980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010984:	4832      	ldr	r0, [pc, #200]	; (8010a50 <z_tick_sleep+0x134>)
 8010986:	f7fe f8b3 	bl	800eaf0 <z_spin_lock_valid>
 801098a:	b968      	cbnz	r0, 80109a8 <z_tick_sleep+0x8c>
 801098c:	4a31      	ldr	r2, [pc, #196]	; (8010a54 <z_tick_sleep+0x138>)
 801098e:	4932      	ldr	r1, [pc, #200]	; (8010a58 <z_tick_sleep+0x13c>)
 8010990:	482d      	ldr	r0, [pc, #180]	; (8010a48 <z_tick_sleep+0x12c>)
 8010992:	238e      	movs	r3, #142	; 0x8e
 8010994:	f001 fc88 	bl	80122a8 <assert_print>
 8010998:	492d      	ldr	r1, [pc, #180]	; (8010a50 <z_tick_sleep+0x134>)
 801099a:	4830      	ldr	r0, [pc, #192]	; (8010a5c <z_tick_sleep+0x140>)
 801099c:	f001 fc84 	bl	80122a8 <assert_print>
 80109a0:	482c      	ldr	r0, [pc, #176]	; (8010a54 <z_tick_sleep+0x138>)
 80109a2:	218e      	movs	r1, #142	; 0x8e
 80109a4:	f001 fc79 	bl	801229a <assert_post_action>
	pending_current = _current;
 80109a8:	4f2d      	ldr	r7, [pc, #180]	; (8010a60 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
 80109aa:	4829      	ldr	r0, [pc, #164]	; (8010a50 <z_tick_sleep+0x134>)
 80109ac:	f7fe f8be 	bl	800eb2c <z_spin_lock_set_owner>
 80109b0:	4b2c      	ldr	r3, [pc, #176]	; (8010a64 <z_tick_sleep+0x148>)
 80109b2:	68b8      	ldr	r0, [r7, #8]
 80109b4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80109b6:	f7ff fc93 	bl	80102e0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80109ba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80109bc:	492a      	ldr	r1, [pc, #168]	; (8010a68 <z_tick_sleep+0x14c>)
 80109be:	4622      	mov	r2, r4
 80109c0:	462b      	mov	r3, r5
 80109c2:	3018      	adds	r0, #24
 80109c4:	f000 fa28 	bl	8010e18 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80109c8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80109ca:	4821      	ldr	r0, [pc, #132]	; (8010a50 <z_tick_sleep+0x134>)
 80109cc:	7b53      	ldrb	r3, [r2, #13]
 80109ce:	f043 0310 	orr.w	r3, r3, #16
 80109d2:	7353      	strb	r3, [r2, #13]
 80109d4:	f7fe f89a 	bl	800eb0c <z_spin_unlock_valid>
 80109d8:	b968      	cbnz	r0, 80109f6 <z_tick_sleep+0xda>
 80109da:	4a1e      	ldr	r2, [pc, #120]	; (8010a54 <z_tick_sleep+0x138>)
 80109dc:	4923      	ldr	r1, [pc, #140]	; (8010a6c <z_tick_sleep+0x150>)
 80109de:	481a      	ldr	r0, [pc, #104]	; (8010a48 <z_tick_sleep+0x12c>)
 80109e0:	23d0      	movs	r3, #208	; 0xd0
 80109e2:	f001 fc61 	bl	80122a8 <assert_print>
 80109e6:	491a      	ldr	r1, [pc, #104]	; (8010a50 <z_tick_sleep+0x134>)
 80109e8:	4821      	ldr	r0, [pc, #132]	; (8010a70 <z_tick_sleep+0x154>)
 80109ea:	f001 fc5d 	bl	80122a8 <assert_print>
 80109ee:	4819      	ldr	r0, [pc, #100]	; (8010a54 <z_tick_sleep+0x138>)
 80109f0:	21d0      	movs	r1, #208	; 0xd0
 80109f2:	f001 fc52 	bl	801229a <assert_post_action>
 80109f6:	4640      	mov	r0, r8
 80109f8:	f7f3 f94c 	bl	8003c94 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	7b5b      	ldrb	r3, [r3, #13]
 8010a00:	06db      	lsls	r3, r3, #27
 8010a02:	d50e      	bpl.n	8010a22 <z_tick_sleep+0x106>
 8010a04:	491b      	ldr	r1, [pc, #108]	; (8010a74 <z_tick_sleep+0x158>)
 8010a06:	4a0f      	ldr	r2, [pc, #60]	; (8010a44 <z_tick_sleep+0x128>)
 8010a08:	480f      	ldr	r0, [pc, #60]	; (8010a48 <z_tick_sleep+0x12c>)
 8010a0a:	f240 536f 	movw	r3, #1391	; 0x56f
 8010a0e:	f001 fc4b 	bl	80122a8 <assert_print>
 8010a12:	480e      	ldr	r0, [pc, #56]	; (8010a4c <z_tick_sleep+0x130>)
 8010a14:	f001 fc48 	bl	80122a8 <assert_print>
 8010a18:	480a      	ldr	r0, [pc, #40]	; (8010a44 <z_tick_sleep+0x128>)
 8010a1a:	f240 516f 	movw	r1, #1391	; 0x56f
 8010a1e:	f001 fc3c 	bl	801229a <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8010a22:	f004 fd6b 	bl	80154fc <sys_clock_tick_get_32>
 8010a26:	1a30      	subs	r0, r6, r0
 8010a28:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
 8010a2c:	2801      	cmp	r0, #1
 8010a2e:	f171 0300 	sbcs.w	r3, r1, #0
 8010a32:	bfb8      	it	lt
 8010a34:	2000      	movlt	r0, #0
 8010a36:	e78d      	b.n	8010954 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8010a38:	f06f 0601 	mvn.w	r6, #1
 8010a3c:	1b36      	subs	r6, r6, r4
 8010a3e:	e799      	b.n	8010974 <z_tick_sleep+0x58>
 8010a40:	08019b8c 	.word	0x08019b8c
 8010a44:	08019df7 	.word	0x08019df7
 8010a48:	08016836 	.word	0x08016836
 8010a4c:	08019487 	.word	0x08019487
 8010a50:	20001850 	.word	0x20001850
 8010a54:	080170fb 	.word	0x080170fb
 8010a58:	08017121 	.word	0x08017121
 8010a5c:	08017136 	.word	0x08017136
 8010a60:	20001818 	.word	0x20001818
 8010a64:	2000184c 	.word	0x2000184c
 8010a68:	0801022d 	.word	0x0801022d
 8010a6c:	0801714e 	.word	0x0801714e
 8010a70:	08017165 	.word	0x08017165
 8010a74:	08019ea9 	.word	0x08019ea9

08010a78 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	460d      	mov	r5, r1
 8010a7e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
 8010a82:	b173      	cbz	r3, 8010aa2 <z_impl_k_sleep+0x2a>
 8010a84:	4912      	ldr	r1, [pc, #72]	; (8010ad0 <z_impl_k_sleep+0x58>)
 8010a86:	4a13      	ldr	r2, [pc, #76]	; (8010ad4 <z_impl_k_sleep+0x5c>)
 8010a88:	4813      	ldr	r0, [pc, #76]	; (8010ad8 <z_impl_k_sleep+0x60>)
 8010a8a:	f240 537e 	movw	r3, #1406	; 0x57e
 8010a8e:	f001 fc0b 	bl	80122a8 <assert_print>
 8010a92:	4812      	ldr	r0, [pc, #72]	; (8010adc <z_impl_k_sleep+0x64>)
 8010a94:	f001 fc08 	bl	80122a8 <assert_print>
 8010a98:	480e      	ldr	r0, [pc, #56]	; (8010ad4 <z_impl_k_sleep+0x5c>)
 8010a9a:	f240 517e 	movw	r1, #1406	; 0x57e
 8010a9e:	f001 fbfc 	bl	801229a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010aa2:	1c6b      	adds	r3, r5, #1
 8010aa4:	bf08      	it	eq
 8010aa6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8010aaa:	d106      	bne.n	8010aba <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
 8010aac:	4b0c      	ldr	r3, [pc, #48]	; (8010ae0 <z_impl_k_sleep+0x68>)
 8010aae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8010ab0:	f7ff fd02 	bl	80104b8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8010ab8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
 8010aba:	4629      	mov	r1, r5
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff ff2d 	bl	801091c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8010ac2:	220a      	movs	r2, #10
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	17c1      	asrs	r1, r0, #31
 8010ac8:	f7ef fd22 	bl	8000510 <__aeabi_uldivmod>
	return ret;
 8010acc:	e7f4      	b.n	8010ab8 <z_impl_k_sleep+0x40>
 8010ace:	bf00      	nop
 8010ad0:	08019b8c 	.word	0x08019b8c
 8010ad4:	08019df7 	.word	0x08019df7
 8010ad8:	08016836 	.word	0x08016836
 8010adc:	08019487 	.word	0x08019487
 8010ae0:	20001818 	.word	0x20001818

08010ae4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8010ae4:	4b01      	ldr	r3, [pc, #4]	; (8010aec <z_impl_z_current_get+0x8>)
 8010ae6:	6898      	ldr	r0, [r3, #8]
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop
 8010aec:	20001818 	.word	0x20001818

08010af0 <z_impl_k_is_preempt_thread>:
 8010af0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8010af4:	b93b      	cbnz	r3, 8010b06 <z_impl_k_is_preempt_thread+0x16>
 8010af6:	4b05      	ldr	r3, [pc, #20]	; (8010b0c <z_impl_k_is_preempt_thread+0x1c>)
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	89d8      	ldrh	r0, [r3, #14]
 8010afc:	287f      	cmp	r0, #127	; 0x7f
 8010afe:	bf8c      	ite	hi
 8010b00:	2000      	movhi	r0, #0
 8010b02:	2001      	movls	r0, #1
 8010b04:	4770      	bx	lr
 8010b06:	2000      	movs	r0, #0
}
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	20001818 	.word	0x20001818

08010b10 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8010b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b14:	4604      	mov	r4, r0
 8010b16:	f04f 0310 	mov.w	r3, #16
 8010b1a:	f3ef 8611 	mrs	r6, BASEPRI
 8010b1e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010b22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010b26:	4848      	ldr	r0, [pc, #288]	; (8010c48 <z_thread_abort+0x138>)
 8010b28:	f7fd ffe2 	bl	800eaf0 <z_spin_lock_valid>
 8010b2c:	b968      	cbnz	r0, 8010b4a <z_thread_abort+0x3a>
 8010b2e:	4a47      	ldr	r2, [pc, #284]	; (8010c4c <z_thread_abort+0x13c>)
 8010b30:	4947      	ldr	r1, [pc, #284]	; (8010c50 <z_thread_abort+0x140>)
 8010b32:	4848      	ldr	r0, [pc, #288]	; (8010c54 <z_thread_abort+0x144>)
 8010b34:	238e      	movs	r3, #142	; 0x8e
 8010b36:	f001 fbb7 	bl	80122a8 <assert_print>
 8010b3a:	4943      	ldr	r1, [pc, #268]	; (8010c48 <z_thread_abort+0x138>)
 8010b3c:	4846      	ldr	r0, [pc, #280]	; (8010c58 <z_thread_abort+0x148>)
 8010b3e:	f001 fbb3 	bl	80122a8 <assert_print>
 8010b42:	4842      	ldr	r0, [pc, #264]	; (8010c4c <z_thread_abort+0x13c>)
 8010b44:	218e      	movs	r1, #142	; 0x8e
 8010b46:	f001 fba8 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010b4a:	483f      	ldr	r0, [pc, #252]	; (8010c48 <z_thread_abort+0x138>)
 8010b4c:	f7fd ffee 	bl	800eb2c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8010b50:	7b63      	ldrb	r3, [r4, #13]
 8010b52:	071a      	lsls	r2, r3, #28
 8010b54:	d517      	bpl.n	8010b86 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010b56:	483c      	ldr	r0, [pc, #240]	; (8010c48 <z_thread_abort+0x138>)
 8010b58:	f7fd ffd8 	bl	800eb0c <z_spin_unlock_valid>
 8010b5c:	b968      	cbnz	r0, 8010b7a <z_thread_abort+0x6a>
 8010b5e:	4a3b      	ldr	r2, [pc, #236]	; (8010c4c <z_thread_abort+0x13c>)
 8010b60:	493e      	ldr	r1, [pc, #248]	; (8010c5c <z_thread_abort+0x14c>)
 8010b62:	483c      	ldr	r0, [pc, #240]	; (8010c54 <z_thread_abort+0x144>)
 8010b64:	23b9      	movs	r3, #185	; 0xb9
 8010b66:	f001 fb9f 	bl	80122a8 <assert_print>
 8010b6a:	4937      	ldr	r1, [pc, #220]	; (8010c48 <z_thread_abort+0x138>)
 8010b6c:	483c      	ldr	r0, [pc, #240]	; (8010c60 <z_thread_abort+0x150>)
 8010b6e:	f001 fb9b 	bl	80122a8 <assert_print>
 8010b72:	4836      	ldr	r0, [pc, #216]	; (8010c4c <z_thread_abort+0x13c>)
 8010b74:	21b9      	movs	r1, #185	; 0xb9
 8010b76:	f001 fb90 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8010b7a:	f386 8811 	msr	BASEPRI, r6
 8010b7e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8010b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010b86:	f023 0220 	bic.w	r2, r3, #32
 8010b8a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8010b8e:	09d2      	lsrs	r2, r2, #7
 8010b90:	d142      	bne.n	8010c18 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010b92:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
 8010b94:	68a3      	ldr	r3, [r4, #8]
 8010b96:	b113      	cbz	r3, 8010b9e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f7ff f8e3 	bl	800fd64 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8010b9e:	f104 0018 	add.w	r0, r4, #24
 8010ba2:	f000 fa0d 	bl	8010fc0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8010ba6:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8010baa:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8010bae:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010bb0:	42bd      	cmp	r5, r7
 8010bb2:	d001      	beq.n	8010bb8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8010bb4:	2d00      	cmp	r5, #0
 8010bb6:	d139      	bne.n	8010c2c <z_thread_abort+0x11c>
		update_cache(1);
 8010bb8:	2001      	movs	r0, #1
 8010bba:	f7ff f941 	bl	800fe40 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8010bbe:	4b29      	ldr	r3, [pc, #164]	; (8010c64 <z_thread_abort+0x154>)
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	42a3      	cmp	r3, r4
 8010bc4:	d1c7      	bne.n	8010b56 <z_thread_abort+0x46>
 8010bc6:	f3ef 8305 	mrs	r3, IPSR
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1c3      	bne.n	8010b56 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010bce:	481e      	ldr	r0, [pc, #120]	; (8010c48 <z_thread_abort+0x138>)
 8010bd0:	f7fd ff9c 	bl	800eb0c <z_spin_unlock_valid>
 8010bd4:	b968      	cbnz	r0, 8010bf2 <z_thread_abort+0xe2>
 8010bd6:	4a1d      	ldr	r2, [pc, #116]	; (8010c4c <z_thread_abort+0x13c>)
 8010bd8:	4920      	ldr	r1, [pc, #128]	; (8010c5c <z_thread_abort+0x14c>)
 8010bda:	481e      	ldr	r0, [pc, #120]	; (8010c54 <z_thread_abort+0x144>)
 8010bdc:	23d0      	movs	r3, #208	; 0xd0
 8010bde:	f001 fb63 	bl	80122a8 <assert_print>
 8010be2:	4919      	ldr	r1, [pc, #100]	; (8010c48 <z_thread_abort+0x138>)
 8010be4:	481e      	ldr	r0, [pc, #120]	; (8010c60 <z_thread_abort+0x150>)
 8010be6:	f001 fb5f 	bl	80122a8 <assert_print>
 8010bea:	4818      	ldr	r0, [pc, #96]	; (8010c4c <z_thread_abort+0x13c>)
 8010bec:	21d0      	movs	r1, #208	; 0xd0
 8010bee:	f001 fb54 	bl	801229a <assert_post_action>
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7f3 f84e 	bl	8003c94 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
 8010bf8:	4a1b      	ldr	r2, [pc, #108]	; (8010c68 <z_thread_abort+0x158>)
 8010bfa:	491c      	ldr	r1, [pc, #112]	; (8010c6c <z_thread_abort+0x15c>)
 8010bfc:	4815      	ldr	r0, [pc, #84]	; (8010c54 <z_thread_abort+0x144>)
 8010bfe:	f240 63a1 	movw	r3, #1697	; 0x6a1
 8010c02:	f001 fb51 	bl	80122a8 <assert_print>
 8010c06:	481a      	ldr	r0, [pc, #104]	; (8010c70 <z_thread_abort+0x160>)
 8010c08:	f001 fb4e 	bl	80122a8 <assert_print>
 8010c0c:	4816      	ldr	r0, [pc, #88]	; (8010c68 <z_thread_abort+0x158>)
 8010c0e:	f240 61a1 	movw	r1, #1697	; 0x6a1
 8010c12:	f001 fb42 	bl	801229a <assert_post_action>
 8010c16:	e79e      	b.n	8010b56 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010c18:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8010c1c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
 8010c20:	4814      	ldr	r0, [pc, #80]	; (8010c74 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010c22:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8010c24:	4621      	mov	r1, r4
 8010c26:	f7ff f87b 	bl	800fd20 <z_priq_dumb_remove>
}
 8010c2a:	e7b3      	b.n	8010b94 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	f7ff f899 	bl	800fd64 <unpend_thread_no_timeout>
 8010c32:	f105 0018 	add.w	r0, r5, #24
 8010c36:	f000 f9c3 	bl	8010fc0 <z_abort_timeout>
 8010c3a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f7ff fa06 	bl	8010050 <ready_thread>
 8010c44:	e7b3      	b.n	8010bae <z_thread_abort+0x9e>
 8010c46:	bf00      	nop
 8010c48:	20001850 	.word	0x20001850
 8010c4c:	080170fb 	.word	0x080170fb
 8010c50:	08017121 	.word	0x08017121
 8010c54:	08016836 	.word	0x08016836
 8010c58:	08017136 	.word	0x08017136
 8010c5c:	0801714e 	.word	0x0801714e
 8010c60:	08017165 	.word	0x08017165
 8010c64:	20001818 	.word	0x20001818
 8010c68:	08019df7 	.word	0x08019df7
 8010c6c:	080169eb 	.word	0x080169eb
 8010c70:	08019ee9 	.word	0x08019ee9
 8010c74:	20001834 	.word	0x20001834

08010c78 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	460e      	mov	r6, r1
 8010c7e:	4615      	mov	r5, r2
	__asm__ volatile(
 8010c80:	f04f 0310 	mov.w	r3, #16
 8010c84:	f3ef 8711 	mrs	r7, BASEPRI
 8010c88:	f383 8812 	msr	BASEPRI_MAX, r3
 8010c8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010c90:	481e      	ldr	r0, [pc, #120]	; (8010d0c <z_sched_wake+0x94>)
 8010c92:	f7fd ff2d 	bl	800eaf0 <z_spin_lock_valid>
 8010c96:	b968      	cbnz	r0, 8010cb4 <z_sched_wake+0x3c>
 8010c98:	4a1d      	ldr	r2, [pc, #116]	; (8010d10 <z_sched_wake+0x98>)
 8010c9a:	491e      	ldr	r1, [pc, #120]	; (8010d14 <z_sched_wake+0x9c>)
 8010c9c:	481e      	ldr	r0, [pc, #120]	; (8010d18 <z_sched_wake+0xa0>)
 8010c9e:	238e      	movs	r3, #142	; 0x8e
 8010ca0:	f001 fb02 	bl	80122a8 <assert_print>
 8010ca4:	4919      	ldr	r1, [pc, #100]	; (8010d0c <z_sched_wake+0x94>)
 8010ca6:	481d      	ldr	r0, [pc, #116]	; (8010d1c <z_sched_wake+0xa4>)
 8010ca8:	f001 fafe 	bl	80122a8 <assert_print>
 8010cac:	4818      	ldr	r0, [pc, #96]	; (8010d10 <z_sched_wake+0x98>)
 8010cae:	218e      	movs	r1, #142	; 0x8e
 8010cb0:	f001 faf3 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010cb4:	4815      	ldr	r0, [pc, #84]	; (8010d0c <z_sched_wake+0x94>)
 8010cb6:	f7fd ff39 	bl	800eb2c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f004 fc04 	bl	80154c8 <z_priq_dumb_best>

		if (thread != NULL) {
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	b158      	cbz	r0, 8010cdc <z_sched_wake+0x64>
 8010cc4:	67c6      	str	r6, [r0, #124]	; 0x7c
 8010cc6:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
 8010cc8:	f7ff f84c 	bl	800fd64 <unpend_thread_no_timeout>
 8010ccc:	f104 0018 	add.w	r0, r4, #24
 8010cd0:	f000 f976 	bl	8010fc0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	f7ff f9bb 	bl	8010050 <ready_thread>
			ret = true;
 8010cda:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010cdc:	480b      	ldr	r0, [pc, #44]	; (8010d0c <z_sched_wake+0x94>)
 8010cde:	f7fd ff15 	bl	800eb0c <z_spin_unlock_valid>
 8010ce2:	b968      	cbnz	r0, 8010d00 <z_sched_wake+0x88>
 8010ce4:	4a0a      	ldr	r2, [pc, #40]	; (8010d10 <z_sched_wake+0x98>)
 8010ce6:	490e      	ldr	r1, [pc, #56]	; (8010d20 <z_sched_wake+0xa8>)
 8010ce8:	480b      	ldr	r0, [pc, #44]	; (8010d18 <z_sched_wake+0xa0>)
 8010cea:	23b9      	movs	r3, #185	; 0xb9
 8010cec:	f001 fadc 	bl	80122a8 <assert_print>
 8010cf0:	4906      	ldr	r1, [pc, #24]	; (8010d0c <z_sched_wake+0x94>)
 8010cf2:	480c      	ldr	r0, [pc, #48]	; (8010d24 <z_sched_wake+0xac>)
 8010cf4:	f001 fad8 	bl	80122a8 <assert_print>
 8010cf8:	4805      	ldr	r0, [pc, #20]	; (8010d10 <z_sched_wake+0x98>)
 8010cfa:	21b9      	movs	r1, #185	; 0xb9
 8010cfc:	f001 facd 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8010d00:	f387 8811 	msr	BASEPRI, r7
 8010d04:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 8010d08:	4620      	mov	r0, r4
 8010d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d0c:	20001850 	.word	0x20001850
 8010d10:	080170fb 	.word	0x080170fb
 8010d14:	08017121 	.word	0x08017121
 8010d18:	08016836 	.word	0x08016836
 8010d1c:	08017136 	.word	0x08017136
 8010d20:	0801714e 	.word	0x0801714e
 8010d24:	08017165 	.word	0x08017165

08010d28 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8010d28:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8010d2a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8010d2e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8010d30:	e9cd 6700 	strd	r6, r7, [sp]
 8010d34:	f7ff fb90 	bl	8010458 <z_pend_curr>

	if (data != NULL) {
 8010d38:	b11c      	cbz	r4, 8010d42 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 8010d3a:	4b03      	ldr	r3, [pc, #12]	; (8010d48 <z_sched_wait+0x20>)
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8010d42:	b002      	add	sp, #8
 8010d44:	bdd0      	pop	{r4, r6, r7, pc}
 8010d46:	bf00      	nop
 8010d48:	20001818 	.word	0x20001818

08010d4c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8010d4c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8010d4e:	4806      	ldr	r0, [pc, #24]	; (8010d68 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8010d50:	4a06      	ldr	r2, [pc, #24]	; (8010d6c <z_data_copy+0x20>)
 8010d52:	4907      	ldr	r1, [pc, #28]	; (8010d70 <z_data_copy+0x24>)
 8010d54:	1a12      	subs	r2, r2, r0
 8010d56:	f004 fafb 	bl	8015350 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8010d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8010d5e:	4a05      	ldr	r2, [pc, #20]	; (8010d74 <z_data_copy+0x28>)
 8010d60:	4905      	ldr	r1, [pc, #20]	; (8010d78 <z_data_copy+0x2c>)
 8010d62:	4806      	ldr	r0, [pc, #24]	; (8010d7c <z_data_copy+0x30>)
 8010d64:	f004 baf4 	b.w	8015350 <z_early_memcpy>
 8010d68:	20000000 	.word	0x20000000
 8010d6c:	20000778 	.word	0x20000778
 8010d70:	0801a218 	.word	0x0801a218
 8010d74:	00000000 	.word	0x00000000
 8010d78:	0801a218 	.word	0x0801a218
 8010d7c:	20000000 	.word	0x20000000

08010d80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8010d80:	4b03      	ldr	r3, [pc, #12]	; (8010d90 <elapsed+0x10>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	b90b      	cbnz	r3, 8010d8a <elapsed+0xa>
 8010d86:	f7fc bfbf 	b.w	800dd08 <sys_clock_elapsed>
}
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	2000185c 	.word	0x2000185c

08010d94 <next_timeout>:

static int32_t next_timeout(void)
{
 8010d94:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8010d96:	4b11      	ldr	r3, [pc, #68]	; (8010ddc <next_timeout+0x48>)
 8010d98:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010d9a:	429c      	cmp	r4, r3
 8010d9c:	bf08      	it	eq
 8010d9e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8010da0:	f7ff ffee 	bl	8010d80 <elapsed>
 8010da4:	4605      	mov	r5, r0
	int32_t ret;

	if ((to == NULL) ||
 8010da6:	b1ac      	cbz	r4, 8010dd4 <next_timeout+0x40>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8010da8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8010dac:	1b40      	subs	r0, r0, r5
 8010dae:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	if ((to == NULL) ||
 8010db2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8010db6:	f171 0300 	sbcs.w	r3, r1, #0
 8010dba:	da0b      	bge.n	8010dd4 <next_timeout+0x40>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f171 0300 	sbcs.w	r3, r1, #0
 8010dc2:	da00      	bge.n	8010dc6 <next_timeout+0x32>
 8010dc4:	2000      	movs	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8010dc6:	4b06      	ldr	r3, [pc, #24]	; (8010de0 <next_timeout+0x4c>)
 8010dc8:	691b      	ldr	r3, [r3, #16]
 8010dca:	b113      	cbz	r3, 8010dd2 <next_timeout+0x3e>
 8010dcc:	4298      	cmp	r0, r3
 8010dce:	bfa8      	it	ge
 8010dd0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8010dd2:	bd38      	pop	{r3, r4, r5, pc}
		ret = MAX_WAIT;
 8010dd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010dd8:	e7f5      	b.n	8010dc6 <next_timeout+0x32>
 8010dda:	bf00      	nop
 8010ddc:	200003e0 	.word	0x200003e0
 8010de0:	20001818 	.word	0x20001818

08010de4 <remove_timeout>:
{
 8010de4:	b530      	push	{r4, r5, lr}
 8010de6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8010de8:	b168      	cbz	r0, 8010e06 <remove_timeout+0x22>
 8010dea:	4a0a      	ldr	r2, [pc, #40]	; (8010e14 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 8010dec:	6852      	ldr	r2, [r2, #4]
 8010dee:	4290      	cmp	r0, r2
 8010df0:	d009      	beq.n	8010e06 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8010df2:	b143      	cbz	r3, 8010e06 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8010df4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8010df8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8010dfc:	1912      	adds	r2, r2, r4
 8010dfe:	eb45 0101 	adc.w	r1, r5, r1
 8010e02:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
 8010e06:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
 8010e08:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010e0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010e0c:	2300      	movs	r3, #0
	node->prev = NULL;
 8010e0e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8010e12:	bd30      	pop	{r4, r5, pc}
 8010e14:	200003e0 	.word	0x200003e0

08010e18 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8010e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010e1e:	1c6b      	adds	r3, r5, #1
 8010e20:	bf08      	it	eq
 8010e22:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8010e26:	4682      	mov	sl, r0
 8010e28:	468b      	mov	fp, r1
 8010e2a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010e2c:	f000 80aa 	beq.w	8010f84 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
 8010e30:	6803      	ldr	r3, [r0, #0]
 8010e32:	b163      	cbz	r3, 8010e4e <z_add_timeout+0x36>
 8010e34:	4955      	ldr	r1, [pc, #340]	; (8010f8c <z_add_timeout+0x174>)
 8010e36:	4a56      	ldr	r2, [pc, #344]	; (8010f90 <z_add_timeout+0x178>)
 8010e38:	4856      	ldr	r0, [pc, #344]	; (8010f94 <z_add_timeout+0x17c>)
 8010e3a:	2363      	movs	r3, #99	; 0x63
 8010e3c:	f001 fa34 	bl	80122a8 <assert_print>
 8010e40:	4855      	ldr	r0, [pc, #340]	; (8010f98 <z_add_timeout+0x180>)
 8010e42:	f001 fa31 	bl	80122a8 <assert_print>
 8010e46:	4852      	ldr	r0, [pc, #328]	; (8010f90 <z_add_timeout+0x178>)
 8010e48:	2163      	movs	r1, #99	; 0x63
 8010e4a:	f001 fa26 	bl	801229a <assert_post_action>
	to->fn = fn;
 8010e4e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
 8010e52:	f04f 0310 	mov.w	r3, #16
 8010e56:	f3ef 8b11 	mrs	fp, BASEPRI
 8010e5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8010e5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010e62:	484e      	ldr	r0, [pc, #312]	; (8010f9c <z_add_timeout+0x184>)
 8010e64:	f7fd fe44 	bl	800eaf0 <z_spin_lock_valid>
 8010e68:	b968      	cbnz	r0, 8010e86 <z_add_timeout+0x6e>
 8010e6a:	4a4d      	ldr	r2, [pc, #308]	; (8010fa0 <z_add_timeout+0x188>)
 8010e6c:	494d      	ldr	r1, [pc, #308]	; (8010fa4 <z_add_timeout+0x18c>)
 8010e6e:	4849      	ldr	r0, [pc, #292]	; (8010f94 <z_add_timeout+0x17c>)
 8010e70:	238e      	movs	r3, #142	; 0x8e
 8010e72:	f001 fa19 	bl	80122a8 <assert_print>
 8010e76:	4949      	ldr	r1, [pc, #292]	; (8010f9c <z_add_timeout+0x184>)
 8010e78:	484b      	ldr	r0, [pc, #300]	; (8010fa8 <z_add_timeout+0x190>)
 8010e7a:	f001 fa15 	bl	80122a8 <assert_print>
 8010e7e:	4848      	ldr	r0, [pc, #288]	; (8010fa0 <z_add_timeout+0x188>)
 8010e80:	218e      	movs	r1, #142	; 0x8e
 8010e82:	f001 fa0a 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010e86:	4845      	ldr	r0, [pc, #276]	; (8010f9c <z_add_timeout+0x184>)
 8010e88:	f7fd fe50 	bl	800eb2c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8010e8c:	f06f 0301 	mvn.w	r3, #1
 8010e90:	ebb3 0804 	subs.w	r8, r3, r4
 8010e94:	f04f 32ff 	mov.w	r2, #4294967295
 8010e98:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8010e9c:	f1b8 0f00 	cmp.w	r8, #0
 8010ea0:	f179 0100 	sbcs.w	r1, r9, #0
 8010ea4:	db1c      	blt.n	8010ee0 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8010ea6:	4841      	ldr	r0, [pc, #260]	; (8010fac <z_add_timeout+0x194>)
 8010ea8:	e9d0 1000 	ldrd	r1, r0, [r0]
 8010eac:	1a5b      	subs	r3, r3, r1
 8010eae:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
 8010eb2:	1b1e      	subs	r6, r3, r4
 8010eb4:	eb62 0705 	sbc.w	r7, r2, r5
 8010eb8:	2e01      	cmp	r6, #1
 8010eba:	f177 0300 	sbcs.w	r3, r7, #0
 8010ebe:	bfbc      	itt	lt
 8010ec0:	2601      	movlt	r6, #1
 8010ec2:	2700      	movlt	r7, #0
 8010ec4:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
 8010ec8:	4a39      	ldr	r2, [pc, #228]	; (8010fb0 <z_add_timeout+0x198>)
 8010eca:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d11d      	bne.n	8010f0e <z_add_timeout+0xf6>
	node->prev = tail;
 8010ed2:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
 8010ed6:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
 8010eda:	f8c2 a004 	str.w	sl, [r2, #4]
}
 8010ede:	e02c      	b.n	8010f3a <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8010ee0:	f7ff ff4e 	bl	8010d80 <elapsed>
 8010ee4:	1c63      	adds	r3, r4, #1
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	f145 0300 	adc.w	r3, r5, #0
 8010eec:	9301      	str	r3, [sp, #4]
 8010eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ef2:	1812      	adds	r2, r2, r0
 8010ef4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8010ef8:	e9ca 2304 	strd	r2, r3, [sl, #16]
 8010efc:	e7e4      	b.n	8010ec8 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8010efe:	1be0      	subs	r0, r4, r7
 8010f00:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
 8010f04:	42b3      	cmp	r3, r6
 8010f06:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8010f0a:	d0e2      	beq.n	8010ed2 <z_add_timeout+0xba>
 8010f0c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d0df      	beq.n	8010ed2 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
 8010f12:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
 8010f16:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 8010f1a:	42bc      	cmp	r4, r7
 8010f1c:	eb75 0108 	sbcs.w	r1, r5, r8
 8010f20:	daed      	bge.n	8010efe <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
 8010f22:	1b38      	subs	r0, r7, r4
 8010f24:	eb68 0105 	sbc.w	r1, r8, r5
 8010f28:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8010f2c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8010f2e:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
 8010f32:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 8010f36:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
 8010f3a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d00b      	beq.n	8010f58 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8010f40:	459a      	cmp	sl, r3
 8010f42:	d109      	bne.n	8010f58 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8010f44:	f7ff ff26 	bl	8010d94 <next_timeout>

			if (next_time == 0 ||
 8010f48:	b118      	cbz	r0, 8010f52 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
 8010f4a:	4b1a      	ldr	r3, [pc, #104]	; (8010fb4 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	4283      	cmp	r3, r0
 8010f50:	d002      	beq.n	8010f58 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
 8010f52:	2100      	movs	r1, #0
 8010f54:	f7fc fe36 	bl	800dbc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8010f58:	4810      	ldr	r0, [pc, #64]	; (8010f9c <z_add_timeout+0x184>)
 8010f5a:	f7fd fdd7 	bl	800eb0c <z_spin_unlock_valid>
 8010f5e:	b968      	cbnz	r0, 8010f7c <z_add_timeout+0x164>
 8010f60:	4a0f      	ldr	r2, [pc, #60]	; (8010fa0 <z_add_timeout+0x188>)
 8010f62:	4915      	ldr	r1, [pc, #84]	; (8010fb8 <z_add_timeout+0x1a0>)
 8010f64:	480b      	ldr	r0, [pc, #44]	; (8010f94 <z_add_timeout+0x17c>)
 8010f66:	23b9      	movs	r3, #185	; 0xb9
 8010f68:	f001 f99e 	bl	80122a8 <assert_print>
 8010f6c:	490b      	ldr	r1, [pc, #44]	; (8010f9c <z_add_timeout+0x184>)
 8010f6e:	4813      	ldr	r0, [pc, #76]	; (8010fbc <z_add_timeout+0x1a4>)
 8010f70:	f001 f99a 	bl	80122a8 <assert_print>
 8010f74:	480a      	ldr	r0, [pc, #40]	; (8010fa0 <z_add_timeout+0x188>)
 8010f76:	21b9      	movs	r1, #185	; 0xb9
 8010f78:	f001 f98f 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8010f7c:	f38b 8811 	msr	BASEPRI, fp
 8010f80:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8010f84:	b003      	add	sp, #12
 8010f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8a:	bf00      	nop
 8010f8c:	08019f2f 	.word	0x08019f2f
 8010f90:	08019f0b 	.word	0x08019f0b
 8010f94:	08016836 	.word	0x08016836
 8010f98:	08019487 	.word	0x08019487
 8010f9c:	20001860 	.word	0x20001860
 8010fa0:	080170fb 	.word	0x080170fb
 8010fa4:	08017121 	.word	0x08017121
 8010fa8:	08017136 	.word	0x08017136
 8010fac:	20001510 	.word	0x20001510
 8010fb0:	200003e0 	.word	0x200003e0
 8010fb4:	20001818 	.word	0x20001818
 8010fb8:	0801714e 	.word	0x0801714e
 8010fbc:	08017165 	.word	0x08017165

08010fc0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4604      	mov	r4, r0
	__asm__ volatile(
 8010fc4:	f04f 0310 	mov.w	r3, #16
 8010fc8:	f3ef 8511 	mrs	r5, BASEPRI
 8010fcc:	f383 8812 	msr	BASEPRI_MAX, r3
 8010fd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8010fd4:	481a      	ldr	r0, [pc, #104]	; (8011040 <z_abort_timeout+0x80>)
 8010fd6:	f7fd fd8b 	bl	800eaf0 <z_spin_lock_valid>
 8010fda:	b968      	cbnz	r0, 8010ff8 <z_abort_timeout+0x38>
 8010fdc:	4a19      	ldr	r2, [pc, #100]	; (8011044 <z_abort_timeout+0x84>)
 8010fde:	491a      	ldr	r1, [pc, #104]	; (8011048 <z_abort_timeout+0x88>)
 8010fe0:	481a      	ldr	r0, [pc, #104]	; (801104c <z_abort_timeout+0x8c>)
 8010fe2:	238e      	movs	r3, #142	; 0x8e
 8010fe4:	f001 f960 	bl	80122a8 <assert_print>
 8010fe8:	4915      	ldr	r1, [pc, #84]	; (8011040 <z_abort_timeout+0x80>)
 8010fea:	4819      	ldr	r0, [pc, #100]	; (8011050 <z_abort_timeout+0x90>)
 8010fec:	f001 f95c 	bl	80122a8 <assert_print>
 8010ff0:	4814      	ldr	r0, [pc, #80]	; (8011044 <z_abort_timeout+0x84>)
 8010ff2:	218e      	movs	r1, #142	; 0x8e
 8010ff4:	f001 f951 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8010ff8:	4811      	ldr	r0, [pc, #68]	; (8011040 <z_abort_timeout+0x80>)
 8010ffa:	f7fd fd97 	bl	800eb2c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	b1db      	cbz	r3, 801103a <z_abort_timeout+0x7a>
			remove_timeout(to);
 8011002:	4620      	mov	r0, r4
 8011004:	f7ff feee 	bl	8010de4 <remove_timeout>
			ret = 0;
 8011008:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 801100a:	480d      	ldr	r0, [pc, #52]	; (8011040 <z_abort_timeout+0x80>)
 801100c:	f7fd fd7e 	bl	800eb0c <z_spin_unlock_valid>
 8011010:	b968      	cbnz	r0, 801102e <z_abort_timeout+0x6e>
 8011012:	4a0c      	ldr	r2, [pc, #48]	; (8011044 <z_abort_timeout+0x84>)
 8011014:	490f      	ldr	r1, [pc, #60]	; (8011054 <z_abort_timeout+0x94>)
 8011016:	480d      	ldr	r0, [pc, #52]	; (801104c <z_abort_timeout+0x8c>)
 8011018:	23b9      	movs	r3, #185	; 0xb9
 801101a:	f001 f945 	bl	80122a8 <assert_print>
 801101e:	4908      	ldr	r1, [pc, #32]	; (8011040 <z_abort_timeout+0x80>)
 8011020:	480d      	ldr	r0, [pc, #52]	; (8011058 <z_abort_timeout+0x98>)
 8011022:	f001 f941 	bl	80122a8 <assert_print>
 8011026:	4807      	ldr	r0, [pc, #28]	; (8011044 <z_abort_timeout+0x84>)
 8011028:	21b9      	movs	r1, #185	; 0xb9
 801102a:	f001 f936 	bl	801229a <assert_post_action>
	__asm__ volatile(
 801102e:	f385 8811 	msr	BASEPRI, r5
 8011032:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 8011036:	4620      	mov	r0, r4
 8011038:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
 801103a:	f06f 0415 	mvn.w	r4, #21
 801103e:	e7e4      	b.n	801100a <z_abort_timeout+0x4a>
 8011040:	20001860 	.word	0x20001860
 8011044:	080170fb 	.word	0x080170fb
 8011048:	08017121 	.word	0x08017121
 801104c:	08016836 	.word	0x08016836
 8011050:	08017136 	.word	0x08017136
 8011054:	0801714e 	.word	0x0801714e
 8011058:	08017165 	.word	0x08017165

0801105c <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
 801105c:	b570      	push	{r4, r5, r6, lr}
 801105e:	4604      	mov	r4, r0
 8011060:	460d      	mov	r5, r1
	__asm__ volatile(
 8011062:	f04f 0310 	mov.w	r3, #16
 8011066:	f3ef 8611 	mrs	r6, BASEPRI
 801106a:	f383 8812 	msr	BASEPRI_MAX, r3
 801106e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011072:	481b      	ldr	r0, [pc, #108]	; (80110e0 <z_set_timeout_expiry+0x84>)
 8011074:	f7fd fd3c 	bl	800eaf0 <z_spin_lock_valid>
 8011078:	b968      	cbnz	r0, 8011096 <z_set_timeout_expiry+0x3a>
 801107a:	4a1a      	ldr	r2, [pc, #104]	; (80110e4 <z_set_timeout_expiry+0x88>)
 801107c:	491a      	ldr	r1, [pc, #104]	; (80110e8 <z_set_timeout_expiry+0x8c>)
 801107e:	481b      	ldr	r0, [pc, #108]	; (80110ec <z_set_timeout_expiry+0x90>)
 8011080:	238e      	movs	r3, #142	; 0x8e
 8011082:	f001 f911 	bl	80122a8 <assert_print>
 8011086:	4916      	ldr	r1, [pc, #88]	; (80110e0 <z_set_timeout_expiry+0x84>)
 8011088:	4819      	ldr	r0, [pc, #100]	; (80110f0 <z_set_timeout_expiry+0x94>)
 801108a:	f001 f90d 	bl	80122a8 <assert_print>
 801108e:	4815      	ldr	r0, [pc, #84]	; (80110e4 <z_set_timeout_expiry+0x88>)
 8011090:	218e      	movs	r1, #142	; 0x8e
 8011092:	f001 f902 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011096:	4812      	ldr	r0, [pc, #72]	; (80110e0 <z_set_timeout_expiry+0x84>)
 8011098:	f7fd fd48 	bl	800eb2c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
 801109c:	f7ff fe7a 	bl	8010d94 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80110a0:	2801      	cmp	r0, #1
 80110a2:	dd05      	ble.n	80110b0 <z_set_timeout_expiry+0x54>
 80110a4:	42a0      	cmp	r0, r4
 80110a6:	db03      	blt.n	80110b0 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80110a8:	4629      	mov	r1, r5
 80110aa:	4620      	mov	r0, r4
 80110ac:	f7fc fd8a 	bl	800dbc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80110b0:	480b      	ldr	r0, [pc, #44]	; (80110e0 <z_set_timeout_expiry+0x84>)
 80110b2:	f7fd fd2b 	bl	800eb0c <z_spin_unlock_valid>
 80110b6:	b968      	cbnz	r0, 80110d4 <z_set_timeout_expiry+0x78>
 80110b8:	4a0a      	ldr	r2, [pc, #40]	; (80110e4 <z_set_timeout_expiry+0x88>)
 80110ba:	490e      	ldr	r1, [pc, #56]	; (80110f4 <z_set_timeout_expiry+0x98>)
 80110bc:	480b      	ldr	r0, [pc, #44]	; (80110ec <z_set_timeout_expiry+0x90>)
 80110be:	23b9      	movs	r3, #185	; 0xb9
 80110c0:	f001 f8f2 	bl	80122a8 <assert_print>
 80110c4:	4906      	ldr	r1, [pc, #24]	; (80110e0 <z_set_timeout_expiry+0x84>)
 80110c6:	480c      	ldr	r0, [pc, #48]	; (80110f8 <z_set_timeout_expiry+0x9c>)
 80110c8:	f001 f8ee 	bl	80122a8 <assert_print>
 80110cc:	4805      	ldr	r0, [pc, #20]	; (80110e4 <z_set_timeout_expiry+0x88>)
 80110ce:	21b9      	movs	r1, #185	; 0xb9
 80110d0:	f001 f8e3 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80110d4:	f386 8811 	msr	BASEPRI, r6
 80110d8:	f3bf 8f6f 	isb	sy
		}
	}
}
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
 80110de:	bf00      	nop
 80110e0:	20001860 	.word	0x20001860
 80110e4:	080170fb 	.word	0x080170fb
 80110e8:	08017121 	.word	0x08017121
 80110ec:	08016836 	.word	0x08016836
 80110f0:	08017136 	.word	0x08017136
 80110f4:	0801714e 	.word	0x0801714e
 80110f8:	08017165 	.word	0x08017165

080110fc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
 80110fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011100:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8011102:	f7fe ff2b 	bl	800ff5c <z_time_slice>
	__asm__ volatile(
 8011106:	f04f 0310 	mov.w	r3, #16
 801110a:	f3ef 8711 	mrs	r7, BASEPRI
 801110e:	f383 8812 	msr	BASEPRI_MAX, r3
 8011112:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011116:	4855      	ldr	r0, [pc, #340]	; (801126c <sys_clock_announce+0x170>)
 8011118:	f7fd fcea 	bl	800eaf0 <z_spin_lock_valid>
 801111c:	b968      	cbnz	r0, 801113a <sys_clock_announce+0x3e>
 801111e:	4a54      	ldr	r2, [pc, #336]	; (8011270 <sys_clock_announce+0x174>)
 8011120:	4954      	ldr	r1, [pc, #336]	; (8011274 <sys_clock_announce+0x178>)
 8011122:	4855      	ldr	r0, [pc, #340]	; (8011278 <sys_clock_announce+0x17c>)
 8011124:	238e      	movs	r3, #142	; 0x8e
 8011126:	f001 f8bf 	bl	80122a8 <assert_print>
 801112a:	4950      	ldr	r1, [pc, #320]	; (801126c <sys_clock_announce+0x170>)
 801112c:	4853      	ldr	r0, [pc, #332]	; (801127c <sys_clock_announce+0x180>)
 801112e:	f001 f8bb 	bl	80122a8 <assert_print>
 8011132:	484f      	ldr	r0, [pc, #316]	; (8011270 <sys_clock_announce+0x174>)
 8011134:	218e      	movs	r1, #142	; 0x8e
 8011136:	f001 f8b0 	bl	801229a <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 801113a:	4d51      	ldr	r5, [pc, #324]	; (8011280 <sys_clock_announce+0x184>)
 801113c:	4e51      	ldr	r6, [pc, #324]	; (8011284 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
 801113e:	484b      	ldr	r0, [pc, #300]	; (801126c <sys_clock_announce+0x170>)
	return list->head == list;
 8011140:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8011290 <sys_clock_announce+0x194>
 8011144:	f7fd fcf2 	bl	800eb2c <z_spin_lock_set_owner>
 8011148:	46b3      	mov	fp, r6
 801114a:	602c      	str	r4, [r5, #0]
 801114c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011150:	f8d5 c000 	ldr.w	ip, [r5]
 8011154:	f8da 4000 	ldr.w	r4, [sl]
 8011158:	e9cd 2300 	strd	r2, r3, [sp]
 801115c:	4662      	mov	r2, ip
 801115e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011160:	4554      	cmp	r4, sl
 8011162:	46e0      	mov	r8, ip
 8011164:	4699      	mov	r9, r3
 8011166:	d00c      	beq.n	8011182 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8011168:	b15c      	cbz	r4, 8011182 <sys_clock_announce+0x86>
 801116a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 801116e:	458c      	cmp	ip, r1
 8011170:	eb79 0302 	sbcs.w	r3, r9, r2
 8011174:	da2e      	bge.n	80111d4 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8011176:	ebb1 000c 	subs.w	r0, r1, ip
 801117a:	eb62 0109 	sbc.w	r1, r2, r9
 801117e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
 8011182:	9a00      	ldr	r2, [sp, #0]
 8011184:	9901      	ldr	r1, [sp, #4]
 8011186:	eb18 0202 	adds.w	r2, r8, r2
 801118a:	464b      	mov	r3, r9
 801118c:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
 8011190:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8011192:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
 8011196:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8011198:	f7ff fdfc 	bl	8010d94 <next_timeout>
 801119c:	4621      	mov	r1, r4
 801119e:	f7fc fd11 	bl	800dbc4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80111a2:	4832      	ldr	r0, [pc, #200]	; (801126c <sys_clock_announce+0x170>)
 80111a4:	f7fd fcb2 	bl	800eb0c <z_spin_unlock_valid>
 80111a8:	b968      	cbnz	r0, 80111c6 <sys_clock_announce+0xca>
 80111aa:	4a31      	ldr	r2, [pc, #196]	; (8011270 <sys_clock_announce+0x174>)
 80111ac:	4936      	ldr	r1, [pc, #216]	; (8011288 <sys_clock_announce+0x18c>)
 80111ae:	4832      	ldr	r0, [pc, #200]	; (8011278 <sys_clock_announce+0x17c>)
 80111b0:	23b9      	movs	r3, #185	; 0xb9
 80111b2:	f001 f879 	bl	80122a8 <assert_print>
 80111b6:	492d      	ldr	r1, [pc, #180]	; (801126c <sys_clock_announce+0x170>)
 80111b8:	4834      	ldr	r0, [pc, #208]	; (801128c <sys_clock_announce+0x190>)
 80111ba:	f001 f875 	bl	80122a8 <assert_print>
 80111be:	482c      	ldr	r0, [pc, #176]	; (8011270 <sys_clock_announce+0x174>)
 80111c0:	21b9      	movs	r1, #185	; 0xb9
 80111c2:	f001 f86a 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80111c6:	f387 8811 	msr	BASEPRI, r7
 80111ca:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80111ce:	b003      	add	sp, #12
 80111d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 80111d4:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
 80111d8:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
 80111dc:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
 80111e0:	f04f 0200 	mov.w	r2, #0
 80111e4:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 80111e8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
 80111ec:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
 80111ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 80111f2:	4620      	mov	r0, r4
		curr_tick += dt;
 80111f4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
 80111f8:	f7ff fdf4 	bl	8010de4 <remove_timeout>
 80111fc:	481b      	ldr	r0, [pc, #108]	; (801126c <sys_clock_announce+0x170>)
 80111fe:	f7fd fc85 	bl	800eb0c <z_spin_unlock_valid>
 8011202:	b968      	cbnz	r0, 8011220 <sys_clock_announce+0x124>
 8011204:	4a1a      	ldr	r2, [pc, #104]	; (8011270 <sys_clock_announce+0x174>)
 8011206:	4920      	ldr	r1, [pc, #128]	; (8011288 <sys_clock_announce+0x18c>)
 8011208:	481b      	ldr	r0, [pc, #108]	; (8011278 <sys_clock_announce+0x17c>)
 801120a:	23b9      	movs	r3, #185	; 0xb9
 801120c:	f001 f84c 	bl	80122a8 <assert_print>
 8011210:	4916      	ldr	r1, [pc, #88]	; (801126c <sys_clock_announce+0x170>)
 8011212:	481e      	ldr	r0, [pc, #120]	; (801128c <sys_clock_announce+0x190>)
 8011214:	f001 f848 	bl	80122a8 <assert_print>
 8011218:	4815      	ldr	r0, [pc, #84]	; (8011270 <sys_clock_announce+0x174>)
 801121a:	21b9      	movs	r1, #185	; 0xb9
 801121c:	f001 f83d 	bl	801229a <assert_post_action>
 8011220:	f387 8811 	msr	BASEPRI, r7
 8011224:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8011228:	68a3      	ldr	r3, [r4, #8]
 801122a:	4620      	mov	r0, r4
 801122c:	4798      	blx	r3
	__asm__ volatile(
 801122e:	f04f 0310 	mov.w	r3, #16
 8011232:	f3ef 8711 	mrs	r7, BASEPRI
 8011236:	f383 8812 	msr	BASEPRI_MAX, r3
 801123a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 801123e:	480b      	ldr	r0, [pc, #44]	; (801126c <sys_clock_announce+0x170>)
 8011240:	f7fd fc56 	bl	800eaf0 <z_spin_lock_valid>
 8011244:	b968      	cbnz	r0, 8011262 <sys_clock_announce+0x166>
 8011246:	4a0a      	ldr	r2, [pc, #40]	; (8011270 <sys_clock_announce+0x174>)
 8011248:	490a      	ldr	r1, [pc, #40]	; (8011274 <sys_clock_announce+0x178>)
 801124a:	480b      	ldr	r0, [pc, #44]	; (8011278 <sys_clock_announce+0x17c>)
 801124c:	238e      	movs	r3, #142	; 0x8e
 801124e:	f001 f82b 	bl	80122a8 <assert_print>
 8011252:	4906      	ldr	r1, [pc, #24]	; (801126c <sys_clock_announce+0x170>)
 8011254:	4809      	ldr	r0, [pc, #36]	; (801127c <sys_clock_announce+0x180>)
 8011256:	f001 f827 	bl	80122a8 <assert_print>
 801125a:	4805      	ldr	r0, [pc, #20]	; (8011270 <sys_clock_announce+0x174>)
 801125c:	218e      	movs	r1, #142	; 0x8e
 801125e:	f001 f81c 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011262:	4802      	ldr	r0, [pc, #8]	; (801126c <sys_clock_announce+0x170>)
 8011264:	f7fd fc62 	bl	800eb2c <z_spin_lock_set_owner>
	return k;
 8011268:	e770      	b.n	801114c <sys_clock_announce+0x50>
 801126a:	bf00      	nop
 801126c:	20001860 	.word	0x20001860
 8011270:	080170fb 	.word	0x080170fb
 8011274:	08017121 	.word	0x08017121
 8011278:	08016836 	.word	0x08016836
 801127c:	08017136 	.word	0x08017136
 8011280:	2000185c 	.word	0x2000185c
 8011284:	20001510 	.word	0x20001510
 8011288:	0801714e 	.word	0x0801714e
 801128c:	08017165 	.word	0x08017165
 8011290:	200003e0 	.word	0x200003e0

08011294 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	f04f 0310 	mov.w	r3, #16
 801129a:	f3ef 8611 	mrs	r6, BASEPRI
 801129e:	f383 8812 	msr	BASEPRI_MAX, r3
 80112a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80112a6:	481b      	ldr	r0, [pc, #108]	; (8011314 <sys_clock_tick_get+0x80>)
 80112a8:	f7fd fc22 	bl	800eaf0 <z_spin_lock_valid>
 80112ac:	b968      	cbnz	r0, 80112ca <sys_clock_tick_get+0x36>
 80112ae:	4a1a      	ldr	r2, [pc, #104]	; (8011318 <sys_clock_tick_get+0x84>)
 80112b0:	491a      	ldr	r1, [pc, #104]	; (801131c <sys_clock_tick_get+0x88>)
 80112b2:	481b      	ldr	r0, [pc, #108]	; (8011320 <sys_clock_tick_get+0x8c>)
 80112b4:	238e      	movs	r3, #142	; 0x8e
 80112b6:	f000 fff7 	bl	80122a8 <assert_print>
 80112ba:	4916      	ldr	r1, [pc, #88]	; (8011314 <sys_clock_tick_get+0x80>)
 80112bc:	4819      	ldr	r0, [pc, #100]	; (8011324 <sys_clock_tick_get+0x90>)
 80112be:	f000 fff3 	bl	80122a8 <assert_print>
 80112c2:	4815      	ldr	r0, [pc, #84]	; (8011318 <sys_clock_tick_get+0x84>)
 80112c4:	218e      	movs	r1, #142	; 0x8e
 80112c6:	f000 ffe8 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80112ca:	4812      	ldr	r0, [pc, #72]	; (8011314 <sys_clock_tick_get+0x80>)
 80112cc:	f7fd fc2e 	bl	800eb2c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 80112d0:	f7fc fd1a 	bl	800dd08 <sys_clock_elapsed>
 80112d4:	4b14      	ldr	r3, [pc, #80]	; (8011328 <sys_clock_tick_get+0x94>)
 80112d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80112da:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80112dc:	480d      	ldr	r0, [pc, #52]	; (8011314 <sys_clock_tick_get+0x80>)
 80112de:	f145 0500 	adc.w	r5, r5, #0
 80112e2:	f7fd fc13 	bl	800eb0c <z_spin_unlock_valid>
 80112e6:	b968      	cbnz	r0, 8011304 <sys_clock_tick_get+0x70>
 80112e8:	4a0b      	ldr	r2, [pc, #44]	; (8011318 <sys_clock_tick_get+0x84>)
 80112ea:	4910      	ldr	r1, [pc, #64]	; (801132c <sys_clock_tick_get+0x98>)
 80112ec:	480c      	ldr	r0, [pc, #48]	; (8011320 <sys_clock_tick_get+0x8c>)
 80112ee:	23b9      	movs	r3, #185	; 0xb9
 80112f0:	f000 ffda 	bl	80122a8 <assert_print>
 80112f4:	4907      	ldr	r1, [pc, #28]	; (8011314 <sys_clock_tick_get+0x80>)
 80112f6:	480e      	ldr	r0, [pc, #56]	; (8011330 <sys_clock_tick_get+0x9c>)
 80112f8:	f000 ffd6 	bl	80122a8 <assert_print>
 80112fc:	4806      	ldr	r0, [pc, #24]	; (8011318 <sys_clock_tick_get+0x84>)
 80112fe:	21b9      	movs	r1, #185	; 0xb9
 8011300:	f000 ffcb 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8011304:	f386 8811 	msr	BASEPRI, r6
 8011308:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 801130c:	4620      	mov	r0, r4
 801130e:	4629      	mov	r1, r5
 8011310:	bd70      	pop	{r4, r5, r6, pc}
 8011312:	bf00      	nop
 8011314:	20001860 	.word	0x20001860
 8011318:	080170fb 	.word	0x080170fb
 801131c:	08017121 	.word	0x08017121
 8011320:	08016836 	.word	0x08016836
 8011324:	08017136 	.word	0x08017136
 8011328:	20001510 	.word	0x20001510
 801132c:	0801714e 	.word	0x0801714e
 8011330:	08017165 	.word	0x08017165

08011334 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8011334:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8011336:	4604      	mov	r4, r0
 8011338:	b178      	cbz	r0, 801135a <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 801133a:	f7fc fd39 	bl	800ddb0 <sys_clock_cycle_get_32>
 801133e:	4605      	mov	r5, r0
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8011340:	4806      	ldr	r0, [pc, #24]	; (801135c <z_impl_k_busy_wait+0x28>)
 8011342:	4a07      	ldr	r2, [pc, #28]	; (8011360 <z_impl_k_busy_wait+0x2c>)
 8011344:	fba4 0100 	umull	r0, r1, r4, r0
 8011348:	2300      	movs	r3, #0
 801134a:	f7ef f8e1 	bl	8000510 <__aeabi_uldivmod>
 801134e:	4604      	mov	r4, r0
 8011350:	f7fc fd2e 	bl	800ddb0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8011354:	1b43      	subs	r3, r0, r5
 8011356:	42a3      	cmp	r3, r4
 8011358:	d3fa      	bcc.n	8011350 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 801135a:	bd38      	pop	{r3, r4, r5, pc}
 801135c:	01e84800 	.word	0x01e84800
 8011360:	000f4240 	.word	0x000f4240

08011364 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8011364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011366:	4604      	mov	r4, r0
	__asm__ volatile(
 8011368:	f04f 0310 	mov.w	r3, #16
 801136c:	f3ef 8511 	mrs	r5, BASEPRI
 8011370:	f383 8812 	msr	BASEPRI_MAX, r3
 8011374:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011378:	484c      	ldr	r0, [pc, #304]	; (80114ac <z_timer_expiration_handler+0x148>)
 801137a:	f7fd fbb9 	bl	800eaf0 <z_spin_lock_valid>
 801137e:	b968      	cbnz	r0, 801139c <z_timer_expiration_handler+0x38>
 8011380:	4a4b      	ldr	r2, [pc, #300]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011382:	494c      	ldr	r1, [pc, #304]	; (80114b4 <z_timer_expiration_handler+0x150>)
 8011384:	484c      	ldr	r0, [pc, #304]	; (80114b8 <z_timer_expiration_handler+0x154>)
 8011386:	238e      	movs	r3, #142	; 0x8e
 8011388:	f000 ff8e 	bl	80122a8 <assert_print>
 801138c:	4947      	ldr	r1, [pc, #284]	; (80114ac <z_timer_expiration_handler+0x148>)
 801138e:	484b      	ldr	r0, [pc, #300]	; (80114bc <z_timer_expiration_handler+0x158>)
 8011390:	f000 ff8a 	bl	80122a8 <assert_print>
 8011394:	4846      	ldr	r0, [pc, #280]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011396:	218e      	movs	r1, #142	; 0x8e
 8011398:	f000 ff7f 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 801139c:	4843      	ldr	r0, [pc, #268]	; (80114ac <z_timer_expiration_handler+0x148>)
 801139e:	f7fd fbc5 	bl	800eb2c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80113a2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80113a6:	1c56      	adds	r6, r2, #1
 80113a8:	f143 0700 	adc.w	r7, r3, #0
 80113ac:	2f00      	cmp	r7, #0
 80113ae:	bf08      	it	eq
 80113b0:	2e02      	cmpeq	r6, #2
 80113b2:	d303      	bcc.n	80113bc <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80113b4:	4942      	ldr	r1, [pc, #264]	; (80114c0 <z_timer_expiration_handler+0x15c>)
 80113b6:	4620      	mov	r0, r4
 80113b8:	f7ff fd2e 	bl	8010e18 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80113bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80113be:	3301      	adds	r3, #1
 80113c0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80113c2:	6a23      	ldr	r3, [r4, #32]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d035      	beq.n	8011434 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80113c8:	4838      	ldr	r0, [pc, #224]	; (80114ac <z_timer_expiration_handler+0x148>)
 80113ca:	f7fd fb9f 	bl	800eb0c <z_spin_unlock_valid>
 80113ce:	b968      	cbnz	r0, 80113ec <z_timer_expiration_handler+0x88>
 80113d0:	4a37      	ldr	r2, [pc, #220]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 80113d2:	493c      	ldr	r1, [pc, #240]	; (80114c4 <z_timer_expiration_handler+0x160>)
 80113d4:	4838      	ldr	r0, [pc, #224]	; (80114b8 <z_timer_expiration_handler+0x154>)
 80113d6:	23b9      	movs	r3, #185	; 0xb9
 80113d8:	f000 ff66 	bl	80122a8 <assert_print>
 80113dc:	4933      	ldr	r1, [pc, #204]	; (80114ac <z_timer_expiration_handler+0x148>)
 80113de:	483a      	ldr	r0, [pc, #232]	; (80114c8 <z_timer_expiration_handler+0x164>)
 80113e0:	f000 ff62 	bl	80122a8 <assert_print>
 80113e4:	4832      	ldr	r0, [pc, #200]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 80113e6:	21b9      	movs	r1, #185	; 0xb9
 80113e8:	f000 ff57 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80113ec:	f385 8811 	msr	BASEPRI, r5
 80113f0:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 80113f4:	6a23      	ldr	r3, [r4, #32]
 80113f6:	4620      	mov	r0, r4
 80113f8:	4798      	blx	r3
	__asm__ volatile(
 80113fa:	f04f 0310 	mov.w	r3, #16
 80113fe:	f3ef 8511 	mrs	r5, BASEPRI
 8011402:	f383 8812 	msr	BASEPRI_MAX, r3
 8011406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 801140a:	4828      	ldr	r0, [pc, #160]	; (80114ac <z_timer_expiration_handler+0x148>)
 801140c:	f7fd fb70 	bl	800eaf0 <z_spin_lock_valid>
 8011410:	b968      	cbnz	r0, 801142e <z_timer_expiration_handler+0xca>
 8011412:	4a27      	ldr	r2, [pc, #156]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011414:	4927      	ldr	r1, [pc, #156]	; (80114b4 <z_timer_expiration_handler+0x150>)
 8011416:	4828      	ldr	r0, [pc, #160]	; (80114b8 <z_timer_expiration_handler+0x154>)
 8011418:	238e      	movs	r3, #142	; 0x8e
 801141a:	f000 ff45 	bl	80122a8 <assert_print>
 801141e:	4923      	ldr	r1, [pc, #140]	; (80114ac <z_timer_expiration_handler+0x148>)
 8011420:	4826      	ldr	r0, [pc, #152]	; (80114bc <z_timer_expiration_handler+0x158>)
 8011422:	f000 ff41 	bl	80122a8 <assert_print>
 8011426:	4822      	ldr	r0, [pc, #136]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011428:	218e      	movs	r1, #142	; 0x8e
 801142a:	f000 ff36 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 801142e:	481f      	ldr	r0, [pc, #124]	; (80114ac <z_timer_expiration_handler+0x148>)
 8011430:	f7fd fb7c 	bl	800eb2c <z_spin_lock_set_owner>
	return list->head == list;
 8011434:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011438:	42a6      	cmp	r6, r4
 801143a:	d000      	beq.n	801143e <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 801143c:	b9b6      	cbnz	r6, 801146c <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 801143e:	481b      	ldr	r0, [pc, #108]	; (80114ac <z_timer_expiration_handler+0x148>)
 8011440:	f7fd fb64 	bl	800eb0c <z_spin_unlock_valid>
 8011444:	b968      	cbnz	r0, 8011462 <z_timer_expiration_handler+0xfe>
 8011446:	4a1a      	ldr	r2, [pc, #104]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011448:	491e      	ldr	r1, [pc, #120]	; (80114c4 <z_timer_expiration_handler+0x160>)
 801144a:	481b      	ldr	r0, [pc, #108]	; (80114b8 <z_timer_expiration_handler+0x154>)
 801144c:	23b9      	movs	r3, #185	; 0xb9
 801144e:	f000 ff2b 	bl	80122a8 <assert_print>
 8011452:	4916      	ldr	r1, [pc, #88]	; (80114ac <z_timer_expiration_handler+0x148>)
 8011454:	481c      	ldr	r0, [pc, #112]	; (80114c8 <z_timer_expiration_handler+0x164>)
 8011456:	f000 ff27 	bl	80122a8 <assert_print>
 801145a:	4815      	ldr	r0, [pc, #84]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 801145c:	21b9      	movs	r1, #185	; 0xb9
 801145e:	f000 ff1c 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8011462:	f385 8811 	msr	BASEPRI, r5
 8011466:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 801146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
 801146c:	4630      	mov	r0, r6
 801146e:	f7fe fb57 	bl	800fb20 <z_unpend_thread_no_timeout>
 8011472:	2300      	movs	r3, #0
 8011474:	480d      	ldr	r0, [pc, #52]	; (80114ac <z_timer_expiration_handler+0x148>)
 8011476:	67f3      	str	r3, [r6, #124]	; 0x7c
 8011478:	f7fd fb48 	bl	800eb0c <z_spin_unlock_valid>
 801147c:	b968      	cbnz	r0, 801149a <z_timer_expiration_handler+0x136>
 801147e:	4a0c      	ldr	r2, [pc, #48]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011480:	4910      	ldr	r1, [pc, #64]	; (80114c4 <z_timer_expiration_handler+0x160>)
 8011482:	480d      	ldr	r0, [pc, #52]	; (80114b8 <z_timer_expiration_handler+0x154>)
 8011484:	23b9      	movs	r3, #185	; 0xb9
 8011486:	f000 ff0f 	bl	80122a8 <assert_print>
 801148a:	4908      	ldr	r1, [pc, #32]	; (80114ac <z_timer_expiration_handler+0x148>)
 801148c:	480e      	ldr	r0, [pc, #56]	; (80114c8 <z_timer_expiration_handler+0x164>)
 801148e:	f000 ff0b 	bl	80122a8 <assert_print>
 8011492:	4807      	ldr	r0, [pc, #28]	; (80114b0 <z_timer_expiration_handler+0x14c>)
 8011494:	21b9      	movs	r1, #185	; 0xb9
 8011496:	f000 ff00 	bl	801229a <assert_post_action>
 801149a:	f385 8811 	msr	BASEPRI, r5
 801149e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 80114a2:	4630      	mov	r0, r6
}
 80114a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
 80114a8:	f7fe be24 	b.w	80100f4 <z_ready_thread>
 80114ac:	20001864 	.word	0x20001864
 80114b0:	080170fb 	.word	0x080170fb
 80114b4:	08017121 	.word	0x08017121
 80114b8:	08016836 	.word	0x08016836
 80114bc:	08017136 	.word	0x08017136
 80114c0:	08011365 	.word	0x08011365
 80114c4:	0801714e 	.word	0x0801714e
 80114c8:	08017165 	.word	0x08017165

080114cc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 80114cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d0:	461d      	mov	r5, r3
 80114d2:	4699      	mov	r9, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80114d4:	1c6b      	adds	r3, r5, #1
{
 80114d6:	b085      	sub	sp, #20
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80114d8:	bf08      	it	eq
 80114da:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 80114de:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80114e2:	4680      	mov	r8, r0
 80114e4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80114e6:	d051      	beq.n	801158c <z_impl_k_timer_start+0xc0>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80114e8:	1c78      	adds	r0, r7, #1
 80114ea:	bf08      	it	eq
 80114ec:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 80114f0:	4633      	mov	r3, r6
 80114f2:	4639      	mov	r1, r7
 80114f4:	d019      	beq.n	801152a <z_impl_k_timer_start+0x5e>
 80114f6:	ea56 0007 	orrs.w	r0, r6, r7
 80114fa:	d016      	beq.n	801152a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
 80114fc:	f06f 0001 	mvn.w	r0, #1
 8011500:	ebb0 0a06 	subs.w	sl, r0, r6
 8011504:	f04f 30ff 	mov.w	r0, #4294967295
 8011508:	eb60 0b07 	sbc.w	fp, r0, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 801150c:	f1ba 0f00 	cmp.w	sl, #0
 8011510:	f17b 0000 	sbcs.w	r0, fp, #0
 8011514:	da09      	bge.n	801152a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
 8011516:	2e02      	cmp	r6, #2
 8011518:	f177 0300 	sbcs.w	r3, r7, #0
 801151c:	bfbc      	itt	lt
 801151e:	2602      	movlt	r6, #2
 8011520:	2700      	movlt	r7, #0
 8011522:	f116 33ff 	adds.w	r3, r6, #4294967295
 8011526:	f147 31ff 	adc.w	r1, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 801152a:	f06f 0001 	mvn.w	r0, #1
 801152e:	1b00      	subs	r0, r0, r4
 8011530:	9000      	str	r0, [sp, #0]
 8011532:	f04f 30ff 	mov.w	r0, #4294967295
 8011536:	eb60 0005 	sbc.w	r0, r0, r5
 801153a:	9001      	str	r0, [sp, #4]
 801153c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011540:	2e00      	cmp	r6, #0
 8011542:	f177 0000 	sbcs.w	r0, r7, #0
 8011546:	da09      	bge.n	801155c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8011548:	2c01      	cmp	r4, #1
 801154a:	f175 0200 	sbcs.w	r2, r5, #0
 801154e:	bfbc      	itt	lt
 8011550:	2401      	movlt	r4, #1
 8011552:	2500      	movlt	r5, #0
 8011554:	f114 32ff 	adds.w	r2, r4, #4294967295
 8011558:	f145 39ff 	adc.w	r9, r5, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 801155c:	4640      	mov	r0, r8
 801155e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8011562:	9200      	str	r2, [sp, #0]
 8011564:	f7ff fd2c 	bl	8010fc0 <z_abort_timeout>
	timer->period = period;
 8011568:	9b02      	ldr	r3, [sp, #8]
 801156a:	9903      	ldr	r1, [sp, #12]
 801156c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8011570:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
	timer->status = 0U;
 8011574:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8011576:	9a00      	ldr	r2, [sp, #0]
 8011578:	4906      	ldr	r1, [pc, #24]	; (8011594 <z_impl_k_timer_start+0xc8>)
	timer->status = 0U;
 801157a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 801157e:	4640      	mov	r0, r8
 8011580:	464b      	mov	r3, r9
		     duration);
}
 8011582:	b005      	add	sp, #20
 8011584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8011588:	f7ff bc46 	b.w	8010e18 <z_add_timeout>
}
 801158c:	b005      	add	sp, #20
 801158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011592:	bf00      	nop
 8011594:	08011365 	.word	0x08011365

08011598 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
 8011598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801159c:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
 801159e:	4d53      	ldr	r5, [pc, #332]	; (80116ec <clear_event_registrations+0x154>)
 80115a0:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8011730 <clear_event_registrations+0x198>
 80115a4:	4e52      	ldr	r6, [pc, #328]	; (80116f0 <clear_event_registrations+0x158>)
{
 80115a6:	4680      	mov	r8, r0
 80115a8:	4617      	mov	r7, r2
	while (num_events--) {
 80115aa:	fb04 0401 	mla	r4, r4, r1, r0
 80115ae:	45a0      	cmp	r8, r4
 80115b0:	d101      	bne.n	80115b6 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
 80115b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
 80115bc:	f814 3c07 	ldrb.w	r3, [r4, #-7]
 80115c0:	f003 031f 	and.w	r3, r3, #31
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d84f      	bhi.n	8011668 <clear_event_registrations+0xd0>
 80115c8:	e8df f003 	tbb	[pc, r3]
 80115cc:	4e05305b 	.word	0x4e05305b
 80115d0:	4e4e4e21 	.word	0x4e4e4e21
 80115d4:	3f          	.byte	0x3f
 80115d5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
 80115d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80115da:	b963      	cbnz	r3, 80115f6 <clear_event_registrations+0x5e>
 80115dc:	4945      	ldr	r1, [pc, #276]	; (80116f4 <clear_event_registrations+0x15c>)
 80115de:	23a9      	movs	r3, #169	; 0xa9
 80115e0:	462a      	mov	r2, r5
 80115e2:	4630      	mov	r0, r6
 80115e4:	f000 fe60 	bl	80122a8 <assert_print>
 80115e8:	4843      	ldr	r0, [pc, #268]	; (80116f8 <clear_event_registrations+0x160>)
 80115ea:	f000 fe5d 	bl	80122a8 <assert_print>
 80115ee:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
 80115f0:	4628      	mov	r0, r5
 80115f2:	f000 fe52 	bl	801229a <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80115f6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d041      	beq.n	8011682 <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
 80115fe:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
 8011602:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8011604:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8011606:	2300      	movs	r3, #0
	node->prev = NULL;
 8011608:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
 801160c:	e039      	b.n	8011682 <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
 801160e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d1ef      	bne.n	80115f6 <clear_event_registrations+0x5e>
 8011616:	4939      	ldr	r1, [pc, #228]	; (80116fc <clear_event_registrations+0x164>)
 8011618:	23ad      	movs	r3, #173	; 0xad
 801161a:	462a      	mov	r2, r5
 801161c:	4630      	mov	r0, r6
 801161e:	f000 fe43 	bl	80122a8 <assert_print>
 8011622:	4837      	ldr	r0, [pc, #220]	; (8011700 <clear_event_registrations+0x168>)
 8011624:	f000 fe40 	bl	80122a8 <assert_print>
 8011628:	21ad      	movs	r1, #173	; 0xad
 801162a:	e7e1      	b.n	80115f0 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
 801162c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1e0      	bne.n	80115f6 <clear_event_registrations+0x5e>
 8011634:	4933      	ldr	r1, [pc, #204]	; (8011704 <clear_event_registrations+0x16c>)
 8011636:	23b1      	movs	r3, #177	; 0xb1
 8011638:	462a      	mov	r2, r5
 801163a:	4630      	mov	r0, r6
 801163c:	f000 fe34 	bl	80122a8 <assert_print>
 8011640:	4831      	ldr	r0, [pc, #196]	; (8011708 <clear_event_registrations+0x170>)
 8011642:	f000 fe31 	bl	80122a8 <assert_print>
 8011646:	21b1      	movs	r1, #177	; 0xb1
 8011648:	e7d2      	b.n	80115f0 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
 801164a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1d1      	bne.n	80115f6 <clear_event_registrations+0x5e>
 8011652:	492e      	ldr	r1, [pc, #184]	; (801170c <clear_event_registrations+0x174>)
 8011654:	23b5      	movs	r3, #181	; 0xb5
 8011656:	462a      	mov	r2, r5
 8011658:	4630      	mov	r0, r6
 801165a:	f000 fe25 	bl	80122a8 <assert_print>
 801165e:	482c      	ldr	r0, [pc, #176]	; (8011710 <clear_event_registrations+0x178>)
 8011660:	f000 fe22 	bl	80122a8 <assert_print>
 8011664:	21b5      	movs	r1, #181	; 0xb5
 8011666:	e7c3      	b.n	80115f0 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
 8011668:	4649      	mov	r1, r9
 801166a:	23bc      	movs	r3, #188	; 0xbc
 801166c:	462a      	mov	r2, r5
 801166e:	4630      	mov	r0, r6
 8011670:	f000 fe1a 	bl	80122a8 <assert_print>
 8011674:	4827      	ldr	r0, [pc, #156]	; (8011714 <clear_event_registrations+0x17c>)
 8011676:	f000 fe17 	bl	80122a8 <assert_print>
 801167a:	21bc      	movs	r1, #188	; 0xbc
 801167c:	4628      	mov	r0, r5
 801167e:	f000 fe0c 	bl	801229a <assert_post_action>
 8011682:	4825      	ldr	r0, [pc, #148]	; (8011718 <clear_event_registrations+0x180>)
 8011684:	f7fd fa42 	bl	800eb0c <z_spin_unlock_valid>
 8011688:	b968      	cbnz	r0, 80116a6 <clear_event_registrations+0x10e>
 801168a:	4a24      	ldr	r2, [pc, #144]	; (801171c <clear_event_registrations+0x184>)
 801168c:	4924      	ldr	r1, [pc, #144]	; (8011720 <clear_event_registrations+0x188>)
 801168e:	23b9      	movs	r3, #185	; 0xb9
 8011690:	4630      	mov	r0, r6
 8011692:	f000 fe09 	bl	80122a8 <assert_print>
 8011696:	4920      	ldr	r1, [pc, #128]	; (8011718 <clear_event_registrations+0x180>)
 8011698:	4822      	ldr	r0, [pc, #136]	; (8011724 <clear_event_registrations+0x18c>)
 801169a:	f000 fe05 	bl	80122a8 <assert_print>
 801169e:	481f      	ldr	r0, [pc, #124]	; (801171c <clear_event_registrations+0x184>)
 80116a0:	21b9      	movs	r1, #185	; 0xb9
 80116a2:	f000 fdfa 	bl	801229a <assert_post_action>
 80116a6:	f387 8811 	msr	BASEPRI, r7
 80116aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80116ae:	f04f 0310 	mov.w	r3, #16
 80116b2:	f3ef 8711 	mrs	r7, BASEPRI
 80116b6:	f383 8812 	msr	BASEPRI_MAX, r3
 80116ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 80116be:	4816      	ldr	r0, [pc, #88]	; (8011718 <clear_event_registrations+0x180>)
 80116c0:	f7fd fa16 	bl	800eaf0 <z_spin_lock_valid>
 80116c4:	b968      	cbnz	r0, 80116e2 <clear_event_registrations+0x14a>
 80116c6:	4a15      	ldr	r2, [pc, #84]	; (801171c <clear_event_registrations+0x184>)
 80116c8:	4917      	ldr	r1, [pc, #92]	; (8011728 <clear_event_registrations+0x190>)
 80116ca:	238e      	movs	r3, #142	; 0x8e
 80116cc:	4630      	mov	r0, r6
 80116ce:	f000 fdeb 	bl	80122a8 <assert_print>
 80116d2:	4911      	ldr	r1, [pc, #68]	; (8011718 <clear_event_registrations+0x180>)
 80116d4:	4815      	ldr	r0, [pc, #84]	; (801172c <clear_event_registrations+0x194>)
 80116d6:	f000 fde7 	bl	80122a8 <assert_print>
 80116da:	4810      	ldr	r0, [pc, #64]	; (801171c <clear_event_registrations+0x184>)
 80116dc:	218e      	movs	r1, #142	; 0x8e
 80116de:	f000 fddc 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 80116e2:	480d      	ldr	r0, [pc, #52]	; (8011718 <clear_event_registrations+0x180>)
 80116e4:	f7fd fa22 	bl	800eb2c <z_spin_lock_set_owner>
	return k;
 80116e8:	3c14      	subs	r4, #20
 80116ea:	e760      	b.n	80115ae <clear_event_registrations+0x16>
 80116ec:	08019f4f 	.word	0x08019f4f
 80116f0:	08016836 	.word	0x08016836
 80116f4:	08019f70 	.word	0x08019f70
 80116f8:	08019f8a 	.word	0x08019f8a
 80116fc:	08019f9f 	.word	0x08019f9f
 8011700:	08019fbb 	.word	0x08019fbb
 8011704:	08019fcc 	.word	0x08019fcc
 8011708:	08019fe9 	.word	0x08019fe9
 801170c:	0801a000 	.word	0x0801a000
 8011710:	0801a01b 	.word	0x0801a01b
 8011714:	0801a034 	.word	0x0801a034
 8011718:	20001868 	.word	0x20001868
 801171c:	080170fb 	.word	0x080170fb
 8011720:	0801714e 	.word	0x0801714e
 8011724:	08017165 	.word	0x08017165
 8011728:	08017121 	.word	0x08017121
 801172c:	08017136 	.word	0x08017136
 8011730:	080169eb 	.word	0x080169eb

08011734 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 8011734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 8011738:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 801173a:	4e7c      	ldr	r6, [pc, #496]	; (801192c <register_events+0x1f8>)
 801173c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8011970 <register_events+0x23c>
 8011740:	f8df a230 	ldr.w	sl, [pc, #560]	; 8011974 <register_events+0x240>
{
 8011744:	9100      	str	r1, [sp, #0]
 8011746:	4615      	mov	r5, r2
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	4604      	mov	r4, r0
	int events_registered = 0;
 801174c:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
 801174e:	9b00      	ldr	r3, [sp, #0]
 8011750:	429f      	cmp	r7, r3
 8011752:	db03      	blt.n	801175c <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 8011754:	4648      	mov	r0, r9
 8011756:	b003      	add	sp, #12
 8011758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801175c:	f04f 0310 	mov.w	r3, #16
 8011760:	f3ef 8b11 	mrs	fp, BASEPRI
 8011764:	f383 8812 	msr	BASEPRI_MAX, r3
 8011768:	f3bf 8f6f 	isb	sy
 801176c:	4630      	mov	r0, r6
 801176e:	f7fd f9bf 	bl	800eaf0 <z_spin_lock_valid>
 8011772:	b968      	cbnz	r0, 8011790 <register_events+0x5c>
 8011774:	486e      	ldr	r0, [pc, #440]	; (8011930 <register_events+0x1fc>)
 8011776:	238e      	movs	r3, #142	; 0x8e
 8011778:	4642      	mov	r2, r8
 801177a:	4651      	mov	r1, sl
 801177c:	f000 fd94 	bl	80122a8 <assert_print>
 8011780:	486c      	ldr	r0, [pc, #432]	; (8011934 <register_events+0x200>)
 8011782:	4631      	mov	r1, r6
 8011784:	f000 fd90 	bl	80122a8 <assert_print>
 8011788:	218e      	movs	r1, #142	; 0x8e
 801178a:	4640      	mov	r0, r8
 801178c:	f000 fd85 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011790:	4630      	mov	r0, r6
 8011792:	f7fd f9cb 	bl	800eb2c <z_spin_lock_set_owner>
	switch (event->type) {
 8011796:	7b63      	ldrb	r3, [r4, #13]
 8011798:	f003 031f 	and.w	r3, r3, #31
 801179c:	2b08      	cmp	r3, #8
 801179e:	d84f      	bhi.n	8011840 <register_events+0x10c>
 80117a0:	e8df f003 	tbb	[pc, r3]
 80117a4:	4e054230 	.word	0x4e054230
 80117a8:	4e4e4e2c 	.word	0x4e4e4e2c
 80117ac:	48          	.byte	0x48
 80117ad:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
 80117ae:	6923      	ldr	r3, [r4, #16]
 80117b0:	689b      	ldr	r3, [r3, #8]
 80117b2:	b33b      	cbz	r3, 8011804 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 80117b4:	2302      	movs	r3, #2
	event->state |= state;
 80117b6:	68e2      	ldr	r2, [r4, #12]
 80117b8:	f3c2 3045 	ubfx	r0, r2, #13, #6
 80117bc:	4303      	orrs	r3, r0
	event->poller = NULL;
 80117be:	2100      	movs	r1, #0
	event->state |= state;
 80117c0:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
 80117c4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 80117c6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
 80117c8:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 80117ca:	4630      	mov	r0, r6
 80117cc:	f7fd f99e 	bl	800eb0c <z_spin_unlock_valid>
 80117d0:	b968      	cbnz	r0, 80117ee <register_events+0xba>
 80117d2:	4959      	ldr	r1, [pc, #356]	; (8011938 <register_events+0x204>)
 80117d4:	4856      	ldr	r0, [pc, #344]	; (8011930 <register_events+0x1fc>)
 80117d6:	23b9      	movs	r3, #185	; 0xb9
 80117d8:	4642      	mov	r2, r8
 80117da:	f000 fd65 	bl	80122a8 <assert_print>
 80117de:	4857      	ldr	r0, [pc, #348]	; (801193c <register_events+0x208>)
 80117e0:	4631      	mov	r1, r6
 80117e2:	f000 fd61 	bl	80122a8 <assert_print>
 80117e6:	21b9      	movs	r1, #185	; 0xb9
 80117e8:	4640      	mov	r0, r8
 80117ea:	f000 fd56 	bl	801229a <assert_post_action>
	__asm__ volatile(
 80117ee:	f38b 8811 	msr	BASEPRI, fp
 80117f2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80117f6:	3701      	adds	r7, #1
 80117f8:	3414      	adds	r4, #20
 80117fa:	e7a8      	b.n	801174e <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d12e      	bne.n	8011862 <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
 8011804:	9b01      	ldr	r3, [sp, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1df      	bne.n	80117ca <register_events+0x96>
 801180a:	782b      	ldrb	r3, [r5, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0dc      	beq.n	80117ca <register_events+0x96>
	switch (event->type) {
 8011810:	7b63      	ldrb	r3, [r4, #13]
 8011812:	f003 031f 	and.w	r3, r3, #31
 8011816:	2b08      	cmp	r3, #8
 8011818:	d879      	bhi.n	801190e <register_events+0x1da>
 801181a:	e8df f003 	tbb	[pc, r3]
 801181e:	5139      	.short	0x5139
 8011820:	783d7824 	.word	0x783d7824
 8011824:	7878      	.short	0x7878
 8011826:	64          	.byte	0x64
 8011827:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
 8011828:	6923      	ldr	r3, [r4, #16]
 801182a:	689b      	ldr	r3, [r3, #8]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d0e9      	beq.n	8011804 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
 8011830:	2301      	movs	r3, #1
 8011832:	e7c0      	b.n	80117b6 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
 8011834:	6923      	ldr	r3, [r4, #16]
 8011836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0e3      	beq.n	8011804 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 801183c:	2310      	movs	r3, #16
 801183e:	e7ba      	b.n	80117b6 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
 8011840:	4a3f      	ldr	r2, [pc, #252]	; (8011940 <register_events+0x20c>)
 8011842:	4940      	ldr	r1, [pc, #256]	; (8011944 <register_events+0x210>)
 8011844:	483a      	ldr	r0, [pc, #232]	; (8011930 <register_events+0x1fc>)
 8011846:	235c      	movs	r3, #92	; 0x5c
 8011848:	f000 fd2e 	bl	80122a8 <assert_print>
 801184c:	7b61      	ldrb	r1, [r4, #13]
 801184e:	483e      	ldr	r0, [pc, #248]	; (8011948 <register_events+0x214>)
 8011850:	f001 011f 	and.w	r1, r1, #31
 8011854:	f000 fd28 	bl	80122a8 <assert_print>
 8011858:	4839      	ldr	r0, [pc, #228]	; (8011940 <register_events+0x20c>)
 801185a:	215c      	movs	r1, #92	; 0x5c
 801185c:	f000 fd1d 	bl	801229a <assert_post_action>
		break;
 8011860:	e7d0      	b.n	8011804 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8011862:	2304      	movs	r3, #4
 8011864:	e7a7      	b.n	80117b6 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
 8011866:	6923      	ldr	r3, [r4, #16]
 8011868:	b963      	cbnz	r3, 8011884 <register_events+0x150>
 801186a:	4938      	ldr	r1, [pc, #224]	; (801194c <register_events+0x218>)
 801186c:	4a34      	ldr	r2, [pc, #208]	; (8011940 <register_events+0x20c>)
 801186e:	4830      	ldr	r0, [pc, #192]	; (8011930 <register_events+0x1fc>)
 8011870:	2386      	movs	r3, #134	; 0x86
 8011872:	f000 fd19 	bl	80122a8 <assert_print>
 8011876:	4836      	ldr	r0, [pc, #216]	; (8011950 <register_events+0x21c>)
 8011878:	f000 fd16 	bl	80122a8 <assert_print>
 801187c:	4830      	ldr	r0, [pc, #192]	; (8011940 <register_events+0x20c>)
 801187e:	2186      	movs	r1, #134	; 0x86
 8011880:	f000 fd0b 	bl	801229a <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
 8011884:	6920      	ldr	r0, [r4, #16]
 8011886:	462a      	mov	r2, r5
 8011888:	4621      	mov	r1, r4
 801188a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
 801188c:	f003 fe8e 	bl	80155ac <add_event>
	event->poller = poller;
 8011890:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
 8011892:	f109 0901 	add.w	r9, r9, #1
 8011896:	e798      	b.n	80117ca <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
 8011898:	6923      	ldr	r3, [r4, #16]
 801189a:	b963      	cbnz	r3, 80118b6 <register_events+0x182>
 801189c:	492d      	ldr	r1, [pc, #180]	; (8011954 <register_events+0x220>)
 801189e:	4a28      	ldr	r2, [pc, #160]	; (8011940 <register_events+0x20c>)
 80118a0:	4823      	ldr	r0, [pc, #140]	; (8011930 <register_events+0x1fc>)
 80118a2:	238a      	movs	r3, #138	; 0x8a
 80118a4:	f000 fd00 	bl	80122a8 <assert_print>
 80118a8:	482b      	ldr	r0, [pc, #172]	; (8011958 <register_events+0x224>)
 80118aa:	f000 fcfd 	bl	80122a8 <assert_print>
 80118ae:	4824      	ldr	r0, [pc, #144]	; (8011940 <register_events+0x20c>)
 80118b0:	218a      	movs	r1, #138	; 0x8a
 80118b2:	f000 fcf2 	bl	801229a <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
 80118b6:	6920      	ldr	r0, [r4, #16]
 80118b8:	462a      	mov	r2, r5
 80118ba:	4621      	mov	r1, r4
 80118bc:	3014      	adds	r0, #20
 80118be:	e7e5      	b.n	801188c <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	b963      	cbnz	r3, 80118de <register_events+0x1aa>
 80118c4:	4925      	ldr	r1, [pc, #148]	; (801195c <register_events+0x228>)
 80118c6:	4a1e      	ldr	r2, [pc, #120]	; (8011940 <register_events+0x20c>)
 80118c8:	4819      	ldr	r0, [pc, #100]	; (8011930 <register_events+0x1fc>)
 80118ca:	238e      	movs	r3, #142	; 0x8e
 80118cc:	f000 fcec 	bl	80122a8 <assert_print>
 80118d0:	4823      	ldr	r0, [pc, #140]	; (8011960 <register_events+0x22c>)
 80118d2:	f000 fce9 	bl	80122a8 <assert_print>
 80118d6:	481a      	ldr	r0, [pc, #104]	; (8011940 <register_events+0x20c>)
 80118d8:	218e      	movs	r1, #142	; 0x8e
 80118da:	f000 fcde 	bl	801229a <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
 80118de:	6920      	ldr	r0, [r4, #16]
 80118e0:	462a      	mov	r2, r5
 80118e2:	4621      	mov	r1, r4
 80118e4:	e7d2      	b.n	801188c <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
 80118e6:	6923      	ldr	r3, [r4, #16]
 80118e8:	b963      	cbnz	r3, 8011904 <register_events+0x1d0>
 80118ea:	491e      	ldr	r1, [pc, #120]	; (8011964 <register_events+0x230>)
 80118ec:	4a14      	ldr	r2, [pc, #80]	; (8011940 <register_events+0x20c>)
 80118ee:	4810      	ldr	r0, [pc, #64]	; (8011930 <register_events+0x1fc>)
 80118f0:	2392      	movs	r3, #146	; 0x92
 80118f2:	f000 fcd9 	bl	80122a8 <assert_print>
 80118f6:	481c      	ldr	r0, [pc, #112]	; (8011968 <register_events+0x234>)
 80118f8:	f000 fcd6 	bl	80122a8 <assert_print>
 80118fc:	4810      	ldr	r0, [pc, #64]	; (8011940 <register_events+0x20c>)
 80118fe:	2192      	movs	r1, #146	; 0x92
 8011900:	f000 fccb 	bl	801229a <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
 8011904:	6920      	ldr	r0, [r4, #16]
 8011906:	462a      	mov	r2, r5
 8011908:	4621      	mov	r1, r4
 801190a:	3028      	adds	r0, #40	; 0x28
 801190c:	e7be      	b.n	801188c <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
 801190e:	4a0c      	ldr	r2, [pc, #48]	; (8011940 <register_events+0x20c>)
 8011910:	490c      	ldr	r1, [pc, #48]	; (8011944 <register_events+0x210>)
 8011912:	4807      	ldr	r0, [pc, #28]	; (8011930 <register_events+0x1fc>)
 8011914:	2399      	movs	r3, #153	; 0x99
 8011916:	f000 fcc7 	bl	80122a8 <assert_print>
 801191a:	4814      	ldr	r0, [pc, #80]	; (801196c <register_events+0x238>)
 801191c:	f000 fcc4 	bl	80122a8 <assert_print>
 8011920:	4807      	ldr	r0, [pc, #28]	; (8011940 <register_events+0x20c>)
 8011922:	2199      	movs	r1, #153	; 0x99
 8011924:	f000 fcb9 	bl	801229a <assert_post_action>
		break;
 8011928:	e7b2      	b.n	8011890 <register_events+0x15c>
 801192a:	bf00      	nop
 801192c:	20001868 	.word	0x20001868
 8011930:	08016836 	.word	0x08016836
 8011934:	08017136 	.word	0x08017136
 8011938:	0801714e 	.word	0x0801714e
 801193c:	08017165 	.word	0x08017165
 8011940:	08019f4f 	.word	0x08019f4f
 8011944:	080169eb 	.word	0x080169eb
 8011948:	0801a04a 	.word	0x0801a04a
 801194c:	08019f70 	.word	0x08019f70
 8011950:	08019f8a 	.word	0x08019f8a
 8011954:	08019f9f 	.word	0x08019f9f
 8011958:	08019fbb 	.word	0x08019fbb
 801195c:	08019fcc 	.word	0x08019fcc
 8011960:	08019fe9 	.word	0x08019fe9
 8011964:	0801a000 	.word	0x0801a000
 8011968:	0801a01b 	.word	0x0801a01b
 801196c:	0801a034 	.word	0x0801a034
 8011970:	080170fb 	.word	0x080170fb
 8011974:	08017121 	.word	0x08017121

08011978 <k_poll_event_init>:
{
 8011978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197a:	4605      	mov	r5, r0
 801197c:	460f      	mov	r7, r1
 801197e:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
 8011980:	4614      	mov	r4, r2
 8011982:	b162      	cbz	r2, 801199e <k_poll_event_init+0x26>
 8011984:	491b      	ldr	r1, [pc, #108]	; (80119f4 <k_poll_event_init+0x7c>)
 8011986:	4a1c      	ldr	r2, [pc, #112]	; (80119f8 <k_poll_event_init+0x80>)
 8011988:	481c      	ldr	r0, [pc, #112]	; (80119fc <k_poll_event_init+0x84>)
 801198a:	232d      	movs	r3, #45	; 0x2d
 801198c:	f000 fc8c 	bl	80122a8 <assert_print>
 8011990:	481b      	ldr	r0, [pc, #108]	; (8011a00 <k_poll_event_init+0x88>)
 8011992:	f000 fc89 	bl	80122a8 <assert_print>
 8011996:	4818      	ldr	r0, [pc, #96]	; (80119f8 <k_poll_event_init+0x80>)
 8011998:	212d      	movs	r1, #45	; 0x2d
 801199a:	f000 fc7e 	bl	801229a <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
 801199e:	2f1f      	cmp	r7, #31
 80119a0:	d90c      	bls.n	80119bc <k_poll_event_init+0x44>
 80119a2:	4918      	ldr	r1, [pc, #96]	; (8011a04 <k_poll_event_init+0x8c>)
 80119a4:	4a14      	ldr	r2, [pc, #80]	; (80119f8 <k_poll_event_init+0x80>)
 80119a6:	4815      	ldr	r0, [pc, #84]	; (80119fc <k_poll_event_init+0x84>)
 80119a8:	232f      	movs	r3, #47	; 0x2f
 80119aa:	f000 fc7d 	bl	80122a8 <assert_print>
 80119ae:	4816      	ldr	r0, [pc, #88]	; (8011a08 <k_poll_event_init+0x90>)
 80119b0:	f000 fc7a 	bl	80122a8 <assert_print>
 80119b4:	4810      	ldr	r0, [pc, #64]	; (80119f8 <k_poll_event_init+0x80>)
 80119b6:	212f      	movs	r1, #47	; 0x2f
 80119b8:	f000 fc6f 	bl	801229a <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
 80119bc:	b966      	cbnz	r6, 80119d8 <k_poll_event_init+0x60>
 80119be:	4913      	ldr	r1, [pc, #76]	; (8011a0c <k_poll_event_init+0x94>)
 80119c0:	4a0d      	ldr	r2, [pc, #52]	; (80119f8 <k_poll_event_init+0x80>)
 80119c2:	480e      	ldr	r0, [pc, #56]	; (80119fc <k_poll_event_init+0x84>)
 80119c4:	2330      	movs	r3, #48	; 0x30
 80119c6:	f000 fc6f 	bl	80122a8 <assert_print>
 80119ca:	4811      	ldr	r0, [pc, #68]	; (8011a10 <k_poll_event_init+0x98>)
 80119cc:	f000 fc6c 	bl	80122a8 <assert_print>
 80119d0:	4809      	ldr	r0, [pc, #36]	; (80119f8 <k_poll_event_init+0x80>)
 80119d2:	2130      	movs	r1, #48	; 0x30
 80119d4:	f000 fc61 	bl	801229a <assert_post_action>
	event->poller = NULL;
 80119d8:	2300      	movs	r3, #0
	event->type = type;
 80119da:	04e4      	lsls	r4, r4, #19
 80119dc:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
 80119de:	60ab      	str	r3, [r5, #8]
	event->type = type;
 80119e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80119e4:	7b2b      	ldrb	r3, [r5, #12]
 80119e6:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
 80119ea:	433c      	orrs	r4, r7
 80119ec:	431c      	orrs	r4, r3
	event->obj = obj;
 80119ee:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
 80119f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119f4:	0801a067 	.word	0x0801a067
 80119f8:	08019f4f 	.word	0x08019f4f
 80119fc:	08016836 	.word	0x08016836
 8011a00:	0801a087 	.word	0x0801a087
 8011a04:	0801a0ad 	.word	0x0801a0ad
 8011a08:	0801a0d1 	.word	0x0801a0d1
 8011a0c:	0801a0e1 	.word	0x0801a0e1
 8011a10:	0801a0f4 	.word	0x0801a0f4

08011a14 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8011a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8011a1a:	4b75      	ldr	r3, [pc, #468]	; (8011bf0 <z_impl_k_poll+0x1dc>)
 8011a1c:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
 8011a1e:	2301      	movs	r3, #1
{
 8011a20:	4604      	mov	r4, r0
 8011a22:	4688      	mov	r8, r1
 8011a24:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
 8011a26:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
 8011a2a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
 8011a2e:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8011a32:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
 8011a36:	b173      	cbz	r3, 8011a56 <z_impl_k_poll+0x42>
 8011a38:	496e      	ldr	r1, [pc, #440]	; (8011bf4 <z_impl_k_poll+0x1e0>)
 8011a3a:	4a6f      	ldr	r2, [pc, #444]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a3c:	486f      	ldr	r0, [pc, #444]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011a3e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8011a42:	f000 fc31 	bl	80122a8 <assert_print>
 8011a46:	486e      	ldr	r0, [pc, #440]	; (8011c00 <z_impl_k_poll+0x1ec>)
 8011a48:	f000 fc2e 	bl	80122a8 <assert_print>
 8011a4c:	486a      	ldr	r0, [pc, #424]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a4e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8011a52:	f000 fc22 	bl	801229a <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
 8011a56:	b974      	cbnz	r4, 8011a76 <z_impl_k_poll+0x62>
 8011a58:	496a      	ldr	r1, [pc, #424]	; (8011c04 <z_impl_k_poll+0x1f0>)
 8011a5a:	4a67      	ldr	r2, [pc, #412]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a5c:	4867      	ldr	r0, [pc, #412]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011a5e:	f240 131b 	movw	r3, #283	; 0x11b
 8011a62:	f000 fc21 	bl	80122a8 <assert_print>
 8011a66:	4868      	ldr	r0, [pc, #416]	; (8011c08 <z_impl_k_poll+0x1f4>)
 8011a68:	f000 fc1e 	bl	80122a8 <assert_print>
 8011a6c:	4862      	ldr	r0, [pc, #392]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a6e:	f240 111b 	movw	r1, #283	; 0x11b
 8011a72:	f000 fc12 	bl	801229a <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
 8011a76:	f1b8 0f00 	cmp.w	r8, #0
 8011a7a:	da0e      	bge.n	8011a9a <z_impl_k_poll+0x86>
 8011a7c:	4963      	ldr	r1, [pc, #396]	; (8011c0c <z_impl_k_poll+0x1f8>)
 8011a7e:	4a5e      	ldr	r2, [pc, #376]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a80:	485e      	ldr	r0, [pc, #376]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011a82:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8011a86:	f000 fc0f 	bl	80122a8 <assert_print>
 8011a8a:	4861      	ldr	r0, [pc, #388]	; (8011c10 <z_impl_k_poll+0x1fc>)
 8011a8c:	f000 fc0c 	bl	80122a8 <assert_print>
 8011a90:	4859      	ldr	r0, [pc, #356]	; (8011bf8 <z_impl_k_poll+0x1e4>)
 8011a92:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8011a96:	f000 fc00 	bl	801229a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8011a9a:	ea56 0307 	orrs.w	r3, r6, r7
 8011a9e:	bf0c      	ite	eq
 8011aa0:	2301      	moveq	r3, #1
 8011aa2:	2300      	movne	r3, #0
 8011aa4:	4641      	mov	r1, r8
 8011aa6:	464a      	mov	r2, r9
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f7ff fe43 	bl	8011734 <register_events>
 8011aae:	4680      	mov	r8, r0
	__asm__ volatile(
 8011ab0:	f04f 0310 	mov.w	r3, #16
 8011ab4:	f3ef 8911 	mrs	r9, BASEPRI
 8011ab8:	f383 8812 	msr	BASEPRI_MAX, r3
 8011abc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011ac0:	4854      	ldr	r0, [pc, #336]	; (8011c14 <z_impl_k_poll+0x200>)
 8011ac2:	f7fd f815 	bl	800eaf0 <z_spin_lock_valid>
 8011ac6:	b968      	cbnz	r0, 8011ae4 <z_impl_k_poll+0xd0>
 8011ac8:	4a53      	ldr	r2, [pc, #332]	; (8011c18 <z_impl_k_poll+0x204>)
 8011aca:	4954      	ldr	r1, [pc, #336]	; (8011c1c <z_impl_k_poll+0x208>)
 8011acc:	484b      	ldr	r0, [pc, #300]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011ace:	238e      	movs	r3, #142	; 0x8e
 8011ad0:	f000 fbea 	bl	80122a8 <assert_print>
 8011ad4:	494f      	ldr	r1, [pc, #316]	; (8011c14 <z_impl_k_poll+0x200>)
 8011ad6:	4852      	ldr	r0, [pc, #328]	; (8011c20 <z_impl_k_poll+0x20c>)
 8011ad8:	f000 fbe6 	bl	80122a8 <assert_print>
 8011adc:	484e      	ldr	r0, [pc, #312]	; (8011c18 <z_impl_k_poll+0x204>)
 8011ade:	218e      	movs	r1, #142	; 0x8e
 8011ae0:	f000 fbdb 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011ae4:	484b      	ldr	r0, [pc, #300]	; (8011c14 <z_impl_k_poll+0x200>)
 8011ae6:	f7fd f821 	bl	800eb2c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8011aea:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8011aee:	b9fb      	cbnz	r3, 8011b30 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
 8011af0:	4620      	mov	r0, r4
 8011af2:	464a      	mov	r2, r9
 8011af4:	4641      	mov	r1, r8
 8011af6:	f7ff fd4f 	bl	8011598 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8011afa:	4846      	ldr	r0, [pc, #280]	; (8011c14 <z_impl_k_poll+0x200>)
 8011afc:	f7fd f806 	bl	800eb0c <z_spin_unlock_valid>
 8011b00:	b968      	cbnz	r0, 8011b1e <z_impl_k_poll+0x10a>
 8011b02:	4a45      	ldr	r2, [pc, #276]	; (8011c18 <z_impl_k_poll+0x204>)
 8011b04:	4947      	ldr	r1, [pc, #284]	; (8011c24 <z_impl_k_poll+0x210>)
 8011b06:	483d      	ldr	r0, [pc, #244]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011b08:	23b9      	movs	r3, #185	; 0xb9
 8011b0a:	f000 fbcd 	bl	80122a8 <assert_print>
 8011b0e:	4941      	ldr	r1, [pc, #260]	; (8011c14 <z_impl_k_poll+0x200>)
 8011b10:	4845      	ldr	r0, [pc, #276]	; (8011c28 <z_impl_k_poll+0x214>)
 8011b12:	f000 fbc9 	bl	80122a8 <assert_print>
 8011b16:	4840      	ldr	r0, [pc, #256]	; (8011c18 <z_impl_k_poll+0x204>)
 8011b18:	21b9      	movs	r1, #185	; 0xb9
 8011b1a:	f000 fbbe 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8011b1e:	f389 8811 	msr	BASEPRI, r9
 8011b22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
 8011b26:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8011b28:	4628      	mov	r0, r5
 8011b2a:	b003      	add	sp, #12
 8011b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
 8011b30:	2300      	movs	r3, #0
 8011b32:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011b36:	ea56 0307 	orrs.w	r3, r6, r7
 8011b3a:	d118      	bne.n	8011b6e <z_impl_k_poll+0x15a>
 8011b3c:	4835      	ldr	r0, [pc, #212]	; (8011c14 <z_impl_k_poll+0x200>)
 8011b3e:	f7fc ffe5 	bl	800eb0c <z_spin_unlock_valid>
 8011b42:	b968      	cbnz	r0, 8011b60 <z_impl_k_poll+0x14c>
 8011b44:	4a34      	ldr	r2, [pc, #208]	; (8011c18 <z_impl_k_poll+0x204>)
 8011b46:	4937      	ldr	r1, [pc, #220]	; (8011c24 <z_impl_k_poll+0x210>)
 8011b48:	482c      	ldr	r0, [pc, #176]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011b4a:	23b9      	movs	r3, #185	; 0xb9
 8011b4c:	f000 fbac 	bl	80122a8 <assert_print>
 8011b50:	4930      	ldr	r1, [pc, #192]	; (8011c14 <z_impl_k_poll+0x200>)
 8011b52:	4835      	ldr	r0, [pc, #212]	; (8011c28 <z_impl_k_poll+0x214>)
 8011b54:	f000 fba8 	bl	80122a8 <assert_print>
 8011b58:	482f      	ldr	r0, [pc, #188]	; (8011c18 <z_impl_k_poll+0x204>)
 8011b5a:	21b9      	movs	r1, #185	; 0xb9
 8011b5c:	f000 fb9d 	bl	801229a <assert_post_action>
 8011b60:	f389 8811 	msr	BASEPRI, r9
 8011b64:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8011b68:	f06f 050a 	mvn.w	r5, #10
 8011b6c:	e7dc      	b.n	8011b28 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8011b6e:	e9cd 6700 	strd	r6, r7, [sp]
 8011b72:	4a2e      	ldr	r2, [pc, #184]	; (8011c2c <z_impl_k_poll+0x218>)
 8011b74:	4827      	ldr	r0, [pc, #156]	; (8011c14 <z_impl_k_poll+0x200>)
 8011b76:	4649      	mov	r1, r9
 8011b78:	f7fe fc6e 	bl	8010458 <z_pend_curr>
 8011b7c:	4605      	mov	r5, r0
	__asm__ volatile(
 8011b7e:	f04f 0310 	mov.w	r3, #16
 8011b82:	f3ef 8611 	mrs	r6, BASEPRI
 8011b86:	f383 8812 	msr	BASEPRI_MAX, r3
 8011b8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011b8e:	4821      	ldr	r0, [pc, #132]	; (8011c14 <z_impl_k_poll+0x200>)
 8011b90:	f7fc ffae 	bl	800eaf0 <z_spin_lock_valid>
 8011b94:	b968      	cbnz	r0, 8011bb2 <z_impl_k_poll+0x19e>
 8011b96:	4a20      	ldr	r2, [pc, #128]	; (8011c18 <z_impl_k_poll+0x204>)
 8011b98:	4920      	ldr	r1, [pc, #128]	; (8011c1c <z_impl_k_poll+0x208>)
 8011b9a:	4818      	ldr	r0, [pc, #96]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011b9c:	238e      	movs	r3, #142	; 0x8e
 8011b9e:	f000 fb83 	bl	80122a8 <assert_print>
 8011ba2:	491c      	ldr	r1, [pc, #112]	; (8011c14 <z_impl_k_poll+0x200>)
 8011ba4:	481e      	ldr	r0, [pc, #120]	; (8011c20 <z_impl_k_poll+0x20c>)
 8011ba6:	f000 fb7f 	bl	80122a8 <assert_print>
 8011baa:	481b      	ldr	r0, [pc, #108]	; (8011c18 <z_impl_k_poll+0x204>)
 8011bac:	218e      	movs	r1, #142	; 0x8e
 8011bae:	f000 fb74 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011bb2:	4818      	ldr	r0, [pc, #96]	; (8011c14 <z_impl_k_poll+0x200>)
 8011bb4:	f7fc ffba 	bl	800eb2c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
 8011bb8:	4620      	mov	r0, r4
 8011bba:	4632      	mov	r2, r6
 8011bbc:	4641      	mov	r1, r8
 8011bbe:	f7ff fceb 	bl	8011598 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8011bc2:	4814      	ldr	r0, [pc, #80]	; (8011c14 <z_impl_k_poll+0x200>)
 8011bc4:	f7fc ffa2 	bl	800eb0c <z_spin_unlock_valid>
 8011bc8:	b968      	cbnz	r0, 8011be6 <z_impl_k_poll+0x1d2>
 8011bca:	4a13      	ldr	r2, [pc, #76]	; (8011c18 <z_impl_k_poll+0x204>)
 8011bcc:	4915      	ldr	r1, [pc, #84]	; (8011c24 <z_impl_k_poll+0x210>)
 8011bce:	480b      	ldr	r0, [pc, #44]	; (8011bfc <z_impl_k_poll+0x1e8>)
 8011bd0:	23b9      	movs	r3, #185	; 0xb9
 8011bd2:	f000 fb69 	bl	80122a8 <assert_print>
 8011bd6:	490f      	ldr	r1, [pc, #60]	; (8011c14 <z_impl_k_poll+0x200>)
 8011bd8:	4813      	ldr	r0, [pc, #76]	; (8011c28 <z_impl_k_poll+0x214>)
 8011bda:	f000 fb65 	bl	80122a8 <assert_print>
 8011bde:	480e      	ldr	r0, [pc, #56]	; (8011c18 <z_impl_k_poll+0x204>)
 8011be0:	21b9      	movs	r1, #185	; 0xb9
 8011be2:	f000 fb5a 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8011be6:	f386 8811 	msr	BASEPRI, r6
 8011bea:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8011bee:	e79b      	b.n	8011b28 <z_impl_k_poll+0x114>
 8011bf0:	20001818 	.word	0x20001818
 8011bf4:	08019b8c 	.word	0x08019b8c
 8011bf8:	08019f4f 	.word	0x08019f4f
 8011bfc:	08016836 	.word	0x08016836
 8011c00:	08019487 	.word	0x08019487
 8011c04:	0801a10e 	.word	0x0801a10e
 8011c08:	0801a124 	.word	0x0801a124
 8011c0c:	0801a133 	.word	0x0801a133
 8011c10:	0801a143 	.word	0x0801a143
 8011c14:	20001868 	.word	0x20001868
 8011c18:	080170fb 	.word	0x080170fb
 8011c1c:	08017121 	.word	0x08017121
 8011c20:	08017136 	.word	0x08017136
 8011c24:	0801714e 	.word	0x0801714e
 8011c28:	08017165 	.word	0x08017165
 8011c2c:	200003e8 	.word	0x200003e8

08011c30 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	4604      	mov	r4, r0
 8011c34:	460d      	mov	r5, r1
	__asm__ volatile(
 8011c36:	f04f 0310 	mov.w	r3, #16
 8011c3a:	f3ef 8611 	mrs	r6, BASEPRI
 8011c3e:	f383 8812 	msr	BASEPRI_MAX, r3
 8011c42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
 8011c46:	4821      	ldr	r0, [pc, #132]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011c48:	f7fc ff52 	bl	800eaf0 <z_spin_lock_valid>
 8011c4c:	b968      	cbnz	r0, 8011c6a <z_impl_k_poll_signal_raise+0x3a>
 8011c4e:	4a20      	ldr	r2, [pc, #128]	; (8011cd0 <z_impl_k_poll_signal_raise+0xa0>)
 8011c50:	4920      	ldr	r1, [pc, #128]	; (8011cd4 <z_impl_k_poll_signal_raise+0xa4>)
 8011c52:	4821      	ldr	r0, [pc, #132]	; (8011cd8 <z_impl_k_poll_signal_raise+0xa8>)
 8011c54:	238e      	movs	r3, #142	; 0x8e
 8011c56:	f000 fb27 	bl	80122a8 <assert_print>
 8011c5a:	491c      	ldr	r1, [pc, #112]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011c5c:	481f      	ldr	r0, [pc, #124]	; (8011cdc <z_impl_k_poll_signal_raise+0xac>)
 8011c5e:	f000 fb23 	bl	80122a8 <assert_print>
 8011c62:	481b      	ldr	r0, [pc, #108]	; (8011cd0 <z_impl_k_poll_signal_raise+0xa0>)
 8011c64:	218e      	movs	r1, #142	; 0x8e
 8011c66:	f000 fb18 	bl	801229a <assert_post_action>
	z_spin_lock_set_owner(l);
 8011c6a:	4818      	ldr	r0, [pc, #96]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011c6c:	f7fc ff5e 	bl	800eb2c <z_spin_lock_set_owner>
	return list->head == list;
 8011c70:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8011c72:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
 8011c74:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8011c76:	4284      	cmp	r4, r0
 8011c78:	60a1      	str	r1, [r4, #8]
 8011c7a:	d117      	bne.n	8011cac <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
 8011c7c:	4813      	ldr	r0, [pc, #76]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011c7e:	f7fc ff45 	bl	800eb0c <z_spin_unlock_valid>
 8011c82:	b968      	cbnz	r0, 8011ca0 <z_impl_k_poll_signal_raise+0x70>
 8011c84:	4a12      	ldr	r2, [pc, #72]	; (8011cd0 <z_impl_k_poll_signal_raise+0xa0>)
 8011c86:	4916      	ldr	r1, [pc, #88]	; (8011ce0 <z_impl_k_poll_signal_raise+0xb0>)
 8011c88:	4813      	ldr	r0, [pc, #76]	; (8011cd8 <z_impl_k_poll_signal_raise+0xa8>)
 8011c8a:	23b9      	movs	r3, #185	; 0xb9
 8011c8c:	f000 fb0c 	bl	80122a8 <assert_print>
 8011c90:	490e      	ldr	r1, [pc, #56]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011c92:	4814      	ldr	r0, [pc, #80]	; (8011ce4 <z_impl_k_poll_signal_raise+0xb4>)
 8011c94:	f000 fb08 	bl	80122a8 <assert_print>
 8011c98:	480d      	ldr	r0, [pc, #52]	; (8011cd0 <z_impl_k_poll_signal_raise+0xa0>)
 8011c9a:	21b9      	movs	r1, #185	; 0xb9
 8011c9c:	f000 fafd 	bl	801229a <assert_post_action>
	__asm__ volatile(
 8011ca0:	f386 8811 	msr	BASEPRI, r6
 8011ca4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8011ca8:	2400      	movs	r4, #0
 8011caa:	e00d      	b.n	8011cc8 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
 8011cac:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8011cb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8011cb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8011cb4:	2300      	movs	r3, #0
	node->prev = NULL;
 8011cb6:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8011cba:	f003 fcaa 	bl	8015612 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 8011cbe:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8011cc0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8011cc2:	4802      	ldr	r0, [pc, #8]	; (8011ccc <z_impl_k_poll_signal_raise+0x9c>)
 8011cc4:	f7fd ff74 	bl	800fbb0 <z_reschedule>
	return rc;
}
 8011cc8:	4620      	mov	r0, r4
 8011cca:	bd70      	pop	{r4, r5, r6, pc}
 8011ccc:	20001868 	.word	0x20001868
 8011cd0:	080170fb 	.word	0x080170fb
 8011cd4:	08017121 	.word	0x08017121
 8011cd8:	08016836 	.word	0x08016836
 8011cdc:	08017136 	.word	0x08017136
 8011ce0:	0801714e 	.word	0x0801714e
 8011ce4:	08017165 	.word	0x08017165

08011ce8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8011ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cea:	4606      	mov	r6, r0
 8011cec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8011cee:	f003 fb39 	bl	8015364 <k_is_in_isr>
 8011cf2:	b980      	cbnz	r0, 8011d16 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8011cf4:	4b15      	ldr	r3, [pc, #84]	; (8011d4c <z_thread_aligned_alloc+0x64>)
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
 8011cfa:	b31c      	cbz	r4, 8011d44 <z_thread_aligned_alloc+0x5c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8011cfc:	2204      	movs	r2, #4
 8011cfe:	18aa      	adds	r2, r5, r2
 8011d00:	d209      	bcs.n	8011d16 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 8011d02:	2000      	movs	r0, #0
 8011d04:	2100      	movs	r1, #0
 8011d06:	e9cd 0100 	strd	r0, r1, [sp]
 8011d0a:	f046 0104 	orr.w	r1, r6, #4
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f7fc fbb2 	bl	800e478 <k_heap_aligned_alloc>
	if (mem == NULL) {
 8011d14:	b908      	cbnz	r0, 8011d1a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
 8011d16:	2400      	movs	r4, #0
	}

	return ret;
 8011d18:	e014      	b.n	8011d44 <z_thread_aligned_alloc+0x5c>
	*heap_ref = heap;
 8011d1a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
 8011d1c:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
 8011d1e:	b18e      	cbz	r6, 8011d44 <z_thread_aligned_alloc+0x5c>
 8011d20:	1e73      	subs	r3, r6, #1
 8011d22:	421c      	tst	r4, r3
 8011d24:	d00e      	beq.n	8011d44 <z_thread_aligned_alloc+0x5c>
 8011d26:	4a0a      	ldr	r2, [pc, #40]	; (8011d50 <z_thread_aligned_alloc+0x68>)
 8011d28:	490a      	ldr	r1, [pc, #40]	; (8011d54 <z_thread_aligned_alloc+0x6c>)
 8011d2a:	480b      	ldr	r0, [pc, #44]	; (8011d58 <z_thread_aligned_alloc+0x70>)
 8011d2c:	2325      	movs	r3, #37	; 0x25
 8011d2e:	f000 fabb 	bl	80122a8 <assert_print>
 8011d32:	480a      	ldr	r0, [pc, #40]	; (8011d5c <z_thread_aligned_alloc+0x74>)
 8011d34:	4621      	mov	r1, r4
 8011d36:	4632      	mov	r2, r6
 8011d38:	f000 fab6 	bl	80122a8 <assert_print>
 8011d3c:	4804      	ldr	r0, [pc, #16]	; (8011d50 <z_thread_aligned_alloc+0x68>)
 8011d3e:	2125      	movs	r1, #37	; 0x25
 8011d40:	f000 faab 	bl	801229a <assert_post_action>
}
 8011d44:	4620      	mov	r0, r4
 8011d46:	b002      	add	sp, #8
 8011d48:	bd70      	pop	{r4, r5, r6, pc}
 8011d4a:	bf00      	nop
 8011d4c:	20001818 	.word	0x20001818
 8011d50:	0801a150 	.word	0x0801a150
 8011d54:	0801a174 	.word	0x0801a174
 8011d58:	08016836 	.word	0x08016836
 8011d5c:	0801a1a6 	.word	0x0801a1a6

08011d60 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8011d60:	4a02      	ldr	r2, [pc, #8]	; (8011d6c <boot_banner+0xc>)
 8011d62:	4903      	ldr	r1, [pc, #12]	; (8011d70 <boot_banner+0x10>)
 8011d64:	4803      	ldr	r0, [pc, #12]	; (8011d74 <boot_banner+0x14>)
 8011d66:	f000 b8fb 	b.w	8011f60 <printk>
 8011d6a:	bf00      	nop
 8011d6c:	08019489 	.word	0x08019489
 8011d70:	0801a1ce 	.word	0x0801a1ce
 8011d74:	0801a1ef 	.word	0x0801a1ef

08011d78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8011d78:	4770      	bx	lr

08011d7a <check_condition>:
{
 8011d7a:	b510      	push	{r4, lr}
 8011d7c:	1ec4      	subs	r4, r0, #3
 8011d7e:	2c06      	cmp	r4, #6
 8011d80:	d823      	bhi.n	8011dca <check_condition+0x50>
 8011d82:	e8df f004 	tbb	[pc, r4]
 8011d86:	0804      	.short	0x0804
 8011d88:	1c17120d 	.word	0x1c17120d
 8011d8c:	20          	.byte	0x20
 8011d8d:	00          	.byte	0x00
		return new_val != old_val;
 8011d8e:	1a50      	subs	r0, r2, r1
		return new_val != ref_val;
 8011d90:	bf18      	it	ne
 8011d92:	2001      	movne	r0, #1
 8011d94:	e003      	b.n	8011d9e <check_condition+0x24>
		return new_val < ref_val;
 8011d96:	429a      	cmp	r2, r3
 8011d98:	bfac      	ite	ge
 8011d9a:	2000      	movge	r0, #0
 8011d9c:	2001      	movlt	r0, #1
}
 8011d9e:	bd10      	pop	{r4, pc}
		return new_val <= ref_val;
 8011da0:	429a      	cmp	r2, r3
 8011da2:	bfcc      	ite	gt
 8011da4:	2000      	movgt	r0, #0
 8011da6:	2001      	movle	r0, #1
 8011da8:	e7f9      	b.n	8011d9e <check_condition+0x24>
		return new_val > ref_val;
 8011daa:	429a      	cmp	r2, r3
 8011dac:	bfd4      	ite	le
 8011dae:	2000      	movle	r0, #0
 8011db0:	2001      	movgt	r0, #1
 8011db2:	e7f4      	b.n	8011d9e <check_condition+0x24>
		return new_val >= ref_val;
 8011db4:	429a      	cmp	r2, r3
 8011db6:	bfb4      	ite	lt
 8011db8:	2000      	movlt	r0, #0
 8011dba:	2001      	movge	r0, #1
 8011dbc:	e7ef      	b.n	8011d9e <check_condition+0x24>
		return new_val == ref_val;
 8011dbe:	1ad3      	subs	r3, r2, r3
 8011dc0:	4258      	negs	r0, r3
 8011dc2:	4158      	adcs	r0, r3
 8011dc4:	e7eb      	b.n	8011d9e <check_condition+0x24>
		return new_val != ref_val;
 8011dc6:	1ad0      	subs	r0, r2, r3
 8011dc8:	e7e2      	b.n	8011d90 <check_condition+0x16>
{
 8011dca:	2000      	movs	r0, #0
 8011dcc:	e7e7      	b.n	8011d9e <check_condition+0x24>

08011dce <read_temp_trigger_setting>:
{
 8011dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct temperature_sensor *sensor = attr->user_data;
 8011dd2:	68cc      	ldr	r4, [r1, #12]
	switch (sensor->condition) {
 8011dd4:	79a5      	ldrb	r5, [r4, #6]
{
 8011dd6:	b086      	sub	sp, #24
	switch (sensor->condition) {
 8011dd8:	2d02      	cmp	r5, #2
{
 8011dda:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8011dde:	4684      	mov	ip, r0
 8011de0:	460e      	mov	r6, r1
 8011de2:	4696      	mov	lr, r2
 8011de4:	4698      	mov	r8, r3
	switch (sensor->condition) {
 8011de6:	d812      	bhi.n	8011e0e <read_temp_trigger_setting+0x40>
 8011de8:	b19d      	cbz	r5, 8011e12 <read_temp_trigger_setting+0x44>
		rp.condition = sensor->condition;
 8011dea:	f88d 5014 	strb.w	r5, [sp, #20]
		sys_put_le24(sensor->seconds, rp.sec);
 8011dee:	68a4      	ldr	r4, [r4, #8]
	dst[0] = val;
 8011df0:	f88d 4015 	strb.w	r4, [sp, #21]
	dst[1] = val >> 8;
 8011df4:	f3c4 2507 	ubfx	r5, r4, #8, #8
	dst[2] = val >> 16;
 8011df8:	0c24      	lsrs	r4, r4, #16
 8011dfa:	f88d 4017 	strb.w	r4, [sp, #23]
	dst[1] = val >> 8;
 8011dfe:	f88d 5016 	strb.w	r5, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 8011e02:	2404      	movs	r4, #4
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 8011e04:	9402      	str	r4, [sp, #8]
 8011e06:	ac05      	add	r4, sp, #20
 8011e08:	e9cd 7400 	strd	r7, r4, [sp]
 8011e0c:	e00a      	b.n	8011e24 <read_temp_trigger_setting+0x56>
	switch (sensor->condition) {
 8011e0e:	2d03      	cmp	r5, #3
 8011e10:	d10d      	bne.n	8011e2e <read_temp_trigger_setting+0x60>
		&sensor->condition,
 8011e12:	3406      	adds	r4, #6
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 8011e14:	e9cd 7400 	strd	r7, r4, [sp]
 8011e18:	2301      	movs	r3, #1
 8011e1a:	9302      	str	r3, [sp, #8]
 8011e1c:	4672      	mov	r2, lr
 8011e1e:	4643      	mov	r3, r8
 8011e20:	4631      	mov	r1, r6
 8011e22:	4660      	mov	r0, ip
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 8011e24:	f002 fb86 	bl	8014534 <bt_gatt_attr_read>
}
 8011e28:	b006      	add	sp, #24
 8011e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rp.condition = sensor->condition;
 8011e2e:	f88d 5014 	strb.w	r5, [sp, #20]
		rp.ref_val = sys_cpu_to_le16(sensor->ref_val);
 8011e32:	8924      	ldrh	r4, [r4, #8]
 8011e34:	f8ad 4015 	strh.w	r4, [sp, #21]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
 8011e38:	2403      	movs	r4, #3
 8011e3a:	e7e3      	b.n	8011e04 <read_temp_trigger_setting+0x36>

08011e3c <read_temp_valid_range>:
{
 8011e3c:	b530      	push	{r4, r5, lr}
	const struct temperature_sensor *sensor = attr->user_data;
 8011e3e:	68cc      	ldr	r4, [r1, #12]
{
 8011e40:	b087      	sub	sp, #28
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
 8011e42:	8865      	ldrh	r5, [r4, #2]
 8011e44:	88a4      	ldrh	r4, [r4, #4]
 8011e46:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
 8011e4a:	2404      	movs	r4, #4
 8011e4c:	9402      	str	r4, [sp, #8]
 8011e4e:	ac05      	add	r4, sp, #20
 8011e50:	9401      	str	r4, [sp, #4]
 8011e52:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8011e56:	9400      	str	r4, [sp, #0]
	uint16_t tmp[] = {sys_cpu_to_le16(sensor->lower_limit),
 8011e58:	f8ad 5014 	strh.w	r5, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, tmp,
 8011e5c:	f002 fb6a 	bl	8014534 <bt_gatt_attr_read>
}
 8011e60:	b007      	add	sp, #28
 8011e62:	bd30      	pop	{r4, r5, pc}

08011e64 <read_u16>:
{
 8011e64:	b510      	push	{r4, lr}
	uint16_t value = sys_cpu_to_le16(*u16);
 8011e66:	68cc      	ldr	r4, [r1, #12]
{
 8011e68:	b086      	sub	sp, #24
	uint16_t value = sys_cpu_to_le16(*u16);
 8011e6a:	8824      	ldrh	r4, [r4, #0]
 8011e6c:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 8011e70:	2402      	movs	r4, #2
 8011e72:	9402      	str	r4, [sp, #8]
 8011e74:	f10d 0416 	add.w	r4, sp, #22
 8011e78:	9401      	str	r4, [sp, #4]
 8011e7a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8011e7e:	9400      	str	r4, [sp, #0]
 8011e80:	f002 fb58 	bl	8014534 <bt_gatt_attr_read>
}
 8011e84:	b006      	add	sp, #24
 8011e86:	bd10      	pop	{r4, pc}

08011e88 <read_es_measurement>:
{
 8011e88:	b570      	push	{r4, r5, r6, lr}
	const struct es_measurement *value = attr->user_data;
 8011e8a:	68cc      	ldr	r4, [r1, #12]
{
 8011e8c:	b088      	sub	sp, #32
	rsp.flags = sys_cpu_to_le16(value->flags);
 8011e8e:	8825      	ldrh	r5, [r4, #0]
 8011e90:	f8ad 5014 	strh.w	r5, [sp, #20]
	rsp.sampling_function = value->sampling_func;
 8011e94:	78a5      	ldrb	r5, [r4, #2]
 8011e96:	f88d 5016 	strb.w	r5, [sp, #22]
	sys_put_le24(value->meas_period, rsp.measurement_period);
 8011e9a:	6865      	ldr	r5, [r4, #4]
	dst[0] = val;
 8011e9c:	f88d 5017 	strb.w	r5, [sp, #23]
	dst[1] = val >> 8;
 8011ea0:	f3c5 2607 	ubfx	r6, r5, #8, #8
	dst[2] = val >> 16;
 8011ea4:	0c2d      	lsrs	r5, r5, #16
 8011ea6:	f88d 5019 	strb.w	r5, [sp, #25]
	dst[0] = val;
 8011eaa:	8925      	ldrh	r5, [r4, #8]
 8011eac:	f8ad 501a 	strh.w	r5, [sp, #26]
	dst[2] = val >> 16;
 8011eb0:	8965      	ldrh	r5, [r4, #10]
 8011eb2:	f88d 501c 	strb.w	r5, [sp, #28]
	rsp.application = value->application;
 8011eb6:	7b25      	ldrb	r5, [r4, #12]
	rsp.measurement_uncertainty = value->meas_uncertainty;
 8011eb8:	7b64      	ldrb	r4, [r4, #13]
 8011eba:	f88d 401e 	strb.w	r4, [sp, #30]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
 8011ebe:	240b      	movs	r4, #11
 8011ec0:	9402      	str	r4, [sp, #8]
 8011ec2:	ac05      	add	r4, sp, #20
 8011ec4:	9401      	str	r4, [sp, #4]
 8011ec6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8011eca:	9400      	str	r4, [sp, #0]
	dst[1] = val >> 8;
 8011ecc:	f88d 6018 	strb.w	r6, [sp, #24]
	rsp.application = value->application;
 8011ed0:	f88d 501d 	strb.w	r5, [sp, #29]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &rsp,
 8011ed4:	f002 fb2e 	bl	8014534 <bt_gatt_attr_read>
}
 8011ed8:	b008      	add	sp, #32
 8011eda:	bd70      	pop	{r4, r5, r6, pc}

08011edc <cbpprintf_external>:
{
 8011edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee0:	4607      	mov	r7, r0
 8011ee2:	460e      	mov	r6, r1
 8011ee4:	4690      	mov	r8, r2
	if (buf == NULL) {
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	b30b      	cbz	r3, 8011f2e <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8011eea:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
 8011eec:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
 8011eee:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
 8011ef2:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8011ef4:	441c      	add	r4, r3
 8011ef6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011efa:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
 8011efc:	f04f 0900 	mov.w	r9, #0
 8011f00:	45d1      	cmp	r9, sl
 8011f02:	d308      	bcc.n	8011f16 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 8011f04:	686a      	ldr	r2, [r5, #4]
 8011f06:	f105 0308 	add.w	r3, r5, #8
 8011f0a:	4641      	mov	r1, r8
 8011f0c:	4638      	mov	r0, r7
 8011f0e:	46b4      	mov	ip, r6
}
 8011f10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8011f14:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8011f16:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 8011f1a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f000 ff88 	bl	8012e34 <strlen>
 8011f24:	3001      	adds	r0, #1
 8011f26:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8011f28:	f109 0901 	add.w	r9, r9, #1
 8011f2c:	e7e8      	b.n	8011f00 <cbpprintf_external+0x24>
}
 8011f2e:	f06f 0015 	mvn.w	r0, #21
 8011f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011f36 <arch_printk_char_out>:
}
 8011f36:	2000      	movs	r0, #0
 8011f38:	4770      	bx	lr

08011f3a <str_out>:
{
 8011f3a:	b530      	push	{r4, r5, lr}
 8011f3c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8011f3e:	680c      	ldr	r4, [r1, #0]
 8011f40:	1c55      	adds	r5, r2, #1
 8011f42:	b114      	cbz	r4, 8011f4a <str_out+0x10>
 8011f44:	684b      	ldr	r3, [r1, #4]
 8011f46:	4293      	cmp	r3, r2
 8011f48:	dc01      	bgt.n	8011f4e <str_out+0x14>
		ctx->count++;
 8011f4a:	608d      	str	r5, [r1, #8]
}
 8011f4c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8011f52:	bf08      	it	eq
 8011f54:	2200      	moveq	r2, #0
 8011f56:	608d      	str	r5, [r1, #8]
 8011f58:	bf0c      	ite	eq
 8011f5a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8011f5c:	54a0      	strbne	r0, [r4, r2]
 8011f5e:	e7f5      	b.n	8011f4c <str_out+0x12>

08011f60 <printk>:
{
 8011f60:	b40f      	push	{r0, r1, r2, r3}
 8011f62:	b507      	push	{r0, r1, r2, lr}
 8011f64:	a904      	add	r1, sp, #16
 8011f66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8011f6a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8011f6c:	f7ef fbc4 	bl	80016f8 <vprintk>
}
 8011f70:	b003      	add	sp, #12
 8011f72:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f76:	b004      	add	sp, #16
 8011f78:	4770      	bx	lr

08011f7a <snprintk>:
{
 8011f7a:	b40c      	push	{r2, r3}
 8011f7c:	b507      	push	{r0, r1, r2, lr}
 8011f7e:	ab04      	add	r3, sp, #16
 8011f80:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8011f84:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8011f86:	f7ef fbc5 	bl	8001714 <vsnprintk>
}
 8011f8a:	b003      	add	sp, #12
 8011f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f90:	b002      	add	sp, #8
 8011f92:	4770      	bx	lr

08011f94 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8011f94:	4604      	mov	r4, r0
 8011f96:	b508      	push	{r3, lr}
 8011f98:	4608      	mov	r0, r1
 8011f9a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	47a0      	blx	r4
	return z_impl_z_current_get();
 8011fa0:	f7fe fda0 	bl	8010ae4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8011fa4:	f7f2 fa72 	bl	800448c <z_impl_k_thread_abort>

08011fa8 <chunk_size>:
		return ((uint16_t *)cmem)[f];
 8011fa8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011fac:	8840      	ldrh	r0, [r0, #2]
}
 8011fae:	0840      	lsrs	r0, r0, #1
 8011fb0:	4770      	bx	lr

08011fb2 <free_list_add>:
{
 8011fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
 8011fb8:	f7ff fff6 	bl	8011fa8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 8011fbc:	fab0 f080 	clz	r0, r0
 8011fc0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8011fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011fc8:	00ca      	lsls	r2, r1, #3
 8011fca:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8011fce:	1d17      	adds	r7, r2, #4
 8011fd0:	b28d      	uxth	r5, r1
 8011fd2:	3206      	adds	r2, #6
 8011fd4:	b956      	cbnz	r6, 8011fec <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8011fd6:	2101      	movs	r1, #1
 8011fd8:	fa01 f000 	lsl.w	r0, r1, r0
 8011fdc:	68d9      	ldr	r1, [r3, #12]
 8011fde:	4301      	orrs	r1, r0
 8011fe0:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8011fe2:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 8011fe6:	53dd      	strh	r5, [r3, r7]
 8011fe8:	529d      	strh	r5, [r3, r2]
}
 8011fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8011fec:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8011fee:	3104      	adds	r1, #4
 8011ff0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8011ff2:	53d8      	strh	r0, [r3, r7]
 8011ff4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011ff8:	529e      	strh	r6, [r3, r2]
 8011ffa:	80c5      	strh	r5, [r0, #6]
 8011ffc:	525d      	strh	r5, [r3, r1]
 8011ffe:	e7f4      	b.n	8011fea <free_list_add+0x38>

08012000 <free_list_remove_bidx>:
{
 8012000:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
 8012002:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012006:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
 8012008:	4299      	cmp	r1, r3
 801200a:	f102 0104 	add.w	r1, r2, #4
 801200e:	d10a      	bne.n	8012026 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
 8012010:	2301      	movs	r3, #1
 8012012:	fa03 f202 	lsl.w	r2, r3, r2
 8012016:	68c3      	ldr	r3, [r0, #12]
 8012018:	ea23 0302 	bic.w	r3, r3, r2
 801201c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 8012024:	bd10      	pop	{r4, pc}
 8012026:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
 8012028:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
 801202c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8012030:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8012034:	80cb      	strh	r3, [r1, #6]
 8012036:	8082      	strh	r2, [r0, #4]
}
 8012038:	e7f4      	b.n	8012024 <free_list_remove_bidx+0x24>

0801203a <free_list_remove>:
{
 801203a:	b510      	push	{r4, lr}
 801203c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
 801203e:	f7ff ffb3 	bl	8011fa8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 8012042:	fab0 f280 	clz	r2, r0
}
 8012046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
 801204a:	f1c2 021f 	rsb	r2, r2, #31
 801204e:	4618      	mov	r0, r3
 8012050:	f7ff bfd6 	b.w	8012000 <free_list_remove_bidx>

08012054 <alloc_chunk>:
{
 8012054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012058:	fab1 f581 	clz	r5, r1
 801205c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
 8012060:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
 8012064:	4603      	mov	r3, r0
	if (b->next) {
 8012066:	693a      	ldr	r2, [r7, #16]
{
 8012068:	460e      	mov	r6, r1
	if (b->next) {
 801206a:	b1ca      	cbz	r2, 80120a0 <alloc_chunk+0x4c>
 801206c:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
 8012070:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
 8012072:	4618      	mov	r0, r3
 8012074:	4621      	mov	r1, r4
 8012076:	f7ff ff97 	bl	8011fa8 <chunk_size>
 801207a:	42b0      	cmp	r0, r6
 801207c:	d307      	bcc.n	801208e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
 801207e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
 8012080:	4621      	mov	r1, r4
 8012082:	4618      	mov	r0, r3
 8012084:	f7ff ffbc 	bl	8012000 <free_list_remove_bidx>
}
 8012088:	4620      	mov	r0, r4
 801208a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
 801208e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
 8012092:	f1b8 0801 	subs.w	r8, r8, #1
 8012096:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
 8012098:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
 801209a:	d001      	beq.n	80120a0 <alloc_chunk+0x4c>
 801209c:	428a      	cmp	r2, r1
 801209e:	d1e7      	bne.n	8012070 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 80120a0:	68d9      	ldr	r1, [r3, #12]
 80120a2:	f1c5 0520 	rsb	r5, r5, #32
 80120a6:	f04f 34ff 	mov.w	r4, #4294967295
 80120aa:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
 80120ac:	400c      	ands	r4, r1
 80120ae:	d0eb      	beq.n	8012088 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
 80120b0:	fa94 f2a4 	rbit	r2, r4
 80120b4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 80120b8:	1d11      	adds	r1, r2, #4
 80120ba:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80120be:	e7df      	b.n	8012080 <alloc_chunk+0x2c>

080120c0 <merge_chunks>:
{
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	4603      	mov	r3, r0
 80120c4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 80120c6:	f7ff ff6f 	bl	8011fa8 <chunk_size>
 80120ca:	4611      	mov	r1, r2
 80120cc:	4604      	mov	r4, r0
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7ff ff6a 	bl	8011fa8 <chunk_size>
 80120d4:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
 80120d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80120da:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
 80120dc:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
 80120de:	4618      	mov	r0, r3
 80120e0:	4611      	mov	r1, r2
 80120e2:	f7ff ff61 	bl	8011fa8 <chunk_size>
	void *cmem = &buf[c];
 80120e6:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
 80120e8:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
 80120ec:	bd38      	pop	{r3, r4, r5, pc}

080120ee <split_chunks>:
{
 80120ee:	b538      	push	{r3, r4, r5, lr}
 80120f0:	4603      	mov	r3, r0
 80120f2:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
 80120f4:	f7ff ff58 	bl	8011fa8 <chunk_size>
	chunksz_t lsz = rc - lc;
 80120f8:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
 80120fa:	1aa5      	subs	r5, r4, r2
 80120fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012100:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8012102:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
 8012104:	8060      	strh	r0, [r4, #2]
 8012106:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801210a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 801210c:	8044      	strh	r4, [r0, #2]
 801210e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
 8012112:	4618      	mov	r0, r3
 8012114:	4611      	mov	r1, r2
 8012116:	f7ff ff47 	bl	8011fa8 <chunk_size>
	void *cmem = &buf[c];
 801211a:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
 801211c:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
 8012120:	bd38      	pop	{r3, r4, r5, pc}

08012122 <free_chunk>:
{
 8012122:	b538      	push	{r3, r4, r5, lr}
 8012124:	4605      	mov	r5, r0
 8012126:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
 8012128:	f7ff ff3e 	bl	8011fa8 <chunk_size>
 801212c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
 801212e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8012132:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
 8012134:	07da      	lsls	r2, r3, #31
 8012136:	d40a      	bmi.n	801214e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
 8012138:	4628      	mov	r0, r5
 801213a:	f7ff ff7e 	bl	801203a <free_list_remove>
	return c + chunk_size(h, c);
 801213e:	4621      	mov	r1, r4
 8012140:	4628      	mov	r0, r5
 8012142:	f7ff ff31 	bl	8011fa8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 8012146:	1822      	adds	r2, r4, r0
 8012148:	4628      	mov	r0, r5
 801214a:	f7ff ffb9 	bl	80120c0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
 801214e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 8012152:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
 8012154:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8012158:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
 801215a:	07db      	lsls	r3, r3, #31
 801215c:	d40c      	bmi.n	8012178 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
 801215e:	4628      	mov	r0, r5
 8012160:	f7ff ff6b 	bl	801203a <free_list_remove>
		return ((uint16_t *)cmem)[f];
 8012164:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
 8012168:	4622      	mov	r2, r4
 801216a:	1a61      	subs	r1, r4, r1
 801216c:	4628      	mov	r0, r5
 801216e:	f7ff ffa7 	bl	80120c0 <merge_chunks>
 8012172:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 8012176:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
 8012178:	4621      	mov	r1, r4
 801217a:	4628      	mov	r0, r5
}
 801217c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
 8012180:	f7ff bf17 	b.w	8011fb2 <free_list_add>

08012184 <sys_heap_alloc>:
{
 8012184:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 8012186:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
 8012188:	b909      	cbnz	r1, 801218e <sys_heap_alloc+0xa>
		return NULL;
 801218a:	2000      	movs	r0, #0
}
 801218c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
 801218e:	68ab      	ldr	r3, [r5, #8]
 8012190:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8012194:	d9f9      	bls.n	801218a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8012196:	310b      	adds	r1, #11
 8012198:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 801219a:	4621      	mov	r1, r4
 801219c:	4628      	mov	r0, r5
 801219e:	f7ff ff59 	bl	8012054 <alloc_chunk>
	if (c == 0U) {
 80121a2:	4606      	mov	r6, r0
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d0f0      	beq.n	801218a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 80121a8:	4601      	mov	r1, r0
 80121aa:	4628      	mov	r0, r5
 80121ac:	f7ff fefc 	bl	8011fa8 <chunk_size>
 80121b0:	42a0      	cmp	r0, r4
 80121b2:	d908      	bls.n	80121c6 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
 80121b4:	4434      	add	r4, r6
 80121b6:	4628      	mov	r0, r5
 80121b8:	4622      	mov	r2, r4
 80121ba:	f7ff ff98 	bl	80120ee <split_chunks>
		free_list_add(h, c + chunk_sz);
 80121be:	4621      	mov	r1, r4
 80121c0:	4628      	mov	r0, r5
 80121c2:	f7ff fef6 	bl	8011fb2 <free_list_add>
	void *cmem = &buf[c];
 80121c6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 80121ca:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80121cc:	8853      	ldrh	r3, [r2, #2]
 80121ce:	f043 0301 	orr.w	r3, r3, #1
 80121d2:	8053      	strh	r3, [r2, #2]
 80121d4:	3004      	adds	r0, #4
	return mem;
 80121d6:	e7d9      	b.n	801218c <sys_heap_alloc+0x8>

080121d8 <encode_uint>:
{
 80121d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121dc:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
 80121de:	78d3      	ldrb	r3, [r2, #3]
{
 80121e0:	4614      	mov	r4, r2
	switch (specifier) {
 80121e2:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80121e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
 80121e8:	4606      	mov	r6, r0
 80121ea:	460f      	mov	r7, r1
 80121ec:	9201      	str	r2, [sp, #4]
	switch (specifier) {
 80121ee:	d02d      	beq.n	801224c <encode_uint+0x74>
 80121f0:	d828      	bhi.n	8012244 <encode_uint+0x6c>
		return 16;
 80121f2:	2b58      	cmp	r3, #88	; 0x58
 80121f4:	bf14      	ite	ne
 80121f6:	250a      	movne	r5, #10
 80121f8:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
 80121fa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
 80121fe:	46aa      	mov	sl, r5
 8012200:	f04f 0b00 	mov.w	fp, #0
 8012204:	4652      	mov	r2, sl
 8012206:	465b      	mov	r3, fp
 8012208:	4630      	mov	r0, r6
 801220a:	4639      	mov	r1, r7
 801220c:	f7ee f980 	bl	8000510 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8012210:	2a09      	cmp	r2, #9
 8012212:	b2d3      	uxtb	r3, r2
 8012214:	d81f      	bhi.n	8012256 <encode_uint+0x7e>
 8012216:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8012218:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
 801221a:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
 801221c:	bf08      	it	eq
 801221e:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8012220:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
 8012224:	d301      	bcc.n	801222a <encode_uint+0x52>
 8012226:	45c8      	cmp	r8, r9
 8012228:	d812      	bhi.n	8012250 <encode_uint+0x78>
	if (conv->flag_hash) {
 801222a:	7823      	ldrb	r3, [r4, #0]
 801222c:	069b      	lsls	r3, r3, #26
 801222e:	d505      	bpl.n	801223c <encode_uint+0x64>
		if (radix == 8) {
 8012230:	2d08      	cmp	r5, #8
 8012232:	d116      	bne.n	8012262 <encode_uint+0x8a>
			conv->altform_0 = true;
 8012234:	78a3      	ldrb	r3, [r4, #2]
 8012236:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 801223a:	70a3      	strb	r3, [r4, #2]
}
 801223c:	4640      	mov	r0, r8
 801223e:	b003      	add	sp, #12
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8012244:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8012248:	2b70      	cmp	r3, #112	; 0x70
 801224a:	e7d3      	b.n	80121f4 <encode_uint+0x1c>
	switch (specifier) {
 801224c:	2508      	movs	r5, #8
 801224e:	e7d4      	b.n	80121fa <encode_uint+0x22>
		value /= radix;
 8012250:	4606      	mov	r6, r0
 8012252:	460f      	mov	r7, r1
 8012254:	e7d6      	b.n	8012204 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8012256:	9a01      	ldr	r2, [sp, #4]
 8012258:	2a19      	cmp	r2, #25
 801225a:	bf94      	ite	ls
 801225c:	3337      	addls	r3, #55	; 0x37
 801225e:	3357      	addhi	r3, #87	; 0x57
 8012260:	e7da      	b.n	8012218 <encode_uint+0x40>
		} else if (radix == 16) {
 8012262:	2d10      	cmp	r5, #16
 8012264:	d1ea      	bne.n	801223c <encode_uint+0x64>
			conv->altform_0c = true;
 8012266:	78a3      	ldrb	r3, [r4, #2]
 8012268:	f043 0310 	orr.w	r3, r3, #16
 801226c:	e7e5      	b.n	801223a <encode_uint+0x62>

0801226e <outs>:
{
 801226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012272:	4607      	mov	r7, r0
 8012274:	4688      	mov	r8, r1
 8012276:	4615      	mov	r5, r2
 8012278:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 801227a:	4614      	mov	r4, r2
 801227c:	42b4      	cmp	r4, r6
 801227e:	eba4 0005 	sub.w	r0, r4, r5
 8012282:	d302      	bcc.n	801228a <outs+0x1c>
 8012284:	b93e      	cbnz	r6, 8012296 <outs+0x28>
 8012286:	7823      	ldrb	r3, [r4, #0]
 8012288:	b12b      	cbz	r3, 8012296 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 801228a:	f814 0b01 	ldrb.w	r0, [r4], #1
 801228e:	4641      	mov	r1, r8
 8012290:	47b8      	blx	r7
		if (rc < 0) {
 8012292:	2800      	cmp	r0, #0
 8012294:	daf2      	bge.n	801227c <outs+0xe>
}
 8012296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801229a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
 801229a:	4040      	eors	r0, r0
 801229c:	f380 8811 	msr	BASEPRI, r0
 80122a0:	f04f 0004 	mov.w	r0, #4
 80122a4:	df02      	svc	2
}
 80122a6:	4770      	bx	lr

080122a8 <assert_print>:

void assert_print(const char *fmt, ...)
{
 80122a8:	b40f      	push	{r0, r1, r2, r3}
 80122aa:	b507      	push	{r0, r1, r2, lr}
 80122ac:	a904      	add	r1, sp, #16
 80122ae:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80122b2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 80122b4:	f7ef fa20 	bl	80016f8 <vprintk>

	va_end(ap);
}
 80122b8:	b003      	add	sp, #12
 80122ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80122be:	b004      	add	sp, #16
 80122c0:	4770      	bx	lr

080122c2 <free_space>:
{
 80122c2:	4602      	mov	r2, r0
 80122c4:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 80122c6:	68c0      	ldr	r0, [r0, #12]
 80122c8:	6814      	ldr	r4, [r2, #0]
 80122ca:	42a0      	cmp	r0, r4
 80122cc:	d904      	bls.n	80122d8 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 80122ce:	3801      	subs	r0, #1
 80122d0:	1b00      	subs	r0, r0, r4
 80122d2:	6008      	str	r0, [r1, #0]
		return false;
 80122d4:	2000      	movs	r0, #0
}
 80122d6:	bd10      	pop	{r4, pc}
	} else if (!buffer->rd_idx) {
 80122d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80122da:	b918      	cbnz	r0, 80122e4 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 80122dc:	3b01      	subs	r3, #1
 80122de:	1b1b      	subs	r3, r3, r4
 80122e0:	600b      	str	r3, [r1, #0]
		return false;
 80122e2:	e7f8      	b.n	80122d6 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
 80122e4:	1b1b      	subs	r3, r3, r4
 80122e6:	600b      	str	r3, [r1, #0]
	return true;
 80122e8:	2001      	movs	r0, #1
 80122ea:	e7f4      	b.n	80122d6 <free_space+0x14>

080122ec <get_usage>:
{
 80122ec:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
 80122ee:	a901      	add	r1, sp, #4
{
 80122f0:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 80122f2:	f7ff ffe6 	bl	80122c2 <free_space>
 80122f6:	b120      	cbz	r0, 8012302 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 80122f8:	9b01      	ldr	r3, [sp, #4]
 80122fa:	68e2      	ldr	r2, [r4, #12]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	4413      	add	r3, r2
 8012300:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
 8012302:	9801      	ldr	r0, [sp, #4]
 8012304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012306:	43c0      	mvns	r0, r0
}
 8012308:	4418      	add	r0, r3
 801230a:	b002      	add	sp, #8
 801230c:	bd10      	pop	{r4, pc}

0801230e <idx_inc>:
{
 801230e:	b510      	push	{r4, lr}
 8012310:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 8012312:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8012314:	6922      	ldr	r2, [r4, #16]
 8012316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012318:	07d2      	lsls	r2, r2, #31
 801231a:	d502      	bpl.n	8012322 <idx_inc+0x14>
		return i & (buffer->size - 1);
 801231c:	3b01      	subs	r3, #1
 801231e:	4018      	ands	r0, r3
}
 8012320:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8012322:	4298      	cmp	r0, r3
 8012324:	bf28      	it	cs
 8012326:	1ac0      	subcs	r0, r0, r3
 8012328:	e7fa      	b.n	8012320 <idx_inc+0x12>

0801232a <add_skip_item>:
{
 801232a:	b538      	push	{r3, r4, r5, lr}
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801232c:	6a02      	ldr	r2, [r0, #32]
{
 801232e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
 8012330:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8012332:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8012334:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8012338:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801233c:	462a      	mov	r2, r5
 801233e:	6801      	ldr	r1, [r0, #0]
{
 8012340:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8012342:	f7ff ffe4 	bl	801230e <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8012346:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8012348:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801234a:	462a      	mov	r2, r5
 801234c:	4620      	mov	r0, r4
 801234e:	f7ff ffde 	bl	801230e <idx_inc>
 8012352:	6060      	str	r0, [r4, #4]
}
 8012354:	bd38      	pop	{r3, r4, r5, pc}

08012356 <max_utilization_update>:
{
 8012356:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8012358:	6903      	ldr	r3, [r0, #16]
 801235a:	075b      	lsls	r3, r3, #29
{
 801235c:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801235e:	d506      	bpl.n	801236e <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8012360:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8012362:	f7ff ffc3 	bl	80122ec <get_usage>
 8012366:	4285      	cmp	r5, r0
 8012368:	d902      	bls.n	8012370 <max_utilization_update+0x1a>
 801236a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801236c:	62a0      	str	r0, [r4, #40]	; 0x28
}
 801236e:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8012370:	4620      	mov	r0, r4
 8012372:	f7ff ffbb 	bl	80122ec <get_usage>
 8012376:	e7f9      	b.n	801236c <max_utilization_update+0x16>

08012378 <drop_item_locked>:
{
 8012378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801237c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8012380:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
 8012384:	461f      	mov	r7, r3
	*user_packet = false;
 8012386:	2300      	movs	r3, #0
 8012388:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
 801238a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 801238e:	f003 0303 	and.w	r3, r3, #3
 8012392:	2b02      	cmp	r3, #2
{
 8012394:	4604      	mov	r4, r0
 8012396:	468b      	mov	fp, r1
 8012398:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801239a:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 801239e:	d103      	bne.n	80123a8 <drop_item_locked+0x30>
		return item->skip.len;
 80123a0:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 80123a4:	08ad      	lsrs	r5, r5, #2
 80123a6:	d12e      	bne.n	8012406 <drop_item_locked+0x8e>
 80123a8:	69e3      	ldr	r3, [r4, #28]
 80123aa:	4630      	mov	r0, r6
 80123ac:	4798      	blx	r3
 80123ae:	4605      	mov	r5, r0
	} else if (allow_drop) {
 80123b0:	f1b8 0f00 	cmp.w	r8, #0
 80123b4:	d036      	beq.n	8012424 <drop_item_locked+0xac>
		if (item->hdr.busy) {
 80123b6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 80123ba:	079b      	lsls	r3, r3, #30
 80123bc:	d52f      	bpl.n	801241e <drop_item_locked+0xa6>
			add_skip_item(buffer, free_wlen + 1);
 80123be:	f10b 0101 	add.w	r1, fp, #1
 80123c2:	4620      	mov	r0, r4
 80123c4:	f7ff ffb1 	bl	801232a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80123c8:	6861      	ldr	r1, [r4, #4]
 80123ca:	462a      	mov	r2, r5
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7ff ff9e 	bl	801230e <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80123d2:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80123d4:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80123d6:	462a      	mov	r2, r5
 80123d8:	4620      	mov	r0, r4
 80123da:	f7ff ff98 	bl	801230e <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80123de:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80123e0:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80123e2:	68e1      	ldr	r1, [r4, #12]
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7ff ff92 	bl	801230e <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80123ea:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
 80123ec:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 80123f0:	f002 0203 	and.w	r2, r2, #3
 80123f4:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80123f6:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 80123fa:	d10c      	bne.n	8012416 <drop_item_locked+0x9e>
		return item->skip.len;
 80123fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
 8012400:	089b      	lsrs	r3, r3, #2
 8012402:	d008      	beq.n	8012416 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
 8012404:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8012406:	68e1      	ldr	r1, [r4, #12]
 8012408:	462a      	mov	r2, r5
 801240a:	4620      	mov	r0, r4
 801240c:	f7ff ff7f 	bl	801230e <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 8012410:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8012414:	e007      	b.n	8012426 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
 8012416:	69e3      	ldr	r3, [r4, #28]
 8012418:	4630      	mov	r0, r6
 801241a:	4798      	blx	r3
 801241c:	4405      	add	r5, r0
			*user_packet = true;
 801241e:	2301      	movs	r3, #1
 8012420:	703b      	strb	r3, [r7, #0]
 8012422:	e7f0      	b.n	8012406 <drop_item_locked+0x8e>
		item = NULL;
 8012424:	4646      	mov	r6, r8
}
 8012426:	4630      	mov	r0, r6
 8012428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801242c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 801242c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8012430:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 8012432:	bf8a      	itet	hi
 8012434:	6a40      	ldrhi	r0, [r0, #36]	; 0x24
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 8012436:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 8012438:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801243a:	1e18      	subs	r0, r3, #0
 801243c:	bf18      	it	ne
 801243e:	2001      	movne	r0, #1
 8012440:	4770      	bx	lr

08012442 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8012442:	4770      	bx	lr

08012444 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8012444:	2000      	movs	r0, #0
 8012446:	4770      	bx	lr

08012448 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 8012448:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 801244a:	075b      	lsls	r3, r3, #29
 801244c:	d40b      	bmi.n	8012466 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 801244e:	6803      	ldr	r3, [r0, #0]
 8012450:	8840      	ldrh	r0, [r0, #2]
 8012452:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8012456:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 801245a:	4418      	add	r0, r3
 801245c:	3013      	adds	r0, #19
 801245e:	f020 0007 	bic.w	r0, r0, #7
 8012462:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 8012464:	4770      	bx	lr
	return 0;
 8012466:	2000      	movs	r0, #0
}
 8012468:	4770      	bx	lr

0801246a <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 801246a:	6843      	ldr	r3, [r0, #4]
}
 801246c:	7958      	ldrb	r0, [r3, #5]
 801246e:	4770      	bx	lr

08012470 <default_lf_get_timestamp>:
{
 8012470:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8012472:	f003 f847 	bl	8015504 <z_impl_k_uptime_ticks>
 8012476:	220a      	movs	r2, #10
 8012478:	2300      	movs	r3, #0
 801247a:	f7ee f849 	bl	8000510 <__aeabi_uldivmod>
}
 801247e:	bd08      	pop	{r3, pc}

08012480 <dummy_timestamp>:
 8012480:	2000      	movs	r0, #0
 8012482:	4770      	bx	lr

08012484 <notify_drop>:
	z_log_dropped(true);
 8012484:	2001      	movs	r0, #1
 8012486:	f7f0 b989 	b.w	800279c <z_log_dropped>

0801248a <get_msg>:
{
 801248a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 801248c:	f7f0 f9fc 	bl	8002888 <z_log_msg2_claim>
}
 8012490:	bd08      	pop	{r3, pc}

08012492 <z_log_get_tag>:
}
 8012492:	2000      	movs	r0, #0
 8012494:	4770      	bx	lr

08012496 <buffer_write>:
{
 8012496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012498:	4606      	mov	r6, r0
 801249a:	460d      	mov	r5, r1
 801249c:	4614      	mov	r4, r2
 801249e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80124a0:	4621      	mov	r1, r4
 80124a2:	4628      	mov	r0, r5
 80124a4:	463a      	mov	r2, r7
 80124a6:	47b0      	blx	r6
	} while (len != 0);
 80124a8:	1a24      	subs	r4, r4, r0
		buf += processed;
 80124aa:	4405      	add	r5, r0
	} while (len != 0);
 80124ac:	d1f8      	bne.n	80124a0 <buffer_write+0xa>
}
 80124ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124b0 <log_output_flush>:
		     output->control_block->offset,
 80124b0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 80124b2:	6881      	ldr	r1, [r0, #8]
{
 80124b4:	b510      	push	{r4, lr}
 80124b6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 80124b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80124bc:	6800      	ldr	r0, [r0, #0]
 80124be:	f7ff ffea 	bl	8012496 <buffer_write>
	output->control_block->offset = 0;
 80124c2:	6863      	ldr	r3, [r4, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	601a      	str	r2, [r3, #0]
}
 80124c8:	bd10      	pop	{r4, pc}

080124ca <cr_out_func>:
{
 80124ca:	b538      	push	{r3, r4, r5, lr}
 80124cc:	4605      	mov	r5, r0
 80124ce:	460c      	mov	r4, r1
	out_func(c, ctx);
 80124d0:	f7f0 fc58 	bl	8002d84 <out_func>
	if (c == '\n') {
 80124d4:	2d0a      	cmp	r5, #10
 80124d6:	d103      	bne.n	80124e0 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
 80124d8:	4621      	mov	r1, r4
 80124da:	200d      	movs	r0, #13
 80124dc:	f7f0 fc52 	bl	8002d84 <out_func>
}
 80124e0:	2000      	movs	r0, #0
 80124e2:	bd38      	pop	{r3, r4, r5, pc}

080124e4 <z_log_msg2_finalize>:
{
 80124e4:	b570      	push	{r4, r5, r6, lr}
 80124e6:	460e      	mov	r6, r1
 80124e8:	4615      	mov	r5, r2
 80124ea:	4619      	mov	r1, r3
	if (!msg) {
 80124ec:	4604      	mov	r4, r0
 80124ee:	b918      	cbnz	r0, 80124f8 <z_log_msg2_finalize+0x14>
}
 80124f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 80124f4:	f7f0 b952 	b.w	800279c <z_log_dropped>
	if (data) {
 80124f8:	b143      	cbz	r3, 801250c <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
 80124fa:	f100 030c 	add.w	r3, r0, #12
 80124fe:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
 8012502:	4418      	add	r0, r3
 8012504:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 8012508:	f000 fcc0 	bl	8012e8c <memcpy>
	msg->hdr.source = source;
 801250c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
 8012510:	4620      	mov	r0, r4
}
 8012512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
 8012516:	f7f0 ba55 	b.w	80029c4 <z_log_msg2_commit>

0801251a <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
 801251a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 801251e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
 8012522:	4605      	mov	r5, r0
				 strlen(attr->user_data));
 8012524:	4640      	mov	r0, r8
{
 8012526:	461f      	mov	r7, r3
 8012528:	460c      	mov	r4, r1
 801252a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
 801252c:	f000 fc82 	bl	8012e34 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
 8012530:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	b280      	uxth	r0, r0
 8012538:	e9cd 8001 	strd	r8, r0, [sp, #4]
 801253c:	463b      	mov	r3, r7
 801253e:	4632      	mov	r2, r6
 8012540:	4621      	mov	r1, r4
 8012542:	4628      	mov	r0, r5
 8012544:	f001 fff6 	bl	8014534 <bt_gatt_attr_read>
}
 8012548:	b004      	add	sp, #16
 801254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801254e <bas_init>:
}
 801254e:	2000      	movs	r0, #0
 8012550:	4770      	bx	lr

08012552 <LST_init_head>:
/******************************************************************************
 * Function Definitions
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8012552:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 8012554:	6040      	str	r0, [r0, #4]
}
 8012556:	4770      	bx	lr

08012558 <LST_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012558:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801255c:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801255e:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 8012560:	1a82      	subs	r2, r0, r2
 8012562:	4250      	negs	r0, r2
 8012564:	4150      	adcs	r0, r2
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012566:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 801256a:	4770      	bx	lr

0801256c <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801256c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012570:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012572:	6802      	ldr	r2, [r0, #0]
 8012574:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8012576:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8012578:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 801257a:	680a      	ldr	r2, [r1, #0]
 801257c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801257e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012582:	4770      	bx	lr

08012584 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012584:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012588:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801258a:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 801258c:	6842      	ldr	r2, [r0, #4]
 801258e:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 8012590:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8012592:	684a      	ldr	r2, [r1, #4]
 8012594:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012596:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801259a:	4770      	bx	lr

0801259c <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801259c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80125a0:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80125a2:	6843      	ldr	r3, [r0, #4]
 80125a4:	6801      	ldr	r1, [r0, #0]
 80125a6:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 80125a8:	6801      	ldr	r1, [r0, #0]
 80125aa:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125ac:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80125b0:	4770      	bx	lr

080125b2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80125b2:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80125b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80125b8:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80125ba:	6803      	ldr	r3, [r0, #0]
 80125bc:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80125be:	6800      	ldr	r0, [r0, #0]
 80125c0:	f7ff ffec 	bl	801259c <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125c4:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80125c8:	bd10      	pop	{r4, pc}

080125ca <TlCmdEvtReceived>:
{
 80125ca:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80125cc:	2000      	movs	r0, #0
 80125ce:	f7fb f8db 	bl	800d788 <shci_cmd_resp_release>
}
 80125d2:	bd08      	pop	{r3, pc}

080125d4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80125d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80125d6:	f100 020c 	add.w	r2, r0, #12
 80125da:	466b      	mov	r3, sp
 80125dc:	2125      	movs	r1, #37	; 0x25
 80125de:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80125e2:	f7f0 fe61 	bl	80032a8 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80125e6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80125ea:	b005      	add	sp, #20
 80125ec:	f85d fb04 	ldr.w	pc, [sp], #4

080125f0 <SHCI_C2_Reinit>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Reinit( void )
{
 80125f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_REINIT,
 80125f2:	2200      	movs	r2, #0
 80125f4:	466b      	mov	r3, sp
 80125f6:	4611      	mov	r1, r2
 80125f8:	f64f 406f 	movw	r0, #64623	; 0xfc6f
 80125fc:	f7f0 fe54 	bl	80032a8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8012600:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8012604:	b005      	add	sp, #20
 8012606:	f85d fb04 	ldr.w	pc, [sp], #4

0801260a <TL_Enable>:
  HW_IPCC_Enable();
 801260a:	f7f0 bfab 	b.w	8003564 <HW_IPCC_Enable>

0801260e <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 801260e:	4770      	bx	lr

08012610 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	460d      	mov	r5, r1
	if (from_len <= to_len) {
 8012614:	42ab      	cmp	r3, r5
{
 8012616:	4611      	mov	r1, r2
 8012618:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 801261a:	d804      	bhi.n	8012626 <_copy+0x16>
		(void)memcpy(to, from, from_len);
 801261c:	461a      	mov	r2, r3
 801261e:	f000 fc35 	bl	8012e8c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8012622:	4620      	mov	r0, r4
 8012624:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8012626:	2400      	movs	r4, #0
 8012628:	e7fb      	b.n	8012622 <_copy+0x12>

0801262a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 801262a:	f000 bc3a 	b.w	8012ea2 <memset>

0801262e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 801262e:	09c3      	lsrs	r3, r0, #7
 8012630:	005a      	lsls	r2, r3, #1
 8012632:	4413      	add	r3, r2
 8012634:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8012638:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 801263c:	b2c0      	uxtb	r0, r0
 801263e:	4770      	bx	lr

08012640 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 8012640:	78cb      	ldrb	r3, [r1, #3]
 8012642:	7802      	ldrb	r2, [r0, #0]
 8012644:	4053      	eors	r3, r2
 8012646:	7003      	strb	r3, [r0, #0]
 8012648:	884b      	ldrh	r3, [r1, #2]
 801264a:	7842      	ldrb	r2, [r0, #1]
 801264c:	4053      	eors	r3, r2
 801264e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8012650:	680a      	ldr	r2, [r1, #0]
 8012652:	7883      	ldrb	r3, [r0, #2]
 8012654:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8012658:	7083      	strb	r3, [r0, #2]
 801265a:	680a      	ldr	r2, [r1, #0]
 801265c:	78c3      	ldrb	r3, [r0, #3]
 801265e:	4053      	eors	r3, r2
 8012660:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 8012662:	79cb      	ldrb	r3, [r1, #7]
 8012664:	7902      	ldrb	r2, [r0, #4]
 8012666:	4053      	eors	r3, r2
 8012668:	7103      	strb	r3, [r0, #4]
 801266a:	88cb      	ldrh	r3, [r1, #6]
 801266c:	7942      	ldrb	r2, [r0, #5]
 801266e:	4053      	eors	r3, r2
 8012670:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 8012672:	684a      	ldr	r2, [r1, #4]
 8012674:	7983      	ldrb	r3, [r0, #6]
 8012676:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 801267a:	7183      	strb	r3, [r0, #6]
 801267c:	684a      	ldr	r2, [r1, #4]
 801267e:	79c3      	ldrb	r3, [r0, #7]
 8012680:	4053      	eors	r3, r2
 8012682:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 8012684:	7acb      	ldrb	r3, [r1, #11]
 8012686:	7a02      	ldrb	r2, [r0, #8]
 8012688:	4053      	eors	r3, r2
 801268a:	7203      	strb	r3, [r0, #8]
 801268c:	7a42      	ldrb	r2, [r0, #9]
 801268e:	894b      	ldrh	r3, [r1, #10]
 8012690:	4053      	eors	r3, r2
 8012692:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8012694:	688a      	ldr	r2, [r1, #8]
 8012696:	7a83      	ldrb	r3, [r0, #10]
 8012698:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 801269c:	7283      	strb	r3, [r0, #10]
 801269e:	688a      	ldr	r2, [r1, #8]
 80126a0:	7ac3      	ldrb	r3, [r0, #11]
 80126a2:	4053      	eors	r3, r2
 80126a4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 80126a6:	7bcb      	ldrb	r3, [r1, #15]
 80126a8:	7b02      	ldrb	r2, [r0, #12]
 80126aa:	4053      	eors	r3, r2
 80126ac:	7303      	strb	r3, [r0, #12]
 80126ae:	89cb      	ldrh	r3, [r1, #14]
 80126b0:	7b42      	ldrb	r2, [r0, #13]
 80126b2:	4053      	eors	r3, r2
 80126b4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 80126b6:	68ca      	ldr	r2, [r1, #12]
 80126b8:	7b83      	ldrb	r3, [r0, #14]
 80126ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 80126be:	7383      	strb	r3, [r0, #14]
 80126c0:	68ca      	ldr	r2, [r1, #12]
 80126c2:	7bc3      	ldrb	r3, [r0, #15]
 80126c4:	4053      	eors	r3, r2
 80126c6:	73c3      	strb	r3, [r0, #15]
}
 80126c8:	4770      	bx	lr

080126ca <shift_rows>:
{
 80126ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 80126cc:	7802      	ldrb	r2, [r0, #0]
 80126ce:	f88d 2000 	strb.w	r2, [sp]
 80126d2:	7942      	ldrb	r2, [r0, #5]
 80126d4:	f88d 2001 	strb.w	r2, [sp, #1]
 80126d8:	7a82      	ldrb	r2, [r0, #10]
 80126da:	f88d 2002 	strb.w	r2, [sp, #2]
 80126de:	7bc2      	ldrb	r2, [r0, #15]
 80126e0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 80126e4:	7902      	ldrb	r2, [r0, #4]
 80126e6:	f88d 2004 	strb.w	r2, [sp, #4]
 80126ea:	7a42      	ldrb	r2, [r0, #9]
 80126ec:	f88d 2005 	strb.w	r2, [sp, #5]
 80126f0:	7b82      	ldrb	r2, [r0, #14]
 80126f2:	f88d 2006 	strb.w	r2, [sp, #6]
 80126f6:	78c2      	ldrb	r2, [r0, #3]
 80126f8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 80126fc:	7a02      	ldrb	r2, [r0, #8]
 80126fe:	f88d 2008 	strb.w	r2, [sp, #8]
 8012702:	7b42      	ldrb	r2, [r0, #13]
 8012704:	f88d 2009 	strb.w	r2, [sp, #9]
 8012708:	7882      	ldrb	r2, [r0, #2]
 801270a:	f88d 200a 	strb.w	r2, [sp, #10]
 801270e:	79c2      	ldrb	r2, [r0, #7]
 8012710:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 8012714:	7b02      	ldrb	r2, [r0, #12]
 8012716:	f88d 200c 	strb.w	r2, [sp, #12]
 801271a:	7842      	ldrb	r2, [r0, #1]
 801271c:	7ac3      	ldrb	r3, [r0, #11]
 801271e:	f88d 200d 	strb.w	r2, [sp, #13]
 8012722:	7982      	ldrb	r2, [r0, #6]
 8012724:	f88d 200e 	strb.w	r2, [sp, #14]
 8012728:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 801272c:	2310      	movs	r3, #16
 801272e:	466a      	mov	r2, sp
 8012730:	4619      	mov	r1, r3
 8012732:	f7ff ff6d 	bl	8012610 <_copy>
}
 8012736:	b005      	add	sp, #20
 8012738:	f85d fb04 	ldr.w	pc, [sp], #4

0801273c <mult_row_column>:
{
 801273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8012740:	7808      	ldrb	r0, [r1, #0]
{
 8012742:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8012744:	f7ff ff73 	bl	801262e <_double_byte>
 8012748:	4605      	mov	r5, r0
 801274a:	7860      	ldrb	r0, [r4, #1]
 801274c:	f7ff ff6f 	bl	801262e <_double_byte>
 8012750:	78a2      	ldrb	r2, [r4, #2]
 8012752:	7863      	ldrb	r3, [r4, #1]
 8012754:	4053      	eors	r3, r2
 8012756:	78e2      	ldrb	r2, [r4, #3]
 8012758:	4053      	eors	r3, r2
 801275a:	405d      	eors	r5, r3
 801275c:	4045      	eors	r5, r0
 801275e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8012760:	7860      	ldrb	r0, [r4, #1]
 8012762:	7827      	ldrb	r7, [r4, #0]
 8012764:	f7ff ff63 	bl	801262e <_double_byte>
 8012768:	4605      	mov	r5, r0
 801276a:	78a0      	ldrb	r0, [r4, #2]
 801276c:	f7ff ff5f 	bl	801262e <_double_byte>
 8012770:	78a3      	ldrb	r3, [r4, #2]
 8012772:	405f      	eors	r7, r3
 8012774:	78e3      	ldrb	r3, [r4, #3]
 8012776:	405f      	eors	r7, r3
 8012778:	407d      	eors	r5, r7
 801277a:	4045      	eors	r5, r0
 801277c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 801277e:	78a0      	ldrb	r0, [r4, #2]
 8012780:	7865      	ldrb	r5, [r4, #1]
 8012782:	7827      	ldrb	r7, [r4, #0]
 8012784:	f7ff ff53 	bl	801262e <_double_byte>
 8012788:	406f      	eors	r7, r5
 801278a:	4605      	mov	r5, r0
 801278c:	78e0      	ldrb	r0, [r4, #3]
 801278e:	f7ff ff4e 	bl	801262e <_double_byte>
 8012792:	78e3      	ldrb	r3, [r4, #3]
 8012794:	405f      	eors	r7, r3
 8012796:	407d      	eors	r5, r7
 8012798:	4045      	eors	r5, r0
 801279a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 801279c:	7820      	ldrb	r0, [r4, #0]
 801279e:	f7ff ff46 	bl	801262e <_double_byte>
 80127a2:	7863      	ldrb	r3, [r4, #1]
 80127a4:	7825      	ldrb	r5, [r4, #0]
 80127a6:	405d      	eors	r5, r3
 80127a8:	78a3      	ldrb	r3, [r4, #2]
 80127aa:	405d      	eors	r5, r3
 80127ac:	4045      	eors	r5, r0
 80127ae:	78e0      	ldrb	r0, [r4, #3]
 80127b0:	f7ff ff3d 	bl	801262e <_double_byte>
 80127b4:	b2ed      	uxtb	r5, r5
 80127b6:	4045      	eors	r5, r0
 80127b8:	70f5      	strb	r5, [r6, #3]
}
 80127ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127bc <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
 80127bc:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 80127be:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
 80127c0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 80127c2:	f912 3b10 	ldrsb.w	r3, [r2], #16
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	bfb4      	ite	lt
 80127ca:	2387      	movlt	r3, #135	; 0x87
 80127cc:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
 80127ce:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80127d2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
 80127d6:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
 80127d8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
 80127dc:	d002      	beq.n	80127e4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
 80127de:	7813      	ldrb	r3, [r2, #0]
 80127e0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
 80127e2:	e7f4      	b.n	80127ce <gf_double+0x12>
	}
}
 80127e4:	bd10      	pop	{r4, pc}

080127e6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
 80127e6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
 80127e8:	b120      	cbz	r0, 80127f4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 80127ea:	2258      	movs	r2, #88	; 0x58
 80127ec:	2100      	movs	r1, #0
 80127ee:	f7ff ff1c 	bl	801262a <_set>
 80127f2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
 80127f4:	bd08      	pop	{r3, pc}

080127f6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
 80127f6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 80127f8:	4604      	mov	r4, r0
 80127fa:	b188      	cbz	r0, 8012820 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 80127fc:	2210      	movs	r2, #16
 80127fe:	2100      	movs	r1, #0
 8012800:	f7ff ff13 	bl	801262a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
 8012804:	2210      	movs	r2, #16
 8012806:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801280a:	2100      	movs	r1, #0
 801280c:	f7ff ff0d 	bl	801262a <_set>
	s->leftover_offset = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
 8012814:	2200      	movs	r2, #0
 8012816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801281a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 801281e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
 8012820:	bd10      	pop	{r4, pc}

08012822 <tc_cmac_setup>:
{
 8012822:	b570      	push	{r4, r5, r6, lr}
 8012824:	460d      	mov	r5, r1
 8012826:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
 8012828:	4604      	mov	r4, r0
 801282a:	b310      	cbz	r0, 8012872 <tc_cmac_setup+0x50>
 801282c:	b311      	cbz	r1, 8012874 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
 801282e:	2258      	movs	r2, #88	; 0x58
 8012830:	2100      	movs	r1, #0
 8012832:	f7ff fefa 	bl	801262a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
 8012836:	4629      	mov	r1, r5
	s->sched = sched;
 8012838:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
 801283a:	4630      	mov	r0, r6
 801283c:	f7f0 ff7c 	bl	8003738 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 8012840:	2210      	movs	r2, #16
 8012842:	2100      	movs	r1, #0
 8012844:	4620      	mov	r0, r4
 8012846:	f7ff fef0 	bl	801262a <_set>
	gf_double (s->K1, s->iv);
 801284a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
 801284e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012850:	4621      	mov	r1, r4
 8012852:	4620      	mov	r0, r4
 8012854:	f7f0 ffc2 	bl	80037dc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
 8012858:	4621      	mov	r1, r4
 801285a:	4628      	mov	r0, r5
 801285c:	f7ff ffae 	bl	80127bc <gf_double>
	gf_double (s->K2, s->K1);
 8012860:	4629      	mov	r1, r5
 8012862:	f104 0020 	add.w	r0, r4, #32
 8012866:	f7ff ffa9 	bl	80127bc <gf_double>
	tc_cmac_init(s);
 801286a:	4620      	mov	r0, r4
 801286c:	f7ff ffc3 	bl	80127f6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
 8012870:	2001      	movs	r0, #1
}
 8012872:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8012874:	4608      	mov	r0, r1
 8012876:	e7fc      	b.n	8012872 <tc_cmac_setup+0x50>

08012878 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
 8012878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287c:	460d      	mov	r5, r1
 801287e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 8012880:	4604      	mov	r4, r0
 8012882:	2800      	cmp	r0, #0
 8012884:	d062      	beq.n	801294c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
 8012886:	b912      	cbnz	r2, 801288e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
 8012888:	2001      	movs	r0, #1
}
 801288a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
 801288e:	2900      	cmp	r1, #0
 8012890:	d05c      	beq.n	801294c <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
 8012892:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
 8012896:	ea50 0301 	orrs.w	r3, r0, r1
 801289a:	d057      	beq.n	801294c <tc_cmac_update+0xd4>
	s->countdown--;
 801289c:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
 80128a0:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
 80128a4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80128a8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
 80128ac:	f1b8 0f00 	cmp.w	r8, #0
 80128b0:	d02a      	beq.n	8012908 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
 80128b2:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
 80128b6:	f108 0030 	add.w	r0, r8, #48	; 0x30
 80128ba:	42be      	cmp	r6, r7
 80128bc:	4420      	add	r0, r4
 80128be:	d208      	bcs.n	80128d2 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
 80128c0:	462a      	mov	r2, r5
 80128c2:	4633      	mov	r3, r6
 80128c4:	4631      	mov	r1, r6
 80128c6:	f7ff fea3 	bl	8012610 <_copy>
			s->leftover_offset += data_length;
 80128ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80128cc:	4432      	add	r2, r6
 80128ce:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
 80128d0:	e7da      	b.n	8012888 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
 80128d2:	463b      	mov	r3, r7
 80128d4:	462a      	mov	r2, r5
 80128d6:	4639      	mov	r1, r7
 80128d8:	f7ff fe9a 	bl	8012610 <_copy>
		data_length -= remaining_space;
 80128dc:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
 80128de:	2300      	movs	r3, #0
 80128e0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
 80128e2:	4446      	add	r6, r8
		data += remaining_space;
 80128e4:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80128e6:	1e63      	subs	r3, r4, #1
 80128e8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
 80128ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80128f0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80128f4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
 80128f6:	ea82 0200 	eor.w	r2, r2, r0
 80128fa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80128fc:	d1f6      	bne.n	80128ec <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 80128fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012900:	4621      	mov	r1, r4
 8012902:	4620      	mov	r0, r4
 8012904:	f7f0 ff6a 	bl	80037dc <tc_aes_encrypt>
 8012908:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
 801290c:	2e10      	cmp	r6, #16
 801290e:	d80a      	bhi.n	8012926 <tc_cmac_update+0xae>
	if (data_length > 0) {
 8012910:	2e00      	cmp	r6, #0
 8012912:	d0b9      	beq.n	8012888 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
 8012914:	4633      	mov	r3, r6
 8012916:	462a      	mov	r2, r5
 8012918:	4631      	mov	r1, r6
 801291a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801291e:	f7ff fe77 	bl	8012610 <_copy>
		s->leftover_offset = data_length;
 8012922:	6466      	str	r6, [r4, #68]	; 0x44
 8012924:	e7b0      	b.n	8012888 <tc_cmac_update+0x10>
 8012926:	1e63      	subs	r3, r4, #1
 8012928:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
 801292a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801292e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8012932:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
 8012934:	ea82 0200 	eor.w	r2, r2, r0
 8012938:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 801293a:	d1f6      	bne.n	801292a <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 801293c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801293e:	4621      	mov	r1, r4
 8012940:	4620      	mov	r0, r4
 8012942:	f7f0 ff4b 	bl	80037dc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
 8012946:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
 8012948:	3e10      	subs	r6, #16
 801294a:	e7df      	b.n	801290c <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
 801294c:	2000      	movs	r0, #0
 801294e:	e79c      	b.n	801288a <tc_cmac_update+0x12>

08012950 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
 8012950:	b570      	push	{r4, r5, r6, lr}
 8012952:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8012954:	4605      	mov	r5, r0
 8012956:	b1e8      	cbz	r0, 8012994 <tc_cmac_final+0x44>
 8012958:	b369      	cbz	r1, 80129b6 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
 801295a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 801295c:	2a10      	cmp	r2, #16
 801295e:	d11a      	bne.n	8012996 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
 8012960:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8012962:	1e63      	subs	r3, r4, #1
 8012964:	3901      	subs	r1, #1
 8012966:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
 801296a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801296e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8012972:	4072      	eors	r2, r6
 8012974:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8012978:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
 801297a:	ea82 0206 	eor.w	r2, r2, r6
 801297e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8012980:	d1f3      	bne.n	801296a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
 8012982:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012984:	4621      	mov	r1, r4
 8012986:	4628      	mov	r0, r5
 8012988:	f7f0 ff28 	bl	80037dc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
 801298c:	4620      	mov	r0, r4
 801298e:	f7ff ff2a 	bl	80127e6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
 8012992:	2001      	movs	r0, #1
}
 8012994:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
 8012996:	f102 0030 	add.w	r0, r2, #48	; 0x30
 801299a:	2100      	movs	r1, #0
 801299c:	f1c2 0210 	rsb	r2, r2, #16
 80129a0:	4420      	add	r0, r4
 80129a2:	f7ff fe42 	bl	801262a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
 80129a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80129a8:	4423      	add	r3, r4
 80129aa:	2280      	movs	r2, #128	; 0x80
 80129ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
 80129b0:	f104 0120 	add.w	r1, r4, #32
 80129b4:	e7d5      	b.n	8012962 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
 80129b6:	4608      	mov	r0, r1
 80129b8:	e7ec      	b.n	8012994 <tc_cmac_final+0x44>

080129ba <tc_sha256_update>:
{
 80129ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129bc:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 80129be:	b110      	cbz	r0, 80129c6 <tc_sha256_update+0xc>
 80129c0:	b1f9      	cbz	r1, 8012a02 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
 80129c2:	b90a      	cbnz	r2, 80129c8 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
 80129c4:	2001      	movs	r0, #1
}
 80129c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c8:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
 80129ca:	f100 0728 	add.w	r7, r0, #40	; 0x28
			s->leftover_offset = 0;
 80129ce:	2600      	movs	r6, #0
	while (datalen-- > 0) {
 80129d0:	42a5      	cmp	r5, r4
 80129d2:	d0f7      	beq.n	80129c4 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
 80129d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	6682      	str	r2, [r0, #104]	; 0x68
 80129da:	4403      	add	r3, r0
 80129dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 80129e4:	2a3f      	cmp	r2, #63	; 0x3f
 80129e6:	d9f3      	bls.n	80129d0 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
 80129e8:	4639      	mov	r1, r7
 80129ea:	f7f0 ff61 	bl	80038b0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80129ee:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
 80129f2:	f513 7300 	adds.w	r3, r3, #512	; 0x200
 80129f6:	f142 0200 	adc.w	r2, r2, #0
 80129fa:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
 80129fe:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8012a00:	e7e6      	b.n	80129d0 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
 8012a02:	4608      	mov	r0, r1
 8012a04:	e7df      	b.n	80129c6 <tc_sha256_update+0xc>

08012a06 <tc_sha256_final>:
{
 8012a06:	b570      	push	{r4, r5, r6, lr}
 8012a08:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 8012a0a:	4605      	mov	r5, r0
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d055      	beq.n	8012abc <tc_sha256_final+0xb6>
 8012a10:	2900      	cmp	r1, #0
 8012a12:	d054      	beq.n	8012abe <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
 8012a14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8012a16:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012a1a:	00c8      	lsls	r0, r1, #3
 8012a1c:	1812      	adds	r2, r2, r0
 8012a1e:	f143 0300 	adc.w	r3, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8012a22:	1c48      	adds	r0, r1, #1
 8012a24:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 8012a26:	e9c4 2308 	strd	r2, r3, [r4, #32]
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 8012a2a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8012a2c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8012a30:	66a0      	str	r0, [r4, #104]	; 0x68
 8012a32:	f104 0628 	add.w	r6, r4, #40	; 0x28
 8012a36:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 8012a3a:	d90b      	bls.n	8012a54 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
 8012a3c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8012a40:	2100      	movs	r1, #0
 8012a42:	4430      	add	r0, r6
 8012a44:	f7ff fdf1 	bl	801262a <_set>
		compress(s->iv, s->leftover);
 8012a48:	4631      	mov	r1, r6
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	f7f0 ff30 	bl	80038b0 <compress>
		s->leftover_offset = 0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 8012a54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8012a56:	2100      	movs	r1, #0
 8012a58:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8012a5c:	4430      	add	r0, r6
 8012a5e:	f7ff fde4 	bl	801262a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8012a62:	6a23      	ldr	r3, [r4, #32]
 8012a64:	ba1a      	rev	r2, r3
 8012a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 8012a68:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8012a6a:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 8012a6c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8012a70:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8012a74:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8012a76:	0e1b      	lsrs	r3, r3, #24
 8012a78:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 8012a7c:	4631      	mov	r1, r6
 8012a7e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8012a80:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 8012a84:	f7f0 ff14 	bl	80038b0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8012a88:	1f26      	subs	r6, r4, #4
 8012a8a:	1d2b      	adds	r3, r5, #4
 8012a8c:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8012a90:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t);
 8012a94:	f803 2c01 	strb.w	r2, [r3, #-1]
		*digest++ = (uint8_t)(t >> 24);
 8012a98:	0e11      	lsrs	r1, r2, #24
 8012a9a:	f803 1c04 	strb.w	r1, [r3, #-4]
		*digest++ = (uint8_t)(t >> 16);
 8012a9e:	0c11      	lsrs	r1, r2, #16
 8012aa0:	f803 1c03 	strb.w	r1, [r3, #-3]
		*digest++ = (uint8_t)(t >> 8);
 8012aa4:	0a11      	lsrs	r1, r2, #8
 8012aa6:	f803 1c02 	strb.w	r1, [r3, #-2]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8012aaa:	3304      	adds	r3, #4
 8012aac:	4283      	cmp	r3, r0
 8012aae:	d1ef      	bne.n	8012a90 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	2270      	movs	r2, #112	; 0x70
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	f7ff fdb8 	bl	801262a <_set>
	return TC_CRYPTO_SUCCESS;
 8012aba:	2001      	movs	r0, #1
}
 8012abc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8012abe:	4608      	mov	r0, r1
 8012ac0:	e7fc      	b.n	8012abc <tc_sha256_final+0xb6>

08012ac2 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 8012ac2:	b530      	push	{r4, r5, lr}
 8012ac4:	1e43      	subs	r3, r0, #1
 8012ac6:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 8012ac8:	42a9      	cmp	r1, r5
 8012aca:	d106      	bne.n	8012ada <rekey+0x18>
 8012acc:	4402      	add	r2, r0
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8012ace:	2136      	movs	r1, #54	; 0x36
 8012ad0:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8012ad2:	1a13      	subs	r3, r2, r0
 8012ad4:	2b3f      	cmp	r3, #63	; 0x3f
 8012ad6:	d90c      	bls.n	8012af2 <rekey+0x30>
	}
}
 8012ad8:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
 8012ada:	780c      	ldrb	r4, [r1, #0]
 8012adc:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8012ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 8012ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ae8:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8012aec:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
 8012af0:	e7ea      	b.n	8012ac8 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8012af2:	f802 1b01 	strb.w	r1, [r2], #1
 8012af6:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8012afa:	e7ea      	b.n	8012ad2 <rekey+0x10>

08012afc <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 8012afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012afe:	460e      	mov	r6, r1
 8012b00:	b0cd      	sub	sp, #308	; 0x134
 8012b02:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
 8012b04:	4605      	mov	r5, r0
 8012b06:	b1b8      	cbz	r0, 8012b38 <tc_hmac_set_key+0x3c>
 8012b08:	b341      	cbz	r1, 8012b5c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
 8012b0a:	b34a      	cbz	r2, 8012b60 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8012b0c:	2a40      	cmp	r2, #64	; 0x40
 8012b0e:	f100 0770 	add.w	r7, r0, #112	; 0x70
 8012b12:	d813      	bhi.n	8012b3c <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 8012b14:	a810      	add	r0, sp, #64	; 0x40
 8012b16:	f7f0 ffb1 	bl	8003a7c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4669      	mov	r1, sp
 8012b1e:	a810      	add	r0, sp, #64	; 0x40
 8012b20:	f7ff ff4b 	bl	80129ba <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 8012b24:	a910      	add	r1, sp, #64	; 0x40
 8012b26:	a834      	add	r0, sp, #208	; 0xd0
 8012b28:	f7ff ff6d 	bl	8012a06 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 8012b2c:	4622      	mov	r2, r4
 8012b2e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 8012b30:	4638      	mov	r0, r7
 8012b32:	f7ff ffc6 	bl	8012ac2 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8012b36:	2001      	movs	r0, #1
}
 8012b38:	b04d      	add	sp, #308	; 0x134
 8012b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 8012b3c:	f7f0 ff9e 	bl	8003a7c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8012b40:	4622      	mov	r2, r4
 8012b42:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8012b44:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f7ff ff36 	bl	80129ba <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8012b4e:	4629      	mov	r1, r5
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ff ff58 	bl	8012a06 <tc_sha256_final>
		rekey(ctx->key,
 8012b56:	2220      	movs	r2, #32
 8012b58:	4621      	mov	r1, r4
 8012b5a:	e7e9      	b.n	8012b30 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
 8012b5c:	4608      	mov	r0, r1
 8012b5e:	e7eb      	b.n	8012b38 <tc_hmac_set_key+0x3c>
 8012b60:	4610      	mov	r0, r2
 8012b62:	e7e9      	b.n	8012b38 <tc_hmac_set_key+0x3c>

08012b64 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8012b64:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8012b66:	4604      	mov	r4, r0
 8012b68:	b140      	cbz	r0, 8012b7c <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 8012b6a:	f7f0 ff87 	bl	8003a7c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 8012b6e:	2240      	movs	r2, #64	; 0x40
 8012b70:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8012b74:	4620      	mov	r0, r4
 8012b76:	f7ff ff20 	bl	80129ba <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8012b7a:	2001      	movs	r0, #1
}
 8012b7c:	bd10      	pop	{r4, pc}

08012b7e <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 8012b7e:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8012b80:	b110      	cbz	r0, 8012b88 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8012b82:	f7ff ff1a 	bl	80129ba <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8012b86:	2001      	movs	r0, #1
}
 8012b88:	bd08      	pop	{r3, pc}

08012b8a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 8012b8a:	b570      	push	{r4, r5, r6, lr}
 8012b8c:	460e      	mov	r6, r1
 8012b8e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8012b90:	4605      	mov	r5, r0
 8012b92:	b1f0      	cbz	r0, 8012bd2 <tc_hmac_final+0x48>
 8012b94:	2920      	cmp	r1, #32
 8012b96:	d11c      	bne.n	8012bd2 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 8012b98:	b1ea      	cbz	r2, 8012bd6 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	f7ff ff33 	bl	8012a06 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7f0 ff6b 	bl	8003a7c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 8012ba6:	2240      	movs	r2, #64	; 0x40
 8012ba8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7ff ff04 	bl	80129ba <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8012bb2:	4632      	mov	r2, r6
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	f7ff feff 	bl	80129ba <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 8012bbc:	4621      	mov	r1, r4
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f7ff ff21 	bl	8012a06 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	22f0      	movs	r2, #240	; 0xf0
 8012bc8:	2100      	movs	r1, #0
 8012bca:	f7ff fd2e 	bl	801262a <_set>

	return TC_CRYPTO_SUCCESS;
 8012bce:	2001      	movs	r0, #1
}
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8012bd2:	2000      	movs	r0, #0
 8012bd4:	e7fc      	b.n	8012bd0 <tc_hmac_final+0x46>
 8012bd6:	4610      	mov	r0, r2
 8012bd8:	e7fa      	b.n	8012bd0 <tc_hmac_final+0x46>

08012bda <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
 8012bda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012bde:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
{
 8012be2:	4604      	mov	r4, r0
 8012be4:	4688      	mov	r8, r1
	const uint8_t separator1 = 0x01;
 8012be6:	f04f 0b01 	mov.w	fp, #1
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012bea:	4631      	mov	r1, r6
{
 8012bec:	4691      	mov	r9, r2
 8012bee:	461f      	mov	r7, r3
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012bf0:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f88d 3006 	strb.w	r3, [sp, #6]
{
 8012bf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
 8012bfc:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012c00:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012c04:	f7ff ff7a 	bl	8012afc <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f7ff ffab 	bl	8012b64 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012c0e:	2220      	movs	r2, #32
 8012c10:	4629      	mov	r1, r5
 8012c12:	4620      	mov	r0, r4
 8012c14:	f7ff ffb3 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 8012c18:	465a      	mov	r2, fp
 8012c1a:	f10d 0106 	add.w	r1, sp, #6
 8012c1e:	4620      	mov	r0, r4
 8012c20:	f7ff ffad 	bl	8012b7e <tc_hmac_update>

	if (data && datalen)
 8012c24:	f1b8 0f00 	cmp.w	r8, #0
 8012c28:	d007      	beq.n	8012c3a <update+0x60>
 8012c2a:	f1b9 0f00 	cmp.w	r9, #0
 8012c2e:	d004      	beq.n	8012c3a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
 8012c30:	464a      	mov	r2, r9
 8012c32:	4641      	mov	r1, r8
 8012c34:	4620      	mov	r0, r4
 8012c36:	f7ff ffa2 	bl	8012b7e <tc_hmac_update>
	if (additional_data && additional_datalen)
 8012c3a:	b13f      	cbz	r7, 8012c4c <update+0x72>
 8012c3c:	f1ba 0f00 	cmp.w	sl, #0
 8012c40:	d004      	beq.n	8012c4c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 8012c42:	4652      	mov	r2, sl
 8012c44:	4639      	mov	r1, r7
 8012c46:	4620      	mov	r0, r4
 8012c48:	f7ff ff99 	bl	8012b7e <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8012c4c:	4622      	mov	r2, r4
 8012c4e:	2120      	movs	r1, #32
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7ff ff9a 	bl	8012b8a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012c56:	2220      	movs	r2, #32
 8012c58:	4631      	mov	r1, r6
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f7ff ff4e 	bl	8012afc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8012c60:	4620      	mov	r0, r4
 8012c62:	f7ff ff7f 	bl	8012b64 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012c66:	2220      	movs	r2, #32
 8012c68:	4629      	mov	r1, r5
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7ff ff87 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8012c70:	4622      	mov	r2, r4
 8012c72:	2120      	movs	r1, #32
 8012c74:	4628      	mov	r0, r5
 8012c76:	f7ff ff88 	bl	8012b8a <tc_hmac_final>

	if (data == 0 || datalen == 0)
 8012c7a:	f1b8 0f00 	cmp.w	r8, #0
 8012c7e:	d03a      	beq.n	8012cf6 <update+0x11c>
 8012c80:	f1b9 0f00 	cmp.w	r9, #0
 8012c84:	d037      	beq.n	8012cf6 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012c86:	2220      	movs	r2, #32
 8012c88:	4631      	mov	r1, r6
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f7ff ff36 	bl	8012afc <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8012c90:	4620      	mov	r0, r4
 8012c92:	f7ff ff67 	bl	8012b64 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012c96:	2220      	movs	r2, #32
 8012c98:	4629      	mov	r1, r5
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f7ff ff6f 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8012ca0:	2201      	movs	r2, #1
 8012ca2:	f10d 0107 	add.w	r1, sp, #7
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f7ff ff69 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
 8012cac:	464a      	mov	r2, r9
 8012cae:	4641      	mov	r1, r8
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f7ff ff64 	bl	8012b7e <tc_hmac_update>
	if (additional_data && additional_datalen)
 8012cb6:	b13f      	cbz	r7, 8012cc8 <update+0xee>
 8012cb8:	f1ba 0f00 	cmp.w	sl, #0
 8012cbc:	d004      	beq.n	8012cc8 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
 8012cbe:	4652      	mov	r2, sl
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f7ff ff5b 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8012cc8:	4622      	mov	r2, r4
 8012cca:	2120      	movs	r1, #32
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f7ff ff5c 	bl	8012b8a <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012cd2:	2220      	movs	r2, #32
 8012cd4:	4631      	mov	r1, r6
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7ff ff10 	bl	8012afc <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f7ff ff41 	bl	8012b64 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012ce2:	2220      	movs	r2, #32
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7ff ff49 	bl	8012b7e <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8012cec:	4622      	mov	r2, r4
 8012cee:	2120      	movs	r1, #32
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	f7ff ff4a 	bl	8012b8a <tc_hmac_final>
}
 8012cf6:	b003      	add	sp, #12
 8012cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cfc <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 8012cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cfe:	460c      	mov	r4, r1
 8012d00:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8012d02:	4605      	mov	r5, r0
 8012d04:	b1b0      	cbz	r0, 8012d34 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
 8012d06:	b1b9      	cbz	r1, 8012d38 <tc_hmac_prng_init+0x3c>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 8012d08:	2220      	movs	r2, #32
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	30f0      	adds	r0, #240	; 0xf0
 8012d0e:	f7ff fc8c 	bl	801262a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
 8012d12:	2600      	movs	r6, #0
	_set(prng->v, 0x01, sizeof(prng->v));
 8012d14:	2220      	movs	r2, #32
 8012d16:	2101      	movs	r1, #1
 8012d18:	f505 7088 	add.w	r0, r5, #272	; 0x110
 8012d1c:	f7ff fc85 	bl	801262a <_set>
	update(prng, personalization, plen, 0, 0);
 8012d20:	4628      	mov	r0, r5
 8012d22:	9600      	str	r6, [sp, #0]
 8012d24:	4633      	mov	r3, r6
 8012d26:	463a      	mov	r2, r7
 8012d28:	4621      	mov	r1, r4
 8012d2a:	f7ff ff56 	bl	8012bda <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 8012d2e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8012d32:	2001      	movs	r0, #1
}
 8012d34:	b003      	add	sp, #12
 8012d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8012d38:	4608      	mov	r0, r1
 8012d3a:	e7fb      	b.n	8012d34 <tc_hmac_prng_init+0x38>

08012d3c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 8012d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d3e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8012d40:	4605      	mov	r5, r0
 8012d42:	b180      	cbz	r0, 8012d66 <tc_hmac_prng_reseed+0x2a>
 8012d44:	b179      	cbz	r1, 8012d66 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 8012d46:	2a1f      	cmp	r2, #31
 8012d48:	d90d      	bls.n	8012d66 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8012d4a:	b153      	cbz	r3, 8012d62 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8012d4c:	b16c      	cbz	r4, 8012d6a <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
 8012d4e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
 8012d50:	f7ff ff43 	bl	8012bda <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8012d54:	f04f 33ff 	mov.w	r3, #4294967295
 8012d58:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8012d5c:	2001      	movs	r0, #1
}
 8012d5e:	b003      	add	sp, #12
 8012d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	e7f4      	b.n	8012d50 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
 8012d66:	2000      	movs	r0, #0
 8012d68:	e7f9      	b.n	8012d5e <tc_hmac_prng_reseed+0x22>
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	e7f7      	b.n	8012d5e <tc_hmac_prng_reseed+0x22>

08012d6e <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 8012d6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d72:	460d      	mov	r5, r1
 8012d74:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8012d76:	4680      	mov	r8, r0
 8012d78:	b3d8      	cbz	r0, 8012df2 <tc_hmac_prng_generate+0x84>
 8012d7a:	b3d2      	cbz	r2, 8012df2 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
 8012d7c:	1e4b      	subs	r3, r1, #1
 8012d7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012d82:	d236      	bcs.n	8012df2 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8012d84:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8012d88:	b3ab      	cbz	r3, 8012df6 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012d90:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012d94:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8012d98:	2220      	movs	r2, #32
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f7ff fead 	bl	8012afc <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
 8012da2:	4620      	mov	r0, r4
 8012da4:	f7ff fede 	bl	8012b64 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8012da8:	2220      	movs	r2, #32
 8012daa:	4639      	mov	r1, r7
 8012dac:	4620      	mov	r0, r4
 8012dae:	f7ff fee6 	bl	8012b7e <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8012db2:	4622      	mov	r2, r4
 8012db4:	2120      	movs	r1, #32
 8012db6:	4638      	mov	r0, r7
 8012db8:	f7ff fee7 	bl	8012b8a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8012dbc:	2d20      	cmp	r5, #32
 8012dbe:	462e      	mov	r6, r5
 8012dc0:	bf28      	it	cs
 8012dc2:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	4633      	mov	r3, r6
 8012dc8:	463a      	mov	r2, r7
 8012dca:	4631      	mov	r1, r6
 8012dcc:	f7ff fc20 	bl	8012610 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8012dd0:	2d20      	cmp	r5, #32
 8012dd2:	bf38      	it	cc
 8012dd4:	2520      	movcc	r5, #32
	while (outlen != 0) {
 8012dd6:	3d20      	subs	r5, #32
		out += bufferlen;
 8012dd8:	44b0      	add	r8, r6
	while (outlen != 0) {
 8012dda:	d1dd      	bne.n	8012d98 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
 8012ddc:	4620      	mov	r0, r4
 8012dde:	9500      	str	r5, [sp, #0]
 8012de0:	462b      	mov	r3, r5
 8012de2:	462a      	mov	r2, r5
 8012de4:	4629      	mov	r1, r5
 8012de6:	f7ff fef8 	bl	8012bda <update>

	return TC_CRYPTO_SUCCESS;
 8012dea:	2001      	movs	r0, #1
}
 8012dec:	b003      	add	sp, #12
 8012dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
 8012df2:	2000      	movs	r0, #0
 8012df4:	e7fa      	b.n	8012dec <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
 8012df6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dfa:	e7f7      	b.n	8012dec <tc_hmac_prng_generate+0x7e>

08012dfc <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8012dfc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8012dfe:	6800      	ldr	r0, [r0, #0]
 8012e00:	f7f0 be7c 	b.w	8003afc <z_arm_fatal_error>

08012e04 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8012e04:	2100      	movs	r1, #0
 8012e06:	2001      	movs	r0, #1
 8012e08:	f7f0 be78 	b.w	8003afc <z_arm_fatal_error>

08012e0c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8012e0c:	b508      	push	{r3, lr}
	handler();
 8012e0e:	f7f0 ff19 	bl	8003c44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8012e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8012e16:	f7f0 bff1 	b.w	8003dfc <z_arm_exc_exit>

08012e1a <z_log_msg2_static_create.constprop.0>:
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f7f0 b89e 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

08012e20 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8012e20:	3901      	subs	r1, #1
 8012e22:	4603      	mov	r3, r0
 8012e24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012e28:	b90a      	cbnz	r2, 8012e2e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8012e2a:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8012e2c:	4770      	bx	lr
		*d = *s;
 8012e2e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8012e32:	e7f7      	b.n	8012e24 <strcpy+0x4>

08012e34 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8012e34:	4603      	mov	r3, r0
	size_t n = 0;
 8012e36:	2000      	movs	r0, #0

	while (*s != '\0') {
 8012e38:	5c1a      	ldrb	r2, [r3, r0]
 8012e3a:	b902      	cbnz	r2, 8012e3e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8012e3c:	4770      	bx	lr
		n++;
 8012e3e:	3001      	adds	r0, #1
 8012e40:	e7fa      	b.n	8012e38 <strlen+0x4>

08012e42 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8012e42:	4603      	mov	r3, r0
	size_t n = 0;
 8012e44:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8012e46:	5c1a      	ldrb	r2, [r3, r0]
 8012e48:	b10a      	cbz	r2, 8012e4e <strnlen+0xc>
 8012e4a:	4288      	cmp	r0, r1
 8012e4c:	d100      	bne.n	8012e50 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8012e4e:	4770      	bx	lr
		n++;
 8012e50:	3001      	adds	r0, #1
 8012e52:	e7f8      	b.n	8012e46 <strnlen+0x4>

08012e54 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8012e54:	1e43      	subs	r3, r0, #1
 8012e56:	3901      	subs	r1, #1
 8012e58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8012e5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012e60:	4282      	cmp	r2, r0
 8012e62:	d101      	bne.n	8012e68 <strcmp+0x14>
 8012e64:	2a00      	cmp	r2, #0
 8012e66:	d1f7      	bne.n	8012e58 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8012e68:	1a10      	subs	r0, r2, r0
 8012e6a:	4770      	bx	lr

08012e6c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8012e6c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 8012e6e:	b15a      	cbz	r2, 8012e88 <memcmp+0x1c>
 8012e70:	3901      	subs	r1, #1
 8012e72:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 8012e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012e7c:	42a0      	cmp	r0, r4
 8012e7e:	d001      	beq.n	8012e84 <memcmp+0x18>
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d0f7      	beq.n	8012e74 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 8012e84:	1ad0      	subs	r0, r2, r3
}
 8012e86:	bd10      	pop	{r4, pc}
		return 0;
 8012e88:	4610      	mov	r0, r2
 8012e8a:	e7fc      	b.n	8012e86 <memcmp+0x1a>

08012e8c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8012e8c:	b510      	push	{r4, lr}
 8012e8e:	1e43      	subs	r3, r0, #1
 8012e90:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8012e92:	4291      	cmp	r1, r2
 8012e94:	d100      	bne.n	8012e98 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8012e96:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8012e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8012ea0:	e7f7      	b.n	8012e92 <memcpy+0x6>

08012ea2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8012ea2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8012ea4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8012ea6:	4603      	mov	r3, r0
	while (n > 0) {
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d100      	bne.n	8012eae <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8012eac:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8012eae:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8012eb2:	e7f9      	b.n	8012ea8 <memset+0x6>

08012eb4 <_stdout_hook_default>:
}
 8012eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb8:	4770      	bx	lr

08012eba <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
 8012eba:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
 8012ebc:	2203      	movs	r2, #3
{
 8012ebe:	b087      	sub	sp, #28
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	460c      	mov	r4, r1
	memcpy(res, r, 3);
 8012ec4:	a802      	add	r0, sp, #8
 8012ec6:	4411      	add	r1, r2
 8012ec8:	f7ff ffe0 	bl	8012e8c <memcpy>
	(void)memset(res + 3, 0, 13);
 8012ecc:	220d      	movs	r2, #13
 8012ece:	2100      	movs	r1, #0
 8012ed0:	f10d 000b 	add.w	r0, sp, #11
 8012ed4:	f7ff ffe5 	bl	8012ea2 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
 8012ed8:	aa02      	add	r2, sp, #8
 8012eda:	4611      	mov	r1, r2
 8012edc:	4628      	mov	r0, r5
 8012ede:	f000 fb4a 	bl	8013576 <bt_encrypt_le>
	if (err) {
 8012ee2:	b970      	cbnz	r0, 8012f02 <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
 8012ee4:	2203      	movs	r2, #3
 8012ee6:	a902      	add	r1, sp, #8
 8012ee8:	a801      	add	r0, sp, #4
 8012eea:	f7ff ffcf 	bl	8012e8c <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
 8012eee:	2203      	movs	r2, #3
 8012ef0:	a901      	add	r1, sp, #4
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f7ff ffba 	bl	8012e6c <memcmp>
 8012ef8:	fab0 f080 	clz	r0, r0
 8012efc:	0940      	lsrs	r0, r0, #5
}
 8012efe:	b007      	add	sp, #28
 8012f00:	bd30      	pop	{r4, r5, pc}
		return false;
 8012f02:	2000      	movs	r0, #0
 8012f04:	e7fb      	b.n	8012efe <bt_rpa_irk_matches+0x44>

08012f06 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
 8012f06:	b510      	push	{r4, lr}
 8012f08:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
 8012f0a:	7801      	ldrb	r1, [r0, #0]
 8012f0c:	7822      	ldrb	r2, [r4, #0]
 8012f0e:	428a      	cmp	r2, r1
{
 8012f10:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
 8012f12:	d00e      	beq.n	8012f32 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
 8012f14:	4669      	mov	r1, sp
 8012f16:	f7f1 fc6f 	bl	80047f8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
 8012f1a:	a905      	add	r1, sp, #20
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	f7f1 fc6b 	bl	80047f8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
 8012f22:	2210      	movs	r2, #16
 8012f24:	f10d 0115 	add.w	r1, sp, #21
 8012f28:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8012f2c:	f7ff ff9e 	bl	8012e6c <memcmp>
 8012f30:	e007      	b.n	8012f42 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
 8012f32:	2a01      	cmp	r2, #1
 8012f34:	d007      	beq.n	8012f46 <bt_uuid_cmp+0x40>
 8012f36:	2a02      	cmp	r2, #2
 8012f38:	d008      	beq.n	8012f4c <bt_uuid_cmp+0x46>
 8012f3a:	b95a      	cbnz	r2, 8012f54 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
 8012f3c:	8840      	ldrh	r0, [r0, #2]
 8012f3e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8012f40:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
 8012f42:	b00a      	add	sp, #40	; 0x28
 8012f44:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8012f46:	6840      	ldr	r0, [r0, #4]
 8012f48:	6863      	ldr	r3, [r4, #4]
 8012f4a:	e7f9      	b.n	8012f40 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8012f4c:	2210      	movs	r2, #16
 8012f4e:	1c61      	adds	r1, r4, #1
 8012f50:	3001      	adds	r0, #1
 8012f52:	e7eb      	b.n	8012f2c <bt_uuid_cmp+0x26>
	switch (u1->type) {
 8012f54:	f06f 0015 	mvn.w	r0, #21
 8012f58:	e7f3      	b.n	8012f42 <bt_uuid_cmp+0x3c>

08012f5a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
 8012f5a:	2a04      	cmp	r2, #4
{
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	460c      	mov	r4, r1
	switch (data_len) {
 8012f60:	d00d      	beq.n	8012f7e <bt_uuid_create+0x24>
 8012f62:	2a10      	cmp	r2, #16
 8012f64:	d019      	beq.n	8012f9a <bt_uuid_create+0x40>
 8012f66:	2a02      	cmp	r2, #2
 8012f68:	f04f 0300 	mov.w	r3, #0
 8012f6c:	d11b      	bne.n	8012fa6 <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
 8012f6e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
 8012f70:	784a      	ldrb	r2, [r1, #1]
 8012f72:	780b      	ldrb	r3, [r1, #0]
 8012f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
 8012f78:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
 8012f7a:	2001      	movs	r0, #1
}
 8012f7c:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	7003      	strb	r3, [r0, #0]
 8012f82:	78a2      	ldrb	r2, [r4, #2]
 8012f84:	78c9      	ldrb	r1, [r1, #3]
 8012f86:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 8012f88:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
 8012f8c:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
 8012f8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8012f92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
 8012f96:	6042      	str	r2, [r0, #4]
		break;
 8012f98:	e7ef      	b.n	8012f7a <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
 8012fa0:	f7ff ff74 	bl	8012e8c <memcpy>
		break;
 8012fa4:	e7e9      	b.n	8012f7a <bt_uuid_create+0x20>
	switch (data_len) {
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	e7e8      	b.n	8012f7c <bt_uuid_create+0x22>

08012faa <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
 8012faa:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
 8012fac:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
 8012fae:	2106      	movs	r1, #6
{
 8012fb0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
 8012fb2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
 8012fb6:	f7f3 fdb7 	bl	8006b28 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
 8012fba:	b918      	cbnz	r0, 8012fc4 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
 8012fbc:	79a3      	ldrb	r3, [r4, #6]
 8012fbe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8012fc2:	71a3      	strb	r3, [r4, #6]

	return 0;
}
 8012fc4:	bd10      	pop	{r4, pc}

08012fc6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
 8012fc6:	280f      	cmp	r0, #15
 8012fc8:	d806      	bhi.n	8012fd8 <bt_hci_evt_get_flags+0x12>
 8012fca:	280d      	cmp	r0, #13
 8012fcc:	d80b      	bhi.n	8012fe6 <bt_hci_evt_get_flags+0x20>
 8012fce:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
 8012fd0:	bf14      	ite	ne
 8012fd2:	2002      	movne	r0, #2
 8012fd4:	2003      	moveq	r0, #3
 8012fd6:	4770      	bx	lr
	switch (evt) {
 8012fd8:	2813      	cmp	r0, #19
 8012fda:	d004      	beq.n	8012fe6 <bt_hci_evt_get_flags+0x20>
 8012fdc:	281a      	cmp	r0, #26
 8012fde:	bf14      	ite	ne
 8012fe0:	2002      	movne	r0, #2
 8012fe2:	2001      	moveq	r0, #1
 8012fe4:	4770      	bx	lr
 8012fe6:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
 8012fe8:	4770      	bx	lr

08012fea <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
 8012fea:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8012fee:	b193      	cbz	r3, 8013016 <update_sec_level+0x2c>
 8012ff0:	7b5a      	ldrb	r2, [r3, #13]
 8012ff2:	07d1      	lsls	r1, r2, #31
 8012ff4:	d50f      	bpl.n	8013016 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
 8012ff6:	06d2      	lsls	r2, r2, #27
 8012ff8:	d50b      	bpl.n	8013012 <update_sec_level+0x28>
 8012ffa:	7b1b      	ldrb	r3, [r3, #12]
 8012ffc:	2b10      	cmp	r3, #16
 8012ffe:	d108      	bne.n	8013012 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
 8013000:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
 8013002:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
 8013004:	7a82      	ldrb	r2, [r0, #10]
 8013006:	7a40      	ldrb	r0, [r0, #9]
}
 8013008:	4282      	cmp	r2, r0
 801300a:	bf8c      	ite	hi
 801300c:	2000      	movhi	r0, #0
 801300e:	2001      	movls	r0, #1
 8013010:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
 8013012:	2303      	movs	r3, #3
 8013014:	e7f5      	b.n	8013002 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
 8013016:	2302      	movs	r3, #2
 8013018:	e7f3      	b.n	8013002 <update_sec_level+0x18>

0801301a <hci_vendor_event>:
}
 801301a:	4770      	bx	lr

0801301c <atomic_and>:
{
 801301c:	4603      	mov	r3, r0
}
 801301e:	f3bf 8f5b 	dmb	ish
 8013022:	e853 0f00 	ldrex	r0, [r3]
 8013026:	ea00 0201 	and.w	r2, r0, r1
 801302a:	e843 2c00 	strex	ip, r2, [r3]
 801302e:	f1bc 0f00 	cmp.w	ip, #0
 8013032:	d1f6      	bne.n	8013022 <atomic_and+0x6>
 8013034:	f3bf 8f5b 	dmb	ish
 8013038:	4770      	bx	lr

0801303a <atomic_or>:
{
 801303a:	4603      	mov	r3, r0
}
 801303c:	f3bf 8f5b 	dmb	ish
 8013040:	e853 0f00 	ldrex	r0, [r3]
 8013044:	ea40 0201 	orr.w	r2, r0, r1
 8013048:	e843 2c00 	strex	ip, r2, [r3]
 801304c:	f1bc 0f00 	cmp.w	ip, #0
 8013050:	d1f6      	bne.n	8013040 <atomic_or+0x6>
 8013052:	f3bf 8f5b 	dmb	ish
 8013056:	4770      	bx	lr

08013058 <z_log_msg2_static_create.constprop.0>:
 8013058:	2300      	movs	r3, #0
 801305a:	f7ef bf7f 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

0801305e <sys_put_le64>:
	dst[1] = val >> 8;
 801305e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
 8013062:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
 8013064:	0e00      	lsrs	r0, r0, #24
 8013066:	7053      	strb	r3, [r2, #1]
 8013068:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
 801306a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
 801306c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8013070:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
 8013072:	7093      	strb	r3, [r2, #2]
 8013074:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
 8013076:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
 8013078:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
 801307a:	71d1      	strb	r1, [r2, #7]
}
 801307c:	4770      	bx	lr

0801307e <bt_hci_disconnect>:
{
 801307e:	b570      	push	{r4, r5, r6, lr}
 8013080:	4606      	mov	r6, r0
 8013082:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
 8013084:	f240 4006 	movw	r0, #1030	; 0x406
 8013088:	2103      	movs	r1, #3
 801308a:	f7f2 f8c9 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 801308e:	4604      	mov	r4, r0
 8013090:	b168      	cbz	r0, 80130ae <bt_hci_disconnect+0x30>
 8013092:	2103      	movs	r1, #3
 8013094:	3008      	adds	r0, #8
 8013096:	f7f9 f871 	bl	800c17c <net_buf_simple_add>
	disconn->reason = reason;
 801309a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
 801309c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
 801309e:	4621      	mov	r1, r4
 80130a0:	2200      	movs	r2, #0
}
 80130a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
 80130a6:	f240 4006 	movw	r0, #1030	; 0x406
 80130aa:	f7f2 b901 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 80130ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80130b2:	bd70      	pop	{r4, r5, r6, pc}

080130b4 <bt_le_set_data_len>:
{
 80130b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b6:	4607      	mov	r7, r0
 80130b8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 80130ba:	f242 0022 	movw	r0, #8226	; 0x2022
 80130be:	2106      	movs	r1, #6
{
 80130c0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 80130c2:	f7f2 f8ad 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 80130c6:	4604      	mov	r4, r0
 80130c8:	b178      	cbz	r0, 80130ea <bt_le_set_data_len+0x36>
 80130ca:	2106      	movs	r1, #6
 80130cc:	3008      	adds	r0, #8
 80130ce:	f7f9 f855 	bl	800c17c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 80130d2:	883b      	ldrh	r3, [r7, #0]
 80130d4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
 80130d6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
 80130d8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
 80130da:	4621      	mov	r1, r4
 80130dc:	2200      	movs	r2, #0
}
 80130de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
 80130e2:	f242 0022 	movw	r0, #8226	; 0x2022
 80130e6:	f7f2 b8e3 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 80130ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80130ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130f0 <bt_le_set_phy>:
{
 80130f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130f4:	4680      	mov	r8, r0
 80130f6:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 80130f8:	f242 0032 	movw	r0, #8242	; 0x2032
 80130fc:	2107      	movs	r1, #7
{
 80130fe:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8013102:	4616      	mov	r6, r2
 8013104:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 8013106:	f7f2 f88b 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 801310a:	4604      	mov	r4, r0
 801310c:	b198      	cbz	r0, 8013136 <bt_le_set_phy+0x46>
 801310e:	2107      	movs	r1, #7
 8013110:	3008      	adds	r0, #8
 8013112:	f7f9 f833 	bl	800c17c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8013116:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
 801311a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
 801311c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
 801311e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
 8013120:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
 8013122:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
 8013126:	4621      	mov	r1, r4
 8013128:	2200      	movs	r2, #0
}
 801312a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
 801312e:	f242 0032 	movw	r0, #8242	; 0x2032
 8013132:	f7f2 b8bd 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 8013136:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801313a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801313e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
 801313e:	6880      	ldr	r0, [r0, #8]
 8013140:	f7f2 b95a 	b.w	80053f8 <bt_hci_le_enh_conn_complete>

08013144 <le_legacy_conn_complete>:
{
 8013144:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
 8013146:	6881      	ldr	r1, [r0, #8]
{
 8013148:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
 801314a:	780b      	ldrb	r3, [r1, #0]
 801314c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
 8013150:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8013154:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
 8013158:	78cb      	ldrb	r3, [r1, #3]
 801315a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
 801315e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 8013162:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
 8013166:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 801316a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
 801316e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 8013172:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
 8013176:	7c4b      	ldrb	r3, [r1, #17]
 8013178:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
 801317c:	2207      	movs	r2, #7
 801317e:	3104      	adds	r1, #4
 8013180:	a803      	add	r0, sp, #12
 8013182:	f7ff fe83 	bl	8012e8c <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
 8013186:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
 8013188:	4669      	mov	r1, sp
 801318a:	2206      	movs	r2, #6
 801318c:	f10d 0013 	add.w	r0, sp, #19
 8013190:	9400      	str	r4, [sp, #0]
 8013192:	f8ad 4004 	strh.w	r4, [sp, #4]
 8013196:	f7ff fe79 	bl	8012e8c <memcpy>
 801319a:	2206      	movs	r2, #6
 801319c:	4669      	mov	r1, sp
 801319e:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
 80131a2:	9400      	str	r4, [sp, #0]
 80131a4:	f8ad 4004 	strh.w	r4, [sp, #4]
 80131a8:	f7ff fe70 	bl	8012e8c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
 80131ac:	a802      	add	r0, sp, #8
 80131ae:	f7f2 f923 	bl	80053f8 <bt_hci_le_enh_conn_complete>
}
 80131b2:	b00a      	add	sp, #40	; 0x28
 80131b4:	bd10      	pop	{r4, pc}

080131b6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
 80131b6:	8802      	ldrh	r2, [r0, #0]
 80131b8:	8843      	ldrh	r3, [r0, #2]
 80131ba:	429a      	cmp	r2, r3
{
 80131bc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
 80131be:	d818      	bhi.n	80131f2 <bt_le_conn_params_valid+0x3c>
 80131c0:	2a05      	cmp	r2, #5
 80131c2:	d916      	bls.n	80131f2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
 80131c4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80131c8:	d813      	bhi.n	80131f2 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
 80131ca:	8884      	ldrh	r4, [r0, #4]
 80131cc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80131d0:	d20f      	bcs.n	80131f2 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
 80131d2:	88c1      	ldrh	r1, [r0, #6]
 80131d4:	f1a1 020a 	sub.w	r2, r1, #10
 80131d8:	b292      	uxth	r2, r2
 80131da:	f640 4076 	movw	r0, #3190	; 0xc76
 80131de:	4282      	cmp	r2, r0
 80131e0:	d807      	bhi.n	80131f2 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
 80131e2:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
 80131e6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80131ea:	bf34      	ite	cc
 80131ec:	2001      	movcc	r0, #1
 80131ee:	2000      	movcs	r0, #0
}
 80131f0:	bd10      	pop	{r4, pc}
		return false;
 80131f2:	2000      	movs	r0, #0
 80131f4:	e7fc      	b.n	80131f0 <bt_le_conn_params_valid+0x3a>

080131f6 <le_conn_param_neg_reply>:
{
 80131f6:	b570      	push	{r4, r5, r6, lr}
 80131f8:	4606      	mov	r6, r0
 80131fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
 80131fc:	f242 0021 	movw	r0, #8225	; 0x2021
 8013200:	2103      	movs	r1, #3
 8013202:	f7f2 f80d 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8013206:	4604      	mov	r4, r0
 8013208:	b918      	cbnz	r0, 8013212 <le_conn_param_neg_reply+0x1c>
}
 801320a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801320e:	f7f1 bbe1 	b.w	80049d4 <le_conn_param_neg_reply.part.0>
 8013212:	2103      	movs	r1, #3
 8013214:	3008      	adds	r0, #8
 8013216:	f7f8 ffb1 	bl	800c17c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
 801321a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
 801321c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 801321e:	4621      	mov	r1, r4
 8013220:	f242 0021 	movw	r0, #8225	; 0x2021
}
 8013224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 8013228:	f7f2 ba6c 	b.w	8005704 <bt_hci_cmd_send>

0801322c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
 801322c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8013230:	4770      	bx	lr

08013232 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
 8013232:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
 8013234:	f7f8 fc60 	bl	800baf8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
 8013238:	b118      	cbz	r0, 8013242 <bt_addr_le_is_bonded+0x10>
 801323a:	89c0      	ldrh	r0, [r0, #14]
 801323c:	3800      	subs	r0, #0
 801323e:	bf18      	it	ne
 8013240:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 8013242:	bd08      	pop	{r3, pc}

08013244 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
 8013244:	2207      	movs	r2, #7
 8013246:	f7ff be21 	b.w	8012e8c <memcpy>

0801324a <addr_res_enable>:
{
 801324a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
 801324c:	2101      	movs	r1, #1
{
 801324e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
 8013250:	f242 002d 	movw	r0, #8237	; 0x202d
 8013254:	f7f1 ffe4 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8013258:	4604      	mov	r4, r0
 801325a:	b158      	cbz	r0, 8013274 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
 801325c:	4629      	mov	r1, r5
 801325e:	3008      	adds	r0, #8
 8013260:	f001 fe1f 	bl	8014ea2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
 8013264:	4621      	mov	r1, r4
 8013266:	2200      	movs	r2, #0
}
 8013268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
 801326c:	f242 002d 	movw	r0, #8237	; 0x202d
 8013270:	f7f2 b81e 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 8013274:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8013278:	bd38      	pop	{r3, r4, r5, pc}

0801327a <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
 801327a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801327c:	4607      	mov	r7, r0
 801327e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
 8013280:	f242 0027 	movw	r0, #8231	; 0x2027
 8013284:	2127      	movs	r1, #39	; 0x27
 8013286:	f7f1 ffcb 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 801328a:	4604      	mov	r4, r0
 801328c:	b1d0      	cbz	r0, 80132c4 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
 801328e:	2127      	movs	r1, #39	; 0x27
 8013290:	3008      	adds	r0, #8
 8013292:	f7f8 ff73 	bl	800c17c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
 8013296:	4639      	mov	r1, r7
 8013298:	4605      	mov	r5, r0
 801329a:	f7ff ffd3 	bl	8013244 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
 801329e:	4631      	mov	r1, r6
 80132a0:	2210      	movs	r2, #16
 80132a2:	1de8      	adds	r0, r5, #7
 80132a4:	f7ff fdf2 	bl	8012e8c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
 80132a8:	2210      	movs	r2, #16
 80132aa:	2100      	movs	r1, #0
 80132ac:	f105 0017 	add.w	r0, r5, #23
 80132b0:	f7ff fdf7 	bl	8012ea2 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
 80132b4:	4621      	mov	r1, r4
 80132b6:	2200      	movs	r2, #0
}
 80132b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
 80132bc:	f242 0027 	movw	r0, #8231	; 0x2027
 80132c0:	f7f1 bff6 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 80132c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80132c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132ca <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
 80132ca:	7a03      	ldrb	r3, [r0, #8]
 80132cc:	075b      	lsls	r3, r3, #29
 80132ce:	d504      	bpl.n	80132da <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
 80132d0:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 80132d4:	3001      	adds	r0, #1
 80132d6:	f7ff bfd0 	b.w	801327a <hci_id_add.isra.0>
}
 80132da:	4770      	bx	lr

080132dc <z_log_msg2_static_create.constprop.0>:
 80132dc:	2300      	movs	r3, #0
 80132de:	f7ef be3d 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

080132e2 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80132e2:	f100 0310 	add.w	r3, r0, #16
 80132e6:	f3bf 8f5b 	dmb	ish
 80132ea:	e853 2f00 	ldrex	r2, [r3]
 80132ee:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 80132f2:	e843 1c00 	strex	ip, r1, [r3]
 80132f6:	f1bc 0f00 	cmp.w	ip, #0
 80132fa:	d1f6      	bne.n	80132ea <adv_unpause_enabled+0x8>
 80132fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
 8013300:	0453      	lsls	r3, r2, #17
 8013302:	d502      	bpl.n	801330a <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
 8013304:	2101      	movs	r1, #1
 8013306:	f000 b931 	b.w	801356c <bt_le_adv_set_enable>
}
 801330a:	4770      	bx	lr

0801330c <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801330c:	f3bf 8f5b 	dmb	ish
 8013310:	6903      	ldr	r3, [r0, #16]
 8013312:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
 8013316:	065b      	lsls	r3, r3, #25
 8013318:	f100 0210 	add.w	r2, r0, #16
 801331c:	d50e      	bpl.n	801333c <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801331e:	f3bf 8f5b 	dmb	ish
 8013322:	e852 3f00 	ldrex	r3, [r2]
 8013326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801332a:	e842 3100 	strex	r1, r3, [r2]
 801332e:	2900      	cmp	r1, #0
 8013330:	d1f7      	bne.n	8013322 <adv_pause_enabled+0x16>
 8013332:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
 8013336:	2100      	movs	r1, #0
 8013338:	f000 b918 	b.w	801356c <bt_le_adv_set_enable>
}
 801333c:	4770      	bx	lr

0801333e <bt_lookup_id_addr>:
{
 801333e:	b510      	push	{r4, lr}
 8013340:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
 8013342:	f7f8 fb9f 	bl	800ba84 <bt_keys_find_irk>
		if (keys) {
 8013346:	b100      	cbz	r0, 801334a <bt_lookup_id_addr+0xc>
			return &keys->addr;
 8013348:	1c44      	adds	r4, r0, #1
}
 801334a:	4620      	mov	r0, r4
 801334c:	bd10      	pop	{r4, pc}

0801334e <bt_id_set_adv_private_addr>:
{
 801334e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 8013350:	2106      	movs	r1, #6
 8013352:	4668      	mov	r0, sp
 8013354:	f7f3 fbe8 	bl	8006b28 <bt_rand>
	if (err) {
 8013358:	b940      	cbnz	r0, 801336c <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
 801335a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
 801335e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
 8013360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013364:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
 8013368:	f7f2 fe08 	bl	8005f7c <set_random_address>
}
 801336c:	b003      	add	sp, #12
 801336e:	f85d fb04 	ldr.w	pc, [sp], #4

08013372 <bt_id_adv_random_addr_check>:
}
 8013372:	2001      	movs	r0, #1
 8013374:	4770      	bx	lr

08013376 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
 8013376:	7a03      	ldrb	r3, [r0, #8]
 8013378:	07d9      	lsls	r1, r3, #31
 801337a:	d504      	bpl.n	8013386 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
 801337c:	f023 0301 	bic.w	r3, r3, #1
 8013380:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
 8013382:	f7f2 be75 	b.w	8006070 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
 8013386:	0799      	lsls	r1, r3, #30
 8013388:	d504      	bpl.n	8013394 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
 801338a:	f023 0302 	bic.w	r3, r3, #2
 801338e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
 8013390:	f7f2 bea4 	b.w	80060dc <bt_id_del>
}
 8013394:	4770      	bx	lr

08013396 <bt_setup_random_id_addr>:
	return bt_id_create(NULL, NULL);
 8013396:	2100      	movs	r1, #0
 8013398:	4608      	mov	r0, r1
 801339a:	f7f2 bed5 	b.w	8006148 <bt_id_create>

0801339e <get_adv_channel_map>:
{
 801339e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
 80133a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80133a4:	bf0c      	ite	eq
 80133a6:	2007      	moveq	r0, #7
 80133a8:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
 80133aa:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
 80133ac:	bf48      	it	mi
 80133ae:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
 80133b2:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
 80133b4:	bf48      	it	mi
 80133b6:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
 80133ba:	4770      	bx	lr

080133bc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80133bc:	f3bf 8f5b 	dmb	ish
 80133c0:	6800      	ldr	r0, [r0, #0]
 80133c2:	f3bf 8f5b 	dmb	ish
}
 80133c6:	4770      	bx	lr

080133c8 <atomic_and>:
{
 80133c8:	4603      	mov	r3, r0
}
 80133ca:	f3bf 8f5b 	dmb	ish
 80133ce:	e853 0f00 	ldrex	r0, [r3]
 80133d2:	ea00 0201 	and.w	r2, r0, r1
 80133d6:	e843 2c00 	strex	ip, r2, [r3]
 80133da:	f1bc 0f00 	cmp.w	ip, #0
 80133de:	d1f6      	bne.n	80133ce <atomic_and+0x6>
 80133e0:	f3bf 8f5b 	dmb	ish
 80133e4:	4770      	bx	lr

080133e6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 80133e6:	2301      	movs	r3, #1
{
 80133e8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
 80133ea:	fa03 f101 	lsl.w	r1, r3, r1
{
 80133ee:	4604      	mov	r4, r0
	if (val) {
 80133f0:	b162      	cbz	r2, 801340c <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80133f2:	f3bf 8f5b 	dmb	ish
 80133f6:	e854 3f00 	ldrex	r3, [r4]
 80133fa:	430b      	orrs	r3, r1
 80133fc:	e844 3200 	strex	r2, r3, [r4]
 8013400:	2a00      	cmp	r2, #0
 8013402:	d1f8      	bne.n	80133f6 <atomic_set_bit_to+0x10>
 8013404:	f3bf 8f5b 	dmb	ish
	}
}
 8013408:	bc10      	pop	{r4}
 801340a:	4770      	bx	lr
 801340c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 801340e:	43c9      	mvns	r1, r1
 8013410:	f7ff bfda 	b.w	80133c8 <atomic_and>

08013414 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
 8013414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013418:	b087      	sub	sp, #28
 801341a:	4605      	mov	r5, r0
 801341c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8013420:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8013424:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 8013428:	460c      	mov	r4, r1
 801342a:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
 801342c:	2100      	movs	r1, #0
 801342e:	2210      	movs	r2, #16
 8013430:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
 8013432:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
 8013434:	f7ff fd35 	bl	8012ea2 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
 8013438:	b186      	cbz	r6, 801345c <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
 801343a:	f7f2 fc77 	bl	8005d2c <bt_get_name>
 801343e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
 8013440:	2c00      	cmp	r4, #0
 8013442:	d139      	bne.n	80134b8 <le_adv_update.constprop.0+0xa4>
 8013444:	2f00      	cmp	r7, #0
 8013446:	d142      	bne.n	80134ce <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
 8013448:	4658      	mov	r0, fp
 801344a:	f7ff fcf3 	bl	8012e34 <strlen>
 801344e:	2309      	movs	r3, #9
 8013450:	f88d 3000 	strb.w	r3, [sp]
 8013454:	f88d 0001 	strb.w	r0, [sp, #1]
 8013458:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
 801345c:	2e01      	cmp	r6, #1
			d_len = 2;
 801345e:	bf0c      	ite	eq
 8013460:	2202      	moveq	r2, #2
		d_len = 1;
 8013462:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 8013464:	a902      	add	r1, sp, #8
 8013466:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
 801346a:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
 801346e:	bf04      	itt	eq
 8013470:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
 8013474:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 8013476:	f7f3 f81f 	bl	80064b8 <hci_set_ad>
		if (err) {
 801347a:	4604      	mov	r4, r0
 801347c:	b978      	cbnz	r0, 801349e <le_adv_update.constprop.0+0x8a>
	if (scannable) {
 801347e:	f1ba 0f00 	cmp.w	sl, #0
 8013482:	d126      	bne.n	80134d2 <le_adv_update.constprop.0+0xbe>
 8013484:	3510      	adds	r5, #16
 8013486:	f3bf 8f5b 	dmb	ish
 801348a:	e855 3f00 	ldrex	r3, [r5]
 801348e:	f043 0304 	orr.w	r3, r3, #4
 8013492:	e845 3200 	strex	r2, r3, [r5]
 8013496:	2a00      	cmp	r2, #0
 8013498:	d1f7      	bne.n	801348a <le_adv_update.constprop.0+0x76>
 801349a:	f3bf 8f5b 	dmb	ish
}
 801349e:	4620      	mov	r0, r4
 80134a0:	b007      	add	sp, #28
 80134a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 80134a6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
 80134aa:	3a08      	subs	r2, #8
 80134ac:	2a01      	cmp	r2, #1
 80134ae:	d925      	bls.n	80134fc <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
 80134b0:	3301      	adds	r3, #1
 80134b2:	4598      	cmp	r8, r3
 80134b4:	d1f7      	bne.n	80134a6 <le_adv_update.constprop.0+0x92>
 80134b6:	e7c5      	b.n	8013444 <le_adv_update.constprop.0+0x30>
 80134b8:	2300      	movs	r3, #0
 80134ba:	e7fa      	b.n	80134b2 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
 80134bc:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
 80134c0:	3a08      	subs	r2, #8
 80134c2:	2a01      	cmp	r2, #1
 80134c4:	d91a      	bls.n	80134fc <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
 80134c6:	3301      	adds	r3, #1
 80134c8:	4599      	cmp	r9, r3
 80134ca:	d1f7      	bne.n	80134bc <le_adv_update.constprop.0+0xa8>
 80134cc:	e7bc      	b.n	8013448 <le_adv_update.constprop.0+0x34>
 80134ce:	2300      	movs	r3, #0
 80134d0:	e7fa      	b.n	80134c8 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
 80134d2:	2e02      	cmp	r6, #2
 80134d4:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
 80134d8:	bf08      	it	eq
 80134da:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 80134dc:	a902      	add	r1, sp, #8
			d_len = 2;
 80134de:	bf08      	it	eq
 80134e0:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 80134e2:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
 80134e6:	bf08      	it	eq
 80134e8:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
 80134ec:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 80134f0:	f7f2 ffe2 	bl	80064b8 <hci_set_ad>
		if (err) {
 80134f4:	2800      	cmp	r0, #0
 80134f6:	d0c5      	beq.n	8013484 <le_adv_update.constprop.0+0x70>
 80134f8:	4604      	mov	r4, r0
 80134fa:	e7d0      	b.n	801349e <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
 80134fc:	f06f 0415 	mvn.w	r4, #21
 8013500:	e7cd      	b.n	801349e <le_adv_update.constprop.0+0x8a>

08013502 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
 8013502:	6843      	ldr	r3, [r0, #4]
 8013504:	f013 0008 	ands.w	r0, r3, #8
 8013508:	d00a      	beq.n	8013520 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
 801350a:	035a      	lsls	r2, r3, #13
 801350c:	d407      	bmi.n	801351e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
 801350e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
 8013516:	bf0c      	ite	eq
 8013518:	2001      	moveq	r0, #1
 801351a:	2002      	movne	r0, #2
 801351c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
 801351e:	2001      	movs	r0, #1
}
 8013520:	4770      	bx	lr

08013522 <bt_le_adv_set_enable_legacy>:
{
 8013522:	b570      	push	{r4, r5, r6, lr}
 8013524:	4606      	mov	r6, r0
 8013526:	b086      	sub	sp, #24
 8013528:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 801352a:	f242 000a 	movw	r0, #8202	; 0x200a
 801352e:	2101      	movs	r1, #1
 8013530:	f7f1 fe76 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 8013534:	4604      	mov	r4, r0
 8013536:	b1b0      	cbz	r0, 8013566 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
 8013538:	3008      	adds	r0, #8
 801353a:	b195      	cbz	r5, 8013562 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
 801353c:	2101      	movs	r1, #1
 801353e:	f001 fcb0 	bl	8014ea2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
 8013542:	f106 0210 	add.w	r2, r6, #16
 8013546:	a903      	add	r1, sp, #12
 8013548:	4620      	mov	r0, r4
 801354a:	9500      	str	r5, [sp, #0]
 801354c:	2306      	movs	r3, #6
 801354e:	f7f1 fe55 	bl	80051fc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
 8013552:	2200      	movs	r2, #0
 8013554:	4621      	mov	r1, r4
 8013556:	f242 000a 	movw	r0, #8202	; 0x200a
 801355a:	f7f1 fea9 	bl	80052b0 <bt_hci_cmd_send_sync>
}
 801355e:	b006      	add	sp, #24
 8013560:	bd70      	pop	{r4, r5, r6, pc}
 8013562:	4629      	mov	r1, r5
 8013564:	e7eb      	b.n	801353e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
 8013566:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801356a:	e7f8      	b.n	801355e <bt_le_adv_set_enable_legacy+0x3c>

0801356c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
 801356c:	f7ff bfd9 	b.w	8013522 <bt_le_adv_set_enable_legacy>

08013570 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
 8013570:	3018      	adds	r0, #24
 8013572:	f7fc b96d 	b.w	800f850 <k_work_cancel_delayable>

08013576 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
 8013576:	b530      	push	{r4, r5, lr}
 8013578:	b0b1      	sub	sp, #196	; 0xc4
 801357a:	460d      	mov	r5, r1
	uint8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
 801357c:	4601      	mov	r1, r0
 801357e:	4668      	mov	r0, sp
{
 8013580:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
 8013582:	f7f3 fa27 	bl	80069d4 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
 8013586:	4669      	mov	r1, sp
 8013588:	a804      	add	r0, sp, #16
 801358a:	f7f0 f8d5 	bl	8003738 <tc_aes128_set_encrypt_key>
 801358e:	b1c0      	cbz	r0, 80135c2 <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
 8013590:	4629      	mov	r1, r5
 8013592:	4668      	mov	r0, sp
 8013594:	f7f3 fa1e 	bl	80069d4 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
 8013598:	aa04      	add	r2, sp, #16
 801359a:	4669      	mov	r1, sp
 801359c:	4620      	mov	r0, r4
 801359e:	f7f0 f91d 	bl	80037dc <tc_aes_encrypt>
 80135a2:	b170      	cbz	r0, 80135c2 <bt_encrypt_le+0x4c>
 80135a4:	1e63      	subs	r3, r4, #1
 80135a6:	f104 0210 	add.w	r2, r4, #16
 80135aa:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
 80135ac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 80135b0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80135b4:	7018      	strb	r0, [r3, #0]
	for (i = 0; i < (length/2); i++) {
 80135b6:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[length - 1 - i] = tmp;
 80135b8:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
 80135ba:	d1f7      	bne.n	80135ac <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
 80135bc:	2000      	movs	r0, #0
}
 80135be:	b031      	add	sp, #196	; 0xc4
 80135c0:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
 80135c2:	f06f 0015 	mvn.w	r0, #21
 80135c6:	e7fa      	b.n	80135be <bt_encrypt_le+0x48>

080135c8 <z_log_msg2_static_create.constprop.0>:
 80135c8:	2300      	movs	r3, #0
 80135ca:	f7ef bcc7 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

080135ce <tx_notify>:
{
 80135ce:	b570      	push	{r4, r5, r6, lr}
 80135d0:	4604      	mov	r4, r0
	__asm__ volatile(
 80135d2:	f04f 0210 	mov.w	r2, #16
 80135d6:	f3ef 8311 	mrs	r3, BASEPRI
 80135da:	f382 8812 	msr	BASEPRI_MAX, r2
 80135de:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
 80135e2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
 80135e4:	b920      	cbnz	r0, 80135f0 <tx_notify+0x22>
	__asm__ volatile(
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
}
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80135f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80135f2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 80135f4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80135f6:	4288      	cmp	r0, r1
	list->tail = node;
 80135f8:	bf08      	it	eq
 80135fa:	6262      	streq	r2, [r4, #36]	; 0x24
 80135fc:	f383 8811 	msr	BASEPRI, r3
 8013600:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
 8013604:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
 8013608:	f7f3 fbfa 	bl	8006e00 <tx_free>
		cb(conn, user_data);
 801360c:	4631      	mov	r1, r6
 801360e:	4620      	mov	r0, r4
 8013610:	47a8      	blx	r5
	while (1) {
 8013612:	e7de      	b.n	80135d2 <tx_notify+0x4>

08013614 <tx_complete_work>:
	tx_notify(conn);
 8013614:	3828      	subs	r0, #40	; 0x28
 8013616:	f7ff bfda 	b.w	80135ce <tx_notify>

0801361a <bt_conn_reset_rx_state>:
{
 801361a:	b510      	push	{r4, lr}
 801361c:	4604      	mov	r4, r0
	if (!conn->rx) {
 801361e:	6900      	ldr	r0, [r0, #16]
 8013620:	b118      	cbz	r0, 801362a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
 8013622:	f7f8 fc7b 	bl	800bf1c <net_buf_unref>
	conn->rx = NULL;
 8013626:	2300      	movs	r3, #0
 8013628:	6123      	str	r3, [r4, #16]
}
 801362a:	bd10      	pop	{r4, pc}

0801362c <bt_conn_ref>:
{
 801362c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
 801362e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8013632:	f3bf 8f5b 	dmb	ish
 8013636:	6813      	ldr	r3, [r2, #0]
 8013638:	f3bf 8f5b 	dmb	ish
		if (!old) {
 801363c:	b17b      	cbz	r3, 801365e <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 801363e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
 8013642:	1c59      	adds	r1, r3, #1
 8013644:	e852 4f00 	ldrex	r4, [r2]
 8013648:	429c      	cmp	r4, r3
 801364a:	d104      	bne.n	8013656 <bt_conn_ref+0x2a>
 801364c:	e842 1c00 	strex	ip, r1, [r2]
 8013650:	f1bc 0f00 	cmp.w	ip, #0
 8013654:	d1f6      	bne.n	8013644 <bt_conn_ref+0x18>
 8013656:	f3bf 8f5b 	dmb	ish
 801365a:	d1ea      	bne.n	8013632 <bt_conn_ref+0x6>
}
 801365c:	bd10      	pop	{r4, pc}
			return NULL;
 801365e:	4618      	mov	r0, r3
 8013660:	e7fc      	b.n	801365c <bt_conn_ref+0x30>

08013662 <conn_lookup_handle>:
{
 8013662:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013666:	4607      	mov	r7, r0
 8013668:	460e      	mov	r6, r1
 801366a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
 801366c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
 801366e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
 8013672:	42b4      	cmp	r4, r6
 8013674:	d103      	bne.n	801367e <conn_lookup_handle+0x1c>
	return NULL;
 8013676:	2300      	movs	r3, #0
}
 8013678:	4618      	mov	r0, r3
 801367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
 801367e:	fb09 7004 	mla	r0, r9, r4, r7
 8013682:	f7ff ffd3 	bl	801362c <bt_conn_ref>
 8013686:	4603      	mov	r3, r0
		if (!conn) {
 8013688:	b158      	cbz	r0, 80136a2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
 801368a:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
 801368c:	2d01      	cmp	r5, #1
 801368e:	d002      	beq.n	8013696 <conn_lookup_handle+0x34>
 8013690:	3d07      	subs	r5, #7
 8013692:	2d01      	cmp	r5, #1
 8013694:	d803      	bhi.n	801369e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
 8013696:	881a      	ldrh	r2, [r3, #0]
 8013698:	4542      	cmp	r2, r8
 801369a:	d0ed      	beq.n	8013678 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
 801369c:	4618      	mov	r0, r3
 801369e:	f7f3 fe71 	bl	8007384 <bt_conn_unref>
	for (i = 0; i < size; i++) {
 80136a2:	3401      	adds	r4, #1
 80136a4:	e7e5      	b.n	8013672 <conn_lookup_handle+0x10>

080136a6 <bt_conn_connected>:
{
 80136a6:	b510      	push	{r4, lr}
 80136a8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
 80136aa:	f7f4 fbbb 	bl	8007e24 <bt_l2cap_connected>
	notify_connected(conn);
 80136ae:	4620      	mov	r0, r4
}
 80136b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
 80136b4:	f7f3 bbae 	b.w	8006e14 <notify_connected>

080136b8 <bt_conn_disconnect>:
{
 80136b8:	b538      	push	{r3, r4, r5, lr}
 80136ba:	7b43      	ldrb	r3, [r0, #13]
 80136bc:	3b02      	subs	r3, #2
 80136be:	4604      	mov	r4, r0
 80136c0:	2b06      	cmp	r3, #6
 80136c2:	d805      	bhi.n	80136d0 <bt_conn_disconnect+0x18>
 80136c4:	e8df f003 	tbb	[pc, r3]
 80136c8:	04040408 	.word	0x04040408
 80136cc:	0e0c      	.short	0x0e0c
 80136ce:	0c          	.byte	0x0c
 80136cf:	00          	.byte	0x00
	switch (conn->state) {
 80136d0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
 80136d4:	4628      	mov	r0, r5
 80136d6:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
 80136d8:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 80136da:	2100      	movs	r1, #0
 80136dc:	f7f3 fe96 	bl	800740c <bt_conn_set_state>
		return 0;
 80136e0:	2500      	movs	r5, #0
 80136e2:	e7f7      	b.n	80136d4 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
 80136e4:	8800      	ldrh	r0, [r0, #0]
 80136e6:	f7ff fcca 	bl	801307e <bt_hci_disconnect>
	if (err) {
 80136ea:	4605      	mov	r5, r0
 80136ec:	2800      	cmp	r0, #0
 80136ee:	d1f1      	bne.n	80136d4 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
 80136f0:	7b63      	ldrb	r3, [r4, #13]
 80136f2:	2b07      	cmp	r3, #7
 80136f4:	d1ee      	bne.n	80136d4 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
 80136f6:	2108      	movs	r1, #8
 80136f8:	4620      	mov	r0, r4
 80136fa:	f7f3 fe87 	bl	800740c <bt_conn_set_state>
 80136fe:	e7e9      	b.n	80136d4 <bt_conn_disconnect+0x1c>

08013700 <bt_conn_set_security>:
{
 8013700:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
 8013702:	7b43      	ldrb	r3, [r0, #13]
 8013704:	2b07      	cmp	r3, #7
{
 8013706:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
 8013708:	d128      	bne.n	801375c <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
 801370a:	7a43      	ldrb	r3, [r0, #9]
 801370c:	428b      	cmp	r3, r1
 801370e:	d228      	bcs.n	8013762 <bt_conn_set_security+0x62>
 8013710:	7a83      	ldrb	r3, [r0, #10]
 8013712:	428b      	cmp	r3, r1
 8013714:	d225      	bcs.n	8013762 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8013716:	f3bf 8f5b 	dmb	ish
	if (val) {
 801371a:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
 801371c:	f100 0304 	add.w	r3, r0, #4
 8013720:	d513      	bpl.n	801374a <bt_conn_set_security+0x4a>
 8013722:	e853 2f00 	ldrex	r2, [r3]
 8013726:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801372a:	e843 2000 	strex	r0, r2, [r3]
 801372e:	2800      	cmp	r0, #0
 8013730:	d1f7      	bne.n	8013722 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8013732:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
 8013736:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801373a:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
 801373c:	4620      	mov	r0, r4
 801373e:	f7f7 fc0f 	bl	800af60 <bt_smp_start_security>
	if (err) {
 8013742:	b108      	cbz	r0, 8013748 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
 8013744:	7a63      	ldrb	r3, [r4, #9]
 8013746:	72a3      	strb	r3, [r4, #10]
}
 8013748:	bd10      	pop	{r4, pc}
 801374a:	e853 2f00 	ldrex	r2, [r3]
 801374e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013752:	e843 2000 	strex	r0, r2, [r3]
 8013756:	2800      	cmp	r0, #0
 8013758:	d0eb      	beq.n	8013732 <bt_conn_set_security+0x32>
 801375a:	e7f6      	b.n	801374a <bt_conn_set_security+0x4a>
		return -ENOTCONN;
 801375c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8013760:	e7f2      	b.n	8013748 <bt_conn_set_security+0x48>
		return 0;
 8013762:	2000      	movs	r0, #0
 8013764:	e7f0      	b.n	8013748 <bt_conn_set_security+0x48>

08013766 <bt_conn_get_security>:
}
 8013766:	7a40      	ldrb	r0, [r0, #9]
 8013768:	4770      	bx	lr

0801376a <bt_conn_is_peer_addr_le>:
{
 801376a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
 801376c:	7a03      	ldrb	r3, [r0, #8]
 801376e:	428b      	cmp	r3, r1
{
 8013770:	4604      	mov	r4, r0
 8013772:	4615      	mov	r5, r2
	if (id != conn->id) {
 8013774:	d115      	bne.n	80137a2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
 8013776:	f100 0190 	add.w	r1, r0, #144	; 0x90
 801377a:	2207      	movs	r2, #7
 801377c:	4628      	mov	r0, r5
 801377e:	f7ff fb75 	bl	8012e6c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
 8013782:	b180      	cbz	r0, 80137a6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
 8013784:	78e3      	ldrb	r3, [r4, #3]
 8013786:	2207      	movs	r2, #7
 8013788:	b943      	cbnz	r3, 801379c <bt_conn_is_peer_addr_le+0x32>
 801378a:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 801378e:	4628      	mov	r0, r5
 8013790:	f7ff fb6c 	bl	8012e6c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
 8013794:	fab0 f080 	clz	r0, r0
 8013798:	0940      	lsrs	r0, r0, #5
}
 801379a:	bd38      	pop	{r3, r4, r5, pc}
 801379c:	f104 0197 	add.w	r1, r4, #151	; 0x97
 80137a0:	e7f5      	b.n	801378e <bt_conn_is_peer_addr_le+0x24>
		return false;
 80137a2:	2000      	movs	r0, #0
 80137a4:	e7f9      	b.n	801379a <bt_conn_is_peer_addr_le+0x30>
		return true;
 80137a6:	2001      	movs	r0, #1
 80137a8:	e7f7      	b.n	801379a <bt_conn_is_peer_addr_le+0x30>

080137aa <bt_conn_get_dst>:
}
 80137aa:	3090      	adds	r0, #144	; 0x90
 80137ac:	4770      	bx	lr

080137ae <bt_conn_le_conn_update>:
{
 80137ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b0:	4607      	mov	r7, r0
 80137b2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
 80137b4:	f242 0013 	movw	r0, #8211	; 0x2013
 80137b8:	210e      	movs	r1, #14
 80137ba:	f7f1 fd31 	bl	8005220 <bt_hci_cmd_create>
	if (!buf) {
 80137be:	4606      	mov	r6, r0
 80137c0:	b1d0      	cbz	r0, 80137f8 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
 80137c2:	210e      	movs	r1, #14
 80137c4:	3008      	adds	r0, #8
 80137c6:	f7f8 fcd9 	bl	800c17c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
 80137ca:	220e      	movs	r2, #14
 80137cc:	4604      	mov	r4, r0
 80137ce:	2100      	movs	r1, #0
 80137d0:	f7ff fb67 	bl	8012ea2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
 80137d4:	883b      	ldrh	r3, [r7, #0]
 80137d6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
 80137d8:	882b      	ldrh	r3, [r5, #0]
 80137da:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
 80137dc:	886b      	ldrh	r3, [r5, #2]
 80137de:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
 80137e0:	88ab      	ldrh	r3, [r5, #4]
 80137e2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
 80137e4:	88eb      	ldrh	r3, [r5, #6]
 80137e6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
 80137e8:	4631      	mov	r1, r6
 80137ea:	2200      	movs	r2, #0
}
 80137ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
 80137f0:	f242 0013 	movw	r0, #8211	; 0x2013
 80137f4:	f7f1 bd5c 	b.w	80052b0 <bt_hci_cmd_send_sync>
}
 80137f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80137fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080137fe <l2cap_connected>:
}
 80137fe:	4770      	bx	lr

08013800 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
 8013800:	3010      	adds	r0, #16
 8013802:	f7fc b825 	b.w	800f850 <k_work_cancel_delayable>

08013806 <z_log_msg2_static_create.constprop.0>:
 8013806:	2300      	movs	r3, #0
 8013808:	f7ef bba8 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

0801380c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380e:	4605      	mov	r5, r0
 8013810:	460f      	mov	r7, r1
 8013812:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
 8013814:	2300      	movs	r3, #0
 8013816:	f644 6220 	movw	r2, #20000	; 0x4e20
 801381a:	2104      	movs	r1, #4
 801381c:	2000      	movs	r0, #0
 801381e:	f7f3 ff11 	bl	8007644 <bt_conn_create_pdu_timeout>
	if (!buf) {
 8013822:	4604      	mov	r4, r0
 8013824:	b920      	cbnz	r0, 8013830 <l2cap_create_le_sig_pdu.isra.0+0x24>
 8013826:	4628      	mov	r0, r5
}
 8013828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801382c:	f7f4 baa4 	b.w	8007d78 <l2cap_create_le_sig_pdu.isra.0.part.0>
 8013830:	2104      	movs	r1, #4
 8013832:	3008      	adds	r0, #8
 8013834:	f7f8 fca2 	bl	800c17c <net_buf_simple_add>
	hdr->code = code;
 8013838:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
 801383a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 801383c:	8046      	strh	r6, [r0, #2]
}
 801383e:	4620      	mov	r0, r4
 8013840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013842 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8013842:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8013844:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8013846:	b173      	cbz	r3, 8013866 <bt_l2cap_chan_remove+0x24>
 8013848:	3b08      	subs	r3, #8
 801384a:	2500      	movs	r5, #0
		if (chan == ch) {
 801384c:	461a      	mov	r2, r3
 801384e:	4299      	cmp	r1, r3
 8013850:	f852 4f08 	ldr.w	r4, [r2, #8]!
 8013854:	d10e      	bne.n	8013874 <bt_l2cap_chan_remove+0x32>
Z_GENLIST_REMOVE(slist, snode)
 8013856:	b93d      	cbnz	r5, 8013868 <bt_l2cap_chan_remove+0x26>
 8013858:	6d81      	ldr	r1, [r0, #88]	; 0x58
	list->head = node;
 801385a:	6544      	str	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
 801385c:	428a      	cmp	r2, r1
 801385e:	d100      	bne.n	8013862 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
 8013860:	6584      	str	r4, [r0, #88]	; 0x58
	parent->next = child;
 8013862:	2200      	movs	r2, #0
 8013864:	609a      	str	r2, [r3, #8]
}
 8013866:	bd30      	pop	{r4, r5, pc}
 8013868:	602c      	str	r4, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
 801386a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801386c:	428a      	cmp	r2, r1
	list->tail = node;
 801386e:	bf08      	it	eq
 8013870:	6585      	streq	r5, [r0, #88]	; 0x58
}
 8013872:	e7f6      	b.n	8013862 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8013874:	2c00      	cmp	r4, #0
 8013876:	d0f6      	beq.n	8013866 <bt_l2cap_chan_remove+0x24>
 8013878:	f1a4 0308 	sub.w	r3, r4, #8
 801387c:	4615      	mov	r5, r2
 801387e:	e7e5      	b.n	801384c <bt_l2cap_chan_remove+0xa>

08013880 <bt_l2cap_chan_del>:
{
 8013880:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
 8013882:	e9d0 3500 	ldrd	r3, r5, [r0]
{
 8013886:	4604      	mov	r4, r0
	if (!chan->conn) {
 8013888:	b123      	cbz	r3, 8013894 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
 801388a:	686b      	ldr	r3, [r5, #4]
 801388c:	b103      	cbz	r3, 8013890 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
 801388e:	4798      	blx	r3
	chan->conn = NULL;
 8013890:	2300      	movs	r3, #0
 8013892:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
 8013894:	68e3      	ldr	r3, [r4, #12]
 8013896:	b10b      	cbz	r3, 801389c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
 8013898:	4620      	mov	r0, r4
 801389a:	4798      	blx	r3
	if (ops->released) {
 801389c:	69eb      	ldr	r3, [r5, #28]
 801389e:	b11b      	cbz	r3, 80138a8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
 80138a0:	4620      	mov	r0, r4
}
 80138a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
 80138a6:	4718      	bx	r3
}
 80138a8:	bd70      	pop	{r4, r5, r6, pc}

080138aa <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
 80138ac:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138ae:	b160      	cbz	r0, 80138ca <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80138b0:	f850 4908 	ldr.w	r4, [r0], #-8
 80138b4:	b104      	cbz	r4, 80138b8 <bt_l2cap_disconnected+0xe>
 80138b6:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
 80138b8:	f7ff ffe2 	bl	8013880 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138bc:	b12c      	cbz	r4, 80138ca <bt_l2cap_disconnected+0x20>
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	b103      	cbz	r3, 80138c4 <bt_l2cap_disconnected+0x1a>
 80138c2:	3b08      	subs	r3, #8
{
 80138c4:	4620      	mov	r0, r4
 80138c6:	461c      	mov	r4, r3
 80138c8:	e7f6      	b.n	80138b8 <bt_l2cap_disconnected+0xe>
}
 80138ca:	bd10      	pop	{r4, pc}

080138cc <bt_l2cap_security_changed>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138cc:	6d40      	ldr	r0, [r0, #84]	; 0x54
{
 80138ce:	b538      	push	{r3, r4, r5, lr}
 80138d0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138d2:	b178      	cbz	r0, 80138f4 <bt_l2cap_security_changed+0x28>
 80138d4:	f850 4908 	ldr.w	r4, [r0], #-8
 80138d8:	b104      	cbz	r4, 80138dc <bt_l2cap_security_changed+0x10>
 80138da:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
 80138dc:	6843      	ldr	r3, [r0, #4]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	b10b      	cbz	r3, 80138e6 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
 80138e2:	4629      	mov	r1, r5
 80138e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 80138e6:	b12c      	cbz	r4, 80138f4 <bt_l2cap_security_changed+0x28>
 80138e8:	68a3      	ldr	r3, [r4, #8]
 80138ea:	b103      	cbz	r3, 80138ee <bt_l2cap_security_changed+0x22>
 80138ec:	3b08      	subs	r3, #8
{
 80138ee:	4620      	mov	r0, r4
 80138f0:	461c      	mov	r4, r3
 80138f2:	e7f3      	b.n	80138dc <bt_l2cap_security_changed+0x10>
}
 80138f4:	bd38      	pop	{r3, r4, r5, pc}

080138f6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
 80138f6:	3104      	adds	r1, #4
 80138f8:	f7f3 bea4 	b.w	8007644 <bt_conn_create_pdu_timeout>

080138fc <bt_l2cap_send_cb>:
{
 80138fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013900:	4614      	mov	r4, r2
 8013902:	4605      	mov	r5, r0
 8013904:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
 8013906:	f102 0008 	add.w	r0, r2, #8
 801390a:	2104      	movs	r1, #4
 801390c:	461e      	mov	r6, r3
 801390e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013912:	f7f8 fbcf 	bl	800c0b4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8013916:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
 8013918:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 801391a:	3a04      	subs	r2, #4
 801391c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
 801391e:	4643      	mov	r3, r8
 8013920:	4632      	mov	r2, r6
 8013922:	4621      	mov	r1, r4
 8013924:	4628      	mov	r0, r5
}
 8013926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
 801392a:	f7f3 bc89 	b.w	8007240 <bt_conn_send_cb>

0801392e <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801392e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8013930:	b138      	cbz	r0, 8013942 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 8013932:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
 8013936:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8013938:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 801393c:	d001      	beq.n	8013942 <bt_l2cap_le_lookup_tx_cid+0x14>
 801393e:	6880      	ldr	r0, [r0, #8]
	return node->next;
 8013940:	e7f6      	b.n	8013930 <bt_l2cap_le_lookup_tx_cid+0x2>
}
 8013942:	4770      	bx	lr

08013944 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8013944:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8013946:	b138      	cbz	r0, 8013958 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 8013948:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 801394c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 801394e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 8013952:	d001      	beq.n	8013958 <bt_l2cap_le_lookup_rx_cid+0x14>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8013954:	6880      	ldr	r0, [r0, #8]
	return node->next;
 8013956:	e7f6      	b.n	8013946 <bt_l2cap_le_lookup_rx_cid+0x2>
}
 8013958:	4770      	bx	lr

0801395a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
 801395a:	4770      	bx	lr

0801395c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
 801395c:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
 801395e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
 8013960:	b128      	cbz	r0, 801396e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8013962:	6859      	ldr	r1, [r3, #4]
 8013964:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8013966:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8013968:	4288      	cmp	r0, r1
	list->tail = node;
 801396a:	bf08      	it	eq
 801396c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
 801396e:	4770      	bx	lr

08013970 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013970:	4603      	mov	r3, r0
 8013972:	6800      	ldr	r0, [r0, #0]
 8013974:	2200      	movs	r2, #0
 8013976:	b900      	cbnz	r0, 801397a <sys_slist_find_and_remove+0xa>
 8013978:	4770      	bx	lr
 801397a:	4288      	cmp	r0, r1
 801397c:	d110      	bne.n	80139a0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
 801397e:	6808      	ldr	r0, [r1, #0]
 8013980:	b942      	cbnz	r2, 8013994 <sys_slist_find_and_remove+0x24>
 8013982:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 8013984:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8013986:	4291      	cmp	r1, r2
 8013988:	d100      	bne.n	801398c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
 801398a:	6058      	str	r0, [r3, #4]
	parent->next = child;
 801398c:	2300      	movs	r3, #0
 801398e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013990:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
 8013992:	4770      	bx	lr
	parent->next = child;
 8013994:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8013996:	6858      	ldr	r0, [r3, #4]
 8013998:	4281      	cmp	r1, r0
	list->tail = node;
 801399a:	bf08      	it	eq
 801399c:	605a      	streq	r2, [r3, #4]
}
 801399e:	e7f5      	b.n	801398c <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80139a0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80139a2:	6800      	ldr	r0, [r0, #0]
 80139a4:	e7e7      	b.n	8013976 <sys_slist_find_and_remove+0x6>

080139a6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
 80139a6:	4603      	mov	r3, r0
	size_t bytes = 0;
 80139a8:	2000      	movs	r0, #0

	while (buf) {
 80139aa:	b903      	cbnz	r3, 80139ae <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
 80139ac:	4770      	bx	lr
		bytes += buf->len;
 80139ae:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 80139b0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 80139b2:	4410      	add	r0, r2
		buf = buf->frags;
 80139b4:	e7f9      	b.n	80139aa <net_buf_frags_len+0x4>

080139b6 <att_sent>:
	if (chan->ops->sent) {
 80139b6:	684b      	ldr	r3, [r1, #4]
 80139b8:	695b      	ldr	r3, [r3, #20]
{
 80139ba:	4608      	mov	r0, r1
	if (chan->ops->sent) {
 80139bc:	b103      	cbz	r3, 80139c0 <att_sent+0xa>
		chan->ops->sent(chan);
 80139be:	4718      	bx	r3
}
 80139c0:	4770      	bx	lr

080139c2 <attr_read_type_cb>:
{
 80139c2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
 80139c4:	68d4      	ldr	r4, [r2, #12]
 80139c6:	7823      	ldrb	r3, [r4, #0]
 80139c8:	3102      	adds	r1, #2
 80139ca:	b913      	cbnz	r3, 80139d2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
 80139cc:	7021      	strb	r1, [r4, #0]
	return true;
 80139ce:	2001      	movs	r0, #1
 80139d0:	e006      	b.n	80139e0 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
 80139d2:	428b      	cmp	r3, r1
 80139d4:	d0fb      	beq.n	80139ce <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
 80139d6:	8983      	ldrh	r3, [r0, #12]
 80139d8:	3b02      	subs	r3, #2
 80139da:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
 80139dc:	2000      	movs	r0, #0
 80139de:	6110      	str	r0, [r2, #16]
}
 80139e0:	bd10      	pop	{r4, pc}

080139e2 <att_prepare_write_req>:
}
 80139e2:	2006      	movs	r0, #6
 80139e4:	4770      	bx	lr

080139e6 <att_op_get_type>:
	switch (op) {
 80139e6:	2852      	cmp	r0, #82	; 0x52
 80139e8:	d830      	bhi.n	8013a4c <att_op_get_type+0x66>
 80139ea:	b388      	cbz	r0, 8013a50 <att_op_get_type+0x6a>
 80139ec:	1e43      	subs	r3, r0, #1
 80139ee:	2b51      	cmp	r3, #81	; 0x51
 80139f0:	d82e      	bhi.n	8013a50 <att_op_get_type+0x6a>
 80139f2:	e8df f003 	tbb	[pc, r3]
 80139f6:	3933      	.short	0x3933
 80139f8:	39333933 	.word	0x39333933
 80139fc:	39333933 	.word	0x39333933
 8013a00:	39333933 	.word	0x39333933
 8013a04:	39333933 	.word	0x39333933
 8013a08:	392d2d33 	.word	0x392d2d33
 8013a0c:	2d333933 	.word	0x2d333933
 8013a10:	29372d35 	.word	0x29372d35
 8013a14:	2d33392d 	.word	0x2d33392d
 8013a18:	2d2d2d35 	.word	0x2d2d2d35
 8013a1c:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a20:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a24:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a28:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a2c:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a30:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a34:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a38:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a3c:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a40:	2d2d2d2d 	.word	0x2d2d2d2d
 8013a44:	3b2d2d2d 	.word	0x3b2d2d2d
 8013a48:	2004      	movs	r0, #4
 8013a4a:	4770      	bx	lr
 8013a4c:	28d2      	cmp	r0, #210	; 0xd2
 8013a4e:	d00d      	beq.n	8013a6c <att_op_get_type+0x86>
		return ATT_COMMAND;
 8013a50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a54:	bf0c      	ite	eq
 8013a56:	2006      	moveq	r0, #6
 8013a58:	2000      	movne	r0, #0
 8013a5a:	4770      	bx	lr
		return ATT_RESPONSE;
 8013a5c:	2002      	movs	r0, #2
 8013a5e:	4770      	bx	lr
		return ATT_NOTIFICATION;
 8013a60:	2003      	movs	r0, #3
 8013a62:	4770      	bx	lr
		return ATT_INDICATION;
 8013a64:	2005      	movs	r0, #5
 8013a66:	4770      	bx	lr
		return ATT_REQUEST;
 8013a68:	2001      	movs	r0, #1
 8013a6a:	4770      	bx	lr
		return ATT_COMMAND;
 8013a6c:	2000      	movs	r0, #0
}
 8013a6e:	4770      	bx	lr

08013a70 <bt_gatt_foreach_attr>:
{
 8013a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
 8013a72:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8013a76:	2300      	movs	r3, #0
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	f7f5 fe2a 	bl	80096d4 <bt_gatt_foreach_attr_type>
}
 8013a80:	b005      	add	sp, #20
 8013a82:	f85d fb04 	ldr.w	pc, [sp], #4

08013a86 <att_chan_read>:
{
 8013a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8a:	4680      	mov	r8, r0
 8013a8c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
 8013a8e:	4610      	mov	r0, r2
{
 8013a90:	4699      	mov	r9, r3
 8013a92:	468b      	mov	fp, r1
 8013a94:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
 8013a96:	f7ff ff86 	bl	80139a6 <net_buf_frags_len>
 8013a9a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
 8013a9e:	4283      	cmp	r3, r0
 8013aa0:	d97a      	bls.n	8013b98 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
 8013aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013aa6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f7f8 fa97 	bl	800bfdc <net_buf_frag_last>
	size_t len, total = 0;
 8013aae:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
 8013ab2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	f7ff ff76 	bl	80139a6 <net_buf_frags_len>
 8013aba:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
 8013abe:	f105 0708 	add.w	r7, r5, #8
 8013ac2:	1a24      	subs	r4, r4, r0
 8013ac4:	4638      	mov	r0, r7
 8013ac6:	f001 f9d8 	bl	8014e7a <net_buf_simple_tailroom>
 8013aca:	4284      	cmp	r4, r0
 8013acc:	d211      	bcs.n	8013af2 <att_chan_read+0x6c>
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f7ff ff69 	bl	80139a6 <net_buf_frags_len>
 8013ad4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
 8013ad8:	1a24      	subs	r4, r4, r0
		if (!len) {
 8013ada:	bb34      	cbnz	r4, 8013b2a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
 8013adc:	79b0      	ldrb	r0, [r6, #6]
 8013ade:	f7f8 f81b 	bl	800bb18 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	f001 f9b0 	bl	8014e4a <net_buf_alloc_fixed>
			if (!frag) {
 8013aea:	4605      	mov	r5, r0
 8013aec:	b930      	cbnz	r0, 8013afc <att_chan_read+0x76>
	return total;
 8013aee:	4657      	mov	r7, sl
 8013af0:	e02c      	b.n	8013b4c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
 8013af2:	4638      	mov	r0, r7
 8013af4:	f001 f9c1 	bl	8014e7a <net_buf_simple_tailroom>
 8013af8:	4604      	mov	r4, r0
 8013afa:	e7ee      	b.n	8013ada <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
 8013afc:	4601      	mov	r1, r0
 8013afe:	4630      	mov	r0, r6
 8013b00:	f7f8 fab4 	bl	800c06c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7ff ff4e 	bl	80139a6 <net_buf_frags_len>
 8013b0a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
 8013b0e:	f105 0708 	add.w	r7, r5, #8
 8013b12:	1a24      	subs	r4, r4, r0
 8013b14:	4638      	mov	r0, r7
 8013b16:	f001 f9b0 	bl	8014e7a <net_buf_simple_tailroom>
 8013b1a:	4284      	cmp	r4, r0
 8013b1c:	d21a      	bcs.n	8013b54 <att_chan_read+0xce>
 8013b1e:	4630      	mov	r0, r6
 8013b20:	f7ff ff41 	bl	80139a6 <net_buf_frags_len>
 8013b24:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
 8013b28:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
 8013b2a:	68a9      	ldr	r1, [r5, #8]
 8013b2c:	89aa      	ldrh	r2, [r5, #12]
 8013b2e:	f8db 7004 	ldr.w	r7, [fp, #4]
 8013b32:	9803      	ldr	r0, [sp, #12]
 8013b34:	f8cd 9000 	str.w	r9, [sp]
 8013b38:	440a      	add	r2, r1
 8013b3a:	b2a3      	uxth	r3, r4
 8013b3c:	4659      	mov	r1, fp
 8013b3e:	47b8      	blx	r7
		if (read < 0) {
 8013b40:	1e07      	subs	r7, r0, #0
 8013b42:	da0c      	bge.n	8013b5e <att_chan_read+0xd8>
				return total;
 8013b44:	f1ba 0f00 	cmp.w	sl, #0
 8013b48:	bf18      	it	ne
 8013b4a:	4657      	movne	r7, sl
}
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	b005      	add	sp, #20
 8013b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b54:	4638      	mov	r0, r7
 8013b56:	f001 f990 	bl	8014e7a <net_buf_simple_tailroom>
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	e7e5      	b.n	8013b2a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
 8013b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b60:	b993      	cbnz	r3, 8013b88 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
 8013b62:	4639      	mov	r1, r7
 8013b64:	f105 0008 	add.w	r0, r5, #8
 8013b68:	f7f8 fb08 	bl	800c17c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 8013b6c:	4630      	mov	r0, r6
 8013b6e:	f7ff ff1a 	bl	80139a6 <net_buf_frags_len>
 8013b72:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
 8013b76:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 8013b78:	4283      	cmp	r3, r0
		total += read;
 8013b7a:	44ba      	add	sl, r7
		offset += read;
 8013b7c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
 8013b80:	d9b5      	bls.n	8013aee <att_chan_read+0x68>
 8013b82:	42a7      	cmp	r7, r4
 8013b84:	d096      	beq.n	8013ab4 <att_chan_read+0x2e>
 8013b86:	e7b2      	b.n	8013aee <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
 8013b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b8c:	4639      	mov	r1, r7
 8013b8e:	4628      	mov	r0, r5
 8013b90:	4798      	blx	r3
 8013b92:	2800      	cmp	r0, #0
 8013b94:	d1e5      	bne.n	8013b62 <att_chan_read+0xdc>
 8013b96:	e7aa      	b.n	8013aee <att_chan_read+0x68>
		return 0;
 8013b98:	2700      	movs	r7, #0
 8013b9a:	e7d7      	b.n	8013b4c <att_chan_read+0xc6>

08013b9c <find_info_cb>:
{
 8013b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
 8013b9e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
 8013ba0:	6817      	ldr	r7, [r2, #0]
{
 8013ba2:	4605      	mov	r5, r0
 8013ba4:	460e      	mov	r6, r1
 8013ba6:	4614      	mov	r4, r2
	if (!data->rsp) {
 8013ba8:	b963      	cbnz	r3, 8013bc4 <find_info_cb+0x28>
 8013baa:	6850      	ldr	r0, [r2, #4]
 8013bac:	2101      	movs	r1, #1
 8013bae:	3008      	adds	r0, #8
 8013bb0:	f7f8 fae4 	bl	800c17c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8013bb4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8013bb6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	bf0c      	ite	eq
 8013bbe:	2301      	moveq	r3, #1
 8013bc0:	2302      	movne	r3, #2
 8013bc2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
 8013bc4:	68a3      	ldr	r3, [r4, #8]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d003      	beq.n	8013bd4 <find_info_cb+0x38>
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	d019      	beq.n	8013c04 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	e016      	b.n	8013c02 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
 8013bd4:	682b      	ldr	r3, [r5, #0]
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1f9      	bne.n	8013bd0 <find_info_cb+0x34>
 8013bdc:	6860      	ldr	r0, [r4, #4]
 8013bde:	2104      	movs	r1, #4
 8013be0:	3008      	adds	r0, #8
 8013be2:	f7f8 facb 	bl	800c17c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 8013be6:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
 8013be8:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 8013bea:	885b      	ldrh	r3, [r3, #2]
 8013bec:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
 8013bee:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
 8013bf0:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
 8013bf2:	899b      	ldrh	r3, [r3, #12]
 8013bf4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8013bf8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 8013bfa:	2804      	cmp	r0, #4
 8013bfc:	bf94      	ite	ls
 8013bfe:	2000      	movls	r0, #0
 8013c00:	2001      	movhi	r0, #1
}
 8013c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
 8013c04:	682b      	ldr	r3, [r5, #0]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	2b02      	cmp	r3, #2
 8013c0a:	d1e1      	bne.n	8013bd0 <find_info_cb+0x34>
 8013c0c:	6860      	ldr	r0, [r4, #4]
 8013c0e:	2112      	movs	r1, #18
 8013c10:	3008      	adds	r0, #8
 8013c12:	f7f8 fab3 	bl	800c17c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 8013c16:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
 8013c18:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 8013c1a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
 8013c1c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 8013c20:	3101      	adds	r1, #1
 8013c22:	f7ff f933 	bl	8012e8c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
 8013c26:	6863      	ldr	r3, [r4, #4]
 8013c28:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8013c2c:	899b      	ldrh	r3, [r3, #12]
 8013c2e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 8013c30:	2812      	cmp	r0, #18
 8013c32:	e7e3      	b.n	8013bfc <find_info_cb+0x60>

08013c34 <att_chan_mtu_updated>:
{
 8013c34:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
 8013c36:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013c38:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8013c3a:	b1e2      	cbz	r2, 8013c76 <att_chan_mtu_updated+0x42>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8013c3c:	6813      	ldr	r3, [r2, #0]
 8013c3e:	f5a2 75aa 	sub.w	r5, r2, #340	; 0x154
 8013c42:	b10b      	cbz	r3, 8013c48 <att_chan_mtu_updated+0x14>
 8013c44:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
 8013c48:	2200      	movs	r2, #0
 8013c4a:	4611      	mov	r1, r2
		if (chan == updated_chan) {
 8013c4c:	42a8      	cmp	r0, r5
 8013c4e:	d009      	beq.n	8013c64 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
 8013c50:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
 8013c54:	42a1      	cmp	r1, r4
 8013c56:	bf38      	it	cc
 8013c58:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
 8013c5a:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
 8013c5e:	42a2      	cmp	r2, r4
 8013c60:	bf38      	it	cc
 8013c62:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013c64:	b143      	cbz	r3, 8013c78 <att_chan_mtu_updated+0x44>
 8013c66:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
 8013c6a:	b10c      	cbz	r4, 8013c70 <att_chan_mtu_updated+0x3c>
 8013c6c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
 8013c70:	461d      	mov	r5, r3
 8013c72:	4623      	mov	r3, r4
 8013c74:	e7ea      	b.n	8013c4c <att_chan_mtu_updated+0x18>
 8013c76:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
 8013c78:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 8013c7c:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
 8013c80:	428b      	cmp	r3, r1
 8013c82:	d801      	bhi.n	8013c88 <att_chan_mtu_updated+0x54>
 8013c84:	4290      	cmp	r0, r2
 8013c86:	d909      	bls.n	8013c9c <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
 8013c88:	4282      	cmp	r2, r0
 8013c8a:	bf38      	it	cc
 8013c8c:	4602      	movcc	r2, r0
 8013c8e:	4299      	cmp	r1, r3
 8013c90:	6830      	ldr	r0, [r6, #0]
 8013c92:	bf38      	it	cc
 8013c94:	4619      	movcc	r1, r3
}
 8013c96:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
 8013c98:	f7f6 b98c 	b.w	8009fb4 <bt_gatt_att_max_mtu_changed>
}
 8013c9c:	bc70      	pop	{r4, r5, r6}
 8013c9e:	4770      	bx	lr

08013ca0 <attr_read_group_cb>:
	if (!data->rsp->len) {
 8013ca0:	68d0      	ldr	r0, [r2, #12]
 8013ca2:	7803      	ldrb	r3, [r0, #0]
 8013ca4:	3104      	adds	r1, #4
 8013ca6:	b913      	cbnz	r3, 8013cae <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
 8013ca8:	7001      	strb	r1, [r0, #0]
	return true;
 8013caa:	2001      	movs	r0, #1
}
 8013cac:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
 8013cae:	428b      	cmp	r3, r1
 8013cb0:	d0fb      	beq.n	8013caa <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
 8013cb2:	6891      	ldr	r1, [r2, #8]
 8013cb4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
 8013cb6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
 8013cb8:	3b04      	subs	r3, #4
 8013cba:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
 8013cbc:	6110      	str	r0, [r2, #16]
		return false;
 8013cbe:	4770      	bx	lr

08013cc0 <z_log_msg2_static_create.constprop.0>:
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	f7ef b94b 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

08013cc6 <att_exec_write_req>:
 8013cc6:	2006      	movs	r0, #6
 8013cc8:	4770      	bx	lr

08013cca <chan_rsp_sent>:
 8013cca:	30f8      	adds	r0, #248	; 0xf8
 8013ccc:	f3bf 8f5b 	dmb	ish
 8013cd0:	e850 3f00 	ldrex	r3, [r0]
 8013cd4:	f023 0301 	bic.w	r3, r3, #1
 8013cd8:	e840 3200 	strex	r2, r3, [r0]
 8013cdc:	2a00      	cmp	r2, #0
 8013cde:	d1f7      	bne.n	8013cd0 <chan_rsp_sent+0x6>
 8013ce0:	f3bf 8f5b 	dmb	ish
}
 8013ce4:	4770      	bx	lr

08013ce6 <chan_cfm_sent>:
 8013ce6:	30f8      	adds	r0, #248	; 0xf8
 8013ce8:	f3bf 8f5b 	dmb	ish
 8013cec:	e850 3f00 	ldrex	r3, [r0]
 8013cf0:	f023 0302 	bic.w	r3, r3, #2
 8013cf4:	e840 3200 	strex	r2, r3, [r0]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	d1f7      	bne.n	8013cec <chan_cfm_sent+0x6>
 8013cfc:	f3bf 8f5b 	dmb	ish
}
 8013d00:	4770      	bx	lr

08013d02 <chan_req_send>:
{
 8013d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
 8013d04:	688f      	ldr	r7, [r1, #8]
{
 8013d06:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
 8013d08:	4638      	mov	r0, r7
{
 8013d0a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
 8013d0c:	f7ff fe4b 	bl	80139a6 <net_buf_frags_len>
 8013d10:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8013d14:	4283      	cmp	r3, r0
 8013d16:	d30d      	bcc.n	8013d34 <chan_req_send+0x32>
	req->buf = NULL;
 8013d18:	2600      	movs	r6, #0
	chan->req = req;
 8013d1a:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
 8013d1e:	4632      	mov	r2, r6
	req->buf = NULL;
 8013d20:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
 8013d22:	4620      	mov	r0, r4
 8013d24:	4639      	mov	r1, r7
 8013d26:	f7f4 fc79 	bl	800861c <chan_send>
	if (err) {
 8013d2a:	b110      	cbz	r0, 8013d32 <chan_req_send+0x30>
		req->buf = buf;
 8013d2c:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
 8013d2e:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
 8013d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
 8013d34:	f06f 0079 	mvn.w	r0, #121	; 0x79
 8013d38:	e7fb      	b.n	8013d32 <chan_req_send+0x30>

08013d3a <bt_att_status>:
{
 8013d3a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8013d3c:	f3bf 8f5b 	dmb	ish
 8013d40:	680b      	ldr	r3, [r1, #0]
 8013d42:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
 8013d46:	07db      	lsls	r3, r3, #31
{
 8013d48:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
 8013d4a:	d519      	bpl.n	8013d80 <bt_att_status+0x46>
	if (!chan->att) {
 8013d4c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8013d50:	b1b0      	cbz	r0, 8013d80 <bt_att_status+0x46>
	if (chan->req) {
 8013d52:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8013d56:	b99b      	cbnz	r3, 8013d80 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
 8013d58:	3004      	adds	r0, #4
 8013d5a:	f7ff fdff 	bl	801395c <sys_slist_get>
	if (!node) {
 8013d5e:	4604      	mov	r4, r0
 8013d60:	b170      	cbz	r0, 8013d80 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 8013d62:	4601      	mov	r1, r0
 8013d64:	f1a5 0008 	sub.w	r0, r5, #8
 8013d68:	f7f4 fcd2 	bl	8008710 <bt_att_chan_req_send>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	da07      	bge.n	8013d80 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
 8013d70:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
 8013d74:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8013d76:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 8013d78:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 8013d7a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8013d7c:	b902      	cbnz	r2, 8013d80 <bt_att_status+0x46>
	list->tail = node;
 8013d7e:	609c      	str	r4, [r3, #8]
}
 8013d80:	bd38      	pop	{r3, r4, r5, pc}

08013d82 <att_req_send_process>:
{
 8013d82:	b570      	push	{r4, r5, r6, lr}
 8013d84:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
 8013d86:	3004      	adds	r0, #4
 8013d88:	f7ff fde8 	bl	801395c <sys_slist_get>
	if (!node) {
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	b1b8      	cbz	r0, 8013dc0 <att_req_send_process+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013d90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d92:	b14b      	cbz	r3, 8013da8 <att_req_send_process+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8013d94:	681e      	ldr	r6, [r3, #0]
 8013d96:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8013d9a:	b10e      	cbz	r6, 8013da0 <att_req_send_process+0x1e>
 8013d9c:	f5a6 76aa 	sub.w	r6, r6, #340	; 0x154
		if (!chan->req) {
 8013da0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 8013da4:	b13b      	cbz	r3, 8013db6 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013da6:	b966      	cbnz	r6, 8013dc2 <att_req_send_process+0x40>
Z_GENLIST_PREPEND(slist, snode)
 8013da8:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
 8013daa:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
 8013dac:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
 8013dae:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
 8013db0:	b933      	cbnz	r3, 8013dc0 <att_req_send_process+0x3e>
	list->tail = node;
 8013db2:	60a5      	str	r5, [r4, #8]
}
 8013db4:	e004      	b.n	8013dc0 <att_req_send_process+0x3e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
 8013db6:	4629      	mov	r1, r5
 8013db8:	f7f4 fcaa 	bl	8008710 <bt_att_chan_req_send>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	dbf2      	blt.n	8013da6 <att_req_send_process+0x24>
}
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8013dc2:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013dc6:	b10b      	cbz	r3, 8013dcc <att_req_send_process+0x4a>
 8013dc8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
 8013dcc:	4630      	mov	r0, r6
 8013dce:	461e      	mov	r6, r3
 8013dd0:	e7e6      	b.n	8013da0 <att_req_send_process+0x1e>

08013dd2 <process_queue>:
{
 8013dd2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
 8013dd4:	2200      	movs	r2, #0
{
 8013dd6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
 8013dd8:	2300      	movs	r3, #0
 8013dda:	4608      	mov	r0, r1
{
 8013ddc:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
 8013dde:	f7f8 f80b 	bl	800bdf8 <net_buf_get>
	if (buf) {
 8013de2:	4605      	mov	r5, r0
 8013de4:	b160      	cbz	r0, 8013e00 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
 8013de6:	4601      	mov	r1, r0
 8013de8:	2200      	movs	r2, #0
 8013dea:	4620      	mov	r0, r4
 8013dec:	f7f4 fc16 	bl	800861c <chan_send>
		if (err) {
 8013df0:	4604      	mov	r4, r0
 8013df2:	b118      	cbz	r0, 8013dfc <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
 8013df4:	4629      	mov	r1, r5
 8013df6:	4630      	mov	r0, r6
 8013df8:	f001 fae5 	bl	80153c6 <k_queue_prepend>
}
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
 8013e00:	f06f 0401 	mvn.w	r4, #1
 8013e04:	e7fa      	b.n	8013dfc <process_queue+0x2a>

08013e06 <write_cb>:
{
 8013e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e08:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
 8013e0a:	4601      	mov	r1, r0
{
 8013e0c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
 8013e0e:	222a      	movs	r2, #42	; 0x2a
 8013e10:	6820      	ldr	r0, [r4, #0]
 8013e12:	f000 fc20 	bl	8014656 <bt_gatt_check_perm>
 8013e16:	4605      	mov	r5, r0
 8013e18:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 8013e1a:	bb20      	cbnz	r0, 8013e66 <write_cb+0x60>
	if (!data->req) {
 8013e1c:	7a23      	ldrb	r3, [r4, #8]
 8013e1e:	b1ab      	cbz	r3, 8013e4c <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
 8013e20:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
 8013e22:	bf14      	ite	ne
 8013e24:	2300      	movne	r3, #0
 8013e26:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
 8013e28:	9301      	str	r3, [sp, #4]
 8013e2a:	8a63      	ldrh	r3, [r4, #18]
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	68b7      	ldr	r7, [r6, #8]
 8013e30:	8a23      	ldrh	r3, [r4, #16]
 8013e32:	68e2      	ldr	r2, [r4, #12]
 8013e34:	6820      	ldr	r0, [r4, #0]
 8013e36:	4631      	mov	r1, r6
 8013e38:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
 8013e3a:	1e03      	subs	r3, r0, #0
 8013e3c:	db08      	blt.n	8013e50 <write_cb+0x4a>
 8013e3e:	8a22      	ldrh	r2, [r4, #16]
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d10e      	bne.n	8013e62 <write_cb+0x5c>
	data->err = 0U;
 8013e44:	2300      	movs	r3, #0
 8013e46:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
 8013e48:	2501      	movs	r5, #1
 8013e4a:	e007      	b.n	8013e5c <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
 8013e4c:	2302      	movs	r3, #2
 8013e4e:	e7eb      	b.n	8013e28 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
 8013e50:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8013e54:	d305      	bcc.n	8013e62 <write_cb+0x5c>
		return -err;
 8013e56:	425b      	negs	r3, r3
 8013e58:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
 8013e5a:	7523      	strb	r3, [r4, #20]
}
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	b003      	add	sp, #12
 8013e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
 8013e62:	230e      	movs	r3, #14
 8013e64:	e7f9      	b.n	8013e5a <write_cb+0x54>
		return BT_GATT_ITER_STOP;
 8013e66:	2500      	movs	r5, #0
 8013e68:	e7f8      	b.n	8013e5c <write_cb+0x56>

08013e6a <bt_att_sent>:
{
 8013e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
 8013e6c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
 8013e70:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
 8013e74:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
 8013e76:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
 8013e7a:	b10b      	cbz	r3, 8013e80 <bt_att_sent+0x16>
		chan->sent(chan);
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8013e80:	f3bf 8f5b 	dmb	ish
 8013e84:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
 8013e88:	e853 2f00 	ldrex	r2, [r3]
 8013e8c:	f022 0210 	bic.w	r2, r2, #16
 8013e90:	e843 2100 	strex	r1, r2, [r3]
 8013e94:	2900      	cmp	r1, #0
 8013e96:	d1f7      	bne.n	8013e88 <bt_att_sent+0x1e>
 8013e98:	f3bf 8f5b 	dmb	ish
	if (!att) {
 8013e9c:	b30c      	cbz	r4, 8013ee2 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
 8013e9e:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8013ea2:	b98b      	cbnz	r3, 8013ec8 <bt_att_sent+0x5e>
 8013ea4:	6863      	ldr	r3, [r4, #4]
 8013ea6:	b17b      	cbz	r3, 8013ec8 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
 8013ea8:	1d20      	adds	r0, r4, #4
 8013eaa:	f7ff fd57 	bl	801395c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
 8013eae:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
 8013eb0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f7ff ff25 	bl	8013d02 <chan_req_send>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	da12      	bge.n	8013ee2 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
 8013ebc:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
 8013ebe:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
 8013ec0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
 8013ec2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
 8013ec4:	b903      	cbnz	r3, 8013ec8 <bt_att_sent+0x5e>
	list->tail = node;
 8013ec6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
 8013ec8:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
 8013ecc:	4638      	mov	r0, r7
 8013ece:	f7ff ff80 	bl	8013dd2 <process_queue>
	if (!err) {
 8013ed2:	b130      	cbz	r0, 8013ee2 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
 8013ed4:	f104 010c 	add.w	r1, r4, #12
 8013ed8:	4638      	mov	r0, r7
}
 8013eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
 8013ede:	f7ff bf78 	b.w	8013dd2 <process_queue>
}
 8013ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ee4 <read_cb>:
{
 8013ee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
 8013ee8:	f8d2 8000 	ldr.w	r8, [r2]
{
 8013eec:	4606      	mov	r6, r0
	data->err = 0x00;
 8013eee:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
 8013ef0:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
 8013ef4:	7317      	strb	r7, [r2, #12]
{
 8013ef6:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 8013ef8:	4631      	mov	r1, r6
 8013efa:	2215      	movs	r2, #21
 8013efc:	f000 fbab 	bl	8014656 <bt_gatt_check_perm>
 8013f00:	4604      	mov	r4, r0
 8013f02:	7328      	strb	r0, [r5, #12]
	if (data->err) {
 8013f04:	b9a0      	cbnz	r0, 8013f30 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
 8013f06:	e9cd 0000 	strd	r0, r0, [sp]
 8013f0a:	88ab      	ldrh	r3, [r5, #4]
 8013f0c:	68aa      	ldr	r2, [r5, #8]
 8013f0e:	4631      	mov	r1, r6
 8013f10:	4640      	mov	r0, r8
 8013f12:	f7ff fdb8 	bl	8013a86 <att_chan_read>
	if (ret < 0) {
 8013f16:	1e03      	subs	r3, r0, #0
 8013f18:	da0c      	bge.n	8013f34 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
 8013f1a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
 8013f1e:	bf26      	itte	cs
 8013f20:	425b      	negcs	r3, r3
 8013f22:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
 8013f24:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
 8013f26:	732b      	strb	r3, [r5, #12]
}
 8013f28:	4620      	mov	r0, r4
 8013f2a:	b002      	add	sp, #8
 8013f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
 8013f30:	463c      	mov	r4, r7
 8013f32:	e7f9      	b.n	8013f28 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
 8013f34:	2401      	movs	r4, #1
 8013f36:	e7f7      	b.n	8013f28 <read_cb+0x44>

08013f38 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
 8013f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3c:	4688      	mov	r8, r1
 8013f3e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8013f40:	2101      	movs	r1, #1
 8013f42:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
 8013f44:	4605      	mov	r5, r0
 8013f46:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8013f48:	f7f4 fc7c 	bl	8008844 <bt_att_chan_create_pdu>
	if (!buf) {
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	b170      	cbz	r0, 8013f6e <send_err_rsp.part.0+0x36>
 8013f50:	2104      	movs	r1, #4
 8013f52:	3008      	adds	r0, #8
 8013f54:	f7f8 f912 	bl	800c17c <net_buf_simple_add>
	rsp->request = req;
 8013f58:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
 8013f5c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
 8013f5e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
 8013f62:	4621      	mov	r1, r4
 8013f64:	4628      	mov	r0, r5
}
 8013f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
 8013f6a:	f7f4 bc1d 	b.w	80087a8 <bt_att_chan_send_rsp.constprop.0>
}
 8013f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f72 <bt_att_create_pdu>:
{
 8013f72:	b538      	push	{r3, r4, r5, lr}
 8013f74:	460d      	mov	r5, r1
 8013f76:	4614      	mov	r4, r2
	att = att_get(conn);
 8013f78:	f7f4 fa68 	bl	800844c <att_get>
	if (!att) {
 8013f7c:	b300      	cbz	r0, 8013fc0 <bt_att_create_pdu+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013f7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013f80:	b15b      	cbz	r3, 8013f9a <bt_att_create_pdu+0x28>
 8013f82:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	b10b      	cbz	r3, 8013f8e <bt_att_create_pdu+0x1c>
 8013f8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
 8013f8e:	1c61      	adds	r1, r4, #1
 8013f90:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8013f94:	4291      	cmp	r1, r2
 8013f96:	d905      	bls.n	8013fa4 <bt_att_create_pdu+0x32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013f98:	b953      	cbnz	r3, 8013fb0 <bt_att_create_pdu+0x3e>
 8013f9a:	4620      	mov	r0, r4
}
 8013f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fa0:	f7f4 b97c 	b.w	800829c <bt_att_create_pdu.part.0>
		return bt_att_chan_create_pdu(chan, op, len);
 8013fa4:	4622      	mov	r2, r4
 8013fa6:	4629      	mov	r1, r5
}
 8013fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
 8013fac:	f7f4 bc4a 	b.w	8008844 <bt_att_chan_create_pdu>
 8013fb0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
 8013fb4:	b10a      	cbz	r2, 8013fba <bt_att_create_pdu+0x48>
 8013fb6:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
 8013fba:	4618      	mov	r0, r3
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	e7e7      	b.n	8013f90 <bt_att_create_pdu+0x1e>
}
 8013fc0:	bd38      	pop	{r3, r4, r5, pc}

08013fc2 <att_read_blob_req>:
{
 8013fc2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
 8013fc4:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
 8013fc6:	8813      	ldrh	r3, [r2, #0]
 8013fc8:	8852      	ldrh	r2, [r2, #2]
 8013fca:	9200      	str	r2, [sp, #0]
 8013fcc:	210c      	movs	r1, #12
 8013fce:	220d      	movs	r2, #13
 8013fd0:	f7f4 fe6a 	bl	8008ca8 <att_read_rsp>
}
 8013fd4:	b003      	add	sp, #12
 8013fd6:	f85d fb04 	ldr.w	pc, [sp], #4

08013fda <att_read_req>:
{
 8013fda:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
 8013fdc:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
 8013fde:	2200      	movs	r2, #0
 8013fe0:	881b      	ldrh	r3, [r3, #0]
 8013fe2:	9200      	str	r2, [sp, #0]
 8013fe4:	210a      	movs	r1, #10
 8013fe6:	220b      	movs	r2, #11
 8013fe8:	f7f4 fe5e 	bl	8008ca8 <att_read_rsp>
}
 8013fec:	b003      	add	sp, #12
 8013fee:	f85d fb04 	ldr.w	pc, [sp], #4

08013ff2 <att_mtu_req>:
{
 8013ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
 8013ff4:	6803      	ldr	r3, [r0, #0]
{
 8013ff6:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
 8013ff8:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8013ffa:	f3bf 8f5b 	dmb	ish
 8013ffe:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8014002:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
 8014006:	f3c3 05c0 	ubfx	r5, r3, #3, #1
 801400a:	071b      	lsls	r3, r3, #28
 801400c:	d420      	bmi.n	8014050 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
 801400e:	688b      	ldr	r3, [r1, #8]
 8014010:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 8014012:	2e16      	cmp	r6, #22
 8014014:	d91e      	bls.n	8014054 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
 8014016:	2202      	movs	r2, #2
 8014018:	2103      	movs	r1, #3
 801401a:	f7ff ffaa 	bl	8013f72 <bt_att_create_pdu>
	if (!pdu) {
 801401e:	4607      	mov	r7, r0
 8014020:	b1d0      	cbz	r0, 8014058 <att_mtu_req+0x66>
 8014022:	2102      	movs	r1, #2
 8014024:	3008      	adds	r0, #8
 8014026:	f7f8 f8a9 	bl	800c17c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
 801402a:	2341      	movs	r3, #65	; 0x41
 801402c:	7003      	strb	r3, [r0, #0]
 801402e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
 8014030:	4639      	mov	r1, r7
 8014032:	4620      	mov	r0, r4
 8014034:	f7f4 fbb8 	bl	80087a8 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
 8014038:	2e41      	cmp	r6, #65	; 0x41
 801403a:	bf28      	it	cs
 801403c:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
 801403e:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
 8014040:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
 8014044:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
 8014048:	f7ff fdf4 	bl	8013c34 <att_chan_mtu_updated>
	return 0;
 801404c:	4628      	mov	r0, r5
}
 801404e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
 8014050:	2006      	movs	r0, #6
 8014052:	e7fc      	b.n	801404e <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
 8014054:	2004      	movs	r0, #4
 8014056:	e7fa      	b.n	801404e <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
 8014058:	200e      	movs	r0, #14
 801405a:	e7f8      	b.n	801404e <att_mtu_req+0x5c>

0801405c <bt_att_init>:
	bt_gatt_init();
 801405c:	f7f5 ba80 	b.w	8009560 <bt_gatt_init>

08014060 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
 8014060:	898a      	ldrh	r2, [r1, #12]
 8014062:	6889      	ldr	r1, [r1, #8]
 8014064:	2300      	movs	r3, #0
 8014066:	f7f4 bf9d 	b.w	8008fa4 <att_handle_rsp>

0801406a <bt_att_encrypt_change>:
	if (!att_chan->att) {
 801406a:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
 801406e:	b570      	push	{r4, r5, r6, lr}
 8014070:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
 8014072:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
 8014076:	2b00      	cmp	r3, #0
 8014078:	d037      	beq.n	80140ea <bt_att_encrypt_change+0x80>
	if (hci_status) {
 801407a:	b171      	cbz	r1, 801409a <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
 801407c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
 8014080:	2b00      	cmp	r3, #0
 8014082:	d032      	beq.n	80140ea <bt_att_encrypt_change+0x80>
 8014084:	7c1b      	ldrb	r3, [r3, #16]
 8014086:	07da      	lsls	r2, r3, #31
 8014088:	d52f      	bpl.n	80140ea <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
 801408a:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
 801408c:	2200      	movs	r2, #0
 801408e:	4630      	mov	r0, r6
 8014090:	4611      	mov	r1, r2
}
 8014092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
 8014096:	f7f4 bf85 	b.w	8008fa4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
 801409a:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
 801409c:	4628      	mov	r0, r5
 801409e:	f7f5 ff9d 	bl	8009fdc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
 80140a2:	7a6b      	ldrb	r3, [r5, #9]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d020      	beq.n	80140ea <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
 80140a8:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 80140ac:	b1ec      	cbz	r4, 80140ea <bt_att_encrypt_change+0x80>
 80140ae:	7c23      	ldrb	r3, [r4, #16]
 80140b0:	07db      	lsls	r3, r3, #31
 80140b2:	d51a      	bpl.n	80140ea <bt_att_encrypt_change+0x80>
	if (!req->encode) {
 80140b4:	68e3      	ldr	r3, [r4, #12]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d0e7      	beq.n	801408a <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
 80140ba:	6962      	ldr	r2, [r4, #20]
 80140bc:	7c61      	ldrb	r1, [r4, #17]
 80140be:	4630      	mov	r0, r6
 80140c0:	f7f4 fbc0 	bl	8008844 <bt_att_chan_create_pdu>
	if (!buf) {
 80140c4:	4605      	mov	r5, r0
 80140c6:	b140      	cbz	r0, 80140da <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
 80140c8:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 80140cc:	68e3      	ldr	r3, [r4, #12]
 80140ce:	4798      	blx	r3
 80140d0:	4602      	mov	r2, r0
 80140d2:	b120      	cbz	r0, 80140de <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
 80140d4:	4628      	mov	r0, r5
 80140d6:	f7f7 ff21 	bl	800bf1c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
 80140da:	230e      	movs	r3, #14
 80140dc:	e7d6      	b.n	801408c <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
 80140de:	4629      	mov	r1, r5
 80140e0:	4630      	mov	r0, r6
 80140e2:	f7f4 fa9b 	bl	800861c <chan_send>
 80140e6:	2800      	cmp	r0, #0
 80140e8:	d1f4      	bne.n	80140d4 <bt_att_encrypt_change+0x6a>
}
 80140ea:	bd70      	pop	{r4, r5, r6, pc}

080140ec <gatt_ccc_changed>:
{
 80140ec:	460b      	mov	r3, r1
 80140ee:	8909      	ldrh	r1, [r1, #8]
 80140f0:	8a5a      	ldrh	r2, [r3, #18]
 80140f2:	4291      	cmp	r1, r2
 80140f4:	bf38      	it	cc
 80140f6:	4611      	movcc	r1, r2
	if (value != ccc->value) {
 80140f8:	8a9a      	ldrh	r2, [r3, #20]
 80140fa:	428a      	cmp	r2, r1
 80140fc:	d003      	beq.n	8014106 <gatt_ccc_changed+0x1a>
		ccc->value = value;
 80140fe:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
 8014100:	699b      	ldr	r3, [r3, #24]
 8014102:	b103      	cbz	r3, 8014106 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
 8014104:	4718      	bx	r3
}
 8014106:	4770      	bx	lr

08014108 <gatt_indicate_rsp>:
{
 8014108:	b510      	push	{r4, lr}
 801410a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
 801410c:	68a3      	ldr	r3, [r4, #8]
{
 801410e:	460a      	mov	r2, r1
	if (params->func) {
 8014110:	b10b      	cbz	r3, 8014116 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
 8014112:	4621      	mov	r1, r4
 8014114:	4798      	blx	r3
	params->_ref--;
 8014116:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
 8014118:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
 801411a:	3b01      	subs	r3, #1
 801411c:	b2db      	uxtb	r3, r3
 801411e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
 8014120:	b122      	cbz	r2, 801412c <gatt_indicate_rsp+0x24>
 8014122:	b91b      	cbnz	r3, 801412c <gatt_indicate_rsp+0x24>
		params->destroy(params);
 8014124:	4620      	mov	r0, r4
}
 8014126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
 801412a:	4710      	bx	r2
}
 801412c:	bd10      	pop	{r4, pc}

0801412e <match_uuid>:
	data->attr = attr;
 801412e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
 8014130:	8091      	strh	r1, [r2, #4]
}
 8014132:	2000      	movs	r0, #0
 8014134:	4770      	bx	lr

08014136 <gen_hash_m>:
{
 8014136:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
 8014138:	6807      	ldr	r7, [r0, #0]
 801413a:	783d      	ldrb	r5, [r7, #0]
{
 801413c:	b089      	sub	sp, #36	; 0x24
 801413e:	4606      	mov	r6, r0
 8014140:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
 8014142:	b10d      	cbz	r5, 8014148 <gen_hash_m+0x12>
	switch (u16->val) {
 8014144:	2501      	movs	r5, #1
 8014146:	e014      	b.n	8014172 <gen_hash_m+0x3c>
 8014148:	887b      	ldrh	r3, [r7, #2]
 801414a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
 801414e:	d004      	beq.n	801415a <gen_hash_m+0x24>
 8014150:	d812      	bhi.n	8014178 <gen_hash_m+0x42>
 8014152:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
 8014156:	2b03      	cmp	r3, #3
 8014158:	d8f4      	bhi.n	8014144 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
 801415a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801415e:	2202      	movs	r2, #2
 8014160:	f10d 010a 	add.w	r1, sp, #10
 8014164:	4620      	mov	r0, r4
 8014166:	f7fe fb87 	bl	8012878 <tc_cmac_update>
 801416a:	b9e0      	cbnz	r0, 80141a6 <gen_hash_m+0x70>
			state->err = -EINVAL;
 801416c:	f06f 0315 	mvn.w	r3, #21
 8014170:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8014172:	4628      	mov	r0, r5
 8014174:	b009      	add	sp, #36	; 0x24
 8014176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
 8014178:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 801417c:	33ff      	adds	r3, #255	; 0xff
 801417e:	b29b      	uxth	r3, r3
 8014180:	2b04      	cmp	r3, #4
 8014182:	d8df      	bhi.n	8014144 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
 8014184:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 8014188:	2202      	movs	r2, #2
 801418a:	f10d 010a 	add.w	r1, sp, #10
 801418e:	4620      	mov	r0, r4
 8014190:	f7fe fb72 	bl	8012878 <tc_cmac_update>
 8014194:	2800      	cmp	r0, #0
 8014196:	d0e9      	beq.n	801416c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
 8014198:	887b      	ldrh	r3, [r7, #2]
 801419a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 801419e:	2202      	movs	r2, #2
 80141a0:	f10d 010a 	add.w	r1, sp, #10
 80141a4:	e016      	b.n	80141d4 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
 80141a6:	887b      	ldrh	r3, [r7, #2]
 80141a8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 80141ac:	2202      	movs	r2, #2
 80141ae:	f10d 010a 	add.w	r1, sp, #10
 80141b2:	4620      	mov	r0, r4
 80141b4:	f7fe fb60 	bl	8012878 <tc_cmac_update>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0d7      	beq.n	801416c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
 80141bc:	2000      	movs	r0, #0
 80141be:	aa03      	add	r2, sp, #12
 80141c0:	6877      	ldr	r7, [r6, #4]
 80141c2:	9000      	str	r0, [sp, #0]
 80141c4:	2313      	movs	r3, #19
 80141c6:	4631      	mov	r1, r6
 80141c8:	47b8      	blx	r7
		if (len < 0) {
 80141ca:	1e02      	subs	r2, r0, #0
 80141cc:	da01      	bge.n	80141d2 <gen_hash_m+0x9c>
			state->err = len;
 80141ce:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
 80141d0:	e7cf      	b.n	8014172 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
 80141d2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
 80141d4:	4620      	mov	r0, r4
 80141d6:	f7fe fb4f 	bl	8012878 <tc_cmac_update>
 80141da:	2800      	cmp	r0, #0
 80141dc:	d1b2      	bne.n	8014144 <gen_hash_m+0xe>
 80141de:	e7c5      	b.n	801416c <gen_hash_m+0x36>

080141e0 <z_log_msg2_static_create.constprop.0>:
 80141e0:	2300      	movs	r3, #0
 80141e2:	f7ee bebb 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

080141e6 <clear_cf_cfg>:
{
 80141e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141e8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
 80141ea:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
 80141ec:	2207      	movs	r2, #7
 80141ee:	4669      	mov	r1, sp
 80141f0:	3001      	adds	r0, #1
 80141f2:	9500      	str	r5, [sp, #0]
 80141f4:	f8cd 5003 	str.w	r5, [sp, #3]
 80141f8:	f7fe fe48 	bl	8012e8c <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
 80141fc:	f104 0008 	add.w	r0, r4, #8
 8014200:	2201      	movs	r2, #1
 8014202:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8014204:	340c      	adds	r4, #12
 8014206:	f7fe fe4c 	bl	8012ea2 <memset>
 801420a:	f3bf 8f5b 	dmb	ish
 801420e:	e854 3f00 	ldrex	r3, [r4]
 8014212:	e844 5200 	strex	r2, r5, [r4]
 8014216:	2a00      	cmp	r2, #0
 8014218:	d1f9      	bne.n	801420e <clear_cf_cfg+0x28>
 801421a:	f3bf 8f5b 	dmb	ish
}
 801421e:	b003      	add	sp, #12
 8014220:	bd30      	pop	{r4, r5, pc}

08014222 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 8014222:	2301      	movs	r3, #1
 8014224:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8014226:	f3bf 8f5b 	dmb	ish
 801422a:	e850 2f00 	ldrex	r2, [r0]
 801422e:	431a      	orrs	r2, r3
 8014230:	e840 2100 	strex	r1, r2, [r0]
 8014234:	2900      	cmp	r1, #0
 8014236:	d1f8      	bne.n	801422a <atomic_set_bit+0x8>
 8014238:	f3bf 8f5b 	dmb	ish
}
 801423c:	4770      	bx	lr

0801423e <cf_write>:
{
 801423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014242:	461d      	mov	r5, r3
 8014244:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
 8014248:	2b01      	cmp	r3, #1
{
 801424a:	4607      	mov	r7, r0
 801424c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
 801424e:	d835      	bhi.n	80142bc <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
 8014250:	442b      	add	r3, r5
 8014252:	2b01      	cmp	r3, #1
 8014254:	462e      	mov	r6, r5
 8014256:	dc34      	bgt.n	80142c2 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
 8014258:	f7f5 f83e 	bl	80092d8 <find_cf_cfg>
	if (!cfg) {
 801425c:	4604      	mov	r4, r0
 801425e:	b938      	cbnz	r0, 8014270 <cf_write+0x32>
		cfg = find_cf_cfg(NULL);
 8014260:	f7f5 f83a 	bl	80092d8 <find_cf_cfg>
	if (!cfg) {
 8014264:	4604      	mov	r4, r0
 8014266:	b918      	cbnz	r0, 8014270 <cf_write+0x32>
}
 8014268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801426c:	f7f4 bffe 	b.w	800926c <cf_write.part.0>
{
 8014270:	2300      	movs	r3, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
 8014272:	b97d      	cbnz	r5, 8014294 <cf_write+0x56>
 8014274:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8014278:	2207      	movs	r2, #7
 801427a:	1c60      	adds	r0, r4, #1
 801427c:	f7fe fe06 	bl	8012e8c <memcpy>
	cfg->id = conn->id;
 8014280:	4620      	mov	r0, r4
 8014282:	7a3b      	ldrb	r3, [r7, #8]
 8014284:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 8014288:	2100      	movs	r1, #0
 801428a:	f7ff ffca 	bl	8014222 <atomic_set_bit>
}
 801428e:	4630      	mov	r0, r6
 8014290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
 8014294:	7a21      	ldrb	r1, [r4, #8]
 8014296:	fa21 f203 	lsr.w	r2, r1, r3
 801429a:	07d0      	lsls	r0, r2, #31
 801429c:	d504      	bpl.n	80142a8 <cf_write+0x6a>
		    !(value[i / 8] & BIT(i % 8))) {
 801429e:	f898 2000 	ldrb.w	r2, [r8]
 80142a2:	40da      	lsrs	r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
 80142a4:	07d2      	lsls	r2, r2, #31
 80142a6:	d50f      	bpl.n	80142c8 <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
 80142a8:	3301      	adds	r3, #1
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d1e1      	bne.n	8014272 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
 80142ae:	f898 3000 	ldrb.w	r3, [r8]
 80142b2:	f003 0307 	and.w	r3, r3, #7
 80142b6:	4319      	orrs	r1, r3
 80142b8:	7221      	strb	r1, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
 80142ba:	e7db      	b.n	8014274 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80142bc:	f06f 0606 	mvn.w	r6, #6
 80142c0:	e7e5      	b.n	801428e <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 80142c2:	f06f 060c 	mvn.w	r6, #12
 80142c6:	e7e2      	b.n	801428e <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
 80142c8:	f06f 0612 	mvn.w	r6, #18
 80142cc:	e7df      	b.n	801428e <cf_write+0x50>

080142ce <sc_restore_rsp>:
{
 80142ce:	b538      	push	{r3, r4, r5, lr}
 80142d0:	4605      	mov	r5, r0
 80142d2:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
 80142d4:	f7f5 f800 	bl	80092d8 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
 80142d8:	b130      	cbz	r0, 80142e8 <sc_restore_rsp+0x1a>
 80142da:	7a03      	ldrb	r3, [r0, #8]
 80142dc:	07db      	lsls	r3, r3, #31
 80142de:	d503      	bpl.n	80142e8 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
 80142e0:	2100      	movs	r1, #0
 80142e2:	300c      	adds	r0, #12
 80142e4:	f7ff ff9d 	bl	8014222 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
 80142e8:	b964      	cbnz	r4, 8014304 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
 80142ea:	7a28      	ldrb	r0, [r5, #8]
 80142ec:	f105 0190 	add.w	r1, r5, #144	; 0x90
 80142f0:	f7f4 ffd0 	bl	8009294 <find_sc_cfg>
		if (sc_cfg) {
 80142f4:	b130      	cbz	r0, 8014304 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
 80142f6:	4621      	mov	r1, r4
 80142f8:	2204      	movs	r2, #4
}
 80142fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
 80142fe:	3008      	adds	r0, #8
 8014300:	f7fe bdcf 	b.w	8012ea2 <memset>
}
 8014304:	bd38      	pop	{r3, r4, r5, pc}

08014306 <find_ccc_cfg>:
{
 8014306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014308:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801430a:	1c4c      	adds	r4, r1, #1
 801430c:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
 8014310:	1e67      	subs	r7, r4, #1
		if (conn) {
 8014312:	b14e      	cbz	r6, 8014328 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
 8014314:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8014318:	4622      	mov	r2, r4
 801431a:	4630      	mov	r0, r6
 801431c:	f7ff fa25 	bl	801376a <bt_conn_is_peer_addr_le>
 8014320:	b160      	cbz	r0, 801433c <find_ccc_cfg+0x36>
}
 8014322:	4638      	mov	r0, r7
 8014324:	b003      	add	sp, #12
 8014326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
 8014328:	2207      	movs	r2, #7
 801432a:	4669      	mov	r1, sp
 801432c:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
 801432e:	9600      	str	r6, [sp, #0]
 8014330:	f8cd 6003 	str.w	r6, [sp, #3]
 8014334:	f7fe fd9a 	bl	8012e6c <memcmp>
 8014338:	2800      	cmp	r0, #0
 801433a:	d0f2      	beq.n	8014322 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
 801433c:	340a      	adds	r4, #10
 801433e:	42ac      	cmp	r4, r5
 8014340:	d1e6      	bne.n	8014310 <find_ccc_cfg+0xa>
	return NULL;
 8014342:	2700      	movs	r7, #0
 8014344:	e7ed      	b.n	8014322 <find_ccc_cfg+0x1c>

08014346 <read_appearance>:
{
 8014346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014348:	4615      	mov	r5, r2
 801434a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801434e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
 8014350:	f7fe ff6c 	bl	801322c <bt_get_appearance>
	if (offset > value_len) {
 8014354:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
 8014356:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
 801435a:	d80e      	bhi.n	801437a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
 801435c:	f1c6 0402 	rsb	r4, r6, #2
 8014360:	42bc      	cmp	r4, r7
 8014362:	bfa8      	it	ge
 8014364:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
 8014366:	f10d 0306 	add.w	r3, sp, #6
 801436a:	4622      	mov	r2, r4
 801436c:	1999      	adds	r1, r3, r6
 801436e:	4628      	mov	r0, r5
 8014370:	f7fe fd8c 	bl	8012e8c <memcpy>
}
 8014374:	4620      	mov	r0, r4
 8014376:	b003      	add	sp, #12
 8014378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 801437a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
 801437e:	e7f9      	b.n	8014374 <read_appearance+0x2e>

08014380 <read_name>:
{
 8014380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014384:	4698      	mov	r8, r3
 8014386:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801438a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
 801438c:	f7f1 fcce 	bl	8005d2c <bt_get_name>
 8014390:	4607      	mov	r7, r0
				 strlen(name));
 8014392:	f7fe fd4f 	bl	8012e34 <strlen>
	if (offset > value_len) {
 8014396:	b283      	uxth	r3, r0
 8014398:	42b3      	cmp	r3, r6
 801439a:	d30c      	bcc.n	80143b6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
 801439c:	1b9c      	subs	r4, r3, r6
 801439e:	4544      	cmp	r4, r8
 80143a0:	bfa8      	it	ge
 80143a2:	4644      	movge	r4, r8
 80143a4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
 80143a6:	4622      	mov	r2, r4
 80143a8:	19b9      	adds	r1, r7, r6
 80143aa:	4628      	mov	r0, r5
 80143ac:	f7fe fd6e 	bl	8012e8c <memcpy>
}
 80143b0:	4620      	mov	r0, r4
 80143b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80143b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
 80143ba:	e7f9      	b.n	80143b0 <read_name+0x30>

080143bc <cf_read>:
{
 80143bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143be:	461f      	mov	r7, r3
	uint8_t data[1] = {};
 80143c0:	2300      	movs	r3, #0
{
 80143c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
 80143c6:	f88d 3004 	strb.w	r3, [sp, #4]
{
 80143ca:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
 80143cc:	f7f4 ff84 	bl	80092d8 <find_cf_cfg>
	if (cfg) {
 80143d0:	b128      	cbz	r0, 80143de <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
 80143d2:	f100 0108 	add.w	r1, r0, #8
 80143d6:	2201      	movs	r2, #1
 80143d8:	a801      	add	r0, sp, #4
 80143da:	f7fe fd57 	bl	8012e8c <memcpy>
	if (offset > value_len) {
 80143de:	2e01      	cmp	r6, #1
 80143e0:	d80d      	bhi.n	80143fe <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
 80143e2:	f1c6 0401 	rsb	r4, r6, #1
 80143e6:	42bc      	cmp	r4, r7
 80143e8:	bfa8      	it	ge
 80143ea:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
 80143ec:	ab01      	add	r3, sp, #4
 80143ee:	4622      	mov	r2, r4
 80143f0:	1999      	adds	r1, r3, r6
 80143f2:	4628      	mov	r0, r5
 80143f4:	f7fe fd4a 	bl	8012e8c <memcpy>
}
 80143f8:	4620      	mov	r0, r4
 80143fa:	b003      	add	sp, #12
 80143fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80143fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
 8014402:	e7f9      	b.n	80143f8 <cf_read+0x3c>

08014404 <bt_gatt_attr_read_ccc>:
{
 8014404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
 8014406:	68c9      	ldr	r1, [r1, #12]
{
 8014408:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801440c:	4615      	mov	r5, r2
 801440e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
 8014410:	f7ff ff79 	bl	8014306 <find_ccc_cfg>
	if (cfg) {
 8014414:	b100      	cbz	r0, 8014418 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
 8014416:	8900      	ldrh	r0, [r0, #8]
 8014418:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
 801441c:	2e02      	cmp	r6, #2
 801441e:	d80e      	bhi.n	801443e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
 8014420:	f1c6 0402 	rsb	r4, r6, #2
 8014424:	42bc      	cmp	r4, r7
 8014426:	bfa8      	it	ge
 8014428:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
 801442a:	f10d 0306 	add.w	r3, sp, #6
 801442e:	4622      	mov	r2, r4
 8014430:	1999      	adds	r1, r3, r6
 8014432:	4628      	mov	r0, r5
 8014434:	f7fe fd2a 	bl	8012e8c <memcpy>
}
 8014438:	4620      	mov	r0, r4
 801443a:	b003      	add	sp, #12
 801443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 801443e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 8014442:	e7f9      	b.n	8014438 <bt_gatt_attr_read_ccc+0x34>

08014444 <bt_gatt_attr_read_service>:
{
 8014444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
 8014446:	68c9      	ldr	r1, [r1, #12]
{
 8014448:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801444c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
 801444e:	780b      	ldrb	r3, [r1, #0]
{
 8014450:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
 8014452:	b993      	cbnz	r3, 801447a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
 8014454:	884b      	ldrh	r3, [r1, #2]
 8014456:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
 801445a:	2d02      	cmp	r5, #2
 801445c:	d819      	bhi.n	8014492 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
 801445e:	f1c5 0202 	rsb	r2, r5, #2
 8014462:	4294      	cmp	r4, r2
 8014464:	bfa8      	it	ge
 8014466:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
 8014468:	f10d 0306 	add.w	r3, sp, #6
 801446c:	4622      	mov	r2, r4
 801446e:	1959      	adds	r1, r3, r5
 8014470:	f7fe fd0c 	bl	8012e8c <memcpy>
}
 8014474:	4620      	mov	r0, r4
 8014476:	b003      	add	sp, #12
 8014478:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
 801447a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
 801447c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
 8014480:	d807      	bhi.n	8014492 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
 8014482:	f1c5 0210 	rsb	r2, r5, #16
 8014486:	4294      	cmp	r4, r2
 8014488:	bfa8      	it	ge
 801448a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
 801448c:	4622      	mov	r2, r4
 801448e:	4429      	add	r1, r5
 8014490:	e7ee      	b.n	8014470 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8014492:	f06f 0406 	mvn.w	r4, #6
 8014496:	e7ed      	b.n	8014474 <bt_gatt_attr_read_service+0x30>

08014498 <sc_save>:
{
 8014498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801449c:	4680      	mov	r8, r0
 801449e:	460f      	mov	r7, r1
 80144a0:	4616      	mov	r6, r2
 80144a2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
 80144a4:	f7f4 fef6 	bl	8009294 <find_sc_cfg>
	if (!cfg) {
 80144a8:	4604      	mov	r4, r0
 80144aa:	b990      	cbnz	r0, 80144d2 <sc_save+0x3a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
 80144ac:	4669      	mov	r1, sp
 80144ae:	9000      	str	r0, [sp, #0]
 80144b0:	f8cd 0003 	str.w	r0, [sp, #3]
 80144b4:	f7f4 feee 	bl	8009294 <find_sc_cfg>
		if (!cfg) {
 80144b8:	4604      	mov	r4, r0
 80144ba:	b920      	cbnz	r0, 80144c6 <sc_save+0x2e>
 80144bc:	f7f4 fec4 	bl	8009248 <sc_save.part.0>
}
 80144c0:	b002      	add	sp, #8
 80144c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
 80144c6:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(dst, src, sizeof(*dst));
 80144ca:	2207      	movs	r2, #7
 80144cc:	4639      	mov	r1, r7
 80144ce:	f7fe fcdd 	bl	8012e8c <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
 80144d2:	8922      	ldrh	r2, [r4, #8]
 80144d4:	8963      	ldrh	r3, [r4, #10]
 80144d6:	b91a      	cbnz	r2, 80144e0 <sc_save+0x48>
 80144d8:	b923      	cbnz	r3, 80144e4 <sc_save+0x4c>
		cfg->data.start = start;
 80144da:	8126      	strh	r6, [r4, #8]
		*end = new_end;
 80144dc:	8165      	strh	r5, [r4, #10]
 80144de:	e7ef      	b.n	80144c0 <sc_save+0x28>
	if (new_start >= *start && new_end <= *end) {
 80144e0:	4296      	cmp	r6, r2
 80144e2:	d302      	bcc.n	80144ea <sc_save+0x52>
 80144e4:	429d      	cmp	r5, r3
 80144e6:	d9eb      	bls.n	80144c0 <sc_save+0x28>
 80144e8:	e7f8      	b.n	80144dc <sc_save+0x44>
		*start = new_start;
 80144ea:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
 80144ec:	e7fa      	b.n	80144e4 <sc_save+0x4c>

080144ee <sc_clear>:
{
 80144ee:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80144f0:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
 80144f4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
 80144f6:	4631      	mov	r1, r6
 80144f8:	7a00      	ldrb	r0, [r0, #8]
 80144fa:	f7fe fe9a 	bl	8013232 <bt_addr_le_is_bonded>
 80144fe:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
 8014500:	4631      	mov	r1, r6
 8014502:	f7f4 fec7 	bl	8009294 <find_sc_cfg>
	if (!cfg) {
 8014506:	b128      	cbz	r0, 8014514 <sc_clear+0x26>
}
 8014508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
 801450c:	220c      	movs	r2, #12
 801450e:	2100      	movs	r1, #0
 8014510:	f7fe bcc7 	b.w	8012ea2 <memset>
}
 8014514:	bd70      	pop	{r4, r5, r6, pc}

08014516 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
 8014516:	2a02      	cmp	r2, #2
{
 8014518:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
 801451a:	d108      	bne.n	801452e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
 801451c:	2300      	movs	r3, #0
 801451e:	f100 0190 	add.w	r1, r0, #144	; 0x90
 8014522:	461a      	mov	r2, r3
 8014524:	7a00      	ldrb	r0, [r0, #8]
 8014526:	f7ff ffb7 	bl	8014498 <sc_save>
}
 801452a:	2002      	movs	r0, #2
 801452c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
 801452e:	f7ff ffde 	bl	80144ee <sc_clear>
 8014532:	e7fa      	b.n	801452a <sc_ccc_cfg_write+0x14>

08014534 <bt_gatt_attr_read>:
{
 8014534:	b538      	push	{r3, r4, r5, lr}
 8014536:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801453a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
 801453e:	42a9      	cmp	r1, r5
{
 8014540:	4610      	mov	r0, r2
	if (offset > value_len) {
 8014542:	d80b      	bhi.n	801455c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
 8014544:	1a6d      	subs	r5, r5, r1
 8014546:	429d      	cmp	r5, r3
 8014548:	bfa8      	it	ge
 801454a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
 801454c:	9b05      	ldr	r3, [sp, #20]
 801454e:	b2ad      	uxth	r5, r5
 8014550:	462a      	mov	r2, r5
 8014552:	4419      	add	r1, r3
 8014554:	f7fe fc9a 	bl	8012e8c <memcpy>
}
 8014558:	4628      	mov	r0, r5
 801455a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 801455c:	f06f 0506 	mvn.w	r5, #6
 8014560:	e7fa      	b.n	8014558 <bt_gatt_attr_read+0x24>

08014562 <bt_gatt_attr_value_handle>:
{
 8014562:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
 8014564:	4604      	mov	r4, r0
 8014566:	b910      	cbnz	r0, 801456e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
 8014568:	2000      	movs	r0, #0
}
 801456a:	b002      	add	sp, #8
 801456c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
 801456e:	2300      	movs	r3, #0
 8014570:	f88d 3004 	strb.w	r3, [sp, #4]
 8014574:	6800      	ldr	r0, [r0, #0]
 8014576:	f642 0303 	movw	r3, #10243	; 0x2803
 801457a:	a901      	add	r1, sp, #4
 801457c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014580:	f7fe fcc1 	bl	8012f06 <bt_uuid_cmp>
 8014584:	2800      	cmp	r0, #0
 8014586:	d1ef      	bne.n	8014568 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
 8014588:	68e3      	ldr	r3, [r4, #12]
 801458a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
 801458c:	2800      	cmp	r0, #0
 801458e:	d1ec      	bne.n	801456a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
 8014590:	4620      	mov	r0, r4
 8014592:	f7f5 f853 	bl	800963c <bt_gatt_attr_get_handle>
 8014596:	3001      	adds	r0, #1
 8014598:	b280      	uxth	r0, r0
	return handle;
 801459a:	e7e6      	b.n	801456a <bt_gatt_attr_value_handle+0x8>

0801459c <bt_gatt_attr_read_chrc>:
{
 801459c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
 801459e:	68cf      	ldr	r7, [r1, #12]
{
 80145a0:	b087      	sub	sp, #28
 80145a2:	4608      	mov	r0, r1
 80145a4:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
 80145a6:	79bb      	ldrb	r3, [r7, #6]
 80145a8:	f88d 3004 	strb.w	r3, [sp, #4]
{
 80145ac:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 80145b0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
 80145b2:	f7ff ffd6 	bl	8014562 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 80145b6:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
 80145b8:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 80145bc:	780b      	ldrb	r3, [r1, #0]
 80145be:	b99b      	cbnz	r3, 80145e8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
 80145c0:	884b      	ldrh	r3, [r1, #2]
 80145c2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
 80145c6:	2105      	movs	r1, #5
	if (offset > value_len) {
 80145c8:	42b1      	cmp	r1, r6
 80145ca:	d315      	bcc.n	80145f8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
 80145cc:	1b89      	subs	r1, r1, r6
 80145ce:	42a1      	cmp	r1, r4
 80145d0:	bfa8      	it	ge
 80145d2:	4621      	movge	r1, r4
 80145d4:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
 80145d6:	ab01      	add	r3, sp, #4
 80145d8:	4622      	mov	r2, r4
 80145da:	1999      	adds	r1, r3, r6
 80145dc:	4628      	mov	r0, r5
 80145de:	f7fe fc55 	bl	8012e8c <memcpy>
}
 80145e2:	4620      	mov	r0, r4
 80145e4:	b007      	add	sp, #28
 80145e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
 80145e8:	3101      	adds	r1, #1
 80145ea:	2210      	movs	r2, #16
 80145ec:	f10d 0007 	add.w	r0, sp, #7
 80145f0:	f7fe fc4c 	bl	8012e8c <memcpy>
		value_len += 16U;
 80145f4:	2113      	movs	r1, #19
 80145f6:	e7e7      	b.n	80145c8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80145f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
 80145fc:	e7f1      	b.n	80145e2 <bt_gatt_attr_read_chrc+0x46>

080145fe <bt_gatt_foreach_attr>:
{
 80145fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
 8014600:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8014604:	2300      	movs	r3, #0
 8014606:	9300      	str	r3, [sp, #0]
 8014608:	461a      	mov	r2, r3
 801460a:	f7f5 f863 	bl	80096d4 <bt_gatt_foreach_attr_type>
}
 801460e:	b005      	add	sp, #20
 8014610:	f85d fb04 	ldr.w	pc, [sp], #4

08014614 <db_hash_process>:
	db_hash_gen(true);
 8014614:	f7f5 b8d4 	b.w	80097c0 <db_hash_gen.isra.0>

08014618 <bt_gatt_attr_read_cud>:
{
 8014618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
 801461c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
 8014620:	f8bd 6018 	ldrh.w	r6, [sp, #24]
				 strlen(value));
 8014624:	4640      	mov	r0, r8
{
 8014626:	461f      	mov	r7, r3
 8014628:	4615      	mov	r5, r2
				 strlen(value));
 801462a:	f7fe fc03 	bl	8012e34 <strlen>
	if (offset > value_len) {
 801462e:	b283      	uxth	r3, r0
 8014630:	42b3      	cmp	r3, r6
 8014632:	d30d      	bcc.n	8014650 <bt_gatt_attr_read_cud+0x38>
	len = MIN(buf_len, value_len - offset);
 8014634:	1b9c      	subs	r4, r3, r6
 8014636:	42bc      	cmp	r4, r7
 8014638:	bfa8      	it	ge
 801463a:	463c      	movge	r4, r7
 801463c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
 801463e:	4622      	mov	r2, r4
 8014640:	eb08 0106 	add.w	r1, r8, r6
 8014644:	4628      	mov	r0, r5
 8014646:	f7fe fc21 	bl	8012e8c <memcpy>
}
 801464a:	4620      	mov	r0, r4
 801464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8014650:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
 8014654:	e7f9      	b.n	801464a <bt_gatt_attr_read_cud+0x32>

08014656 <bt_gatt_check_perm>:
{
 8014656:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
 8014658:	07d4      	lsls	r4, r2, #31
{
 801465a:	4605      	mov	r5, r0
 801465c:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
 801465e:	d504      	bpl.n	801466a <bt_gatt_check_perm+0x14>
 8014660:	f010 0f15 	tst.w	r0, #21
 8014664:	d01e      	beq.n	80146a4 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 8014666:	684b      	ldr	r3, [r1, #4]
 8014668:	b1e3      	cbz	r3, 80146a4 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
 801466a:	0793      	lsls	r3, r2, #30
 801466c:	d504      	bpl.n	8014678 <bt_gatt_check_perm+0x22>
 801466e:	f010 0f2a 	tst.w	r0, #42	; 0x2a
 8014672:	d019      	beq.n	80146a8 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 8014674:	688b      	ldr	r3, [r1, #8]
 8014676:	b1bb      	cbz	r3, 80146a8 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
 8014678:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
 801467c:	f014 0f30 	tst.w	r4, #48	; 0x30
 8014680:	d103      	bne.n	801468a <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
 8014682:	f014 000c 	ands.w	r0, r4, #12
 8014686:	d107      	bne.n	8014698 <bt_gatt_check_perm+0x42>
}
 8014688:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
 801468a:	4628      	mov	r0, r5
 801468c:	f7ff f86b 	bl	8013766 <bt_conn_get_security>
 8014690:	2802      	cmp	r0, #2
 8014692:	d8f6      	bhi.n	8014682 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
 8014694:	2005      	movs	r0, #5
 8014696:	e7f7      	b.n	8014688 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
 8014698:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
 801469a:	2b00      	cmp	r3, #0
 801469c:	bf14      	ite	ne
 801469e:	2000      	movne	r0, #0
 80146a0:	200f      	moveq	r0, #15
 80146a2:	e7f1      	b.n	8014688 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
 80146a4:	2002      	movs	r0, #2
 80146a6:	e7ef      	b.n	8014688 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
 80146a8:	2003      	movs	r0, #3
 80146aa:	e7ed      	b.n	8014688 <bt_gatt_check_perm+0x32>

080146ac <bt_gatt_change_aware>:
{
 80146ac:	b510      	push	{r4, lr}
 80146ae:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
 80146b0:	f7f4 fe12 	bl	80092d8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
 80146b4:	4603      	mov	r3, r0
 80146b6:	b910      	cbnz	r0, 80146be <bt_gatt_change_aware+0x12>
		return true;
 80146b8:	2401      	movs	r4, #1
}
 80146ba:	4620      	mov	r0, r4
 80146bc:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
 80146be:	7a02      	ldrb	r2, [r0, #8]
 80146c0:	07d2      	lsls	r2, r2, #31
 80146c2:	d5f9      	bpl.n	80146b8 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80146c4:	f3bf 8f5b 	dmb	ish
 80146c8:	68d9      	ldr	r1, [r3, #12]
 80146ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
 80146ce:	f011 0101 	ands.w	r1, r1, #1
 80146d2:	f100 000c 	add.w	r0, r0, #12
 80146d6:	d1ef      	bne.n	80146b8 <bt_gatt_change_aware+0xc>
	if (!req) {
 80146d8:	2c00      	cmp	r4, #0
 80146da:	d0ee      	beq.n	80146ba <bt_gatt_change_aware+0xe>
 80146dc:	f3bf 8f5b 	dmb	ish
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 80146e6:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
 80146ea:	079b      	lsls	r3, r3, #30
 80146ec:	d50e      	bpl.n	801470c <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80146ee:	f3bf 8f5b 	dmb	ish
 80146f2:	e850 3f00 	ldrex	r3, [r0]
 80146f6:	f023 0302 	bic.w	r3, r3, #2
 80146fa:	e840 3200 	strex	r2, r3, [r0]
 80146fe:	2a00      	cmp	r2, #0
 8014700:	d1f7      	bne.n	80146f2 <bt_gatt_change_aware+0x46>
 8014702:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
 8014706:	f7ff fd8c 	bl	8014222 <atomic_set_bit>
	return false;
 801470a:	e7d6      	b.n	80146ba <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
 801470c:	2101      	movs	r1, #1
 801470e:	e7fa      	b.n	8014706 <bt_gatt_change_aware+0x5a>

08014710 <smp_pairing_rsp>:
}
 8014710:	2007      	movs	r0, #7
 8014712:	4770      	bx	lr

08014714 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 8014714:	2301      	movs	r3, #1
 8014716:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8014718:	f3bf 8f5b 	dmb	ish
 801471c:	e850 2f00 	ldrex	r2, [r0]
 8014720:	431a      	orrs	r2, r3
 8014722:	e840 2100 	strex	r1, r2, [r0]
 8014726:	2900      	cmp	r1, #0
 8014728:	d1f8      	bne.n	801471c <atomic_set_bit+0x8>
 801472a:	f3bf 8f5b 	dmb	ish
}
 801472e:	4770      	bx	lr

08014730 <smp_keypress_notif>:
{
 8014730:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
 8014732:	210e      	movs	r1, #14
 8014734:	f7ff ffee 	bl	8014714 <atomic_set_bit>
}
 8014738:	2000      	movs	r0, #0
 801473a:	bd08      	pop	{r3, pc}

0801473c <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801473c:	f3bf 8f5b 	dmb	ish
 8014740:	6800      	ldr	r0, [r0, #0]
 8014742:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8014746:	4108      	asrs	r0, r1
}
 8014748:	f000 0001 	and.w	r0, r0, #1
 801474c:	4770      	bx	lr

0801474e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 801474e:	2301      	movs	r3, #1
 8014750:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8014752:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8014754:	f3bf 8f5b 	dmb	ish
 8014758:	e850 2f00 	ldrex	r2, [r0]
 801475c:	401a      	ands	r2, r3
 801475e:	e840 2100 	strex	r1, r2, [r0]
 8014762:	2900      	cmp	r1, #0
 8014764:	d1f8      	bne.n	8014758 <atomic_clear_bit+0xa>
 8014766:	f3bf 8f5b 	dmb	ish
}
 801476a:	4770      	bx	lr

0801476c <bt_smp_aes_cmac>:
{
 801476c:	b570      	push	{r4, r5, r6, lr}
 801476e:	b0c2      	sub	sp, #264	; 0x108
 8014770:	460d      	mov	r5, r1
 8014772:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 8014774:	4601      	mov	r1, r0
 8014776:	aa16      	add	r2, sp, #88	; 0x58
 8014778:	4668      	mov	r0, sp
{
 801477a:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 801477c:	f7fe f851 	bl	8012822 <tc_cmac_setup>
 8014780:	b150      	cbz	r0, 8014798 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
 8014782:	4632      	mov	r2, r6
 8014784:	4629      	mov	r1, r5
 8014786:	4668      	mov	r0, sp
 8014788:	f7fe f876 	bl	8012878 <tc_cmac_update>
 801478c:	b120      	cbz	r0, 8014798 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
 801478e:	4669      	mov	r1, sp
 8014790:	4620      	mov	r0, r4
 8014792:	f7fe f8dd 	bl	8012950 <tc_cmac_final>
 8014796:	b918      	cbnz	r0, 80147a0 <bt_smp_aes_cmac+0x34>
		return -EIO;
 8014798:	f06f 0004 	mvn.w	r0, #4
}
 801479c:	b042      	add	sp, #264	; 0x108
 801479e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80147a0:	2000      	movs	r0, #0
 80147a2:	e7fb      	b.n	801479c <bt_smp_aes_cmac+0x30>

080147a4 <update_keys_check>:
{
 80147a4:	b510      	push	{r4, lr}
 80147a6:	4603      	mov	r3, r0
	if (!keys ||
 80147a8:	b1d9      	cbz	r1, 80147e2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
 80147aa:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
 80147ac:	f010 0f24 	tst.w	r0, #36	; 0x24
 80147b0:	d017      	beq.n	80147e2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
 80147b2:	7d1a      	ldrb	r2, [r3, #20]
 80147b4:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
 80147b6:	7b09      	ldrb	r1, [r1, #12]
 80147b8:	42a2      	cmp	r2, r4
 80147ba:	bf28      	it	cs
 80147bc:	4622      	movcs	r2, r4
 80147be:	4291      	cmp	r1, r2
 80147c0:	d901      	bls.n	80147c6 <update_keys_check+0x22>
		return false;
 80147c2:	2000      	movs	r0, #0
}
 80147c4:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
 80147c6:	0682      	lsls	r2, r0, #26
 80147c8:	d404      	bmi.n	80147d4 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
 80147ca:	7a18      	ldrb	r0, [r3, #8]
 80147cc:	3800      	subs	r0, #0
 80147ce:	bf18      	it	ne
 80147d0:	2001      	movne	r0, #1
 80147d2:	e7f7      	b.n	80147c4 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
 80147d4:	2105      	movs	r1, #5
 80147d6:	1d18      	adds	r0, r3, #4
 80147d8:	f7ff ffb0 	bl	801473c <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
 80147dc:	2800      	cmp	r0, #0
 80147de:	d1f4      	bne.n	80147ca <update_keys_check+0x26>
 80147e0:	e7ef      	b.n	80147c2 <update_keys_check+0x1e>
		return true;
 80147e2:	2001      	movs	r0, #1
 80147e4:	e7ee      	b.n	80147c4 <update_keys_check+0x20>

080147e6 <smp_send_pairing_random>:
{
 80147e6:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
 80147e8:	2104      	movs	r1, #4
{
 80147ea:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
 80147ec:	f7f5 fce8 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
 80147f0:	4604      	mov	r4, r0
 80147f2:	b178      	cbz	r0, 8014814 <smp_send_pairing_random+0x2e>
 80147f4:	2110      	movs	r1, #16
 80147f6:	3008      	adds	r0, #8
 80147f8:	f7f7 fcc0 	bl	800c17c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
 80147fc:	2210      	movs	r2, #16
 80147fe:	f105 0127 	add.w	r1, r5, #39	; 0x27
 8014802:	f7fe fb43 	bl	8012e8c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 8014806:	4628      	mov	r0, r5
 8014808:	2200      	movs	r2, #0
 801480a:	4621      	mov	r1, r4
 801480c:	f7f5 fcf8 	bl	800a200 <smp_send.isra.0>
	return 0;
 8014810:	2000      	movs	r0, #0
}
 8014812:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8014814:	2008      	movs	r0, #8
 8014816:	e7fc      	b.n	8014812 <smp_send_pairing_random+0x2c>

08014818 <send_pairing_rsp>:
{
 8014818:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
 801481a:	2102      	movs	r1, #2
{
 801481c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
 801481e:	f7f5 fccf 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
 8014822:	4604      	mov	r4, r0
 8014824:	b178      	cbz	r0, 8014846 <send_pairing_rsp+0x2e>
 8014826:	2106      	movs	r1, #6
 8014828:	3008      	adds	r0, #8
 801482a:	f7f7 fca7 	bl	800c17c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
 801482e:	2206      	movs	r2, #6
 8014830:	f105 0111 	add.w	r1, r5, #17
 8014834:	f7fe fb2a 	bl	8012e8c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
 8014838:	4628      	mov	r0, r5
 801483a:	2200      	movs	r2, #0
 801483c:	4621      	mov	r1, r4
 801483e:	f7f5 fcdf 	bl	800a200 <smp_send.isra.0>
	return 0;
 8014842:	2000      	movs	r0, #0
}
 8014844:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
 8014846:	2008      	movs	r0, #8
 8014848:	e7fc      	b.n	8014844 <send_pairing_rsp+0x2c>

0801484a <smp_security_request>:
 801484a:	2007      	movs	r0, #7
 801484c:	4770      	bx	lr

0801484e <z_log_msg2_static_create.constprop.0>:
 801484e:	2300      	movs	r3, #0
 8014850:	f7ee bb84 	b.w	8002f5c <z_impl_z_log_msg2_static_create>

08014854 <smp_chan_get>:
{
 8014854:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
 8014856:	2106      	movs	r1, #6
 8014858:	f7ff f874 	bl	8013944 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 801485c:	b918      	cbnz	r0, 8014866 <smp_chan_get+0x12>
}
 801485e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014862:	f7f5 bf8d 	b.w	800a780 <smp_chan_get.part.0>
 8014866:	38f0      	subs	r0, #240	; 0xf0
 8014868:	bd08      	pop	{r3, pc}

0801486a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
 801486a:	b510      	push	{r4, lr}
 801486c:	1e43      	subs	r3, r0, #1
 801486e:	f100 0210 	add.w	r2, r0, #16
 8014872:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
 8014874:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
 8014878:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 801487c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
 801487e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
 8014880:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
 8014882:	d1f7      	bne.n	8014874 <sys_mem_swap.constprop.0+0xa>
	}
}
 8014884:	bd10      	pop	{r4, pc}

08014886 <smp_f6>:
{
 8014886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014888:	b097      	sub	sp, #92	; 0x5c
 801488a:	4605      	mov	r5, r0
 801488c:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
 801488e:	a805      	add	r0, sp, #20
 8014890:	2210      	movs	r2, #16
{
 8014892:	461c      	mov	r4, r3
 8014894:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
 8014896:	f7f5 fc39 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
 801489a:	2210      	movs	r2, #16
 801489c:	4631      	mov	r1, r6
 801489e:	a809      	add	r0, sp, #36	; 0x24
 80148a0:	f7f5 fc34 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
 80148a4:	4621      	mov	r1, r4
 80148a6:	2210      	movs	r2, #16
 80148a8:	a80d      	add	r0, sp, #52	; 0x34
 80148aa:	f7f5 fc2f 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
 80148ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80148b0:	2203      	movs	r2, #3
 80148b2:	a811      	add	r0, sp, #68	; 0x44
 80148b4:	f7f5 fc2a 	bl	800a10c <sys_memcpy_swap>
	m[51] = a1->type;
 80148b8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80148ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80148be:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
 80148c2:	4621      	mov	r1, r4
 80148c4:	2206      	movs	r2, #6
 80148c6:	a812      	add	r0, sp, #72	; 0x48
 80148c8:	f7fe fae0 	bl	8012e8c <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
 80148cc:	4621      	mov	r1, r4
 80148ce:	2206      	movs	r2, #6
 80148d0:	a812      	add	r0, sp, #72	; 0x48
 80148d2:	f7f5 fc1b 	bl	800a10c <sys_memcpy_swap>
	m[58] = a2->type;
 80148d6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80148d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80148dc:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
 80148e0:	4621      	mov	r1, r4
 80148e2:	2206      	movs	r2, #6
 80148e4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 80148e8:	f7fe fad0 	bl	8012e8c <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
 80148ec:	4621      	mov	r1, r4
 80148ee:	2206      	movs	r2, #6
 80148f0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 80148f4:	f7f5 fc0a 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
 80148f8:	2210      	movs	r2, #16
 80148fa:	4629      	mov	r1, r5
 80148fc:	a801      	add	r0, sp, #4
 80148fe:	f7f5 fc05 	bl	800a10c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
 8014902:	463b      	mov	r3, r7
 8014904:	2241      	movs	r2, #65	; 0x41
 8014906:	a905      	add	r1, sp, #20
 8014908:	a801      	add	r0, sp, #4
 801490a:	f7ff ff2f 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 801490e:	4604      	mov	r4, r0
 8014910:	b910      	cbnz	r0, 8014918 <smp_f6+0x92>
	sys_mem_swap(check, 16);
 8014912:	4638      	mov	r0, r7
 8014914:	f7ff ffa9 	bl	801486a <sys_mem_swap.constprop.0>
}
 8014918:	4620      	mov	r0, r4
 801491a:	b017      	add	sp, #92	; 0x5c
 801491c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801491e <smp_dhkey_check>:
{
 801491e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
 8014920:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 8014924:	78db      	ldrb	r3, [r3, #3]
 8014926:	2b01      	cmp	r3, #1
{
 8014928:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
 801492a:	d114      	bne.n	8014956 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
 801492c:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
 801492e:	1d05      	adds	r5, r0, #4
 8014930:	2110      	movs	r1, #16
 8014932:	4628      	mov	r0, r5
 8014934:	f7ff ff0b 	bl	801474e <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
 8014938:	4631      	mov	r1, r6
 801493a:	2210      	movs	r2, #16
 801493c:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
 8014940:	f7fe faa4 	bl	8012e8c <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
 8014944:	2107      	movs	r1, #7
 8014946:	4628      	mov	r0, r5
 8014948:	f7ff fef8 	bl	801473c <atomic_test_bit>
 801494c:	b128      	cbz	r0, 801495a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
 801494e:	2109      	movs	r1, #9
 8014950:	4628      	mov	r0, r5
 8014952:	f7ff fedf 	bl	8014714 <atomic_set_bit>
}
 8014956:	2000      	movs	r0, #0
 8014958:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 801495a:	210a      	movs	r1, #10
 801495c:	4628      	mov	r0, r5
 801495e:	f7ff feed 	bl	801473c <atomic_test_bit>
 8014962:	2800      	cmp	r0, #0
 8014964:	d1f3      	bne.n	801494e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
 8014966:	4620      	mov	r0, r4
}
 8014968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
 801496c:	f7f5 bf1c 	b.w	800a7a8 <compute_and_check_and_send_periph_dhcheck>

08014970 <smp_f4>:
{
 8014970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014972:	b097      	sub	sp, #92	; 0x5c
 8014974:	4614      	mov	r4, r2
 8014976:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
 8014978:	2220      	movs	r2, #32
 801497a:	4601      	mov	r1, r0
 801497c:	a805      	add	r0, sp, #20
{
 801497e:	461d      	mov	r5, r3
 8014980:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
 8014982:	f7f5 fbc3 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
 8014986:	2220      	movs	r2, #32
 8014988:	4631      	mov	r1, r6
 801498a:	a80d      	add	r0, sp, #52	; 0x34
 801498c:	f7f5 fbbe 	bl	800a10c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
 8014990:	4621      	mov	r1, r4
 8014992:	2210      	movs	r2, #16
 8014994:	a801      	add	r0, sp, #4
	m[64] = z;
 8014996:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
 801499a:	f7f5 fbb7 	bl	800a10c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
 801499e:	463b      	mov	r3, r7
 80149a0:	2241      	movs	r2, #65	; 0x41
 80149a2:	a905      	add	r1, sp, #20
 80149a4:	a801      	add	r0, sp, #4
 80149a6:	f7ff fee1 	bl	801476c <bt_smp_aes_cmac>
	if (err) {
 80149aa:	4604      	mov	r4, r0
 80149ac:	b910      	cbnz	r0, 80149b4 <smp_f4+0x44>
	sys_mem_swap(res, 16);
 80149ae:	4638      	mov	r0, r7
 80149b0:	f7ff ff5b 	bl	801486a <sys_mem_swap.constprop.0>
}
 80149b4:	4620      	mov	r0, r4
 80149b6:	b017      	add	sp, #92	; 0x5c
 80149b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149ba <smp_signing_info>:
 80149ba:	2007      	movs	r0, #7
 80149bc:	4770      	bx	lr

080149be <atomic_test_and_clear_bit>:
{
 80149be:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
 80149c0:	2301      	movs	r3, #1
 80149c2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80149c6:	43ca      	mvns	r2, r1
 80149c8:	f3bf 8f5b 	dmb	ish
 80149cc:	e850 3f00 	ldrex	r3, [r0]
 80149d0:	ea03 0c02 	and.w	ip, r3, r2
 80149d4:	e840 ce00 	strex	lr, ip, [r0]
 80149d8:	f1be 0f00 	cmp.w	lr, #0
 80149dc:	d1f6      	bne.n	80149cc <atomic_test_and_clear_bit+0xe>
 80149de:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
 80149e2:	420b      	tst	r3, r1
}
 80149e4:	bf14      	ite	ne
 80149e6:	2001      	movne	r0, #1
 80149e8:	2000      	moveq	r0, #0
 80149ea:	f85d fb04 	ldr.w	pc, [sp], #4

080149ee <smp_reset>:
{
 80149ee:	b538      	push	{r3, r4, r5, lr}
 80149f0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80149f2:	1d03      	adds	r3, r0, #4
 80149f4:	2500      	movs	r5, #0
 80149f6:	f3bf 8f5b 	dmb	ish
 80149fa:	e853 2f00 	ldrex	r2, [r3]
 80149fe:	e843 5100 	strex	r1, r5, [r3]
 8014a02:	2900      	cmp	r1, #0
 8014a04:	d1f9      	bne.n	80149fa <smp_reset+0xc>
 8014a06:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
 8014a0a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 8014a0e:	f7fa ff1f 	bl	800f850 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
 8014a12:	7225      	strb	r5, [r4, #8]
 8014a14:	f3bf 8f5b 	dmb	ish
 8014a18:	e854 3f00 	ldrex	r3, [r4]
 8014a1c:	e844 5200 	strex	r2, r5, [r4]
 8014a20:	2a00      	cmp	r2, #0
 8014a22:	d1f9      	bne.n	8014a18 <smp_reset+0x2a>
 8014a24:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
 8014a28:	4620      	mov	r0, r4
 8014a2a:	2101      	movs	r1, #1
}
 8014a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
 8014a30:	f7ff be70 	b.w	8014714 <atomic_set_bit>

08014a34 <smp_c1>:
{
 8014a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a38:	b089      	sub	sp, #36	; 0x24
 8014a3a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
 8014a3e:	4699      	mov	r9, r3
	p1[0] = ia->type;
 8014a40:	783b      	ldrb	r3, [r7, #0]
{
 8014a42:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
 8014a44:	f88d 3000 	strb.w	r3, [sp]
{
 8014a48:	460c      	mov	r4, r1
	p1[1] = ra->type;
 8014a4a:	f898 3000 	ldrb.w	r3, [r8]
 8014a4e:	f88d 3001 	strb.w	r3, [sp, #1]
{
 8014a52:	4611      	mov	r1, r2
 8014a54:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
 8014a56:	2207      	movs	r2, #7
 8014a58:	f10d 0002 	add.w	r0, sp, #2
 8014a5c:	f7fe fa16 	bl	8012e8c <memcpy>
	memcpy(p1 + 9, pres, 7);
 8014a60:	2207      	movs	r2, #7
 8014a62:	4649      	mov	r1, r9
 8014a64:	f10d 0009 	add.w	r0, sp, #9
 8014a68:	f7fe fa10 	bl	8012e8c <memcpy>
	while (len--) {
 8014a6c:	f104 0010 	add.w	r0, r4, #16
 8014a70:	4629      	mov	r1, r5
 8014a72:	466a      	mov	r2, sp
 8014a74:	4284      	cmp	r4, r0
 8014a76:	d127      	bne.n	8014ac8 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
 8014a78:	462a      	mov	r2, r5
 8014a7a:	4629      	mov	r1, r5
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f7fe fd7a 	bl	8013576 <bt_encrypt_le>
	if (err) {
 8014a82:	4604      	mov	r4, r0
 8014a84:	b9e0      	cbnz	r0, 8014ac0 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
 8014a86:	2206      	movs	r2, #6
 8014a88:	f108 0101 	add.w	r1, r8, #1
 8014a8c:	a804      	add	r0, sp, #16
 8014a8e:	f7fe f9fd 	bl	8012e8c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
 8014a92:	2206      	movs	r2, #6
 8014a94:	1c79      	adds	r1, r7, #1
 8014a96:	f10d 0016 	add.w	r0, sp, #22
 8014a9a:	f7fe f9f7 	bl	8012e8c <memcpy>
	(void)memset(p2 + 12, 0, 4);
 8014a9e:	2204      	movs	r2, #4
 8014aa0:	4621      	mov	r1, r4
 8014aa2:	a807      	add	r0, sp, #28
 8014aa4:	f7fe f9fd 	bl	8012ea2 <memset>
	while (len--) {
 8014aa8:	f105 0010 	add.w	r0, r5, #16
 8014aac:	462a      	mov	r2, r5
 8014aae:	ab04      	add	r3, sp, #16
 8014ab0:	4282      	cmp	r2, r0
 8014ab2:	d112      	bne.n	8014ada <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
 8014ab4:	462a      	mov	r2, r5
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f7fe fd5c 	bl	8013576 <bt_encrypt_le>
 8014abe:	4604      	mov	r4, r0
}
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	b009      	add	sp, #36	; 0x24
 8014ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
 8014ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014acc:	f812 cb01 	ldrb.w	ip, [r2], #1
 8014ad0:	ea83 030c 	eor.w	r3, r3, ip
 8014ad4:	f801 3b01 	strb.w	r3, [r1], #1
 8014ad8:	e7cc      	b.n	8014a74 <smp_c1+0x40>
 8014ada:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014ade:	f813 4b01 	ldrb.w	r4, [r3], #1
 8014ae2:	4061      	eors	r1, r4
 8014ae4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014ae8:	e7e2      	b.n	8014ab0 <smp_c1+0x7c>

08014aea <legacy_pairing_confirm>:
{
 8014aea:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 8014aec:	1d07      	adds	r7, r0, #4
{
 8014aee:	b085      	sub	sp, #20
 8014af0:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 8014af2:	210a      	movs	r1, #10
 8014af4:	4638      	mov	r0, r7
 8014af6:	f7ff fe21 	bl	801473c <atomic_test_bit>
 8014afa:	bb88      	cbnz	r0, 8014b60 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
 8014afc:	2104      	movs	r1, #4
 8014afe:	4628      	mov	r0, r5
 8014b00:	f7ff fe08 	bl	8014714 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
 8014b04:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
 8014b06:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
 8014b0a:	f7f5 fb59 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!buf) {
 8014b0e:	4606      	mov	r6, r0
 8014b10:	b1c0      	cbz	r0, 8014b44 <legacy_pairing_confirm+0x5a>
 8014b12:	2110      	movs	r1, #16
 8014b14:	3008      	adds	r0, #8
 8014b16:	f7f7 fb31 	bl	800c17c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
 8014b1a:	f104 039e 	add.w	r3, r4, #158	; 0x9e
 8014b1e:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
 8014b20:	9002      	str	r0, [sp, #8]
 8014b22:	9301      	str	r3, [sp, #4]
 8014b24:	9400      	str	r4, [sp, #0]
 8014b26:	f105 0310 	add.w	r3, r5, #16
 8014b2a:	f105 0209 	add.w	r2, r5, #9
 8014b2e:	f105 0127 	add.w	r1, r5, #39	; 0x27
 8014b32:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8014b36:	f7ff ff7d 	bl	8014a34 <smp_c1>
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	b120      	cbz	r0, 8014b48 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f7f7 f9ec 	bl	800bf1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
 8014b44:	2008      	movs	r0, #8
 8014b46:	e009      	b.n	8014b5c <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
 8014b48:	4602      	mov	r2, r0
 8014b4a:	4631      	mov	r1, r6
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	f7f5 fb57 	bl	800a200 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 8014b52:	4621      	mov	r1, r4
 8014b54:	4638      	mov	r0, r7
 8014b56:	f7ff fdfa 	bl	801474e <atomic_clear_bit>
	return 0;
 8014b5a:	2000      	movs	r0, #0
}
 8014b5c:	b005      	add	sp, #20
 8014b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
 8014b60:	2100      	movs	r1, #0
 8014b62:	4638      	mov	r0, r7
 8014b64:	f7ff fdd6 	bl	8014714 <atomic_set_bit>
 8014b68:	e7f7      	b.n	8014b5a <legacy_pairing_confirm+0x70>

08014b6a <bt_smp_request_ltk>:
{
 8014b6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b6e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014b72:	e9cd 2300 	strd	r2, r3, [sp]
 8014b76:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
 8014b78:	f7ff fe6c 	bl	8014854 <smp_chan_get>
	if (!smp) {
 8014b7c:	4605      	mov	r5, r0
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	f000 8090 	beq.w	8014ca4 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
 8014b84:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8014b88:	1d07      	adds	r7, r0, #4
 8014b8a:	f1b9 0f00 	cmp.w	r9, #0
 8014b8e:	d12a      	bne.n	8014be6 <bt_smp_request_ltk+0x7c>
 8014b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b94:	4313      	orrs	r3, r2
 8014b96:	d126      	bne.n	8014be6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 8014b98:	2103      	movs	r1, #3
 8014b9a:	4638      	mov	r0, r7
 8014b9c:	f7ff fdce 	bl	801473c <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
 8014ba0:	b308      	cbz	r0, 8014be6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	f7ff fdc9 	bl	801473c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
 8014baa:	4606      	mov	r6, r0
 8014bac:	b1d8      	cbz	r0, 8014be6 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
 8014bae:	7d2c      	ldrb	r4, [r5, #20]
 8014bb0:	7b6b      	ldrb	r3, [r5, #13]
 8014bb2:	429c      	cmp	r4, r3
 8014bb4:	bf28      	it	cs
 8014bb6:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
 8014bb8:	4622      	mov	r2, r4
 8014bba:	f105 0147 	add.w	r1, r5, #71	; 0x47
 8014bbe:	4640      	mov	r0, r8
 8014bc0:	f7fe f964 	bl	8012e8c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 8014bc4:	2c0f      	cmp	r4, #15
 8014bc6:	d806      	bhi.n	8014bd6 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
 8014bc8:	f1c4 0210 	rsb	r2, r4, #16
 8014bcc:	4649      	mov	r1, r9
 8014bce:	eb08 0004 	add.w	r0, r8, r4
 8014bd2:	f7fe f966 	bl	8012ea2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 8014bd6:	2101      	movs	r1, #1
 8014bd8:	4638      	mov	r0, r7
 8014bda:	f7ff fd9b 	bl	8014714 <atomic_set_bit>
}
 8014bde:	4630      	mov	r0, r6
 8014be0:	b003      	add	sp, #12
 8014be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
 8014be6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8014bea:	b983      	cbnz	r3, 8014c0e <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
 8014bec:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
 8014bf0:	7a21      	ldrb	r1, [r4, #8]
 8014bf2:	4632      	mov	r2, r6
 8014bf4:	2020      	movs	r0, #32
 8014bf6:	f7f6 ff2f 	bl	800ba58 <bt_keys_find>
 8014bfa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
 8014bfe:	b930      	cbnz	r0, 8014c0e <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
 8014c00:	7a21      	ldrb	r1, [r4, #8]
 8014c02:	4632      	mov	r2, r6
 8014c04:	2001      	movs	r0, #1
 8014c06:	f7f6 ff27 	bl	800ba58 <bt_keys_find>
 8014c0a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
 8014c0e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 8014c12:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8014c16:	b9ee      	cbnz	r6, 8014c54 <bt_smp_request_ltk+0xea>
 8014c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	d119      	bne.n	8014c54 <bt_smp_request_ltk+0xea>
 8014c20:	b388      	cbz	r0, 8014c86 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
 8014c22:	89c3      	ldrh	r3, [r0, #14]
 8014c24:	069a      	lsls	r2, r3, #26
 8014c26:	d516      	bpl.n	8014c56 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
 8014c28:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
 8014c2a:	f100 011a 	add.w	r1, r0, #26
 8014c2e:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
 8014c30:	4640      	mov	r0, r8
 8014c32:	f7fe f92b 	bl	8012e8c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
 8014c36:	2c0f      	cmp	r4, #15
 8014c38:	d806      	bhi.n	8014c48 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
 8014c3a:	f1c4 0210 	rsb	r2, r4, #16
 8014c3e:	4631      	mov	r1, r6
 8014c40:	eb08 0004 	add.w	r0, r8, r4
 8014c44:	f7fe f92d 	bl	8012ea2 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
 8014c48:	2101      	movs	r1, #1
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	f7ff fd62 	bl	8014714 <atomic_set_bit>
		return true;
 8014c50:	2601      	movs	r6, #1
 8014c52:	e7c4      	b.n	8014bde <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
 8014c54:	b1b8      	cbz	r0, 8014c86 <bt_smp_request_ltk+0x11c>
 8014c56:	89c3      	ldrh	r3, [r0, #14]
 8014c58:	07db      	lsls	r3, r3, #31
 8014c5a:	d514      	bpl.n	8014c86 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
 8014c5c:	2208      	movs	r2, #8
 8014c5e:	4669      	mov	r1, sp
 8014c60:	3040      	adds	r0, #64	; 0x40
 8014c62:	f7fe f903 	bl	8012e6c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
 8014c66:	b970      	cbnz	r0, 8014c86 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
 8014c68:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8014c6c:	2202      	movs	r2, #2
 8014c6e:	a90a      	add	r1, sp, #40	; 0x28
 8014c70:	3048      	adds	r0, #72	; 0x48
 8014c72:	f7fe f8fb 	bl	8012e6c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
 8014c76:	4606      	mov	r6, r0
 8014c78:	b928      	cbnz	r0, 8014c86 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
 8014c7a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8014c7e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
 8014c80:	314a      	adds	r1, #74	; 0x4a
 8014c82:	4622      	mov	r2, r4
 8014c84:	e7d4      	b.n	8014c30 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8014c86:	210f      	movs	r1, #15
 8014c88:	4638      	mov	r0, r7
 8014c8a:	f7ff fd57 	bl	801473c <atomic_test_bit>
 8014c8e:	b120      	cbz	r0, 8014c9a <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
 8014c90:	2202      	movs	r2, #2
 8014c92:	2106      	movs	r1, #6
 8014c94:	4620      	mov	r0, r4
 8014c96:	f7f2 fe0f 	bl	80078b8 <bt_conn_security_changed>
	smp_reset(smp);
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	f7ff fea7 	bl	80149ee <smp_reset>
	return false;
 8014ca0:	2600      	movs	r6, #0
 8014ca2:	e79c      	b.n	8014bde <bt_smp_request_ltk+0x74>
		return false;
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	e79a      	b.n	8014bde <bt_smp_request_ltk+0x74>

08014ca8 <bt_smp_sign>:
 8014ca8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8014cac:	4770      	bx	lr

08014cae <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014cae:	1d03      	adds	r3, r0, #4
{
 8014cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cb2:	4605      	mov	r5, r0
 8014cb4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	2103      	movs	r1, #3
 8014cba:	f7ff fd3f 	bl	801473c <atomic_test_bit>
 8014cbe:	b1f0      	cbz	r0, 8014cfe <smp_error+0x50>
		smp_pairing_complete(smp, reason);
 8014cc0:	4631      	mov	r1, r6
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f7f6 fa0e 	bl	800b0e4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
 8014cc8:	2105      	movs	r1, #5
 8014cca:	4628      	mov	r0, r5
 8014ccc:	f7f5 fa78 	bl	800a1c0 <smp_create_pdu.isra.0>
	if (!buf) {
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	b308      	cbz	r0, 8014d18 <smp_error+0x6a>
 8014cd4:	2101      	movs	r1, #1
 8014cd6:	3008      	adds	r0, #8
 8014cd8:	f7f7 fa50 	bl	800c17c <net_buf_simple_add>
	rsp->reason = reason;
 8014cdc:	7006      	strb	r6, [r0, #0]
 8014cde:	2600      	movs	r6, #0
 8014ce0:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
 8014ce4:	9600      	str	r6, [sp, #0]
 8014ce6:	4633      	mov	r3, r6
 8014ce8:	4622      	mov	r2, r4
 8014cea:	2106      	movs	r1, #6
 8014cec:	f7fe fe06 	bl	80138fc <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
 8014cf0:	b118      	cbz	r0, 8014cfa <smp_error+0x4c>
		net_buf_unref(buf);
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7f7 f912 	bl	800bf1c <net_buf_unref>
	return 0;
 8014cf8:	4630      	mov	r0, r6
}
 8014cfa:	b002      	add	sp, #8
 8014cfc:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
 8014cfe:	2101      	movs	r1, #1
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7ff fd1b 	bl	801473c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d1da      	bne.n	8014cc0 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8014d0a:	210f      	movs	r1, #15
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7ff fd15 	bl	801473c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
 8014d12:	2800      	cmp	r0, #0
 8014d14:	d1d4      	bne.n	8014cc0 <smp_error+0x12>
 8014d16:	e7d7      	b.n	8014cc8 <smp_error+0x1a>
		return -ENOBUFS;
 8014d18:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8014d1c:	e7ed      	b.n	8014cfa <smp_error+0x4c>

08014d1e <bt_smp_dhkey_ready>:
{
 8014d1e:	b570      	push	{r4, r5, r6, lr}
 8014d20:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
 8014d22:	2008      	movs	r0, #8
 8014d24:	f7f5 fa20 	bl	800a168 <smp_find>
	if (smp) {
 8014d28:	4604      	mov	r4, r0
 8014d2a:	b1b8      	cbz	r0, 8014d5c <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
 8014d2c:	1d05      	adds	r5, r0, #4
 8014d2e:	2108      	movs	r1, #8
 8014d30:	4628      	mov	r0, r5
 8014d32:	f7ff fd0c 	bl	801474e <atomic_clear_bit>
	if (!dhkey) {
 8014d36:	b38e      	cbz	r6, 8014d9c <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
 8014d38:	2107      	movs	r1, #7
 8014d3a:	f7ff fd08 	bl	801474e <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
 8014d3e:	4631      	mov	r1, r6
 8014d40:	2220      	movs	r2, #32
 8014d42:	f104 0097 	add.w	r0, r4, #151	; 0x97
 8014d46:	f7fe f8a1 	bl	8012e8c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
 8014d4a:	210a      	movs	r1, #10
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	f7ff fcf5 	bl	801473c <atomic_test_bit>
 8014d52:	b168      	cbz	r0, 8014d70 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
 8014d54:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
 8014d56:	4628      	mov	r0, r5
 8014d58:	f7ff fcdc 	bl	8014714 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
 8014d5c:	2007      	movs	r0, #7
 8014d5e:	f7f5 fa03 	bl	800a168 <smp_find>
		if (smp) {
 8014d62:	4604      	mov	r4, r0
 8014d64:	b118      	cbz	r0, 8014d6e <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
 8014d66:	f7f5 fcbd 	bl	800a6e4 <smp_dhkey_generate>
			if (err) {
 8014d6a:	4601      	mov	r1, r0
 8014d6c:	b990      	cbnz	r0, 8014d94 <bt_smp_dhkey_ready+0x76>
}
 8014d6e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
 8014d70:	2110      	movs	r1, #16
 8014d72:	4628      	mov	r0, r5
 8014d74:	f7ff fce2 	bl	801473c <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
 8014d78:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	d1eb      	bne.n	8014d56 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f7ff fcdc 	bl	801473c <atomic_test_bit>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d0e9      	beq.n	8014d5c <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f7f5 fd0d 	bl	800a7a8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
 8014d8e:	4601      	mov	r1, r0
 8014d90:	2800      	cmp	r0, #0
 8014d92:	d0e3      	beq.n	8014d5c <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
 8014d94:	4620      	mov	r0, r4
 8014d96:	f7ff ff8a 	bl	8014cae <smp_error>
 8014d9a:	e7df      	b.n	8014d5c <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
 8014d9c:	210b      	movs	r1, #11
 8014d9e:	e7f9      	b.n	8014d94 <bt_smp_dhkey_ready+0x76>

08014da0 <bt_smp_disconnected>:
{
 8014da0:	b570      	push	{r4, r5, r6, lr}
 8014da2:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
 8014da4:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
 8014da8:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014dac:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
 8014dae:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
 8014db2:	f7fa fd4d 	bl	800f850 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014db6:	2103      	movs	r1, #3
 8014db8:	4620      	mov	r0, r4
 8014dba:	f7ff fcbf 	bl	801473c <atomic_test_bit>
 8014dbe:	b1a0      	cbz	r0, 8014dea <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
 8014dc0:	2108      	movs	r1, #8
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	f7f6 f98e 	bl	800b0e4 <smp_pairing_complete>
	if (keys) {
 8014dc8:	b13d      	cbz	r5, 8014dda <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
 8014dca:	89eb      	ldrh	r3, [r5, #14]
 8014dcc:	b113      	cbz	r3, 8014dd4 <bt_smp_disconnected+0x34>
 8014dce:	7b6b      	ldrb	r3, [r5, #13]
 8014dd0:	079b      	lsls	r3, r3, #30
 8014dd2:	d502      	bpl.n	8014dda <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	f000 f829 	bl	8014e2c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f44f 7204 	mov.w	r2, #528	; 0x210
}
 8014de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
 8014de4:	2100      	movs	r1, #0
 8014de6:	f7fe b85c 	b.w	8012ea2 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
 8014dea:	2101      	movs	r1, #1
 8014dec:	4620      	mov	r0, r4
 8014dee:	f7ff fca5 	bl	801473c <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d1e4      	bne.n	8014dc0 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
 8014df6:	210f      	movs	r1, #15
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ff fc9f 	bl	801473c <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d1de      	bne.n	8014dc0 <bt_smp_disconnected+0x20>
 8014e02:	e7e1      	b.n	8014dc8 <bt_smp_disconnected+0x28>

08014e04 <bt_keys_get_type>:
{
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	4604      	mov	r4, r0
 8014e08:	460d      	mov	r5, r1
 8014e0a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
 8014e0c:	f7f6 fe24 	bl	800ba58 <bt_keys_find>
	if (keys) {
 8014e10:	b938      	cbnz	r0, 8014e22 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
 8014e12:	4631      	mov	r1, r6
 8014e14:	4628      	mov	r0, r5
 8014e16:	f7f6 fde9 	bl	800b9ec <bt_keys_get_addr>
	if (!keys) {
 8014e1a:	b110      	cbz	r0, 8014e22 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
 8014e1c:	89c3      	ldrh	r3, [r0, #14]
 8014e1e:	431c      	orrs	r4, r3
 8014e20:	81c4      	strh	r4, [r0, #14]
}
 8014e22:	bd70      	pop	{r4, r5, r6, pc}

08014e24 <bt_keys_add_type>:
	keys->keys |= type;
 8014e24:	89c3      	ldrh	r3, [r0, #14]
 8014e26:	4319      	orrs	r1, r3
 8014e28:	81c1      	strh	r1, [r0, #14]
}
 8014e2a:	4770      	bx	lr

08014e2c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
 8014e2c:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
 8014e2e:	7a03      	ldrb	r3, [r0, #8]
 8014e30:	075b      	lsls	r3, r3, #29
{
 8014e32:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
 8014e34:	d501      	bpl.n	8014e3a <bt_keys_clear+0xe>
		bt_id_del(keys);
 8014e36:	f7f1 f951 	bl	80060dc <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	225c      	movs	r2, #92	; 0x5c
}
 8014e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
 8014e42:	2100      	movs	r1, #0
 8014e44:	f7fe b82d 	b.w	8012ea2 <memset>

08014e48 <fixed_data_unref>:
}
 8014e48:	4770      	bx	lr

08014e4a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8014e4a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 8014e4c:	6849      	ldr	r1, [r1, #4]
 8014e4e:	6809      	ldr	r1, [r1, #0]
 8014e50:	f7f6 bebc 	b.w	800bbcc <net_buf_alloc_len>

08014e54 <net_buf_simple_push_u8>:
{
 8014e54:	b510      	push	{r4, lr}
 8014e56:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
 8014e58:	2101      	movs	r1, #1
 8014e5a:	f7f7 f92b 	bl	800c0b4 <net_buf_simple_push>
	*data = val;
 8014e5e:	7004      	strb	r4, [r0, #0]
}
 8014e60:	bd10      	pop	{r4, pc}

08014e62 <net_buf_simple_pull_le16>:
{
 8014e62:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
 8014e64:	6803      	ldr	r3, [r0, #0]
 8014e66:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8014e68:	2102      	movs	r1, #2
 8014e6a:	f7f7 f945 	bl	800c0f8 <net_buf_simple_pull>
}
 8014e6e:	4620      	mov	r0, r4
 8014e70:	bd10      	pop	{r4, pc}

08014e72 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
 8014e72:	6802      	ldr	r2, [r0, #0]
 8014e74:	6880      	ldr	r0, [r0, #8]
}
 8014e76:	1a10      	subs	r0, r2, r0
 8014e78:	4770      	bx	lr

08014e7a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8014e7a:	8883      	ldrh	r3, [r0, #4]
 8014e7c:	88c2      	ldrh	r2, [r0, #6]
 8014e7e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
 8014e80:	6803      	ldr	r3, [r0, #0]
 8014e82:	6880      	ldr	r0, [r0, #8]
 8014e84:	1a18      	subs	r0, r3, r0
}
 8014e86:	1a10      	subs	r0, r2, r0
 8014e88:	4770      	bx	lr

08014e8a <net_buf_simple_add_mem>:
{
 8014e8a:	b538      	push	{r3, r4, r5, lr}
 8014e8c:	460d      	mov	r5, r1
 8014e8e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
 8014e90:	4611      	mov	r1, r2
 8014e92:	f7f7 f973 	bl	800c17c <net_buf_simple_add>
 8014e96:	4622      	mov	r2, r4
 8014e98:	4629      	mov	r1, r5
}
 8014e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
 8014e9e:	f7fd bff5 	b.w	8012e8c <memcpy>

08014ea2 <net_buf_simple_add_u8>:
{
 8014ea2:	b510      	push	{r4, lr}
 8014ea4:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
 8014ea6:	2101      	movs	r1, #1
 8014ea8:	f7f7 f968 	bl	800c17c <net_buf_simple_add>
	*u8 = val;
 8014eac:	7004      	strb	r4, [r0, #0]
}
 8014eae:	bd10      	pop	{r4, pc}

08014eb0 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8014eb0:	6902      	ldr	r2, [r0, #16]
 8014eb2:	2101      	movs	r1, #1
 8014eb4:	2000      	movs	r0, #0
 8014eb6:	f7f7 b983 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014eba <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8014eba:	6902      	ldr	r2, [r0, #16]
 8014ebc:	2102      	movs	r1, #2
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	f7f7 b97e 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014ec4 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8014ec4:	6902      	ldr	r2, [r0, #16]
 8014ec6:	2103      	movs	r1, #3
 8014ec8:	2002      	movs	r0, #2
 8014eca:	f7f7 b979 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014ece <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8014ece:	6902      	ldr	r2, [r0, #16]
 8014ed0:	2104      	movs	r1, #4
 8014ed2:	2003      	movs	r0, #3
 8014ed4:	f7f7 b974 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014ed8 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8014ed8:	6902      	ldr	r2, [r0, #16]
 8014eda:	2105      	movs	r1, #5
 8014edc:	2004      	movs	r0, #4
 8014ede:	f7f7 b96f 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014ee2 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8014ee2:	6902      	ldr	r2, [r0, #16]
 8014ee4:	210a      	movs	r1, #10
 8014ee6:	2005      	movs	r0, #5
 8014ee8:	f7f7 b96a 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014eec <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8014eec:	6902      	ldr	r2, [r0, #16]
 8014eee:	2110      	movs	r1, #16
 8014ef0:	200a      	movs	r0, #10
 8014ef2:	f7f7 b965 	b.w	800c1c0 <__stm32_exti_isr.isra.0>

08014ef6 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8014ef6:	2200      	movs	r2, #0
{
 8014ef8:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8014efa:	4611      	mov	r1, r2
 8014efc:	2006      	movs	r0, #6
 8014efe:	f7ee fe6d 	bl	8003bdc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8014f02:	2200      	movs	r2, #0
 8014f04:	4611      	mov	r1, r2
 8014f06:	2007      	movs	r0, #7
 8014f08:	f7ee fe68 	bl	8003bdc <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	4611      	mov	r1, r2
 8014f10:	2008      	movs	r0, #8
 8014f12:	f7ee fe63 	bl	8003bdc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8014f16:	2200      	movs	r2, #0
 8014f18:	4611      	mov	r1, r2
 8014f1a:	2009      	movs	r0, #9
 8014f1c:	f7ee fe5e 	bl	8003bdc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8014f20:	2200      	movs	r2, #0
 8014f22:	4611      	mov	r1, r2
 8014f24:	200a      	movs	r0, #10
 8014f26:	f7ee fe59 	bl	8003bdc <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	4611      	mov	r1, r2
 8014f2e:	2017      	movs	r0, #23
 8014f30:	f7ee fe54 	bl	8003bdc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8014f34:	2200      	movs	r2, #0
 8014f36:	4611      	mov	r1, r2
 8014f38:	2028      	movs	r0, #40	; 0x28
 8014f3a:	f7ee fe4f 	bl	8003bdc <z_arm_irq_priority_set>
}
 8014f3e:	2000      	movs	r0, #0
 8014f40:	bd08      	pop	{r3, pc}

08014f42 <stm32_clock_control_on>:
	switch (pclken->bus) {
 8014f42:	680b      	ldr	r3, [r1, #0]
{
 8014f44:	b086      	sub	sp, #24
 8014f46:	2b06      	cmp	r3, #6
 8014f48:	d849      	bhi.n	8014fde <stm32_clock_control_on+0x9c>
 8014f4a:	e8df f003 	tbb	[pc, r3]
 8014f4e:	1104      	.short	0x1104
 8014f50:	48323d27 	.word	0x48323d27
 8014f54:	1c          	.byte	0x1c
 8014f55:	00          	.byte	0x00
  SET_BIT(RCC->AHB1ENR, Periphs);
 8014f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8014f5a:	684b      	ldr	r3, [r1, #4]
 8014f5c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8014f5e:	4319      	orrs	r1, r3
 8014f60:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8014f62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014f64:	4013      	ands	r3, r2
 8014f66:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8014f68:	9b00      	ldr	r3, [sp, #0]
	return 0;
 8014f6a:	2000      	movs	r0, #0
}
 8014f6c:	b006      	add	sp, #24
 8014f6e:	4770      	bx	lr
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8014f74:	684b      	ldr	r3, [r1, #4]
 8014f76:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8014f78:	4319      	orrs	r1, r3
 8014f7a:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014f7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8014f7e:	4013      	ands	r3, r2
 8014f80:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8014f82:	9b01      	ldr	r3, [sp, #4]
 8014f84:	e7f1      	b.n	8014f6a <stm32_clock_control_on+0x28>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8014f8a:	684b      	ldr	r3, [r1, #4]
 8014f8c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8014f8e:	4319      	orrs	r1, r3
 8014f90:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014f92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8014f94:	4013      	ands	r3, r2
 8014f96:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8014f98:	9b02      	ldr	r3, [sp, #8]
 8014f9a:	e7e6      	b.n	8014f6a <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8014fa0:	684b      	ldr	r3, [r1, #4]
 8014fa2:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8014fa4:	4319      	orrs	r1, r3
 8014fa6:	6591      	str	r1, [r2, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014fa8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8014faa:	4013      	ands	r3, r2
 8014fac:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8014fae:	9b03      	ldr	r3, [sp, #12]
 8014fb0:	e7db      	b.n	8014f6a <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8014fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8014fb6:	684b      	ldr	r3, [r1, #4]
 8014fb8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8014fba:	4319      	orrs	r1, r3
 8014fbc:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8014fbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8014fc4:	9b04      	ldr	r3, [sp, #16]
 8014fc6:	e7d0      	b.n	8014f6a <stm32_clock_control_on+0x28>
  SET_BIT(RCC->APB2ENR, Periphs);
 8014fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8014fcc:	684b      	ldr	r3, [r1, #4]
 8014fce:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8014fd0:	4319      	orrs	r1, r3
 8014fd2:	6611      	str	r1, [r2, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014fd4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8014fda:	9b05      	ldr	r3, [sp, #20]
 8014fdc:	e7c5      	b.n	8014f6a <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8014fde:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8014fe2:	e7c3      	b.n	8014f6c <stm32_clock_control_on+0x2a>

08014fe4 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8014fe4:	680b      	ldr	r3, [r1, #0]
 8014fe6:	2b06      	cmp	r3, #6
 8014fe8:	d836      	bhi.n	8015058 <stm32_clock_control_off+0x74>
 8014fea:	e8df f003 	tbb	[pc, r3]
 8014fee:	0d04      	.short	0x0d04
 8014ff0:	35252d1d 	.word	0x35252d1d
 8014ff4:	15          	.byte	0x15
 8014ff5:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8014ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014ffa:	6849      	ldr	r1, [r1, #4]
 8014ffc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014ffe:	ea23 0301 	bic.w	r3, r3, r1
 8015002:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 8015004:	2000      	movs	r0, #0
}
 8015006:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8015008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801500c:	6849      	ldr	r1, [r1, #4]
 801500e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8015010:	ea23 0301 	bic.w	r3, r3, r1
 8015014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015016:	e7f5      	b.n	8015004 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8015018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801501c:	6849      	ldr	r1, [r1, #4]
 801501e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8015020:	ea23 0301 	bic.w	r3, r3, r1
 8015024:	6513      	str	r3, [r2, #80]	; 0x50
 8015026:	e7ed      	b.n	8015004 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8015028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801502c:	6849      	ldr	r1, [r1, #4]
 801502e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8015030:	ea23 0301 	bic.w	r3, r3, r1
 8015034:	6593      	str	r3, [r2, #88]	; 0x58
 8015036:	e7e5      	b.n	8015004 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8015038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801503c:	6849      	ldr	r1, [r1, #4]
 801503e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8015040:	ea23 0301 	bic.w	r3, r3, r1
 8015044:	65d3      	str	r3, [r2, #92]	; 0x5c
 8015046:	e7dd      	b.n	8015004 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8015048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801504c:	6849      	ldr	r1, [r1, #4]
 801504e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8015050:	ea23 0301 	bic.w	r3, r3, r1
 8015054:	6613      	str	r3, [r2, #96]	; 0x60
 8015056:	e7d5      	b.n	8015004 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8015058:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801505c:	4770      	bx	lr

0801505e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801505e:	6843      	ldr	r3, [r0, #4]
 8015060:	685b      	ldr	r3, [r3, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8015062:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8015064:	600b      	str	r3, [r1, #0]
}
 8015066:	2000      	movs	r0, #0
 8015068:	4770      	bx	lr

0801506a <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801506a:	6843      	ldr	r3, [r0, #4]
 801506c:	685b      	ldr	r3, [r3, #4]
}
 801506e:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8015070:	6199      	str	r1, [r3, #24]
}
 8015072:	4770      	bx	lr

08015074 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8015074:	6843      	ldr	r3, [r0, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
}
 8015078:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801507a:	6299      	str	r1, [r3, #40]	; 0x28
 801507c:	4770      	bx	lr

0801507e <gpio_stm32_config>:
{
 801507e:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8015080:	039a      	lsls	r2, r3, #14
{
 8015082:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8015084:	d51a      	bpl.n	80150bc <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8015086:	079c      	lsls	r4, r3, #30
 8015088:	d511      	bpl.n	80150ae <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801508a:	075a      	lsls	r2, r3, #29
 801508c:	d52f      	bpl.n	80150ee <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 801508e:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8015090:	06dc      	lsls	r4, r3, #27
 8015092:	d50e      	bpl.n	80150b2 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8015094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8015098:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 801509c:	6844      	ldr	r4, [r0, #4]
 801509e:	d11c      	bne.n	80150da <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80150a0:	035b      	lsls	r3, r3, #13
 80150a2:	d514      	bpl.n	80150ce <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80150a4:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80150a6:	2301      	movs	r3, #1
 80150a8:	408b      	lsls	r3, r1
 80150aa:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 80150ac:	e00f      	b.n	80150ce <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80150ae:	2210      	movs	r2, #16
 80150b0:	e7ee      	b.n	8015090 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80150b2:	069c      	lsls	r4, r3, #26
 80150b4:	d5f0      	bpl.n	8015098 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80150b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80150ba:	e7ed      	b.n	8015098 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80150bc:	03dc      	lsls	r4, r3, #15
 80150be:	d511      	bpl.n	80150e4 <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 80150c0:	06da      	lsls	r2, r3, #27
 80150c2:	d411      	bmi.n	80150e8 <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80150c4:	f013 0220 	ands.w	r2, r3, #32
 80150c8:	bf18      	it	ne
 80150ca:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 80150ce:	6840      	ldr	r0, [r0, #4]
 80150d0:	2300      	movs	r3, #0
 80150d2:	f7f7 fb03 	bl	800c6dc <gpio_stm32_configure_raw.isra.0>
	return 0;
 80150d6:	2000      	movs	r0, #0
}
 80150d8:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80150da:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80150dc:	2301      	movs	r3, #1
 80150de:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80150e0:	61a3      	str	r3, [r4, #24]
	return 0;
 80150e2:	e7f4      	b.n	80150ce <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80150e4:	2230      	movs	r2, #48	; 0x30
 80150e6:	e7f2      	b.n	80150ce <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80150e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150ec:	e7ef      	b.n	80150ce <gpio_stm32_config+0x50>
				return -ENOTSUP;
 80150ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80150f2:	e7f1      	b.n	80150d8 <gpio_stm32_config+0x5a>

080150f4 <gpio_stm32_configure>:
{
 80150f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150f6:	461f      	mov	r7, r3
 80150f8:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 80150fa:	6840      	ldr	r0, [r0, #4]
{
 80150fc:	460e      	mov	r6, r1
 80150fe:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8015100:	f7f7 faec 	bl	800c6dc <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8015104:	2f11      	cmp	r7, #17
 8015106:	d108      	bne.n	801511a <gpio_stm32_configure+0x26>
		if (gpio_out == STM32_ODR_1) {
 8015108:	2301      	movs	r3, #1
 801510a:	fa03 f606 	lsl.w	r6, r3, r6
 801510e:	6863      	ldr	r3, [r4, #4]
 8015110:	685b      	ldr	r3, [r3, #4]
 8015112:	052a      	lsls	r2, r5, #20
	WRITE_REG(gpio->BSRR, pins);
 8015114:	bf4c      	ite	mi
 8015116:	619e      	strmi	r6, [r3, #24]
 8015118:	629e      	strpl	r6, [r3, #40]	; 0x28
}
 801511a:	2000      	movs	r0, #0
 801511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801511e <spi_context_get_next_buf>:
{
 801511e:	b570      	push	{r4, r5, r6, lr}
 8015120:	4605      	mov	r5, r0
	while (*count) {
 8015122:	6808      	ldr	r0, [r1, #0]
 8015124:	b908      	cbnz	r0, 801512a <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8015126:	6010      	str	r0, [r2, #0]
	return NULL;
 8015128:	e007      	b.n	801513a <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 801512a:	682c      	ldr	r4, [r5, #0]
 801512c:	6866      	ldr	r6, [r4, #4]
 801512e:	429e      	cmp	r6, r3
 8015130:	d304      	bcc.n	801513c <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 8015132:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 8015134:	fbb6 f3f3 	udiv	r3, r6, r3
 8015138:	6013      	str	r3, [r2, #0]
}
 801513a:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 801513c:	3408      	adds	r4, #8
		--(*count);
 801513e:	3801      	subs	r0, #1
		++(*current);
 8015140:	602c      	str	r4, [r5, #0]
		--(*count);
 8015142:	6008      	str	r0, [r1, #0]
 8015144:	e7ed      	b.n	8015122 <spi_context_get_next_buf+0x4>

08015146 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
 8015146:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8015148:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
 801514a:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 801514c:	b1e3      	cbz	r3, 8015188 <_spi_context_cs_control.isra.0+0x42>
 801514e:	6898      	ldr	r0, [r3, #8]
 8015150:	b1d0      	cbz	r0, 8015188 <_spi_context_cs_control.isra.0+0x42>
 8015152:	6805      	ldr	r5, [r0, #0]
 8015154:	b1c5      	cbz	r5, 8015188 <_spi_context_cs_control.isra.0+0x42>
		if (on) {
 8015156:	b149      	cbz	r1, 801516c <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8015158:	2101      	movs	r1, #1
 801515a:	f7f7 fbf5 	bl	800c948 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	689b      	ldr	r3, [r3, #8]
 8015162:	6898      	ldr	r0, [r3, #8]
}
 8015164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8015168:	f7fc b8e4 	b.w	8011334 <z_impl_k_busy_wait>
			if (!force_off &&
 801516c:	b912      	cbnz	r2, 8015174 <_spi_context_cs_control.isra.0+0x2e>
 801516e:	889b      	ldrh	r3, [r3, #4]
 8015170:	04db      	lsls	r3, r3, #19
 8015172:	d409      	bmi.n	8015188 <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8015174:	6880      	ldr	r0, [r0, #8]
 8015176:	f7fc f8dd 	bl	8011334 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	2100      	movs	r1, #0
 801517e:	6898      	ldr	r0, [r3, #8]
}
 8015180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8015184:	f7f7 bbe0 	b.w	800c948 <gpio_pin_set_dt>
}
 8015188:	bd38      	pop	{r3, r4, r5, pc}

0801518a <spi_context_unlock_unconditionally>:
{
 801518a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 801518c:	2201      	movs	r2, #1
 801518e:	2100      	movs	r1, #0
{
 8015190:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8015192:	f7ff ffd8 	bl	8015146 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 8015196:	69a3      	ldr	r3, [r4, #24]
 8015198:	b933      	cbnz	r3, 80151a8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 801519a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 801519c:	f104 0010 	add.w	r0, r4, #16
}
 80151a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151a4:	f7f9 be52 	b.w	800ee4c <z_impl_k_sem_give>
 80151a8:	bd10      	pop	{r4, pc}

080151aa <spi_stm32_release>:
{
 80151aa:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80151ac:	6900      	ldr	r0, [r0, #16]
 80151ae:	f7ff ffec 	bl	801518a <spi_context_unlock_unconditionally>
}
 80151b2:	2000      	movs	r0, #0
 80151b4:	bd08      	pop	{r3, pc}

080151b6 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80151b6:	6903      	ldr	r3, [r0, #16]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 80151bc:	6843      	ldr	r3, [r0, #4]
 80151be:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80151c0:	6813      	ldr	r3, [r2, #0]
 80151c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80151c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80151ca:	d02d      	beq.n	8015228 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 80151cc:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 80151d0:	4243      	negs	r3, r0
 80151d2:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80151d4:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80151d6:	6853      	ldr	r3, [r2, #4]
 80151d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80151dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80151e0:	d024      	beq.n	801522c <uart_stm32_config_get+0x76>
 80151e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80151e6:	d023      	beq.n	8015230 <uart_stm32_config_get+0x7a>
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	bf14      	ite	ne
 80151ec:	2303      	movne	r3, #3
 80151ee:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80151f0:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80151f2:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80151f4:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80151f6:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 80151fa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80151fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015202:	d017      	beq.n	8015234 <uart_stm32_config_get+0x7e>
 8015204:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8015208:	d119      	bne.n	801523e <uart_stm32_config_get+0x88>
		if (p == LL_USART_PARITY_NONE) {
 801520a:	2b00      	cmp	r3, #0
			return UART_CFG_DATA_BITS_6;
 801520c:	bf0c      	ite	eq
 801520e:	2302      	moveq	r3, #2
 8015210:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8015212:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8015214:	6893      	ldr	r3, [r2, #8]
 8015216:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 801521a:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801521e:	4253      	negs	r3, r2
 8015220:	4153      	adcs	r3, r2
 8015222:	71cb      	strb	r3, [r1, #7]
}
 8015224:	2000      	movs	r0, #0
 8015226:	4770      	bx	lr
	switch (parity) {
 8015228:	2302      	movs	r3, #2
 801522a:	e7d3      	b.n	80151d4 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 801522c:	2300      	movs	r3, #0
 801522e:	e7df      	b.n	80151f0 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8015230:	2302      	movs	r3, #2
 8015232:	e7dd      	b.n	80151f0 <uart_stm32_config_get+0x3a>
		if (p == LL_USART_PARITY_NONE) {
 8015234:	2b00      	cmp	r3, #0
			return UART_CFG_DATA_BITS_9;
 8015236:	bf14      	ite	ne
 8015238:	2303      	movne	r3, #3
 801523a:	2304      	moveq	r3, #4
 801523c:	e7e9      	b.n	8015212 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 801523e:	2b00      	cmp	r3, #0
			return UART_CFG_DATA_BITS_8;
 8015240:	bf14      	ite	ne
 8015242:	2302      	movne	r3, #2
 8015244:	2303      	moveq	r3, #3
 8015246:	e7e4      	b.n	8015212 <uart_stm32_config_get+0x5c>

08015248 <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8015248:	6843      	ldr	r3, [r0, #4]
 801524a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1U : 0U);
 801524c:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1U : 0U);
 801524e:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8015250:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1U : 0U);
 8015252:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1U : 0U);
 8015254:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8015258:	bf48      	it	mi
 801525a:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1U : 0U);
 801525e:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1U : 0U);
 8015260:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8015262:	bf48      	it	mi
 8015264:	f040 0004 	orrmi.w	r0, r0, #4
 8015268:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 801526a:	bf42      	ittt	mi
 801526c:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8015270:	f040 0008 	orrmi.w	r0, r0, #8
 8015274:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8015276:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8015278:	bf44      	itt	mi
 801527a:	2208      	movmi	r2, #8
 801527c:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801527e:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8015280:	bf44      	itt	mi
 8015282:	2201      	movmi	r2, #1
 8015284:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8015286:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8015288:	bf44      	itt	mi
 801528a:	2202      	movmi	r2, #2
 801528c:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801528e:	2204      	movs	r2, #4
 8015290:	621a      	str	r2, [r3, #32]
}
 8015292:	4770      	bx	lr

08015294 <uart_stm32_poll_out>:
{
 8015294:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8015296:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8015298:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1U : 0U);
 801529a:	69d3      	ldr	r3, [r2, #28]
 801529c:	061b      	lsls	r3, r3, #24
 801529e:	d5fc      	bpl.n	801529a <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80152a0:	f04f 0210 	mov.w	r2, #16
 80152a4:	f3ef 8311 	mrs	r3, BASEPRI
 80152a8:	f382 8812 	msr	BASEPRI_MAX, r2
 80152ac:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80152b0:	6802      	ldr	r2, [r0, #0]
 80152b2:	69d4      	ldr	r4, [r2, #28]
 80152b4:	0624      	lsls	r4, r4, #24
 80152b6:	d404      	bmi.n	80152c2 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80152b8:	f383 8811 	msr	BASEPRI, r3
 80152bc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80152c0:	e7ea      	b.n	8015298 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80152c2:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 80152c4:	f383 8811 	msr	BASEPRI, r3
 80152c8:	f3bf 8f6f 	isb	sy
}
 80152cc:	bd10      	pop	{r4, pc}

080152ce <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80152ce:	6843      	ldr	r3, [r0, #4]
 80152d0:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1U : 0U);
 80152d2:	69da      	ldr	r2, [r3, #28]
 80152d4:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80152d6:	bf44      	itt	mi
 80152d8:	2208      	movmi	r2, #8
 80152da:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1U : 0U);
 80152dc:	69da      	ldr	r2, [r3, #28]
 80152de:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80152e0:	bf43      	ittte	mi
 80152e2:	6a5b      	ldrmi	r3, [r3, #36]	; 0x24
 80152e4:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80152e6:	2000      	movmi	r0, #0
		return -1;
 80152e8:	f04f 30ff 	movpl.w	r0, #4294967295
}
 80152ec:	4770      	bx	lr

080152ee <syscmd_status_not>:
}
 80152ee:	4770      	bx	lr

080152f0 <shci_notify_asynch_evt>:
	shci_user_evt_proc();
 80152f0:	f7ed bfa4 	b.w	800323c <shci_user_evt_proc>

080152f4 <pinctrl_lookup_state>:
#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
	*state = &config->states[0];
 80152f4:	6803      	ldr	r3, [r0, #0]
 80152f6:	6013      	str	r3, [r2, #0]
{
 80152f8:	b570      	push	{r4, r5, r6, lr}
	while (*state <= &config->states[config->state_cnt - 1U]) {
 80152fa:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
 80152fe:	7904      	ldrb	r4, [r0, #4]
 8015300:	6813      	ldr	r3, [r2, #0]
 8015302:	19a5      	adds	r5, r4, r6
 8015304:	6804      	ldr	r4, [r0, #0]
 8015306:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801530a:	42a3      	cmp	r3, r4
 801530c:	d902      	bls.n	8015314 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 801530e:	f06f 0001 	mvn.w	r0, #1
}
 8015312:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 8015314:	795c      	ldrb	r4, [r3, #5]
 8015316:	428c      	cmp	r4, r1
 8015318:	d002      	beq.n	8015320 <pinctrl_lookup_state+0x2c>
		(*state)++;
 801531a:	3308      	adds	r3, #8
 801531c:	6013      	str	r3, [r2, #0]
 801531e:	e7ee      	b.n	80152fe <pinctrl_lookup_state+0xa>
			return 0;
 8015320:	2000      	movs	r0, #0
 8015322:	e7f6      	b.n	8015312 <pinctrl_lookup_state+0x1e>

08015324 <z_device_state_init>:
}
 8015324:	4770      	bx	lr

08015326 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8015326:	b138      	cbz	r0, 8015338 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8015328:	68c3      	ldr	r3, [r0, #12]
 801532a:	8818      	ldrh	r0, [r3, #0]
 801532c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8015330:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8015334:	4258      	negs	r0, r3
 8015336:	4158      	adcs	r0, r3
}
 8015338:	4770      	bx	lr

0801533a <arch_system_halt>:
	__asm__ volatile(
 801533a:	f04f 0210 	mov.w	r2, #16
 801533e:	f3ef 8311 	mrs	r3, BASEPRI
 8015342:	f382 8812 	msr	BASEPRI_MAX, r2
 8015346:	f3bf 8f6f 	isb	sy
	for (;;) {
 801534a:	e7fe      	b.n	801534a <arch_system_halt+0x10>

0801534c <z_early_memset>:
	(void) memset(dst, c, n);
 801534c:	f7fd bda9 	b.w	8012ea2 <memset>

08015350 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8015350:	f7fd bd9c 	b.w	8012e8c <memcpy>

08015354 <k_heap_init>:
{
 8015354:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 8015356:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 801535a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 801535e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8015360:	f7ec babc 	b.w	80018dc <sys_heap_init>

08015364 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015364:	f3ef 8005 	mrs	r0, IPSR
}
 8015368:	3800      	subs	r0, #0
 801536a:	bf18      	it	ne
 801536c:	2001      	movne	r0, #1
 801536e:	4770      	bx	lr

08015370 <z_impl_k_thread_name_set>:
}
 8015370:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8015374:	4770      	bx	lr

08015376 <k_thread_name_get>:
}
 8015376:	2000      	movs	r0, #0
 8015378:	4770      	bx	lr

0801537a <z_impl_k_thread_start>:
	z_sched_start(thread);
 801537a:	f7fa bf03 	b.w	8010184 <z_sched_start>

0801537e <z_queue_node_peek>:
{
 801537e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 8015380:	4604      	mov	r4, r0
 8015382:	b130      	cbz	r0, 8015392 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8015384:	6802      	ldr	r2, [r0, #0]
 8015386:	0793      	lsls	r3, r2, #30
 8015388:	d003      	beq.n	8015392 <z_queue_node_peek+0x14>
		ret = anode->data;
 801538a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 801538c:	b109      	cbz	r1, 8015392 <z_queue_node_peek+0x14>
			k_free(anode);
 801538e:	f000 f9aa 	bl	80156e6 <k_free>
}
 8015392:	4620      	mov	r0, r4
 8015394:	bd10      	pop	{r4, pc}

08015396 <z_impl_k_queue_init>:
	list->head = NULL;
 8015396:	2300      	movs	r3, #0
	list->tail = NULL;
 8015398:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
 801539c:	6083      	str	r3, [r0, #8]
 801539e:	f100 030c 	add.w	r3, r0, #12
 80153a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
 80153a6:	f100 0314 	add.w	r3, r0, #20
 80153aa:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
 80153ae:	4770      	bx	lr

080153b0 <k_queue_append>:
{
 80153b0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 80153b2:	2301      	movs	r3, #1
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	2300      	movs	r3, #0
{
 80153b8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 80153ba:	4619      	mov	r1, r3
 80153bc:	f7f9 fbe2 	bl	800eb84 <queue_insert>
}
 80153c0:	b003      	add	sp, #12
 80153c2:	f85d fb04 	ldr.w	pc, [sp], #4

080153c6 <k_queue_prepend>:
{
 80153c6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
 80153c8:	2300      	movs	r3, #0
{
 80153ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
 80153cc:	9300      	str	r3, [sp, #0]
 80153ce:	4619      	mov	r1, r3
 80153d0:	f7f9 fbd8 	bl	800eb84 <queue_insert>
}
 80153d4:	b003      	add	sp, #12
 80153d6:	f85d fb04 	ldr.w	pc, [sp], #4

080153da <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 80153da:	b15a      	cbz	r2, 80153f4 <z_impl_k_sem_init+0x1a>
 80153dc:	428a      	cmp	r2, r1
 80153de:	d309      	bcc.n	80153f4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 80153e0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 80153e4:	e9c0 1202 	strd	r1, r2, [r0, #8]
 80153e8:	e9c0 0000 	strd	r0, r0, [r0]
 80153ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 80153f0:	2000      	movs	r0, #0
 80153f2:	4770      	bx	lr
		return -EINVAL;
 80153f4:	f06f 0015 	mvn.w	r0, #21
}
 80153f8:	4770      	bx	lr

080153fa <notify_queue_locked>:
	if (queue != NULL) {
 80153fa:	b120      	cbz	r0, 8015406 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 80153fc:	2200      	movs	r2, #0
 80153fe:	4611      	mov	r1, r2
 8015400:	3088      	adds	r0, #136	; 0x88
 8015402:	f7fb bc39 	b.w	8010c78 <z_sched_wake>
}
 8015406:	4770      	bx	lr

08015408 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
 8015408:	68c3      	ldr	r3, [r0, #12]
{
 801540a:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
 801540c:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
 8015410:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8015414:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
 8015416:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8015418:	d502      	bpl.n	8015420 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
 801541a:	3010      	adds	r0, #16
 801541c:	f7fb fdd0 	bl	8010fc0 <z_abort_timeout>
}
 8015420:	4620      	mov	r0, r4
 8015422:	bd10      	pop	{r4, pc}

08015424 <cancel_async_locked>:
{
 8015424:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8015426:	68c0      	ldr	r0, [r0, #12]
{
 8015428:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801542a:	0784      	lsls	r4, r0, #30
 801542c:	f3c0 0140 	ubfx	r1, r0, #1, #1
 8015430:	d416      	bmi.n	8015460 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
 8015432:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 8015436:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
 8015438:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
 801543a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 801543c:	d510      	bpl.n	8015460 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801543e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8015442:	b168      	cbz	r0, 8015460 <cancel_async_locked+0x3c>
 8015444:	4283      	cmp	r3, r0
 8015446:	d11d      	bne.n	8015484 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
 8015448:	6818      	ldr	r0, [r3, #0]
 801544a:	b999      	cbnz	r1, 8015474 <cancel_async_locked+0x50>
 801544c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
 8015450:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
 8015454:	428b      	cmp	r3, r1
 8015456:	d101      	bne.n	801545c <cancel_async_locked+0x38>
	list->tail = node;
 8015458:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
 801545c:	2200      	movs	r2, #0
 801545e:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
 8015460:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 8015462:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
 8015466:	bf1e      	ittt	ne
 8015468:	f042 0202 	orrne.w	r2, r2, #2
 801546c:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 801546e:	f002 000f 	andne.w	r0, r2, #15
}
 8015472:	bd10      	pop	{r4, pc}
 8015474:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015476:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 801547a:	4283      	cmp	r3, r0
	list->tail = node;
 801547c:	bf08      	it	eq
 801547e:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
 8015482:	e7eb      	b.n	801545c <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8015484:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015486:	6800      	ldr	r0, [r0, #0]
 8015488:	e7db      	b.n	8015442 <cancel_async_locked+0x1e>

0801548a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 801548a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 801548e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8015492:	4283      	cmp	r3, r0
		return b2 - b1;
 8015494:	bf14      	ite	ne
 8015496:	1ac0      	subne	r0, r0, r3
	return 0;
 8015498:	2000      	moveq	r0, #0
}
 801549a:	4770      	bx	lr

0801549c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801549c:	4603      	mov	r3, r0
 801549e:	b920      	cbnz	r0, 80154aa <z_reschedule_irqlock+0xe>
 80154a0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 80154a4:	b90a      	cbnz	r2, 80154aa <z_reschedule_irqlock+0xe>
 80154a6:	f7ee bbf5 	b.w	8003c94 <arch_swap>
	__asm__ volatile(
 80154aa:	f383 8811 	msr	BASEPRI, r3
 80154ae:	f3bf 8f6f 	isb	sy
}
 80154b2:	4770      	bx	lr

080154b4 <z_reschedule_unlocked>:
	__asm__ volatile(
 80154b4:	f04f 0310 	mov.w	r3, #16
 80154b8:	f3ef 8011 	mrs	r0, BASEPRI
 80154bc:	f383 8812 	msr	BASEPRI_MAX, r3
 80154c0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80154c4:	f7ff bfea 	b.w	801549c <z_reschedule_irqlock>

080154c8 <z_priq_dumb_best>:
{
 80154c8:	4603      	mov	r3, r0
	return list->head == list;
 80154ca:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80154cc:	4283      	cmp	r3, r0
 80154ce:	d003      	beq.n	80154d8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
 80154d0:	2800      	cmp	r0, #0
 80154d2:	bf38      	it	cc
 80154d4:	2000      	movcc	r0, #0
 80154d6:	4770      	bx	lr
	struct k_thread *thread = NULL;
 80154d8:	2000      	movs	r0, #0
}
 80154da:	4770      	bx	lr

080154dc <z_unpend_all>:
{
 80154dc:	b538      	push	{r3, r4, r5, lr}
 80154de:	4605      	mov	r5, r0
	int need_sched = 0;
 80154e0:	2000      	movs	r0, #0
	return list->head == list;
 80154e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80154e4:	42a5      	cmp	r5, r4
 80154e6:	d000      	beq.n	80154ea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80154e8:	b904      	cbnz	r4, 80154ec <z_unpend_all+0x10>
}
 80154ea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 80154ec:	4620      	mov	r0, r4
 80154ee:	f7fa fc5b 	bl	800fda8 <z_unpend_thread>
		z_ready_thread(thread);
 80154f2:	4620      	mov	r0, r4
 80154f4:	f7fa fdfe 	bl	80100f4 <z_ready_thread>
		need_sched = 1;
 80154f8:	2001      	movs	r0, #1
 80154fa:	e7f2      	b.n	80154e2 <z_unpend_all+0x6>

080154fc <sys_clock_tick_get_32>:
{
 80154fc:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 80154fe:	f7fb fec9 	bl	8011294 <sys_clock_tick_get>
}
 8015502:	bd08      	pop	{r3, pc}

08015504 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8015504:	f7fb bec6 	b.w	8011294 <sys_clock_tick_get>

08015508 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
 8015508:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801550a:	1c4b      	adds	r3, r1, #1
 801550c:	bf08      	it	eq
 801550e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 8015512:	4604      	mov	r4, r0
 8015514:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8015516:	d013      	beq.n	8015540 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8015518:	ea54 0105 	orrs.w	r1, r4, r5
 801551c:	d103      	bne.n	8015526 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 801551e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 8015522:	f7fb beb7 	b.w	8011294 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 8015526:	f06f 0101 	mvn.w	r1, #1
 801552a:	1a0a      	subs	r2, r1, r0
 801552c:	f04f 31ff 	mov.w	r1, #4294967295
 8015530:	eb61 0305 	sbc.w	r3, r1, r5
 8015534:	2a00      	cmp	r2, #0
 8015536:	f173 0100 	sbcs.w	r1, r3, #0
 801553a:	db02      	blt.n	8015542 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
 801553c:	4610      	mov	r0, r2
 801553e:	4619      	mov	r1, r3
}
 8015540:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
 8015542:	f7fb fea7 	bl	8011294 <sys_clock_tick_get>
 8015546:	2c01      	cmp	r4, #1
 8015548:	f175 0300 	sbcs.w	r3, r5, #0
 801554c:	bfbc      	itt	lt
 801554e:	2401      	movlt	r4, #1
 8015550:	2500      	movlt	r5, #0
 8015552:	1820      	adds	r0, r4, r0
 8015554:	eb45 0101 	adc.w	r1, r5, r1
 8015558:	e7f2      	b.n	8015540 <sys_clock_timeout_end_calc+0x38>

0801555a <k_timer_init>:
	timer->status = 0U;
 801555a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 801555c:	e9c0 1208 	strd	r1, r2, [r0, #32]
 8015560:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8015564:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8015568:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 801556c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 801556e:	6343      	str	r3, [r0, #52]	; 0x34
}
 8015570:	4770      	bx	lr

08015572 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8015572:	b510      	push	{r4, lr}
 8015574:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8015576:	f7fb fd23 	bl	8010fc0 <z_abort_timeout>

	if (inactive) {
 801557a:	b9b0      	cbnz	r0, 80155aa <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 801557c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801557e:	b10b      	cbz	r3, 8015584 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8015580:	4620      	mov	r0, r4
 8015582:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8015584:	f104 0018 	add.w	r0, r4, #24
 8015588:	f7fb f87c 	bl	8010684 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 801558c:	b168      	cbz	r0, 80155aa <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 801558e:	f7fa fdb1 	bl	80100f4 <z_ready_thread>
 8015592:	f04f 0310 	mov.w	r3, #16
 8015596:	f3ef 8011 	mrs	r0, BASEPRI
 801559a:	f383 8812 	msr	BASEPRI_MAX, r3
 801559e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 80155a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155a6:	f7ff bf79 	b.w	801549c <z_reschedule_irqlock>
 80155aa:	bd10      	pop	{r4, pc}

080155ac <add_event>:
{
 80155ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ae:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80155b0:	e9d0 1300 	ldrd	r1, r3, [r0]
 80155b4:	4288      	cmp	r0, r1
 80155b6:	4604      	mov	r4, r0
 80155b8:	d00d      	beq.n	80155d6 <add_event+0x2a>
	if ((pending == NULL) ||
 80155ba:	b163      	cbz	r3, 80155d6 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80155bc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80155be:	b100      	cbz	r0, 80155c2 <add_event+0x16>
 80155c0:	3860      	subs	r0, #96	; 0x60
 80155c2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80155c6:	4639      	mov	r1, r7
 80155c8:	f7ff ff5f 	bl	801548a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80155cc:	2800      	cmp	r0, #0
 80155ce:	dc02      	bgt.n	80155d6 <add_event+0x2a>
	return list->head == list;
 80155d0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80155d2:	42b4      	cmp	r4, r6
 80155d4:	d105      	bne.n	80155e2 <add_event+0x36>
	sys_dnode_t *const tail = list->tail;
 80155d6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 80155d8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 80155dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80155de:	6065      	str	r5, [r4, #4]
}
 80155e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e2:	2e00      	cmp	r6, #0
 80155e4:	bf38      	it	cc
 80155e6:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80155e8:	2e00      	cmp	r6, #0
 80155ea:	d0f4      	beq.n	80155d6 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 80155ec:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80155ee:	b101      	cbz	r1, 80155f2 <add_event+0x46>
 80155f0:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 80155f2:	4638      	mov	r0, r7
 80155f4:	f7ff ff49 	bl	801548a <z_sched_prio_cmp>
 80155f8:	2800      	cmp	r0, #0
 80155fa:	dd05      	ble.n	8015608 <add_event+0x5c>
	sys_dnode_t *const prev = successor->prev;
 80155fc:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 80155fe:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 8015602:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8015604:	6075      	str	r5, [r6, #4]
			return;
 8015606:	e7eb      	b.n	80155e0 <add_event+0x34>
	return (node == list->tail) ? NULL : node->next;
 8015608:	6863      	ldr	r3, [r4, #4]
 801560a:	42b3      	cmp	r3, r6
 801560c:	d0e3      	beq.n	80155d6 <add_event+0x2a>
 801560e:	6836      	ldr	r6, [r6, #0]
 8015610:	e7ea      	b.n	80155e8 <add_event+0x3c>

08015612 <signal_poll_event>:
{
 8015612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 8015616:	6884      	ldr	r4, [r0, #8]
{
 8015618:	4605      	mov	r5, r0
 801561a:	460e      	mov	r6, r1
	if (poller != NULL) {
 801561c:	b144      	cbz	r4, 8015630 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 801561e:	7863      	ldrb	r3, [r4, #1]
 8015620:	2b01      	cmp	r3, #1
 8015622:	d138      	bne.n	8015696 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
 8015624:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8015628:	f013 0302 	ands.w	r3, r3, #2
 801562c:	d10a      	bne.n	8015644 <signal_poll_event+0x32>
		poller->is_polling = false;
 801562e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 8015630:	68eb      	ldr	r3, [r5, #12]
 8015632:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8015636:	430e      	orrs	r6, r1
	event->poller = NULL;
 8015638:	2000      	movs	r0, #0
	event->state |= state;
 801563a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 801563e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 8015640:	60eb      	str	r3, [r5, #12]
	return retcode;
 8015642:	e00d      	b.n	8015660 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
 8015644:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8015648:	f04f 31ff 	mov.w	r1, #4294967295
 801564c:	f06f 0001 	mvn.w	r0, #1
 8015650:	428b      	cmp	r3, r1
 8015652:	bf08      	it	eq
 8015654:	4282      	cmpeq	r2, r0
 8015656:	d105      	bne.n	8015664 <signal_poll_event+0x52>
		poller->is_polling = false;
 8015658:	2300      	movs	r3, #0
 801565a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 801565c:	f06f 000a 	mvn.w	r0, #10
}
 8015660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8015664:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8015668:	4640      	mov	r0, r8
 801566a:	f7fa fb9d 	bl	800fda8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801566e:	2e08      	cmp	r6, #8
 8015670:	bf0c      	ite	eq
 8015672:	f06f 0303 	mvneq.w	r3, #3
 8015676:	2300      	movne	r3, #0
 8015678:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 801567a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 801567e:	06db      	lsls	r3, r3, #27
 8015680:	d102      	bne.n	8015688 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
 8015682:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8015686:	b10f      	cbz	r7, 801568c <signal_poll_event+0x7a>
		poller->is_polling = false;
 8015688:	2300      	movs	r3, #0
 801568a:	e7d0      	b.n	801562e <signal_poll_event+0x1c>
	z_ready_thread(thread);
 801568c:	4640      	mov	r0, r8
 801568e:	f7fa fd31 	bl	80100f4 <z_ready_thread>
		poller->is_polling = false;
 8015692:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 8015694:	e7cc      	b.n	8015630 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8015696:	2b02      	cmp	r3, #2
 8015698:	d1f6      	bne.n	8015688 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 801569a:	7823      	ldrb	r3, [r4, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d0c7      	beq.n	8015630 <signal_poll_event+0x1e>
 80156a0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80156a4:	2f00      	cmp	r7, #0
 80156a6:	d0f4      	beq.n	8015692 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 80156a8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 80156ac:	f1a4 0914 	sub.w	r9, r4, #20
 80156b0:	f104 0014 	add.w	r0, r4, #20
 80156b4:	f7fb fc84 	bl	8010fc0 <z_abort_timeout>
		twork->poll_result = 0;
 80156b8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 80156bc:	4649      	mov	r1, r9
 80156be:	4638      	mov	r0, r7
 80156c0:	f7f9 fec0 	bl	800f444 <k_work_submit_to_queue>
		poller->is_polling = false;
 80156c4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 80156c8:	e7b2      	b.n	8015630 <signal_poll_event+0x1e>

080156ca <z_handle_obj_poll_events>:
{
 80156ca:	4603      	mov	r3, r0
	return list->head == list;
 80156cc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 80156ce:	4283      	cmp	r3, r0
 80156d0:	d008      	beq.n	80156e4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 80156d2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80156d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80156d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80156da:	2300      	movs	r3, #0
	node->prev = NULL;
 80156dc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 80156e0:	f7ff bf97 	b.w	8015612 <signal_poll_event>
}
 80156e4:	4770      	bx	lr

080156e6 <k_free>:
	if (ptr != NULL) {
 80156e6:	b120      	cbz	r0, 80156f2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 80156e8:	1f01      	subs	r1, r0, #4
 80156ea:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80156ee:	f7f8 bf71 	b.w	800e5d4 <k_heap_free>
}
 80156f2:	4770      	bx	lr
